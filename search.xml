<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>KPI dashboard</title>
      <link href="/2020/01/02/demo/"/>
      <url>/2020/01/02/demo/</url>
      
        <content type="html"><![CDATA[<p>This is my kPI dashboard making by Excel. I learned it from Udemy <a href="https://www.udemy.com/course/excel-dashboards-reports/" target="_blank" rel="noopener">https://www.udemy.com/course/excel-dashboards-reports/</a></p><p><img src="db.gif" alt="png"></p>]]></content>
      
      
      <categories>
          
          <category> EXCEL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DashBoard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AB Test summary</title>
      <link href="/2019/12/22/ab-test-summary/"/>
      <url>/2019/12/22/ab-test-summary/</url>
      
        <content type="html"><![CDATA[<h1 id="Main-script-to-perform-an-A-B-experiment-using-simulated-data"><a href="#Main-script-to-perform-an-A-B-experiment-using-simulated-data" class="headerlink" title="Main script to perform an A/B experiment using simulated data"></a>Main script to perform an A/B experiment using simulated data</h1><p>Modules: N/A <br>Author: Cornelia Ilin <br>Email: <a href="mailto:cilin@wisc.edu" target="_blank" rel="noopener">cilin@wisc.edu</a> <br>Date created: Oct 13, 2019 <br></p><p>Citations (online sources):</p><ul><li>[1] info on Bernoulli and Binomial Random Variables, as well as Sampling Distribution of Sample Proportions <br><a href="https://www.khanacademy.org/math/ap-statistics/sampling-distribution-ap/sampling-distribution-proportion/v/sampling-distribution-of-sample-proportion-part-1" target="_blank" rel="noopener">https://www.khanacademy.org/math/ap-statistics/sampling-distribution-ap/sampling-distribution-proportion/v/sampling-distribution-of-sample-proportion-part-1</a></li><li>[2] info on hypothesis test for sample proportions <br><a href="https://www.khanacademy.org/math/ap-statistics/two-sample-inference/two-sample-z-test-proportions/v/hypothesis-test-for-difference-in-proportions-example" target="_blank" rel="noopener">https://www.khanacademy.org/math/ap-statistics/two-sample-inference/two-sample-z-test-proportions/v/hypothesis-test-for-difference-in-proportions-example</a></li><li>[3] Intro to power in significance tests <br><a href="https://www.khanacademy.org/math/ap-statistics/tests-significance-ap/error-probabilities-power/v/introduction-to-power-in-significance-tests" target="_blank" rel="noopener">https://www.khanacademy.org/math/ap-statistics/tests-significance-ap/error-probabilities-power/v/introduction-to-power-in-significance-tests</a></li><li>[4] The math behind A/B testing with example code <br><a href="https://towardsdatascience.com/the-math-behind-a-b-testing-with-example-code-part-1-of-2-7be752e1d06f" target="_blank" rel="noopener">https://towardsdatascience.com/the-math-behind-a-b-testing-with-example-code-part-1-of-2-7be752e1d06f</a></li><li>[5] Udacity/Google course on A/B testing <br><a href="https://classroom.udacity.com/courses/ud257/lessons/4028708543/concepts/39546791500923" target="_blank" rel="noopener">https://classroom.udacity.com/courses/ud257/lessons/4028708543/concepts/39546791500923</a></li></ul><p>Citations (persons): n/a</p><h3 id="Step-1-Define-functions"><a href="#Step-1-Define-functions" class="headerlink" title="Step 1: Define functions"></a>Step 1: Define functions</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">z_val</span><span class="token punctuation">(</span>sig_level<span class="token punctuation">,</span> power <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" A function that returns the z-value for given significance or power level    param sig_level: indicates the significance level, i.e. the probability to commit a type I error    return: z_onetail, z_twotail_minus, z_twotail_plus, z_power    """</span>    <span class="token comment" spellcheck="true"># draw normal distribution with mean = 0 and se = 1 (standardized random variable)</span>    z_dist <span class="token operator">=</span> scs<span class="token punctuation">.</span>norm<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># define alpha</span>    alpha <span class="token operator">=</span> sig_level    <span class="token comment" spellcheck="true"># find the value of z for which the cdf = 1 - alpha</span>    z_onetail <span class="token operator">=</span> z_dist<span class="token punctuation">.</span>ppf<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>alpha<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># find the value of z for which the cdf = alpha/2, and the cdf = 1-alpha/2</span>    z_twotail_left <span class="token operator">=</span> z_dist<span class="token punctuation">.</span>ppf<span class="token punctuation">(</span>alpha<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>    z_twotail_right <span class="token operator">=</span> z_dist<span class="token punctuation">.</span>ppf<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> alpha<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># find the value of z for which the cdf = power</span>    <span class="token keyword">if</span> power<span class="token punctuation">:</span>        power_val <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"Introduce the desired level of power: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        z_power <span class="token operator">=</span> round<span class="token punctuation">(</span>z_dist<span class="token punctuation">.</span>ppf<span class="token punctuation">(</span>power_val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        z_power <span class="token operator">=</span> <span class="token string">"n/a"</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>z_onetail<span class="token punctuation">,</span> z_twotail_left<span class="token punctuation">,</span> z_twotail_right<span class="token punctuation">,</span> z_power<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">z_distribution</span><span class="token punctuation">(</span>sig_level<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" A function that plots the distribution of the standardized random variable z    param sig_level: indicates the significance level, i.e. the probability to commit a type I error    return: none    """</span>    <span class="token comment" spellcheck="true"># draw normal distribution with mean = 0 and se = 1 (standardized random variable)</span>    z_dist <span class="token operator">=</span> scs<span class="token punctuation">.</span>norm<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># define values for x and y axes</span>    x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>z_dist<span class="token punctuation">.</span>ppf<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">,</span> z_dist<span class="token punctuation">.</span>ppf<span class="token punctuation">(</span><span class="token number">0.99</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> z_dist<span class="token punctuation">.</span>pdf<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># define alpha</span>    alpha <span class="token operator">=</span> sig_level    <span class="token comment" spellcheck="true"># define arrow propoerties (used for annotations in figure)</span>    arrow_properties <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'facecolor'</span><span class="token punctuation">:</span> <span class="token string">'black'</span><span class="token punctuation">,</span>        <span class="token string">'shrink'</span><span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span>        <span class="token string">'headlength'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token string">'width'</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">## plot 1, one-tailed test</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"Distribution of z_statistic with one-tail test"</span><span class="token punctuation">)</span>    lines <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#plt.title('The distribution of the z-statistic')</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"pdf"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># find confidence levels, find the value of z for which the cdf = 1 - alpha</span>    z_onetail <span class="token operator">=</span> z_val<span class="token punctuation">(</span>alpha<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># add fill</span>    plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"green"</span><span class="token punctuation">,</span> where <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> z_onetail<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># add annotation</span>    annotation <span class="token operator">=</span> plt<span class="token punctuation">.</span>annotate<span class="token punctuation">(</span><span class="token string">'\u03B1 = 0.05'</span><span class="token punctuation">,</span>                 xy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1.98</span><span class="token punctuation">,</span> <span class="token number">0.12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 xytext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1.98</span><span class="token punctuation">,</span> <span class="token number">0.20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 arrowprops <span class="token operator">=</span> arrow_properties<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">## plot 2, two-tailed test</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"Distribution of z_statistic with two-tail test"</span><span class="token punctuation">)</span>    lines <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"pdf"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"z value"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># find confidence levels, find the value of z for which the cdf = alpha/2, and the cdf = 1-alpha/2</span>    z_twotail_left <span class="token operator">=</span> z_val<span class="token punctuation">(</span>alpha<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    z_twotail_right <span class="token operator">=</span> z_val<span class="token punctuation">(</span>alpha<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># add fill</span>    plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"green"</span><span class="token punctuation">,</span> where <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> z_twotail_left<span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"green"</span><span class="token punctuation">,</span> where <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> z_twotail_right<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># add annotation</span>    annotation <span class="token operator">=</span> plt<span class="token punctuation">.</span>annotate<span class="token punctuation">(</span><span class="token string">'\u03B1 = 0.025'</span><span class="token punctuation">,</span>                 xy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">0.12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 xytext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">0.20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 arrowprops <span class="token operator">=</span> arrow_properties<span class="token punctuation">)</span>    annotation <span class="token operator">=</span> plt<span class="token punctuation">.</span>annotate<span class="token punctuation">(</span><span class="token string">'\u03B1 = 0.025'</span><span class="token punctuation">,</span>                 xy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">0.12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 xytext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">0.20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 arrowprops <span class="token operator">=</span> arrow_properties<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># adds more space between subplots</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"z value for one-tail test = "</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>z_onetail<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"z value for one-tail test = +-"</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>z_twotail_right<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">d_distribution</span><span class="token punctuation">(</span>alpha <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> beta <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> power <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> onetail <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" A function that plots the d_distribution    param alfa: colors the alpha region(s) when True, i.e. P(reject H0 | H0 is true)     param beta: computes and colors the beta region when True, i.e. P(accept H0 | H0 is false)    param power: computes and color the power region when True, i.e. P(reject H0 | H0 is false)    param onetail: sets test to one-tail when True    return: none    Note that under H0: d = 0, under Ha: d = d_hat     """</span>    <span class="token comment" spellcheck="true"># define values for the x axis</span>    <span class="token comment" spellcheck="true">#x = np.linspace(-0.08, 0.08, 100)</span>    x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">12</span> <span class="token operator">*</span> se_pool_hat<span class="token punctuation">,</span> <span class="token number">12</span> <span class="token operator">*</span> se_pool_hat<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># generate distribution under H0; d ~ N(0, SE_pool)</span>    d_dist_0 <span class="token operator">=</span> scs<span class="token punctuation">.</span>norm<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> se_pool_hat<span class="token punctuation">)</span><span class="token punctuation">.</span>pdf<span class="token punctuation">(</span>x<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># generate distribution under Ha: d ~ N(d_hat, SE_pool)</span>    d_dist_a <span class="token operator">=</span> scs<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>d_hat<span class="token punctuation">,</span> se_pool_hat<span class="token punctuation">)</span><span class="token punctuation">.</span>pdf<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># plot d_dist_0, d_dist_a</span>    plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    lines <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> d_dist_0<span class="token punctuation">,</span> label <span class="token operator">=</span> <span class="token string">"d_dist under H0"</span><span class="token punctuation">)</span>    lines <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> d_dist_a<span class="token punctuation">,</span> label <span class="token operator">=</span> <span class="token string">"d_dist under Ha"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># add title, axis labels, and legend</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Distribution of d under H0 and Ha"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'d value'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'pdf'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># draw confidence intervals under H0</span>    <span class="token comment" spellcheck="true"># remeber ci = d +- z*se_pool, under H0: d = 0</span>    <span class="token comment" spellcheck="true"># for alpha = 0.05, z_onetail = 1.65, z_twotail_left = -1.96, z_twotail_right = 1.96 (see output z_dist() function)</span>    <span class="token keyword">if</span> onetail<span class="token punctuation">:</span>        ci_right <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token number">1.65</span> <span class="token operator">*</span> se_pool_hat        plt<span class="token punctuation">.</span>axvline<span class="token punctuation">(</span>x <span class="token operator">=</span> ci_right<span class="token punctuation">,</span> linestyle <span class="token operator">=</span> <span class="token string">"--"</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"grey"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        ci_right <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token number">1.96</span> <span class="token operator">*</span> se_pool_hat        ci_left <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> <span class="token number">1.96</span> <span class="token operator">*</span> se_pool_hat        plt<span class="token punctuation">.</span>axvline<span class="token punctuation">(</span>x <span class="token operator">=</span> ci_left<span class="token punctuation">,</span> linestyle <span class="token operator">=</span> <span class="token string">"--"</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"grey"</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>axvline<span class="token punctuation">(</span>x <span class="token operator">=</span> ci_right<span class="token punctuation">,</span> linestyle <span class="token operator">=</span> <span class="token string">"--"</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"grey"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># compute alpha</span>    <span class="token comment" spellcheck="true"># alpha = the area under H0, to the left of ci_left and to the right of ci_right</span>    <span class="token keyword">if</span> alpha<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Green shaded area: H0 is false"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> onetail<span class="token punctuation">:</span>            plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> d_dist_0<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"olivedrab"</span><span class="token punctuation">,</span> where <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">></span> ci_right<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> d_dist_0<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"olivedrab"</span><span class="token punctuation">,</span> where <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> ci_left<span class="token punctuation">)</span><span class="token punctuation">)</span>            plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> d_dist_0<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"olivedrab"</span><span class="token punctuation">,</span> where <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">></span> ci_right<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># compute beta</span>    <span class="token comment" spellcheck="true"># beta = the area under Ha, to the left of ci_right</span>    <span class="token keyword">if</span> beta<span class="token punctuation">:</span>        beta_val <span class="token operator">=</span> scs<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>d_hat<span class="token punctuation">,</span> se_pool_hat<span class="token punctuation">)</span><span class="token punctuation">.</span>cdf<span class="token punctuation">(</span>ci_right<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#finds the P(d &lt; ci_right) under Ha</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Beta ="</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>beta_val<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Yelolw shaded area: Type II error area: P(accept H0|H0 is false)"</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> d_dist_a<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"goldenrod"</span><span class="token punctuation">,</span> where <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> ci_right<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># compute power</span>    <span class="token comment" spellcheck="true"># power = 1 - beta = the area under Ha, to the right of ci_right</span>    <span class="token keyword">if</span> power<span class="token punctuation">:</span>        power <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> scs<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>d_hat<span class="token punctuation">,</span> se_pool_hat<span class="token punctuation">)</span><span class="token punctuation">.</span>cdf<span class="token punctuation">(</span>ci_right<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#finds the P(d >= ci_right) = 1 - P (d &lt; ci_right) under Ha</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Power ="</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>power<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Blue shaded area: Power = 1- Beta, P(reject H0|H0 is false)"</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> d_dist_a<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"steelblue"</span><span class="token punctuation">,</span> where <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">></span> ci_right<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Step-2-Import-required-packages"><a href="#Step-2-Import-required-packages" class="headerlink" title="Step 2: Import required packages"></a>Step 2: Import required packages</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> scipy<span class="token punctuation">.</span>stats <span class="token keyword">as</span> scs<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> random<span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Step-3-Define-the-A-B-experiment"><a href="#Step-3-Define-the-A-B-experiment" class="headerlink" title="Step 3: Define the A/B experiment"></a>Step 3: Define the A/B experiment</h3><p>Assume that <strong>facebook.com/business</strong> runs an A/B test to see if changing the color of the “create an ad” button, increases the click-thorugh probability.</p><p>Let’s assume that the structure of the facebook.com/business website is as follows: [1] a homepage that includes the “create an ad” button; if create an ad is chosen, then [2] a webpage to “create new account”, and if new account is created, then [3] a webpage to buy adds.</p><p>To run the A/B experiement, the engineers at <strong>facebook.com/business</strong> create two versions of the homepage. One where the “create an ad” button is orange (existing version), and one where it is blue (experimental version). The former is served to the control users, and the later to the users in the treatment group.</p><p>Unfortunately, we don’t have this data available, so we will first need to generate it.</p><p>We assume that the total number of users that participate in the A/B experiement is 2000, equally devided between the control and treated groups. This means that the probability to be assigned to either the treatment or control group is 0.5.</p><h3 id="Step-4-Generate-toy-data"><a href="#Step-4-Generate-toy-data" class="headerlink" title="Step 4: Generate toy data"></a>Step 4: Generate toy data</h3><p>Notations:</p><ul><li>group A = control patients</li><li>group B = treated patients </li><li>p_c = click-though probability for the control group</li><li>p_t = click-thorugh probability for the treated group</li></ul><h4 id="Step-4-1-Set-seed"><a href="#Step-4-1-Set-seed" class="headerlink" title="Step 4.1: Set seed"></a>Step 4.1: Set seed</h4><pre class="line-numbers language-python"><code class="language-python">random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Step-4-2-Create-user-group-column"><a href="#Step-4-2-Create-user-group-column" class="headerlink" title="Step 4.2: Create user_group column"></a>Step 4.2: Create user_group column</h4><p>(with values A and B)</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># draw from Bernoulli distribution</span>user_group <span class="token operator">=</span> scs<span class="token punctuation">.</span>bernoulli<span class="token punctuation">.</span>rvs<span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token number">0.4</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># rename values, such that 0 = A and 1 = B; keep track of the length of group A and B</span>len_A <span class="token operator">=</span> <span class="token number">0</span>len_B <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> val <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>user_group<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">if</span> val <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        user_group<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"A"</span>        len_A <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        user_group<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"B"</span>        len_B <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Step-4-3-Create-user-click-column"><a href="#Step-4-3-Create-user-click-column" class="headerlink" title="Step 4.3: Create user_click column"></a>Step 4.3: Create user_click column</h4><p>(= 1 if a unique user clicked “create an ad” at least once)</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># first define the desired p_c and p_t, assuming p_t > p_c</span>p_c <span class="token operator">=</span> <span class="token number">0.10</span>p_t <span class="token operator">=</span> <span class="token number">0.12</span><span class="token comment" spellcheck="true"># draw user_click column from Bernoulli distribution for both group A and B</span>user_click_A <span class="token operator">=</span> scs<span class="token punctuation">.</span>bernoulli<span class="token punctuation">.</span>rvs<span class="token punctuation">(</span>p_c<span class="token punctuation">,</span> size <span class="token operator">=</span> len_A<span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>user_click_B <span class="token operator">=</span> scs<span class="token punctuation">.</span>bernoulli<span class="token punctuation">.</span>rvs<span class="token punctuation">(</span>p_t<span class="token punctuation">,</span> size <span class="token operator">=</span> len_B<span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Step-4-4-Combine-user-group-and-user-click-columns"><a href="#Step-4-4-Combine-user-group-and-user-click-columns" class="headerlink" title="Step 4.4 Combine user_group and user_click columns"></a>Step 4.4 Combine user_group and user_click columns</h4><p>create a dataframe</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># merge the two columns</span>user_click <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>index_A <span class="token operator">=</span> <span class="token number">0</span>index_B <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> val <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>user_group<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> val <span class="token operator">==</span> <span class="token string">"A"</span><span class="token punctuation">:</span>        user_click<span class="token punctuation">.</span>append<span class="token punctuation">(</span>user_click_A<span class="token punctuation">[</span>index_A<span class="token punctuation">]</span><span class="token punctuation">)</span>        index_A <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        user_click<span class="token punctuation">.</span>append<span class="token punctuation">(</span>user_click_B<span class="token punctuation">[</span>index_B<span class="token punctuation">]</span><span class="token punctuation">)</span>        index_B <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># create dataframe        </span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"user_group"</span><span class="token punctuation">:</span> user_group<span class="token punctuation">,</span> <span class="token string">"user_click"</span><span class="token punctuation">:</span> user_click<span class="token punctuation">}</span><span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># print the first five rows:</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_group</th>      <th>user_click</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>B</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>B</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>B</td>      <td>1</td>    </tr>    <tr>      <th>3</th>      <td>A</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>A</td>      <td>0</td>    </tr>  </tbody></table></div><h3 id="Step-5-Summary-statistics"><a href="#Step-5-Summary-statistics" class="headerlink" title="Step 5: Summary statistics"></a>Step 5: Summary statistics</h3><p>We assume our toy data is the real data of <strong>facebook.com/business</strong>‘ experiment</p><p>Notation:</p><ul><li>n_c = sample size control group</li><li>n_t = sample size treated group</li><li>x_c = number of users in the control group who click “create an ad”</li><li>x_t = number of users in the treated group who click “create an ad”</li><li>p_c_hat = estimated click-thorugh propbability of control group</li><li>p_t_hat = estimated click-thorugh probability of treated group</li></ul><h4 id="Step-5-1-Sample-sizes"><a href="#Step-5-1-Sample-sizes" class="headerlink" title="Step 5.1: Sample sizes"></a>Step 5.1: Sample sizes</h4><pre class="line-numbers language-python"><code class="language-python">n_c <span class="token operator">=</span> len_An_t <span class="token operator">=</span> len_B<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"n_c ="</span><span class="token punctuation">,</span> n_c<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"n_t ="</span><span class="token punctuation">,</span> n_t<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>n_c = 6038n_t = 3962</code></pre><h4 id="Step-5-2-Sum-of-user-click-by-group"><a href="#Step-5-2-Sum-of-user-click-by-group" class="headerlink" title="Step 5.2: Sum of user_click by group"></a>Step 5.2: Sum of user_click by group</h4><pre class="line-numbers language-python"><code class="language-python">x_c <span class="token operator">=</span> <span class="token number">0</span>x_t <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> ind <span class="token keyword">in</span> data<span class="token punctuation">.</span>index<span class="token punctuation">:</span>    <span class="token keyword">if</span> data<span class="token punctuation">[</span><span class="token string">"user_group"</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ind<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"A"</span> <span class="token operator">and</span> data<span class="token punctuation">[</span><span class="token string">"user_click"</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ind<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>         x_c <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">if</span> data<span class="token punctuation">[</span><span class="token string">"user_group"</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ind<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"B"</span> <span class="token operator">and</span> data<span class="token punctuation">[</span><span class="token string">"user_click"</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ind<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>         x_t <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x_c = "</span><span class="token punctuation">,</span> x_c<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x_t = "</span><span class="token punctuation">,</span> x_t<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>x_c =  605x_t =  471</code></pre><h4 id="Step-5-3-Click-thourgh-probability-by-group"><a href="#Step-5-3-Click-thourgh-probability-by-group" class="headerlink" title="Step 5.3: Click-thourgh probability by group"></a>Step 5.3: Click-thourgh probability by group</h4><p>Def: click-thorugh probability = unique users who click / unique total users <br>We can think of the click-through probability as being the sample proportion</p><pre class="line-numbers language-python"><code class="language-python">p_c_hat <span class="token operator">=</span> x_c<span class="token operator">/</span>n_cp_t_hat <span class="token operator">=</span> x_t<span class="token operator">/</span>n_t<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p_c_hat = "</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>p_c_hat<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p_t_hat = "</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>p_t_hat<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>p_c_hat =  0.1p_t_hat =  0.12</code></pre><h3 id="Step-6-Hypothesis-testing"><a href="#Step-6-Hypothesis-testing" class="headerlink" title="Step 6: Hypothesis testing"></a>Step 6: Hypothesis testing</h3><p>We want to see if chaging the color of the “create an ad” has any statistically significant effects on the click-through probability. <br>Remember that “create an ad” button is orange for the control gorup, and blue for the the treated group. <br></p><p>Our hypothesis is as follows: <br>H0: p_c = p_t, in other words p_c - p_t = 0 <br>Ha: p_t - p_c != 0 (try both one tail and two tail test)</p><p><strong>Let</strong>: <br>d = p_c - p_t <br>alpha = P(reject H0 | H0 is true) <br>beta = P(accept H0 | H0 is false) <br>power = 1 - beta = P(reject H0 | H0 is false)</p><p>To test the hypthesis we construct the z_statistic ~ N(0, 1)</p><h4 id="Step-6-1-Compute-the-z-statistic"><a href="#Step-6-1-Compute-the-z-statistic" class="headerlink" title="Step 6.1 Compute the z_statistic"></a>Step 6.1 Compute the z_statistic</h4><p>We assume the followings:</p><ul><li>H0 is true</li><li>random variables</li><li>iid</li></ul><p>Then, <br>z = (p_t_hat - p_c_hat) - 0/ SE(p_t_hat - p_c_hat) <br></p><p>Note:</p><ul><li>For a Bernoulli random variable: mean = p; variance = p(1-p); se = sqrt(p(1-p))</li><li>For Binomial random variable: mean = n <em> p; variance = n </em> p(1-p) = sqrt(n * (p(1-p))</li><li>Under the Central Limit Theorem, as the number of samples increases, the distribution of the sample proportion means (p_hat), will be ~ N(p, sqrt(p(1-p)/n))</li></ul><p>Thus,<br>se(p_t_hat - p_c_hat) = sqrt(p_t_hat(1-p_t_hat)/n_t) + sqrt(p_c_hat(1-p_c_hat)/n_c)</p><p>Note:</p><ul><li>cov(p_t_hat, p_c_hat) = 0 due to iid assumption.</li><li>because we assume that H0 is true (p_t = p_c), then we can compute SE_pool</li></ul><p>Thus, <br>se_pool = sqrt(p_pool_hat(1-p_pool_hat) * (1/n_t + 1/n_c) <br>where,<br>p_pool_hat = (x_c + x_t)/(n_c + n_t)</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># compute d = p_t_hat - p_c_hat</span>d_hat <span class="token operator">=</span> p_t_hat <span class="token operator">-</span> p_c_hat<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"d_hat ="</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>d_hat<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>d_hat = 0.02</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># compute p_pool_hat</span>p_pool_hat <span class="token operator">=</span> <span class="token punctuation">(</span>x_c <span class="token operator">+</span> x_t<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>n_c <span class="token operator">+</span> n_t<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p_pool_hat = "</span><span class="token punctuation">,</span> p_pool_hat<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>p_pool_hat =  0.1076</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># compute se_pool_hat</span>se_pool_hat <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>p_pool_hat <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>p_pool_hat<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span>n_c <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">/</span>n_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"se_pool_hat = "</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>se_pool_hat<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>se_pool_hat =  0.01</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># compute the z-statistic</span>z_statistic <span class="token operator">=</span> d_hat<span class="token operator">/</span>se_pool_hat<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"z_statistic ="</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>z_statistic<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Remeber that the z-statistic is ~ N(0, 1)"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>z_statistic = 2.95Remeber that the z-statistic is ~ N(0, 1)</code></pre><h4 id="Step-6-2-Find-p-val-Test-if-H0-is-true"><a href="#Step-6-2-Find-p-val-Test-if-H0-is-true" class="headerlink" title="Step 6.2: Find p_val. Test if H0 is true"></a>Step 6.2: Find p_val. Test if H0 is true</h4><p>Define p_val:</p><ul><li>if one-tailed test: p_val = P(Z &gt;= z) = 1 - P(Z &lt; z)</li><li>if two-tailed test: p_val = P(Z &lt;= -z or Z &gt;= z) = 1 - P(-z &lt; Z &lt; z) = 1- [P(Z &lt; z) - P (Z &lt; -z)]</li></ul><p>For a one-tailed test:</p><ul><li>if p_val &gt; alpha, accept H0 <br></li><li>if p_val &lt; alpha, reject H0 </li></ul><p>For a two-tailed test:</p><ul><li>if p_val &gt; alpha/2, accept H0 <br></li><li>if p_val &lt; alpha/2, reject H0 </li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># print message</span>accept <span class="token operator">=</span> <span class="token string">"Accept H0. p_val > alpha\n"</span>reject <span class="token operator">=</span> <span class="token string">"Reject H0. p_val &lt; alpha\n"</span><span class="token comment" spellcheck="true"># z_distribution</span>z_dist <span class="token operator">=</span> scs<span class="token punctuation">.</span>norm<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># alpha level</span>alpha <span class="token operator">=</span> <span class="token number">0.05</span><span class="token comment" spellcheck="true">## one-tailed test, find P(Z &lt; z_statistic) and then compute p_val</span>cdf_onetail <span class="token operator">=</span> z_dist<span class="token punctuation">.</span>cdf<span class="token punctuation">(</span>z_statistic<span class="token punctuation">)</span>p_val_onetail <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> cdf_onetail<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"one-tail test: p_val = "</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>p_val_onetail<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">if</span> p_val_onetail <span class="token operator">&lt;</span> alpha<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>reject<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>accept<span class="token punctuation">)</span><span class="token comment" spellcheck="true">## two_tailed test, find P (Z &lt; z) - P (Z &lt; -z), then compute p_val</span>cdf_twotail <span class="token operator">=</span> z_dist<span class="token punctuation">.</span>cdf<span class="token punctuation">(</span>z_statistic<span class="token punctuation">)</span> <span class="token operator">-</span> z_dist<span class="token punctuation">.</span>cdf<span class="token punctuation">(</span><span class="token operator">-</span>z_statistic<span class="token punctuation">)</span>p_val_twotail <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> cdf_twotail<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"two-tailed test: p_val = "</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>p_val_twotail<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">if</span> p_val_twotail <span class="token operator">&lt;</span> alpha<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>reject<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>accept<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>one-tail test: p_val =  0.0016Reject H0. p_val &lt; alphatwo-tailed test: p_val =  0.0032Reject H0. p_val &lt; alpha</code></pre><p>​    </p><h4 id="Step-6-3-Plot-the-distribution-of-d-under-H0-and-Ha"><a href="#Step-6-3-Plot-the-distribution-of-d-under-H0-and-Ha" class="headerlink" title="Step 6.3: Plot the distribution of d under H0 and Ha"></a>Step 6.3: Plot the distribution of d under H0 and Ha</h4><pre class="line-numbers language-python"><code class="language-python">d_distribution<span class="token punctuation">(</span>alpha <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Green shaded area: H0 is false</code></pre><p><img src="1_34_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">d_distribution<span class="token punctuation">(</span>beta <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Beta = 0.097Yelolw shaded area: Type II error area: P(accept H0|H0 is false)</code></pre><p><img src="1_35_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">d_distribution<span class="token punctuation">(</span>power <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Power = 0.903Blue shaded area: Power = 1- Beta, P(reject H0|H0 is false)</code></pre><p><img src="1_36_1.png" alt="png"></p><h3 id="Step-7-Find-appropiate-sample-size-for-A-B-test"><a href="#Step-7-Find-appropiate-sample-size-for-A-B-test" class="headerlink" title="Step 7: Find appropiate sample size for A/B test"></a>Step 7: Find appropiate sample size for A/B test</h3><p>Note: user introduces desired beta, power, alpha, one-tail or two-tail test parameters</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># define beta, power, and alpha</span>beta <span class="token operator">=</span> <span class="token number">0.2</span>power <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> betaalpha <span class="token operator">=</span> <span class="token number">0.05</span>one_tail <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># find the value of z that corresponds to the value of the power level (user input required)</span>z_power <span class="token operator">=</span> z_val<span class="token punctuation">(</span>alpha<span class="token punctuation">,</span> power <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The value of the z statistics for this level of power is"</span><span class="token punctuation">,</span> z_power<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># find the value of z that corresponds to the value of alpha</span><span class="token keyword">if</span> one_tail<span class="token punctuation">:</span>    z_alpha <span class="token operator">=</span> z_val<span class="token punctuation">(</span>alpha<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">else</span><span class="token punctuation">:</span>    z_alpha <span class="token operator">=</span> z_val<span class="token punctuation">(</span>alpha<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># find sample size</span>n <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> p_pool_hat <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span> p_pool_hat<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>z_power <span class="token operator">+</span> z_alpha<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span>p_t_hat <span class="token operator">-</span> p_c_hat<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The sample size needed for the parameters listed above ="</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Introduce the desired level of power: 0.8The value of the z statistics for this level of power is 0.842The sample size needed for the parameters listed above = 4320.61</code></pre>]]></content>
      
      
      <categories>
          
          <category> A_B Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> A_B Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Free Trail Screen</title>
      <link href="/2019/11/22/free-trial-screener/"/>
      <url>/2019/11/22/free-trial-screener/</url>
      
        <content type="html"><![CDATA[<h1 id="📘-Experiment-design"><a href="#📘-Experiment-design" class="headerlink" title="📘  Experiment design"></a>📘  Experiment design</h1><h2 id="📖-Experiment-Overview-Free-Trial-Screener"><a href="#📖-Experiment-Overview-Free-Trial-Screener" class="headerlink" title="📖 Experiment Overview: Free Trial Screener"></a>📖 Experiment Overview: Free Trial Screener</h2><p><font color="blue">At the time of this experiment, Udacity courses currently have two options on the home page: “start free trial”, and “access course materials”. If the student clicks “start free trial”, they will be asked to enter their credit card information, and then they will be enrolled in a free trial for the paid version of the course. After 14 days, they will automatically be charged unless they cancel first. If the student clicks “access course materials”, they will be able to view the videos and take the quizzes for free, but they will not receive coaching support or a verified certificate, and they will not submit their final project for feedback.</font></p><p>In the experiment, Udacity tested a change where if the student clicked “start free trial”, they were asked how much time they had available to devote to the course. If the student indicated 5 or more hours per week, they would be taken through the checkout process as usual. If they indicated fewer than 5 hours per week, a message would appear indicating that Udacity courses usually require a greater time commitment for successful completion, and suggesting that the student might like to access the course materials for free. At this point, the student would have the option to continue enrolling in the free trial, or access the course materials for free instead. The screenshot below shows what the experiment looks like.</p><p>The hypothesis was that this might set clearer expectations for students upfront, thus reducing the number of frustrated students who left the free trial because they didn’t have enough time—without significantly reducing the number of students to continue past the free trial and eventually complete the course. If this hypothesis held true, Udacity could improve the overall student experience and improve coaches’ capacity to support students who are likely to complete the course.</p><p>The unit of diversion is a cookie, although if the student enrolls in the free trial, they are tracked by user-id from that point forward. The same user-id cannot enroll in the free trial twice. For users that do not enroll, their user-id is not tracked in the experiment, even if they were signed in when they visited the course overview page.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> IPython<span class="token punctuation">.</span>display <span class="token keyword">import</span> ImageImage<span class="token punctuation">(</span><span class="token string">'download.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="1_3_0.png" alt="png"></p><h1 id="📖-Metric-Choice"><a href="#📖-Metric-Choice" class="headerlink" title="📖 Metric Choice"></a>📖 Metric Choice</h1><p><font color="blue">Which of the following metrics would you choose to measure for this experiment and why? For each metric you choose, indicate whether you would use it as an invariant metric or an evaluation metric. The practical significance boundary for each metric, that is, the difference that would have to be observed before that was a meaningful change for the business, is given in parentheses. All practical significance boundaries are given as absolute changes.</font></p><p>Any place “unique cookies” are mentioned, the uniqueness is determined by day. (That is, the same cookie visiting on different days would be counted twice.) User-ids are automatically unique since the site does not allow the same user-id to enroll twice.</p><ul><li>Number of cookies: That is, number of unique cookies to view the course overview page. (dmin=3000)</li><li>Number of user-ids: That is, number of users who enroll in the free trial. (dmin=50)</li><li>Number of clicks: That is, number of unique cookies to click the “Start free trial” button (which happens before the free trial screener is trigger). (dmin=240)</li><li>Click-through-probability: That is, number of unique cookies to click the “Start free trial” button divided by number of unique cookies to view the course overview page. (dmin=0.01)</li><li>Gross conversion: That is, number of user-ids to complete checkout and enroll in the free trial divided by number of unique cookies to click the “Start free trial” button. (dmin= 0.01)</li><li>Retention: That is, number of user-ids to remain enrolled past the 14-day boundary (and thus make at least one payment) divided by number of user-ids to complete checkout. (dmin=0.01)</li><li>Net conversion: That is, number of user-ids to remain enrolled past the 14-day boundary (and thus make at least one payment) divided by the number of unique cookies to click the “Start free trial” button. (dmin= 0.0075)</li></ul><h2 id="🔵-Invariant-metrics"><a href="#🔵-Invariant-metrics" class="headerlink" title="🔵 Invariant metrics"></a>🔵 Invariant metrics</h2><p><br>expected to be unchanged in the control and experimental groups:</p><ul><li><p>number of cookies <br>this metric cannot be affected by the experiment: users made a decision to visit the page before they were asked the question;</p></li><li><p>number of clicks <br>this metric cannot be affected by the experiment: users clicked the button before they were asked the question;</p></li><li><p>click-through probability <br>this metric cannot be affected by the experiment: it equals to the number of clicks divided by the number of cookies.</p><h2 id="🔵-Evaluation-metrics"><a href="#🔵-Evaluation-metrics" class="headerlink" title="🔵 Evaluation metrics"></a>🔵 Evaluation metrics</h2><p><br> expected to be different in the control and experimental groups:</p></li><li><p>gross conversion <br> this metric may decrease: users could make a decision to enroll in the free trial in the experimental group less than in the control group because they did not plan to learn 5+ hours per week;</p></li><li><p>retention <br>this metriccan may increase: enrolled users could less be disappointed in the learning process and make more payments in the experimental group than in the control group because they paid attention to studying 5+ hours per week;</p></li><li><p>net conversion<br>this metric may decrease: users could enroll in the free trial less in the experimental group than in the control group, thus could decrease the number of people who paid.</p></li></ul><h3 id="The-goals-of-the-experiment-in-the-practical-meaning"><a href="#The-goals-of-the-experiment-in-the-practical-meaning" class="headerlink" title="The goals of the experiment in the practical meaning:"></a>The goals of the experiment in the practical meaning:</h3><ul><li>the number of payments should not be decreased;</li><li>the number of students who were disappointed and had not paid because they could not study enough time should be reduced.</li></ul><h3 id="The-goals-of-the-experiment-in-terms-of-our-metrics"><a href="#The-goals-of-the-experiment-in-terms-of-our-metrics" class="headerlink" title="The goals of the experiment in terms of our metrics:"></a>The goals of the experiment in terms of our metrics:</h3><ul><li>the gross conversion should significantly decrease;</li><li>the retention should significantly increase;</li><li>the net conversion should not decrease.</li></ul><p><br>An important remark: the number of user-ids is neither a good invariant metric nor a good evaluation metric.<br>From one side, the new pop-up message is likely to decrease the total number of user-ids who enrolled in the free trial, so it is not invariant; from the other side it is not normalized, the number of visitors may be different between the experiment and control groups, so it is not good for evaluation.</p><h2 id="📖-Measuring-Variability"><a href="#📖-Measuring-Variability" class="headerlink" title="📖   Measuring Variability"></a>📖   Measuring Variability</h2><p><font color="blue">This list contains rough estimates of the baseline values for these metrics (again, these numbers have been changed from Udacity’s true numbers).</font></p><pre class="line-numbers language-python"><code class="language-python">baseline <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"Final Project Baseline Values - Sheet1.csv"</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>header <span class="token operator">=</span> None<span class="token punctuation">,</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'metric'</span><span class="token punctuation">,</span><span class="token string">'baseline_value'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>baseline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>metric</th>      <th>baseline_value</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Unique cookies to view course overview page pe...</td>      <td>40000.000000</td>    </tr>    <tr>      <th>1</th>      <td>Unique cookies to click "Start free trial" per...</td>      <td>3200.000000</td>    </tr>    <tr>      <th>2</th>      <td>Enrollments per day:</td>      <td>660.000000</td>    </tr>    <tr>      <th>3</th>      <td>Click-through-probability on "Start free trial":</td>      <td>0.080000</td>    </tr>    <tr>      <th>4</th>      <td>Probability of enrolling, given click:</td>      <td>0.206250</td>    </tr>    <tr>      <th>5</th>      <td>Probability of payment, given enroll:</td>      <td>0.530000</td>    </tr>    <tr>      <th>6</th>      <td>Probability of payment, given click</td>      <td>0.109313</td>    </tr>  </tbody></table></div><h3 id="For-each-metric-I-selected-as-an-evaluation-metric-estimate-standard-deviation-analytically"><a href="#For-each-metric-I-selected-as-an-evaluation-metric-estimate-standard-deviation-analytically" class="headerlink" title="For each metric I selected as an evaluation metric, estimate standard deviation analytically:"></a>For each metric I selected as an evaluation metric, estimate standard deviation analytically:</h3><p>The number of clicks and enrollments follows a binomial distribution, and by the central limit theorem, the distribution of the three rates (gross conversion, retention, and net conversion) is Gaussian.</p><p>Given the daily sample of 5000 cookies, the number of clicks and enrollments can be calculated using the baseline values<br>Number of cookies = 5000<br>Number of clicks on “Start free trial” = 5000 × 0.08 = 400<br>Number of enrollments = 5000 × 0.08 × 0.20625 = 82.5</p><p>$$ SD \; Gross\; conversion = \sqrt{\frac{p <em> (1 - p)} {n}} = \sqrt{\frac{0.20625 </em> (1 - 0.20625)} {400} }= 0.0202 $$$$ SD \; Retention = \sqrt{\frac{p <em> (1 - p)} {n}} = \sqrt{\frac{0.53 </em> (1 - 0.53)} { 82.5}} = 0.0549 $$$$ SD \; Net\; conversion = \sqrt{\frac{p <em> (1 - p)} {n}} = \sqrt{\frac{0.1093125 </em> (1 - 0.1093125)} {400}} = 0.0156 $$</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Supporting calculation for the standard deviation</span><span class="token keyword">import</span> math<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"5000 × 0.08 × 0.20625 = "</span><span class="token punctuation">,</span> <span class="token number">5000</span> <span class="token operator">*</span> <span class="token number">0.08</span> <span class="token operator">*</span> <span class="token number">0.20625</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"SD Gross conversion = "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">0.20625</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.20625</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"SD Retention = "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">0.53</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.53</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">82.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"SD Net conversion = "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">0.1093125</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.1093125</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>5000 × 0.08 × 0.20625 =  82.5SD Gross conversion =  0.020230604137049392SD Retention =  0.05494901217850908SD Net conversion =  0.01560154458248846</code></pre><p>I would like to expect the analytical variance is close to the empirical variance for the gross conversion and for the net conversion: the denominator for these two indicators is the number of clicks, which is also the unit of diversion.</p><p>And it would be useful to collect an empirical estimate of the variability for the retention: the unit of diversion was not used in this case, the empirical variance of the retention is more likely to be higher than the analytical variance.</p><h2 id="📖-Sizing"><a href="#📖-Sizing" class="headerlink" title="📖 Sizing"></a>📖 Sizing</h2><h2 id="Number-of-Samples-given-Power"><a href="#Number-of-Samples-given-Power" class="headerlink" title="Number of Samples given Power"></a>Number of Samples given Power</h2><p>Using the analytic estimates of variance to calculate how many pageviews total (across both groups) would I need to collect to adequately power the experiment. Use an alpha of 0.05 and a beta of 0.2.</p><p>I have used the online calculator (References, N5) for calculating the sample sizes and have chosen the largest.</p><pre class="line-numbers language-python"><code class="language-python">Image<span class="token punctuation">(</span><span class="token string">'sample_size.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="1_27_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">Image<span class="token punctuation">(</span><span class="token string">'Sample_Retention_Screenshot.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="1_28_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">Image<span class="token punctuation">(</span><span class="token string">'Sample_Net_conversion_Screenshot.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="1_29_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Supporting calculation for the control and experimental groups</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Gross conversion: 2 × 25835 × 40000 ÷ 3200 = "</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">25835</span> <span class="token operator">*</span> <span class="token number">40000</span> <span class="token operator">/</span> <span class="token number">3200.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Retention:  2 × 39115 × 40000 ÷ 660 = "</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">39115</span> <span class="token operator">*</span> <span class="token number">40000</span> <span class="token operator">/</span> <span class="token number">660.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Net conversion:  2 × 27413 × 40000 ÷ 3200 = "</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">27413</span> <span class="token operator">*</span> <span class="token number">40000</span> <span class="token operator">/</span> <span class="token number">3200.0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Gross conversion: 2 × 25835 × 40000 ÷ 3200 =  645875.0Retention:  2 × 39115 × 40000 ÷ 660 =  4741212.121212121Net conversion:  2 × 27413 × 40000 ÷ 3200 =  685325.0</code></pre><h2 id="Duration-vs-Exposure"><a href="#Duration-vs-Exposure" class="headerlink" title="Duration vs. Exposure"></a>Duration vs. Exposure</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Supporting calculation for the number of days</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Number of pageviews: 4741212"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"(for the experiment with the gross conversion, the retention, and the net conversion)"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Days (100% of the traffic) = 4741212 ÷ 40000 = "</span><span class="token punctuation">,</span> <span class="token number">4741212</span> <span class="token operator">/</span> <span class="token number">40000.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Number of pageviews: 685325"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"(for the experiment with the gross conversion and the net conversion)"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Days (100% of the traffic) = 685325 ÷ 40000 = "</span><span class="token punctuation">,</span> <span class="token number">685325</span> <span class="token operator">/</span> <span class="token number">40000.0</span> <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Days (60% of the traffic) = 685325 ÷ 40000 ÷ 0.6 = "</span><span class="token punctuation">,</span> <span class="token number">685325</span> <span class="token operator">/</span> <span class="token number">40000.0</span> <span class="token operator">/</span> <span class="token number">0.6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Number of pageviews: 4741212(for the experiment with the gross conversion, the retention, and the net conversion)Days (100% of the traffic) = 4741212 ÷ 40000 =  118.5303Number of pageviews: 685325(for the experiment with the gross conversion and the net conversion)Days (100% of the traffic) = 685325 ÷ 40000 =  17.133125Days (60% of the traffic) = 685325 ÷ 40000 ÷ 0.6 =  28.555208333333333</code></pre><p> Even the use of 100 percent of the traffic does not allow testing in full for all three metrics (the gross conversion, the retention, and the net conversion). It turns out that we need to experiment 118 days. Of course, it is too long for tasks staged in the project. Percent reduction in traffic will increase this interval. Hence, it is necessary to reduce the number of test metrics and choose only two of them: the gross conversion and the net conversion.</p><p>I should reconsider an earlier decision about 4741212 needed pageviews and setup the number of pageviews equal to 685325. For the experiment with the gross conversion and the net conversion, we can use the period 17 days with the 100% traffic level. This interval is much better, but it gives us the result too quickly. The behavior of people in the field of education is quite difficult to analyze and trends in this area could be rarely detected in a short time period for 2-3 weeks. To slightly increase the time interval, we will set the percentage of used traffic at 60 (fraction = 0.6) and it gives us the number: 29 days.</p><p>It is also possible to take into consideration that the commercial risk is low: the site offers students to better plan and to evaluate their training time. The assumption of a sharp decrease in payments as a result of the pilot warning is devoid of practical foundation. For investments, the decisive factor is the first free period as a way to assess their own abilities, and it does not change during the experiment. The number of payments theoretically may slightly decrease due to the lower number of subscriptions, but this is only an assumption. Students who spend less than 5 hours a week are hardly able to complete the program successfully. In most cases, we are talking about reducing the waste of time for students and mentors.</p><p>And there is no risk in terms of privacy violation at all. Users do not enter any additional information about themselves in the process of the experiment except a little piece of information about planning.</p><p>It should be noted that the use of the fraction 0.6 does not affect the commercial interests seriously. From one side, the time interval and therefore the risk will increase. From another side, we keep the certain number of pageviews, therefore the experimental audience and the risk will not increase. It means our experiment could not practically be risky for the business.</p><p>Removing one indicator in the main part of the project, I want to analyze the experimental data in the last section on my own initiative a little bit wider and to determine what happens to the metrics “Retention” as the most interesting in terms of the psychological effect and the most unpredictable.</p><p>🔵   Number of pageviews: 685325. 🔵   Fraction of traffic exposed: 0.6. 🔵   Length of experiment: 29.</p><h2 id="📘-Experiment-Analysis"><a href="#📘-Experiment-Analysis" class="headerlink" title="📘 Experiment Analysis"></a>📘 Experiment Analysis</h2><font color="blue">This data contains the raw information needed to compute the above metrics, broken down day by day. Note that there are two sheets within the spreadsheet - one for the experiment group, and one for the control group.<p>The meaning of each column is:</p><ul><li>Pageviews: Number of unique cookies to view the course overview page that day.</li><li>Clicks: Number of unique cookies to click the course overview page that day.</li><li>Enrollments: Number of user-ids to enroll in the free trial that day.</li><li>Payments: Number of user-ids who who enrolled on that day to remain enrolled for 14 days and thus make a payment.<br>(Note that the date for this column is the start date, that is, the date of enrollment, rather than the date of the payment. The payment happened 14 days later. Because of this, the enrollments and payments are tracked for 14 fewer days than the other columns.)</li></ul></font><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Read the data for the control and experimental groups</span>control_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'Final Project Results - Control.csv'</span><span class="token punctuation">)</span>experiment_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'Final Project Results - Experiment.csv'</span><span class="token punctuation">)</span>control_data2 <span class="token operator">=</span> control_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">]</span>experiment_data2 <span class="token operator">=</span> experiment_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Control data"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>control_data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Experimental data"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>experiment_data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Control data          Date  Pageviews  Clicks  Enrollments  Payments0  Sat, Oct 11       7723     687        134.0      70.01  Sun, Oct 12       9102     779        147.0      70.02  Mon, Oct 13      10511     909        167.0      95.0Experimental data          Date  Pageviews  Clicks  Enrollments  Payments0  Sat, Oct 11       7716     686        105.0      34.01  Sun, Oct 12       9288     785        116.0      91.02  Mon, Oct 13      10480     884        145.0      79.0</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Plot the metrics</span>plt<span class="token punctuation">.</span>style<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">'ggplot'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'figure.figsize'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>csfont <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'fontname'</span><span class="token punctuation">:</span><span class="token string">'Arial'</span><span class="token punctuation">}</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Click-through-probability on "Start free trial"'</span><span class="token punctuation">,</span> <span class="token operator">**</span>csfont<span class="token punctuation">)</span>line1<span class="token punctuation">,</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>control_data<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data<span class="token punctuation">[</span><span class="token string">'Pageviews'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'control'</span><span class="token punctuation">)</span>line2<span class="token punctuation">,</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>experiment_data<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data<span class="token punctuation">[</span><span class="token string">'Pageviews'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'experiment'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>handles<span class="token operator">=</span><span class="token punctuation">[</span>line1<span class="token punctuation">,</span> line2<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.legend.Legend at 0x1a16a3a46d8&gt;</code></pre><p><img src="1_40_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Gross conversion'</span><span class="token punctuation">,</span> <span class="token operator">**</span>csfont<span class="token punctuation">)</span>line3<span class="token punctuation">,</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>control_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'control'</span><span class="token punctuation">)</span>line4<span class="token punctuation">,</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'experiment'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>handles<span class="token operator">=</span><span class="token punctuation">[</span>line3<span class="token punctuation">,</span> line4<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.legend.Legend at 0x1a16a5ae9e8&gt;</code></pre><p><img src="1_41_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Net conversion'</span><span class="token punctuation">,</span> <span class="token operator">**</span>csfont<span class="token punctuation">)</span>line7<span class="token punctuation">,</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>control_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'control'</span><span class="token punctuation">)</span>line8<span class="token punctuation">,</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'experiment'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>handles<span class="token operator">=</span><span class="token punctuation">[</span>line7<span class="token punctuation">,</span> line8<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.legend.Legend at 0x1a16a3f4a20&gt;</code></pre><p><img src="1_42_1.png" alt="png"></p><h2 id="📖-Sanity-Checks"><a href="#📖-Sanity-Checks" class="headerlink" title="📖   Sanity Checks"></a>📖   Sanity Checks</h2><font color="blue"><br>Start by checking whether your invariant metrics are equivalent between the two groups. <br>   - If the invariant metric is a simple count that should be randomly split between the 2 groups, you can use a binomial test. <br>   - Otherwise, you will need to construct a confidence interval for a difference in proportions using a similar strategy then check whether the difference between group values falls within that confidence level. </font><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Control group:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Clicks = "</span><span class="token punctuation">,</span> control_data<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"   "</span><span class="token punctuation">,</span> \      <span class="token string">"Pageviews = "</span><span class="token punctuation">,</span> control_data<span class="token punctuation">[</span><span class="token string">'Pageviews'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Experimental group:"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Clicks = "</span><span class="token punctuation">,</span> experiment_data<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"   "</span><span class="token punctuation">,</span> \      <span class="token string">"Pageviews = "</span><span class="token punctuation">,</span> experiment_data<span class="token punctuation">[</span><span class="token string">'Pageviews'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Control group:Clicks =  28378     Pageviews =  345543Experimental group:Clicks =  28325     Pageviews =  344660</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Supporting calculation for checking invariant metrics</span>p <span class="token operator">=</span> <span class="token number">0.5</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Number of cookies:"</span><span class="token punctuation">)</span>SE_cookies <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>p <span class="token operator">*</span> p <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">345543</span> <span class="token operator">+</span> <span class="token number">344660</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Standard error SE = "</span><span class="token punctuation">,</span> SE_cookies<span class="token punctuation">)</span>ME_cookies <span class="token operator">=</span> SE_cookies <span class="token operator">*</span> <span class="token number">1.96</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Margin of error ME = "</span><span class="token punctuation">,</span> ME_cookies<span class="token punctuation">)</span><span class="token punctuation">(</span>LB_cookies<span class="token punctuation">,</span> UB_cookies<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> ME_cookies<span class="token punctuation">,</span> p <span class="token operator">+</span> ME_cookies<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Confidential interval CI = "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_cookies<span class="token punctuation">,</span> UB_cookies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> u<span class="token string">'p\u0302'</span><span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">,</span> <span class="token number">345543.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">345543</span> <span class="token operator">+</span> <span class="token number">344660</span><span class="token punctuation">)</span><span class="token punctuation">,</span> u<span class="token string">'\u2208'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_cookies<span class="token punctuation">,</span> UB_cookies<span class="token punctuation">)</span><span class="token punctuation">,</span> u<span class="token string">'\u2713'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'Number of clicks on “Start free trial":'</span><span class="token punctuation">)</span>SE_clicks <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">0.5</span> <span class="token operator">*</span> <span class="token number">0.5</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">28378</span> <span class="token operator">+</span> <span class="token number">28325</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Standard error SE = "</span><span class="token punctuation">,</span> SE_clicks<span class="token punctuation">)</span>ME_clicks <span class="token operator">=</span> SE_clicks <span class="token operator">*</span> <span class="token number">1.96</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Margin of error ME = "</span><span class="token punctuation">,</span> ME_clicks<span class="token punctuation">)</span><span class="token punctuation">(</span>LB_clicks<span class="token punctuation">,</span> UB_clicks<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> ME_clicks<span class="token punctuation">,</span> p <span class="token operator">+</span> ME_clicks<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Confidential interval CI = "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_clicks<span class="token punctuation">,</span> UB_clicks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> u<span class="token string">'p\u0302'</span><span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">,</span> <span class="token number">28378.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">28378</span> <span class="token operator">+</span> <span class="token number">28325</span><span class="token punctuation">)</span><span class="token punctuation">,</span> u<span class="token string">'\u2208'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_clicks<span class="token punctuation">,</span> UB_clicks<span class="token punctuation">)</span><span class="token punctuation">,</span> u<span class="token string">'\u2713'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">'Click-through-probability on "Start free trial":'</span><span class="token punctuation">)</span>p_pool <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">28378</span> <span class="token operator">+</span> <span class="token number">28325</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">345543</span> <span class="token operator">+</span> <span class="token number">344660</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Pooled probability p_pool = "</span><span class="token punctuation">,</span> p_pool<span class="token punctuation">)</span>SE_pool <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>p_pool <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> p_pool<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">345543</span> <span class="token operator">+</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">344660</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Standard error SE = "</span><span class="token punctuation">,</span> SE_pool<span class="token punctuation">)</span>ME_pool <span class="token operator">=</span> SE_pool <span class="token operator">*</span> <span class="token number">1.96</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Margin of error ME = "</span><span class="token punctuation">,</span> ME_pool<span class="token punctuation">)</span>d_hat <span class="token operator">=</span> <span class="token number">28325.0</span> <span class="token operator">/</span> <span class="token number">344660</span> <span class="token operator">-</span> <span class="token number">28378.0</span> <span class="token operator">/</span> <span class="token number">345543</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Difference"</span><span class="token punctuation">,</span> u<span class="token string">'d\u0302'</span><span class="token punctuation">,</span> <span class="token string">"= "</span><span class="token punctuation">,</span> d_hat<span class="token punctuation">)</span><span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">-</span> ME_pool<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token operator">+</span> ME_pool<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Confidential interval CI = "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>u<span class="token string">'d\u0302'</span><span class="token punctuation">,</span> u<span class="token string">'\u2208'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">,</span> u<span class="token string">'\u2713'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Number of cookies:Standard error SE =  0.0006018407402943247Margin of error ME =  0.0011796078509768765Confidential interval CI =  (0.49882039214902313, 0.5011796078509769)p̂ = 0.5006396668806133 ∈ (0.49882039214902313, 0.5011796078509769) ✓Number of clicks on “Start free trial&quot;:Standard error SE =  0.002099747079699252Margin of error ME =  0.0041155042762105335Confidential interval CI =  (0.49588449572378945, 0.5041155042762105)p̂ = 0.5004673474066628 ∈ (0.49588449572378945, 0.5041155042762105) ✓Click-through-probability on &quot;Start free trial&quot;:Pooled probability p_pool =  0.08215409089789526Standard error SE =  0.0006610608156387222Margin of error ME =  0.0012956791986518956Difference d̂ =  5.662709158693602e-05Confidential interval CI =  (-0.0012956791986518956, 0.0012956791986518956)d̂ ∈ (-0.0012956791986518956, 0.0012956791986518956) ✓</code></pre><p>🔵   Number of cookiesLower bound = 0.4988; Upper bound = 0.5012; Observed = 0.5006; Passes = ✅</p><p>🔵   Number of clicks on “Start free trial”Lower bound = 0.4959; Upper bound = 0.5041; Observed = 0.5005; Passes = ✅</p><p>🔵   Click-through-probability on “Start free trial” (Difference between the control and experimental groups)Lower bound = -0.0013; Upper bound = 0.0013; Observed = 0.0001; Passes = ✅</p><h2 id="📖-Result-Analysis"><a href="#📖-Result-Analysis" class="headerlink" title="📖   Result Analysis"></a>📖   Result Analysis</h2><h3 id="Check-for-Practical-and-Statistical-Significance"><a href="#Check-for-Practical-and-Statistical-Significance" class="headerlink" title="Check for Practical and Statistical Significance"></a>Check for Practical and Statistical Significance</h3><p>Next, for my evaluation metrics, calculate a confidence interval for the difference between the experiment and control groups, and check whether each metric is statistically and/or practically significance. <br></p><ul><li>A metric is statistically significant if the confidence interval does not include 0 (that is, you can be confident there was a change)<br></li><li>it is practically significant if the confidence interval does not include the practical significance boundary (that is, you can be confident there is a change that matters to the business.)</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Control group:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Clicks = "</span><span class="token punctuation">,</span> control_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"   "</span><span class="token punctuation">,</span> \<span class="token string">"Enrollments = "</span><span class="token punctuation">,</span> control_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"   "</span><span class="token punctuation">,</span> \<span class="token string">"Payments = "</span><span class="token punctuation">,</span> control_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Experimental group:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Clicks = "</span><span class="token punctuation">,</span> experiment_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"   "</span><span class="token punctuation">,</span> \<span class="token string">"Enrollments = "</span><span class="token punctuation">,</span> experiment_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"   "</span><span class="token punctuation">,</span> \<span class="token string">"Payments = "</span><span class="token punctuation">,</span> experiment_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Control group:Clicks =  17293     Enrollments =  3785.0     Payments =  2033.0Experimental group:Clicks =  17260     Enrollments =  3423.0     Payments =  1945.0</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Supporting calculation for checking evaluation metrics</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Gross conversion"</span><span class="token punctuation">)</span>p_pool <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">3785.0</span> <span class="token operator">+</span> <span class="token number">3423.0</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">17293</span> <span class="token operator">+</span> <span class="token number">17260</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Pooled probability p_pool = "</span><span class="token punctuation">,</span> p_pool<span class="token punctuation">)</span>SE_pool <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>p_pool <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> p_pool<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">17293</span> <span class="token operator">+</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">17260</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Standard error SE = "</span><span class="token punctuation">,</span> SE_pool<span class="token punctuation">)</span>ME_pool <span class="token operator">=</span> SE_pool <span class="token operator">*</span> <span class="token number">1.96</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Margin of error ME = "</span><span class="token punctuation">,</span> ME_pool<span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token number">3423.0</span> <span class="token operator">/</span> <span class="token number">17260</span> <span class="token operator">-</span> <span class="token number">3785.0</span> <span class="token operator">/</span> <span class="token number">17293</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Difference d"</span><span class="token punctuation">,</span> <span class="token string">"= "</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>d <span class="token operator">-</span> ME_pool<span class="token punctuation">,</span> d <span class="token operator">+</span> ME_pool<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Confidential interval CI = "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">,</span> u<span class="token string">'\u2209'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Statistical significance"</span><span class="token punctuation">,</span> u<span class="token string">'\u2713'</span><span class="token punctuation">,</span> <span class="token string">"  Practical significance "</span><span class="token punctuation">,</span> u<span class="token string">'\u2713'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Net conversion"</span><span class="token punctuation">)</span>p_pool <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2033.0</span> <span class="token operator">+</span> <span class="token number">1945.0</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">17293</span> <span class="token operator">+</span> <span class="token number">17260</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Pooled probability p_pool = "</span><span class="token punctuation">,</span> p_pool<span class="token punctuation">)</span>SE_pool <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>p_pool <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> p_pool<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">17293</span> <span class="token operator">+</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">17260</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Standard error SE = "</span><span class="token punctuation">,</span> SE_pool<span class="token punctuation">)</span>ME_pool <span class="token operator">=</span> SE_pool <span class="token operator">*</span> <span class="token number">1.96</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Margin of error ME = "</span><span class="token punctuation">,</span> ME_pool<span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token number">1945.0</span> <span class="token operator">/</span> <span class="token number">17260</span> <span class="token operator">-</span> <span class="token number">2033.0</span> <span class="token operator">/</span> <span class="token number">17293</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Difference d = "</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>d <span class="token operator">-</span> ME_pool<span class="token punctuation">,</span> d <span class="token operator">+</span> ME_pool<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Confidential interval CI = "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token number">0</span><span class="token punctuation">,</span> u<span class="token string">'\u2208'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token string">";  dmin = -0.0075"</span><span class="token punctuation">,</span> u<span class="token string">'\u2208'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Statistical significance"</span><span class="token punctuation">,</span> u<span class="token string">'\u2718'</span><span class="token punctuation">,</span> <span class="token string">"  Practical significance "</span><span class="token punctuation">,</span> u<span class="token string">'\u2718'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Gross conversionPooled probability p_pool =  0.20860706740369866Standard error SE =  0.004371675385225936Margin of error ME =  0.008568483755042836Difference d =  -0.020554874580361565Confidential interval CI =  (-0.0291233583354044, -0.01198639082531873)(-0.01, 0, 0.01) ∉ (-0.0291233583354044, -0.01198639082531873)Statistical significance ✓   Practical significance  ✓Net conversionPooled probability p_pool =  0.1151274853124186Standard error SE =  0.0034341335129324238Margin of error ME =  0.0067309016853475505Difference d =  -0.0048737226745441675Confidential interval CI =  (-0.011604624359891718, 0.001857179010803383)0 ∈ (-0.011604624359891718, 0.001857179010803383) ;  dmin = -0.0075 ∈ (-0.011604624359891718, 0.001857179010803383)Statistical significance ✘   Practical significance  ✘</code></pre><font color="blue">If you have chosen multiple evaluation metrics, you will need to decide whether to use the Bonferroni correction. When deciding, keep in mind the results you are looking for in order to launch the experiment. Will the fact that you have multiple metrics make those results more likely to occur by chance than the alpha level of 0.05?</font><p>We have measured two metrics in one experiment. Applying the Bonferroni correction means that the a-level for each hypothesis will be 2.5 % instead of 5% and confidential intervals will be significantly wider. It is too conservative for some reasons.</p><p>The use of the Bonferroni correction would really be needed if we test several metrics in one experiment and expect that at least one metrics will demonstrate the statistically significant change. In the set of metrics, this matching only for one indicator can be an absolutely random event, therefore the experiment will have a false positive result. It means we should increase the confidential intervals to avoid this situation and apply the Bonferroni correction.</p><p>But in the case of our experiment, we expect two metrics will have matched our criteria at the same time to proceed with the launch. It’s a very strong condition without any correction. The positive results will be more likely to occur not by chance. Therefore, the Bonferroni correction could be the cause to approve the wrong null hypothesis and we should not use it this time.</p><p>Also, our metrics have a strong relationship between each other. If we know the outcome of one test of a difference between the control and experimental groups on one metrics, it would be easy to predict and to find the outcome of the other tests on the other metrics. It’s absolutely natural to expect their behavior will be similar simultaneously.</p><h3 id="Effect-Size-Tests"><a href="#Effect-Size-Tests" class="headerlink" title="Effect Size Tests"></a>Effect Size Tests</h3><p><br>🔴   I did not use the Bonferroni correction.</p><p><br>🔵   Gross conversion (Difference between the control and experimental groups)<br>Lower bound = -0.0291; Upper bound = -0.0120; Statistical significance = ✅; Practical significance = ✅</p><p><br>🔵   Net conversion (Difference between the control and experimental groups)<br>Lower bound = -0.0116; Upper bound = 0.0019; Statistical significance = ❎; Practical significance = ❎</p><h3 id="Sign-Tests-Double-check"><a href="#Sign-Tests-Double-check" class="headerlink" title="Sign Tests(Double check)"></a>Sign Tests(Double check)</h3><p>To further test each of the evaluation metrics, a binomial sign test can be conducted to evaluate Each day of the experiment to see if there is a positive or negative difference across groups (experimental-control). Each positive difference is counted as a success, and each negative difference as a failure. Then comparing the resulting p-values for each metric to determine significance.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Supporting calculation of successful events for the evaluation metrics</span>Gross_conversion_success <span class="token operator">=</span> experiment_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span> \<span class="token operator">></span>control_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Gross conversion: success ="</span><span class="token punctuation">,</span> Gross_conversion_success<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"  total ="</span><span class="token punctuation">,</span> Gross_conversion_success<span class="token punctuation">.</span>size<span class="token punctuation">)</span>Net_conversion_success <span class="token operator">=</span> experiment_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span> \<span class="token operator">></span>control_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Net conversion: success ="</span><span class="token punctuation">,</span> Net_conversion_success<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"  total ="</span><span class="token punctuation">,</span> Net_conversion_success<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Gross conversion: success = 4   total = 23Net conversion: success = 10   total = 23</code></pre><pre class="line-numbers language-python"><code class="language-python">Image<span class="token punctuation">(</span><span class="token string">'Sign_Gross_conversion_Screenshot.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="1_60_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">Image<span class="token punctuation">(</span><span class="token string">'Sign_Net_conversion_Screenshot.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="1_61_0.png" alt="png"></p><p>🔵   Gross conversion: p-value = 0.0026; statistical significance = ✅🔵   Net conversion: p-value = 0.6776; statistical significance = ❎</p><p>Eventually, the effective size and sign tests show that the site change would statistically significantly reduce the gross conversion, but would not affect the net conversion in a statistically significant way. The effect size test states this in the practical meaning also.</p><p>I did not use the Bonferroni correction for any calculations because it will be too conservative in the case of highly related metrics which should give the expected result simultaneously.</p><h2 id="📖-Recommendation"><a href="#📖-Recommendation" class="headerlink" title="📖   Recommendation"></a>📖   Recommendation</h2><p><br> The recommendation is not to launch the experiment change because the negative results have outweighed the positive ones.</p><p><br>🔴 Positive results of the experiment.</p><ul><li>The difference for the gross conversion is practically significant and negative. This is a good sign: the Udacity team can lower costs by a number of trial signups.</li><li>The difference for the net conversion is not statistically significant. It means the absence of serious financial losses.</li></ul><p><br>🔵 Negative results of the experiment:</p><ul><li>The interval for the difference in the case of the net conversion includes negative numbers. Therefore, the team has a risk to decrease incomes.</li><li>We have not gathered enough data to draw conclusions about the retention and because of this we can not evaluate correctly the difference between the control and experimental groups for a number of students who were disappointed in studying during the free period. Consequently, we do not know enrolled users would be disappointed in the learning process less and make more payments or would not.</li></ul><h2 id="📘-Follow-Up-Experiment"><a href="#📘-Follow-Up-Experiment" class="headerlink" title="📘 Follow-Up Experiment"></a>📘 Follow-Up Experiment</h2><p>Before scheduling the follow-up experiment, I would like to analyze the available data for the evaluation metrics “Retention”.</p><pre class="line-numbers language-python"><code class="language-python">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Retention'</span><span class="token punctuation">,</span> <span class="token operator">**</span>csfont<span class="token punctuation">)</span>line5<span class="token punctuation">,</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>control_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'control'</span><span class="token punctuation">)</span>line6<span class="token punctuation">,</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'experiment'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>handles<span class="token operator">=</span><span class="token punctuation">[</span>line5<span class="token punctuation">,</span> line6<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.legend.Legend at 0x1a16a413b38&gt;</code></pre><p><img src="1_68_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Retention"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Effect Size Tests"</span><span class="token punctuation">)</span>p_pool <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2033.0</span> <span class="token operator">+</span> <span class="token number">1945.0</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">3785.0</span> <span class="token operator">+</span> <span class="token number">3423.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Pooled probability p_pool = "</span><span class="token punctuation">,</span> p_pool<span class="token punctuation">)</span>SE_pool <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>p_pool <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> p_pool<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">3785.0</span> <span class="token operator">+</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">3423.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Standard error SE = "</span><span class="token punctuation">,</span> SE_pool<span class="token punctuation">)</span>ME_pool <span class="token operator">=</span> SE_pool <span class="token operator">*</span> <span class="token number">1.96</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Margin of error ME = "</span><span class="token punctuation">,</span> ME_pool<span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token number">1945.0</span> <span class="token operator">/</span> <span class="token number">3423.0</span> <span class="token operator">-</span> <span class="token number">2033.0</span> <span class="token operator">/</span> <span class="token number">3785.0</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Difference d = "</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>d <span class="token operator">-</span> ME_pool<span class="token punctuation">,</span> d <span class="token operator">+</span> ME_pool<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Confidential interval CI = "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span>  <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> u<span class="token string">'\u2209'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">";  dmin = 0.01"</span><span class="token punctuation">,</span> u<span class="token string">'\u2208'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Statistical significance"</span><span class="token punctuation">,</span> u<span class="token string">'\u2713'</span><span class="token punctuation">,</span> <span class="token string">"  Practical significance "</span><span class="token punctuation">,</span> u<span class="token string">'\u2718'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Sign test"</span><span class="token punctuation">)</span>Retention_success <span class="token operator">=</span> experiment_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span> \<span class="token operator">></span>control_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"success ="</span><span class="token punctuation">,</span> Retention_success<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"  total ="</span><span class="token punctuation">,</span> Retention_success<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>RetentionEffect Size TestsPooled probability p_pool =  0.5518867924528302Standard error SE =  0.011729780091389183Margin of error ME =  0.022990368979122797Difference d =  0.031094804707142765Confidential interval CI =  (0.008104435728019967, 0.05408517368626556)0 ∉ (0.008104435728019967, 0.05408517368626556) ;  dmin = 0.01 ∈ (0.008104435728019967, 0.05408517368626556)Statistical significance ✓   Practical significance  ✘Sign testsuccess = 13   total = 23</code></pre><pre class="line-numbers language-python"><code class="language-python">Image<span class="token punctuation">(</span><span class="token string">'download (2).png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="1_70_0.png" alt="png"></p><h3 id="Retention-Difference-between-the-control-and-experimental-groups"><a href="#Retention-Difference-between-the-control-and-experimental-groups" class="headerlink" title="Retention (Difference between the control and experimental groups)"></a>Retention (Difference between the control and experimental groups)</h3><p><br>🔵   Effect size test<br>Lower bound = 0.0081; Upper bound = 0.0541; Statistical significance = ✅; Practical significance = ❎</p><p><br>🔵   Sign test: p-value = 0.6776; statistical significance = ❎</p><p>the sign test does not agree with the confidence interval for the difference, see if you can figure out why.</p><pre class="line-numbers language-python"><code class="language-python">Gross_conversion_diff <span class="token operator">=</span> experiment_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span> <span class="token operator">-</span> \control_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Gross conversion difference"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Median: "</span><span class="token punctuation">,</span> Gross_conversion_diff<span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Mean: "</span><span class="token punctuation">,</span> Gross_conversion_diff<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Retention_diff <span class="token operator">=</span> experiment_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span> <span class="token operator">-</span> \control_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Retention difference"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Median: "</span><span class="token punctuation">,</span> Retention_diff<span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Mean: "</span><span class="token punctuation">,</span> Retention_diff<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Net_conversion_diff <span class="token operator">=</span> experiment_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span> <span class="token operator">-</span> \control_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Net conversion difference"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Median: "</span><span class="token punctuation">,</span> Net_conversion_diff<span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Mean: "</span><span class="token punctuation">,</span> Net_conversion_diff<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Gross conversion differenceMedian:  -0.02475834310525149Mean:  -0.02078458202926592Retention differenceMedian:  0.023210831721469982Mean:  0.033342507466384695Net conversion differenceMedian:  -0.009027852539948616Mean:  -0.004896856989809377</code></pre><p> Statistical significance of the difference between the control and experimental groups was checked by using the values of the mean (effect size tests) and the median (sign tests). As we can see, these values vary considerably for the retention and it causes that the test results also differ.</p><p>Even a cursory analysis of insufficient data in a certain way confirms our intuitive assumptions about the behavior of this metric. The ratio of payments to enrollments tends to increase in the presence of the experimental warning. However, it is not possible to confirm this with sufficient certainty in the borders of this experiment and it is necessary to redesign the research.</p><font color="blue">If you wanted to reduce the number of frustrated students who cancel early in the course, what experiment would you try? Give a brief description of the change you would make, what your hypothesis would be about the effect of the change, what metrics you would want to measure, and what unit of diversion you would use. Include an explanation of each of your choices.</font><p>I would suggest these possible changes to the proposed experiment.</p><ul><li>Extend the duration of the experiment up to 2 months with constant monitoring of incomes for avoiding financial risks. If the decline in revenues becomes out of the certain limits, the study should be stopped immediately.</li><li>Measure all three evaluation metrics (the gross conversion, the retention, and the net conversion) for the 100% level of traffic because the audience of this site is very different in education, age, nationality, and other characteristics. Any reduction in the percentage of participants can significantly distort the results.</li><li>Replace the visualization message by the video with an explanation of successful learning strategies based on statistics of the particular site or by the input test for the course level recommendations exactly for this user.</li><li>In order to avoid the negative psychological effect or cut the extremely talented part of the audience which is able to pass the course without spending a lot of time to study, all changes should be only informative and recommendatory.</li><li>Recommendations in the videos or leveled tests should have the most practical character that is suitable for this course.</li><li>The length of free trial period is unchanged.</li></ul><p>I think the effect will be more detectable.</p><p>Now we can begin to define the technical details of the experiment. Selecting the unit of diversion, and invariant and evaluation metrics was quite reasonable. It is easy to obtain measurement results for decision making without the high level of costs or risks. Accordingly, I propose to leave them unchanged.</p><p>Unit of diversion: the cookie.Invariant metrics: the number of cookies, the number of clicks, and the click-through-probability.Evaluation metrics: the gross conversion, the retention, and the net conversion.The hypothesizes about the behavior of our metrics are also stayed the same:</p><p>the gross conversion should significantly decrease;the retention should significantly increase;the net conversion should not decrease.I expect the overcoming the negative results of the previous experiment and detecting the tendencies for all evaluation metrics.</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li>The final project: <a href="https://classroom.udacity.com/courses/ud257/lessons/4126079196/concepts/42072285530923" target="_blank" rel="noopener">https://classroom.udacity.com/courses/ud257/lessons/4126079196/concepts/42072285530923</a></li><li>The project instructions: <a href="https://docs.google.com/document/u/1/d/1aCquhIqsUApgsxQ8-SQBAigFDcfWVVohLEXcV6jWbdI/pub?embedded=True" target="_blank" rel="noopener">https://docs.google.com/document/u/1/d/1aCquhIqsUApgsxQ8-SQBAigFDcfWVVohLEXcV6jWbdI/pub?embedded=True</a></li><li>The template format: <a href="https://docs.google.com/document/d/16OX2KDSHI9mSCriyGIATpRGscIW2JmByMd0ITqKYvNg/edit" target="_blank" rel="noopener">https://docs.google.com/document/d/16OX2KDSHI9mSCriyGIATpRGscIW2JmByMd0ITqKYvNg/edit</a></li><li>The final project results: <a href="https://docs.google.com/spreadsheets/d/1Mu5u9GrybDdska-ljPXyBjTpdZIUev_6i7t4LRDfXM8/edit#gid=0" target="_blank" rel="noopener">https://docs.google.com/spreadsheets/d/1Mu5u9GrybDdska-ljPXyBjTpdZIUev_6i7t4LRDfXM8/edit#gid=0</a></li><li>The online calculator “Sample size”: <a href="http://www.evanmiller.org/ab-testing/sample-size.html" target="_blank" rel="noopener">http://www.evanmiller.org/ab-testing/sample-size.html</a></li></ul><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> A_B Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> A_B Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-Marketing Email campaign</title>
      <link href="/2018/02/01/7-marketing-email-campaign/"/>
      <url>/2018/02/01/7-marketing-email-campaign/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> itertools<span class="token keyword">import</span> _pickle <span class="token keyword">as</span> cPickle<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>style<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">"ggplot"</span><span class="token punctuation">)</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_selection <span class="token keyword">import</span> chi2<span class="token punctuation">,</span>f_classif<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoder<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> classification_report<span class="token punctuation">,</span>roc_curve<span class="token punctuation">,</span>precision_score<span class="token punctuation">,</span>recall_score<span class="token punctuation">,</span>auc<span class="token punctuation">,</span>precision_recall_curve<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">import</span> xgboost <span class="token keyword">as</span> xgb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">seed <span class="token operator">=</span> <span class="token number">9999</span>plt<span class="token punctuation">.</span>style<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">'ggplot'</span><span class="token punctuation">)</span><span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h2><ul><li><a href="#Load-emails-information-from-CSV-file">Load emails from CSV</a></li><li><a href="#Answer-question-1">Answer Question 1</a></li><li><a href="#Explore-the-data">Explore the data</a><ul><li><a href="#Chi-square-test-and-F-test">Chi-square test and F-test</a></li><li><a href="#previous-purchase-vs.-response">previous purchase history vs. response</a></li><li><a href="#user's-country-vs.-response">user’s country vs. response</a></li><li><a href="#email's-version-vs.-response">email’s version vs. response</a></li><li><a href="#weekday-vs.-response">weekday vs. reponse</a></li><li><a href="#email-text-vs.-response">email text vs. response</a></li><li><a href="#sending-hour-vs.-response">sending hour vs. response</a></li></ul></li><li><a href="#Answer-question-4">Answer Question 4</a></li><li><a href="#Build-Predictive-Model">Build Predictive Model</a><ul><li><a href="#Prepare-the-data">Prepare the data</a></li><li><a href="#Train-the-model">Train the model</a></li><li><a href="#Plot-ROC-curve-and-choose-better-probability-threshold">Plot ROC curve and choose better probability threshold</a></li></ul></li><li><a href="#Answer-question-2-and-question-3's-first-part">Answer question 2 and question 3’s first part</a></li><li><a href="#Answer-question-3's-second-part">Answer question 3’s second part</a></li><li>Answers summary:<ul><li><a href="#Answer-question-1">Answer Question 1</a></li><li><a href="#Answer-question-2-and-question-3's-first-part">Answer question 2 and question 3’s first part</a></li><li><a href="#Answer-question-3's-second-part">Answer question 3’s second part</a></li><li><a href="#Answer-question-4">Answer Question 4</a></li></ul></li></ul><h2 id="Load-emails-information-from-CSV-file"><a href="#Load-emails-information-from-CSV-file" class="headerlink" title="Load emails information from CSV file"></a>Load emails information from CSV file</h2><pre class="line-numbers language-python"><code class="language-python">emails <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"email_table.csv"</span><span class="token punctuation">,</span>index_col<span class="token operator">=</span><span class="token string">"email_id"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Columns:</p><ul><li>email_id : the Id of the email that was sent. It is unique by email </li><li>email_text : there are two versions of the email: one has “long text” (i.e. has 4 paragraphs) and one has “short text” (just 2 paragraphs) </li><li>email_version : some emails were “personalized” (i.e. they had the name of the user receiving the email in the incipit, such as “Hi John,”), while some emails were “generic” (the incipit was just “Hi,”). </li><li>hour : the user local time when the email was sent. </li><li>weekday : the day when the email was sent. </li><li>user_country : the country where the user receiving the email was based. It comes from the user ip address when she created the account. </li><li>user_past_purchases : how many items in the past were bought by the user receiving the email</li></ul><pre class="line-numbers language-python"><code class="language-python">emails<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># view some data to get a feeling</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>email_text</th>      <th>email_version</th>      <th>hour</th>      <th>weekday</th>      <th>user_country</th>      <th>user_past_purchases</th>    </tr>    <tr>      <th>email_id</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>434924</th>      <td>long_email</td>      <td>personalized</td>      <td>3</td>      <td>Tuesday</td>      <td>US</td>      <td>1</td>    </tr>    <tr>      <th>97442</th>      <td>long_email</td>      <td>personalized</td>      <td>9</td>      <td>Thursday</td>      <td>FR</td>      <td>7</td>    </tr>    <tr>      <th>919106</th>      <td>short_email</td>      <td>generic</td>      <td>16</td>      <td>Friday</td>      <td>US</td>      <td>4</td>    </tr>    <tr>      <th>476265</th>      <td>long_email</td>      <td>generic</td>      <td>13</td>      <td>Saturday</td>      <td>UK</td>      <td>2</td>    </tr>    <tr>      <th>723144</th>      <td>long_email</td>      <td>personalized</td>      <td>12</td>      <td>Monday</td>      <td>US</td>      <td>6</td>    </tr>    <tr>      <th>518804</th>      <td>short_email</td>      <td>generic</td>      <td>7</td>      <td>Wednesday</td>      <td>UK</td>      <td>7</td>    </tr>    <tr>      <th>801247</th>      <td>short_email</td>      <td>personalized</td>      <td>6</td>      <td>Tuesday</td>      <td>US</td>      <td>0</td>    </tr>    <tr>      <th>946474</th>      <td>long_email</td>      <td>generic</td>      <td>9</td>      <td>Friday</td>      <td>US</td>      <td>18</td>    </tr>    <tr>      <th>867238</th>      <td>short_email</td>      <td>generic</td>      <td>3</td>      <td>Friday</td>      <td>UK</td>      <td>7</td>    </tr>    <tr>      <th>750202</th>      <td>short_email</td>      <td>generic</td>      <td>13</td>      <td>Sunday</td>      <td>UK</td>      <td>8</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># email_text : there are two versions of the email: </span><span class="token comment" spellcheck="true"># one has "long text" (i.e. has 4 paragraphs) and one has "short text" (just 2 paragraphs)</span><span class="token comment" spellcheck="true"># since we need to change all features into numbers, so I replace 'email_text' with 'paragraphs'</span>emails<span class="token punctuation">[</span><span class="token string">"paragraphs"</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>emails<span class="token punctuation">.</span>email_text <span class="token operator">==</span> <span class="token string">'short_email'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">del</span> emails<span class="token punctuation">[</span><span class="token string">"email_text"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># email_version : some emails were "personalized" (i.e. they had name of the user in incipit, such as "Hi John,"), </span><span class="token comment" spellcheck="true"># while some emails were "generic" (the incipit was just "Hi,").</span>emails<span class="token punctuation">[</span><span class="token string">"is_personal"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>emails<span class="token punctuation">.</span>email_version <span class="token operator">==</span> <span class="token string">"personalized"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int<span class="token punctuation">)</span><span class="token keyword">del</span> emails<span class="token punctuation">[</span><span class="token string">"email_version"</span><span class="token punctuation">]</span>weekday2index <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Monday"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"Tuesday"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"Wednesday"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"Thursday"</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"Friday"</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"Saturday"</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">"Sunday"</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">}</span>emails<span class="token punctuation">[</span><span class="token string">"weekday"</span><span class="token punctuation">]</span> <span class="token operator">=</span> emails<span class="token punctuation">.</span>weekday<span class="token punctuation">.</span>map<span class="token punctuation">(</span>weekday2index<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># rename long column names to shorter names, make it easier to read</span>emails<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'user_past_purchases'</span><span class="token punctuation">:</span><span class="token string">'purchases'</span><span class="token punctuation">,</span><span class="token string">'user_country'</span><span class="token punctuation">:</span><span class="token string">'country'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>assemble emails’ response together</p><pre class="line-numbers language-python"><code class="language-python">emails<span class="token punctuation">[</span><span class="token string">"response"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"received"</span>open_users <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"email_opened_table.csv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>email_idemails<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>open_users<span class="token punctuation">,</span><span class="token string">"response"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"opened"</span>click_users <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"link_clicked_table.csv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>email_idemails<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>click_users<span class="token punctuation">,</span><span class="token string">"response"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'clicked'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">emails<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># check some data to get a feeling</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>hour</th>      <th>weekday</th>      <th>country</th>      <th>purchases</th>      <th>paragraphs</th>      <th>is_personal</th>      <th>response</th>    </tr>    <tr>      <th>email_id</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>85120</th>      <td>2</td>      <td>7</td>      <td>US</td>      <td>5</td>      <td>2</td>      <td>1</td>      <td>received</td>    </tr>    <tr>      <th>966622</th>      <td>12</td>      <td>7</td>      <td>UK</td>      <td>2</td>      <td>4</td>      <td>1</td>      <td>clicked</td>    </tr>    <tr>      <th>777221</th>      <td>11</td>      <td>3</td>      <td>US</td>      <td>2</td>      <td>4</td>      <td>1</td>      <td>received</td>    </tr>    <tr>      <th>493711</th>      <td>6</td>      <td>1</td>      <td>UK</td>      <td>1</td>      <td>2</td>      <td>0</td>      <td>received</td>    </tr>    <tr>      <th>106887</th>      <td>14</td>      <td>1</td>      <td>US</td>      <td>6</td>      <td>4</td>      <td>0</td>      <td>received</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># output a csv file</span>emails<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">"clean_emails.csv"</span><span class="token punctuation">,</span>index_label<span class="token operator">=</span><span class="token string">"email_id"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Answer-question-1"><a href="#Answer-question-1" class="headerlink" title="Answer question 1"></a>Answer question 1</h2><ul><li><span style="color:blue;font-weight:bold">What percentage of users opened the email?</span></li><li><span style="color:blue;font-weight:bold">what percentage clicked on the link within the email?</span></li></ul><pre class="line-numbers language-python"><code class="language-python">rslt_dist <span class="token operator">=</span> emails<span class="token punctuation">.</span>response<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>rslt_dist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>received    0.89605opened      0.08276clicked     0.02119Name: response, dtype: float64</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span> <span class="token string">"{:.2f}% of users opened the email"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> rslt_dist<span class="token punctuation">.</span>received<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"{:.2f}% of users clicked the link"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>rslt_dist<span class="token punctuation">.</span>clicked <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>10.39% of users opened the email2.12% of users clicked the link</code></pre><h2 id="Explore-the-data"><a href="#Explore-the-data" class="headerlink" title="Explore the data"></a>Explore the data</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">count_result_ratio</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">:</span>    counts <span class="token operator">=</span> df<span class="token punctuation">.</span>response<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    counts<span class="token punctuation">[</span><span class="token string">'total'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> counts<span class="token keyword">def</span> <span class="token function">grp_count_plotbar</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    grpresult <span class="token operator">=</span> emails<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>count_result_ratio<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># grpresult.loc[:,["received","opened",'clicked']].plot(kind='bar')</span>    grpresult<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'clicked'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span>title<span class="token operator">=</span><span class="token string">'click ratio vs. {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'click ratio'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> grpresult<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Chi-square-test-and-F-test"><a href="#Chi-square-test-and-F-test" class="headerlink" title="Chi-square test and F-test"></a>Chi-square test and F-test</h3><pre class="line-numbers language-python"><code class="language-python">resp_lb_encoder <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>cnty_lb_encoder <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>X <span class="token operator">=</span> emails<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>y <span class="token operator">=</span> resp_lb_encoder<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token keyword">del</span> X<span class="token punctuation">[</span><span class="token string">"response"</span><span class="token punctuation">]</span>feat_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hour"</span><span class="token punctuation">,</span><span class="token string">"weekday"</span><span class="token punctuation">,</span><span class="token string">"country"</span><span class="token punctuation">,</span><span class="token string">"purchases"</span><span class="token punctuation">,</span><span class="token string">"paragraphs"</span><span class="token punctuation">,</span><span class="token string">"is_personal"</span> <span class="token punctuation">]</span>X <span class="token operator">=</span> X<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>feat_names<span class="token punctuation">]</span>X<span class="token punctuation">[</span><span class="token string">"country"</span><span class="token punctuation">]</span> <span class="token operator">=</span> cnty_lb_encoder<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X<span class="token punctuation">.</span>country<span class="token punctuation">)</span>chi2scores<span class="token punctuation">,</span>_ <span class="token operator">=</span> chi2<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">)</span>fscores<span class="token punctuation">,</span>_ <span class="token operator">=</span> f_classif<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">)</span>feat_scores <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"chi2scores"</span><span class="token punctuation">:</span>chi2scores<span class="token punctuation">,</span><span class="token string">"fscores"</span><span class="token punctuation">:</span>fscores<span class="token punctuation">}</span><span class="token punctuation">,</span>index<span class="token operator">=</span>feat_names<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">feat_scores<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'chi2scores'</span><span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>chi2scores</th>      <th>fscores</th>    </tr>  </thead>  <tbody>    <tr>      <th>purchases</th>      <td>3448.795660</td>      <td>663.388596</td>    </tr>    <tr>      <th>country</th>      <td>378.554465</td>      <td>435.696911</td>    </tr>    <tr>      <th>is_personal</th>      <td>316.752872</td>      <td>317.427444</td>    </tr>    <tr>      <th>weekday</th>      <td>210.006087</td>      <td>105.002643</td>    </tr>    <tr>      <th>hour</th>      <td>147.815921</td>      <td>33.992047</td>    </tr>    <tr>      <th>paragraphs</th>      <td>53.952439</td>      <td>81.209295</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python">feat_scores<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">"fscores"</span><span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>chi2scores</th>      <th>fscores</th>    </tr>  </thead>  <tbody>    <tr>      <th>purchases</th>      <td>3448.795660</td>      <td>663.388596</td>    </tr>    <tr>      <th>country</th>      <td>378.554465</td>      <td>435.696911</td>    </tr>    <tr>      <th>is_personal</th>      <td>316.752872</td>      <td>317.427444</td>    </tr>    <tr>      <th>weekday</th>      <td>210.006087</td>      <td>105.002643</td>    </tr>    <tr>      <th>paragraphs</th>      <td>53.952439</td>      <td>81.209295</td>    </tr>    <tr>      <th>hour</th>      <td>147.815921</td>      <td>33.992047</td>    </tr>  </tbody></table></div><p>from the test result, we can know that,</p><ul><li>important features: <em><em> previous purchase counts, user’s country, email’s version (personal or general) </em></em></li><li>not so important features <strong>maybe</strong> include: <em><em> weekday, email’s text (short or long), hour to send the email </em></em></li></ul><h3 id="previous-purchase-vs-response"><a href="#previous-purchase-vs-response" class="headerlink" title="previous purchase vs. response"></a>previous purchase vs. response</h3><pre class="line-numbers language-python"><code class="language-python">rslt_grpby_purchase <span class="token operator">=</span> emails<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">"purchases"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>count_result_ratio<span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span>rslt_grpby_purchase<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">plt<span class="token punctuation">.</span>rc<span class="token punctuation">(</span><span class="token string">'figure'</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rslt_grpby_purchase<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"received"</span><span class="token punctuation">,</span><span class="token string">"opened"</span><span class="token punctuation">,</span><span class="token string">'clicked'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">,</span>markersize<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"ratio"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.text.Text at 0x11bb87850&gt;</code></pre><p><img src="7_24_1.png" alt="png"></p><p>from above plot, we can know, <span style="color:orange;font-weight:bold;font-size:1.5em">the more items a certain user purchased previously, the more likely that user will open the email or click the link.</span></p><h3 id="user’s-country-vs-response"><a href="#user’s-country-vs-response" class="headerlink" title="user’s country vs. response"></a>user’s country vs. response</h3><pre class="line-numbers language-python"><code class="language-python">grp_count_plotbar<span class="token punctuation">(</span><span class="token string">'country'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>response</th>      <th>received</th>      <th>opened</th>      <th>clicked</th>      <th>total</th>    </tr>    <tr>      <th>country</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>ES</th>      <td>0.960570</td>      <td>0.031103</td>      <td>0.008327</td>      <td>9967.0</td>    </tr>    <tr>      <th>FR</th>      <td>0.958779</td>      <td>0.033217</td>      <td>0.008004</td>      <td>9995.0</td>    </tr>    <tr>      <th>UK</th>      <td>0.879282</td>      <td>0.096043</td>      <td>0.024675</td>      <td>19939.0</td>    </tr>    <tr>      <th>US</th>      <td>0.880481</td>      <td>0.095160</td>      <td>0.024360</td>      <td>60099.0</td>    </tr>  </tbody></table></div><p><img src="7_27_1.png" alt="png"></p><p>from above plots, we see that, ‘open percentage’ and ‘click percentage’ is much higher (nearly 3 times) in UK and US than in France and Spain. </p><p>this may be the <span style="color:orange;font-weight:bold;font-size:1.5em">translation issue. I guess the emails are written in English, which is unreadable to some non-English-speaking users, which cause the low ‘click ratio’ in non-English-speaking countries.</span></p><h3 id="email’s-version-vs-response"><a href="#email’s-version-vs-response" class="headerlink" title="email’s version vs. response"></a>email’s version vs. response</h3><pre class="line-numbers language-python"><code class="language-python">grp_count_plotbar<span class="token punctuation">(</span><span class="token string">'is_personal'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>response</th>      <th>received</th>      <th>opened</th>      <th>clicked</th>      <th>total</th>    </tr>    <tr>      <th>is_personal</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.920034</td>      <td>0.064829</td>      <td>0.015137</td>      <td>50209.0</td>    </tr>    <tr>      <th>1</th>      <td>0.871864</td>      <td>0.100842</td>      <td>0.027294</td>      <td>49791.0</td>    </tr>  </tbody></table></div><p><img src="7_30_1.png" alt="png"></p><p><span style="color:orange;font-weight:bold;font-size:1.5em">‘personalized email’ has higher ‘click ratio’ than ‘general email’</span>. this is very easy to understand. Having my name in the recipient, at least I am some kind of ‘important’ to the company, other than some ordinary people which the company don’t bother to remember his name.</p><h3 id="weekday-vs-response"><a href="#weekday-vs-response" class="headerlink" title="weekday vs. response"></a>weekday vs. response</h3><pre class="line-numbers language-python"><code class="language-python">grp_count_plotbar<span class="token punctuation">(</span><span class="token string">'weekday'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>response</th>      <th>received</th>      <th>opened</th>      <th>clicked</th>      <th>total</th>    </tr>    <tr>      <th>weekday</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>0.883590</td>      <td>0.093504</td>      <td>0.022906</td>      <td>14363.0</td>    </tr>    <tr>      <th>2</th>      <td>0.879092</td>      <td>0.096019</td>      <td>0.024889</td>      <td>14143.0</td>    </tr>    <tr>      <th>3</th>      <td>0.879296</td>      <td>0.093084</td>      <td>0.027620</td>      <td>14084.0</td>    </tr>    <tr>      <th>4</th>      <td>0.881348</td>      <td>0.094207</td>      <td>0.024445</td>      <td>14277.0</td>    </tr>    <tr>      <th>5</th>      <td>0.925019</td>      <td>0.060944</td>      <td>0.014037</td>      <td>14177.0</td>    </tr>    <tr>      <th>6</th>      <td>0.912005</td>      <td>0.070149</td>      <td>0.017846</td>      <td>14569.0</td>    </tr>    <tr>      <th>7</th>      <td>0.911448</td>      <td>0.071801</td>      <td>0.016751</td>      <td>14387.0</td>    </tr>  </tbody></table></div><p><img src="7_33_1.png" alt="png"></p><p><span style="color:orange;font-weight:bold;font-size:1.5em">Friday, Saturday, Sunday have obviously lower ‘click ratio’ than Monday to Thursday</span>. People normally don’t process emails during weekends.</p><h3 id="email-text-vs-response"><a href="#email-text-vs-response" class="headerlink" title="email text vs. response"></a>email text vs. response</h3><pre class="line-numbers language-python"><code class="language-python">grp_count_plotbar<span class="token punctuation">(</span><span class="token string">'paragraphs'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>response</th>      <th>received</th>      <th>opened</th>      <th>clicked</th>      <th>total</th>    </tr>    <tr>      <th>paragraphs</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2</th>      <td>0.883698</td>      <td>0.092430</td>      <td>0.023872</td>      <td>49724.0</td>    </tr>    <tr>      <th>4</th>      <td>0.908266</td>      <td>0.073196</td>      <td>0.018538</td>      <td>50276.0</td>    </tr>  </tbody></table></div><p><img src="7_36_1.png" alt="png"></p><h3 id="sending-hour-vs-response"><a href="#sending-hour-vs-response" class="headerlink" title="sending hour vs. response"></a>sending hour vs. response</h3><pre class="line-numbers language-python"><code class="language-python">grp_count_plotbar<span class="token punctuation">(</span><span class="token string">'hour'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>response</th>      <th>received</th>      <th>opened</th>      <th>clicked</th>      <th>total</th>    </tr>    <tr>      <th>hour</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>0.910840</td>      <td>0.071032</td>      <td>0.018128</td>      <td>2703.0</td>    </tr>    <tr>      <th>2</th>      <td>0.911589</td>      <td>0.072089</td>      <td>0.016322</td>      <td>3676.0</td>    </tr>    <tr>      <th>3</th>      <td>0.915184</td>      <td>0.065293</td>      <td>0.019523</td>      <td>4610.0</td>    </tr>    <tr>      <th>4</th>      <td>0.911419</td>      <td>0.072394</td>      <td>0.016186</td>      <td>5622.0</td>    </tr>    <tr>      <th>5</th>      <td>0.917417</td>      <td>0.064570</td>      <td>0.018013</td>      <td>6551.0</td>    </tr>    <tr>      <th>6</th>      <td>0.909176</td>      <td>0.073677</td>      <td>0.017147</td>      <td>7465.0</td>    </tr>    <tr>      <th>7</th>      <td>0.909434</td>      <td>0.072282</td>      <td>0.018284</td>      <td>8204.0</td>    </tr>    <tr>      <th>8</th>      <td>0.911407</td>      <td>0.069659</td>      <td>0.018933</td>      <td>8398.0</td>    </tr>    <tr>      <th>9</th>      <td>0.873725</td>      <td>0.100481</td>      <td>0.025794</td>      <td>8529.0</td>    </tr>    <tr>      <th>10</th>      <td>0.866993</td>      <td>0.104768</td>      <td>0.028240</td>      <td>8180.0</td>    </tr>    <tr>      <th>11</th>      <td>0.872645</td>      <td>0.100227</td>      <td>0.027128</td>      <td>7483.0</td>    </tr>    <tr>      <th>12</th>      <td>0.875230</td>      <td>0.099109</td>      <td>0.025661</td>      <td>6508.0</td>    </tr>    <tr>      <th>13</th>      <td>0.890521</td>      <td>0.089590</td>      <td>0.019889</td>      <td>5581.0</td>    </tr>    <tr>      <th>14</th>      <td>0.889520</td>      <td>0.089738</td>      <td>0.020742</td>      <td>4580.0</td>    </tr>    <tr>      <th>15</th>      <td>0.894074</td>      <td>0.081019</td>      <td>0.024907</td>      <td>3493.0</td>    </tr>    <tr>      <th>16</th>      <td>0.894165</td>      <td>0.082639</td>      <td>0.023197</td>      <td>2759.0</td>    </tr>    <tr>      <th>17</th>      <td>0.890650</td>      <td>0.090861</td>      <td>0.018489</td>      <td>1893.0</td>    </tr>    <tr>      <th>18</th>      <td>0.905700</td>      <td>0.078114</td>      <td>0.016186</td>      <td>1421.0</td>    </tr>    <tr>      <th>19</th>      <td>0.924862</td>      <td>0.058564</td>      <td>0.016575</td>      <td>905.0</td>    </tr>    <tr>      <th>20</th>      <td>0.911585</td>      <td>0.076220</td>      <td>0.012195</td>      <td>656.0</td>    </tr>    <tr>      <th>21</th>      <td>0.942466</td>      <td>0.049315</td>      <td>0.008219</td>      <td>365.0</td>    </tr>    <tr>      <th>22</th>      <td>0.931373</td>      <td>0.049020</td>      <td>0.019608</td>      <td>204.0</td>    </tr>    <tr>      <th>23</th>      <td>0.917241</td>      <td>0.041379</td>      <td>0.041379</td>      <td>145.0</td>    </tr>    <tr>      <th>24</th>      <td>0.840580</td>      <td>0.130435</td>      <td>0.028986</td>      <td>69.0</td>    </tr>  </tbody></table></div><p><img src="7_38_1.png" alt="png"></p><p>although from above plot, it seems ‘sending hour’ has some impact on ‘clicked ratio’. however, that may be caused by much fewer examples in late hours. also according to <a href="#Chi-square-test-and-F-test">statistical test</a>‘s result, I don’t think ‘sending hour’ is an important feature, and won’t include it in my model.</p><h2 id="Answer-question-4"><a href="#Answer-question-4" class="headerlink" title="Answer question 4"></a>Answer question 4</h2><p><span style="color:blue;font-weight:bold">Did you ﬁnd any interesting pattern on how the email campaign performed for diﬀerent segments of users? Explain.</span></p><p>from above explorary analysis, I can find some interesting patterns listed below:</p><ul><li><a href="#previous-purchase-vs.-response">The more item a certain user purchased in the past, the more likely that user will click the link</a></li><li><a href="#user's-country-vs.-response">Users from English-speaking coutries are more likely to click the link</a>, which may be caused by some translation issue.</li><li><a href="#email's-version-vs.-response">Personalized email is more likely to be opened and clicked</a></li><li><a href="#weekday-vs.-response">Emails sent at weekends is less likely to be opened and clicked</a></li><li><a href="#Chi-square-test-and-F-test">Sending hour and #Paragraphs are not very important features to affect click rate</a></li></ul><h2 id="Build-Predictive-Model"><a href="#Build-Predictive-Model" class="headerlink" title="Build Predictive Model"></a>Build Predictive Model</h2><p>In this section, I will build a model to predict whether a user will open the email and click the link inside it.</p><h3 id="Prepare-the-data"><a href="#Prepare-the-data" class="headerlink" title="Prepare the data"></a>Prepare the data</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">del</span> XX <span class="token operator">=</span> emails<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>X<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># get a feeling about current data</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>hour</th>      <th>weekday</th>      <th>country</th>      <th>purchases</th>      <th>paragraphs</th>      <th>is_personal</th>      <th>response</th>    </tr>    <tr>      <th>email_id</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>785135</th>      <td>10</td>      <td>4</td>      <td>UK</td>      <td>4</td>      <td>4</td>      <td>0</td>      <td>received</td>    </tr>    <tr>      <th>479664</th>      <td>4</td>      <td>5</td>      <td>UK</td>      <td>0</td>      <td>4</td>      <td>0</td>      <td>received</td>    </tr>    <tr>      <th>233005</th>      <td>19</td>      <td>5</td>      <td>US</td>      <td>10</td>      <td>4</td>      <td>0</td>      <td>received</td>    </tr>    <tr>      <th>285041</th>      <td>15</td>      <td>2</td>      <td>US</td>      <td>7</td>      <td>4</td>      <td>1</td>      <td>received</td>    </tr>    <tr>      <th>10411</th>      <td>2</td>      <td>5</td>      <td>UK</td>      <td>5</td>      <td>4</td>      <td>0</td>      <td>received</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># select original features</span><span class="token comment" spellcheck="true"># 'paragraphs' isn't an important feature, but I will include it, and see how RF say about it</span>X <span class="token operator">=</span> X<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"country"</span><span class="token punctuation">,</span><span class="token string">"purchases"</span><span class="token punctuation">,</span><span class="token string">"paragraphs"</span><span class="token punctuation">,</span><span class="token string">"is_personal"</span><span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token comment" spellcheck="true"># create new feature</span>X<span class="token punctuation">[</span><span class="token string">'is_weekend'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>emails<span class="token punctuation">.</span>weekday<span class="token operator">>=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># One-Hot-Encode 'country' feature</span>X <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>X<span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"country"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>drop_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># prepare the target</span>y <span class="token operator">=</span> <span class="token punctuation">(</span>emails<span class="token punctuation">.</span>response <span class="token operator">==</span> <span class="token string">'clicked'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">X<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># check the data</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>purchases</th>      <th>paragraphs</th>      <th>is_personal</th>      <th>is_weekend</th>      <th>country_FR</th>      <th>country_UK</th>      <th>country_US</th>    </tr>    <tr>      <th>email_id</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>231912</th>      <td>5</td>      <td>2</td>      <td>1</td>      <td>1</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>    </tr>    <tr>      <th>538951</th>      <td>5</td>      <td>2</td>      <td>1</td>      <td>0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>    </tr>    <tr>      <th>716309</th>      <td>5</td>      <td>2</td>      <td>1</td>      <td>0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>    </tr>    <tr>      <th>695780</th>      <td>6</td>      <td>4</td>      <td>1</td>      <td>1</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>    </tr>    <tr>      <th>586318</th>      <td>2</td>      <td>4</td>      <td>1</td>      <td>0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># split for training and testing</span>Xtrain<span class="token punctuation">,</span>Xtest<span class="token punctuation">,</span>ytrain<span class="token punctuation">,</span>ytest <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">,</span>test_size<span class="token operator">=</span><span class="token number">0.33333</span><span class="token punctuation">,</span>random_state <span class="token operator">=</span> seed<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span> <span class="token string">'Train set shape: {}, positive ratio={:.3f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>Xtrain<span class="token punctuation">.</span>shape<span class="token punctuation">,</span>ytrain<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'Test set shape: {}, positive ratio={:.3f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>Xtest<span class="token punctuation">.</span>shape<span class="token punctuation">,</span>ytest<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>Train set shape: (66667, 7), positive ratio=0.021Test set shape: (33333, 7), positive ratio=0.022</code></pre><h3 id="Train-the-model"><a href="#Train-the-model" class="headerlink" title="Train the model"></a>Train the model</h3><p>Due to time limitation, I will just train one GBM model.</p><p><span style="color:red;font-weight:bold;font-size:1.5em">If given sufficient time, I will apply fowllowing strategies to improve the model:</span></p><ul><li><span style="color:red">build multiple models, and ensemble them (average or stacking) to improve the prediction performance.</span></li><li><span style="color:red">try more hyper-parameters to find better ones.</span></li></ul><pre class="line-numbers language-python"><code class="language-python">train_matrix <span class="token operator">=</span> xgb<span class="token punctuation">.</span>DMatrix<span class="token punctuation">(</span>Xtrain<span class="token punctuation">,</span>ytrain<span class="token punctuation">)</span>test_matrix <span class="token operator">=</span> xgb<span class="token punctuation">.</span>DMatrix<span class="token punctuation">(</span>Xtest<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>params<span class="token punctuation">[</span><span class="token string">'objective'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'binary:logistic'</span>  <span class="token comment" spellcheck="true"># output probabilities</span>params<span class="token punctuation">[</span><span class="token string">'eval_metric'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'auc'</span>params<span class="token punctuation">[</span><span class="token string">"num_rounds"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">300</span>params<span class="token punctuation">[</span><span class="token string">"early_stopping_rounds"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token comment" spellcheck="true"># params['min_child_weight'] = 2</span>params<span class="token punctuation">[</span><span class="token string">'max_depth'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span>params<span class="token punctuation">[</span><span class="token string">'eta'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.1</span>params<span class="token punctuation">[</span><span class="token string">"subsample"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.8</span>params<span class="token punctuation">[</span><span class="token string">"colsample_bytree"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.8</span>cv_results <span class="token operator">=</span> xgb<span class="token punctuation">.</span>cv<span class="token punctuation">(</span>params<span class="token punctuation">,</span>train_matrix<span class="token punctuation">,</span>                    num_boost_round <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token string">"num_rounds"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    nfold <span class="token operator">=</span> params<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'nfold'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    metrics <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token string">'eval_metric'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    early_stopping_rounds <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token string">"early_stopping_rounds"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    verbose_eval <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span>                    seed <span class="token operator">=</span> seed<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[0]    train-auc:0.677493+0.00828721    test-auc:0.672627+0.00998874[1]    train-auc:0.697782+0.00882727    test-auc:0.696658+0.0206434[2]    train-auc:0.70463+0.00828662    test-auc:0.702561+0.0208773[3]    train-auc:0.711914+0.00409068    test-auc:0.710696+0.0228788[4]    train-auc:0.714488+0.00278646    test-auc:0.712043+0.0193185[5]    train-auc:0.717649+0.00424529    test-auc:0.714465+0.0207032[6]    train-auc:0.719344+0.00510737    test-auc:0.715544+0.0193956[7]    train-auc:0.724209+0.00365824    test-auc:0.719632+0.0165027[8]    train-auc:0.729045+0.00371847    test-auc:0.72386+0.0148701[9]    train-auc:0.730501+0.00375046    test-auc:0.724429+0.0142755[10]    train-auc:0.732467+0.0026696    test-auc:0.726337+0.0156743[11]    train-auc:0.735537+0.00246068    test-auc:0.729132+0.0162888[12]    train-auc:0.737188+0.00155158    test-auc:0.730848+0.0168706[13]    train-auc:0.738333+0.00183292    test-auc:0.73156+0.016002[14]    train-auc:0.740307+0.00175305    test-auc:0.732328+0.0157333[15]    train-auc:0.741514+0.00256378    test-auc:0.733169+0.0154183[16]    train-auc:0.742537+0.0021792    test-auc:0.733099+0.0151237[17]    train-auc:0.744702+0.00246548    test-auc:0.735111+0.0143654[18]    train-auc:0.744979+0.00216543    test-auc:0.735508+0.0144697[19]    train-auc:0.746026+0.00214697    test-auc:0.736038+0.0145[20]    train-auc:0.747204+0.00234766    test-auc:0.73719+0.0144764[21]    train-auc:0.748409+0.0027355    test-auc:0.737671+0.0133952[22]    train-auc:0.749618+0.00291407    test-auc:0.738383+0.0132849[23]    train-auc:0.750261+0.0030989    test-auc:0.739096+0.0125292[24]    train-auc:0.750758+0.00331821    test-auc:0.739578+0.0117813[25]    train-auc:0.751382+0.00282425    test-auc:0.739345+0.0120623[26]    train-auc:0.752415+0.00346696    test-auc:0.740137+0.010798[27]    train-auc:0.75338+0.00363762    test-auc:0.740929+0.0106986[28]    train-auc:0.754266+0.00323947    test-auc:0.741637+0.0107274[29]    train-auc:0.754915+0.00302772    test-auc:0.741759+0.0112564[30]    train-auc:0.755914+0.0028627    test-auc:0.742037+0.0113041[31]    train-auc:0.756318+0.0033501    test-auc:0.7425+0.0109369[32]    train-auc:0.756882+0.00331093    test-auc:0.74231+0.0109721[33]    train-auc:0.757279+0.00329185    test-auc:0.742169+0.011238[34]    train-auc:0.757727+0.00332192    test-auc:0.74215+0.0115881[35]    train-auc:0.758015+0.00318842    test-auc:0.742415+0.0118561[36]    train-auc:0.75832+0.00301207    test-auc:0.742148+0.0119087[37]    train-auc:0.758837+0.00294787    test-auc:0.742522+0.0116916[38]    train-auc:0.759134+0.00323002    test-auc:0.742998+0.0112852[39]    train-auc:0.759435+0.00314337    test-auc:0.743453+0.0113958[40]    train-auc:0.759625+0.00329416    test-auc:0.743103+0.0111658[41]    train-auc:0.760182+0.00309855    test-auc:0.743537+0.0108819[42]    train-auc:0.760478+0.00316004    test-auc:0.743372+0.011017[43]    train-auc:0.760531+0.00324614    test-auc:0.743372+0.0112937[44]    train-auc:0.760811+0.00309214    test-auc:0.743344+0.0112747[45]    train-auc:0.761199+0.00302771    test-auc:0.743541+0.0114938[46]    train-auc:0.761436+0.00302944    test-auc:0.743817+0.0118088[47]    train-auc:0.761543+0.00314059    test-auc:0.744085+0.0117599[48]    train-auc:0.761755+0.00306749    test-auc:0.744454+0.0118087[49]    train-auc:0.761926+0.00314977    test-auc:0.744501+0.0118104[50]    train-auc:0.762055+0.00309526    test-auc:0.744369+0.0119067[51]    train-auc:0.762271+0.00292601    test-auc:0.744522+0.0120931[52]    train-auc:0.762409+0.00301158    test-auc:0.744722+0.0119359[53]    train-auc:0.762461+0.00298882    test-auc:0.744397+0.0117605[54]    train-auc:0.762592+0.00298153    test-auc:0.744378+0.0119351[55]    train-auc:0.762895+0.00297585    test-auc:0.744472+0.0118786[56]    train-auc:0.762913+0.00296567    test-auc:0.744442+0.0117821[57]    train-auc:0.763132+0.00301844    test-auc:0.744228+0.0117882[58]    train-auc:0.763194+0.0029937    test-auc:0.744274+0.0116317[59]    train-auc:0.763377+0.00302593    test-auc:0.744082+0.011701[60]    train-auc:0.763542+0.00298474    test-auc:0.743952+0.0117522[61]    train-auc:0.763706+0.00296295    test-auc:0.743824+0.0117634[62]    train-auc:0.763734+0.00293909    test-auc:0.743966+0.0115998[63]    train-auc:0.763867+0.00296588    test-auc:0.743936+0.0116863[64]    train-auc:0.763986+0.0029833    test-auc:0.743937+0.0116513[65]    train-auc:0.764118+0.00302993    test-auc:0.743966+0.0117081[66]    train-auc:0.764343+0.00292955    test-auc:0.743819+0.01163[67]    train-auc:0.76442+0.00289046    test-auc:0.743918+0.0116983[68]    train-auc:0.76458+0.00284802    test-auc:0.744038+0.0113129[69]    train-auc:0.764717+0.00293263    test-auc:0.743734+0.0113893[70]    train-auc:0.764937+0.00289321    test-auc:0.743605+0.0114114[71]    train-auc:0.764969+0.00291843    test-auc:0.743335+0.0114451[72]    train-auc:0.765096+0.00293488    test-auc:0.743135+0.0116176[73]    train-auc:0.765168+0.00292989    test-auc:0.743155+0.0116143[74]    train-auc:0.765326+0.00296368    test-auc:0.743008+0.0114881[75]    train-auc:0.765443+0.00296921    test-auc:0.743122+0.0115193[76]    train-auc:0.765457+0.00295559    test-auc:0.743204+0.011375[77]    train-auc:0.765536+0.00298759    test-auc:0.74318+0.0113059[78]    train-auc:0.765807+0.00298637    test-auc:0.74306+0.0113673[79]    train-auc:0.765864+0.00301058    test-auc:0.743087+0.0114866[80]    train-auc:0.765975+0.00306381    test-auc:0.743178+0.011708[81]    train-auc:0.766011+0.00310261    test-auc:0.743395+0.0116618</code></pre><pre class="line-numbers language-python"><code class="language-python">n_best_trees <span class="token operator">=</span> cv_results<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"best number of trees: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>n_best_trees<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>best number of trees: 53</code></pre><pre class="line-numbers language-python"><code class="language-python">watchlist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>train_matrix<span class="token punctuation">,</span> <span class="token string">'train'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>gbt <span class="token operator">=</span> xgb<span class="token punctuation">.</span>train<span class="token punctuation">(</span>params<span class="token punctuation">,</span> train_matrix<span class="token punctuation">,</span> n_best_trees<span class="token punctuation">,</span>watchlist<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[0]    train-auc:0.702188[1]    train-auc:0.704781[2]    train-auc:0.71018[3]    train-auc:0.714805[4]    train-auc:0.715547[5]    train-auc:0.726005[6]    train-auc:0.725821[7]    train-auc:0.725022[8]    train-auc:0.7335[9]    train-auc:0.735223[10]    train-auc:0.736723[11]    train-auc:0.74205[12]    train-auc:0.742289[13]    train-auc:0.742862[14]    train-auc:0.743885[15]    train-auc:0.743699[16]    train-auc:0.742109[17]    train-auc:0.744295[18]    train-auc:0.746087[19]    train-auc:0.74534[20]    train-auc:0.743896[21]    train-auc:0.74842[22]    train-auc:0.7502[23]    train-auc:0.750863[24]    train-auc:0.750096[25]    train-auc:0.752116[26]    train-auc:0.752202[27]    train-auc:0.752974[28]    train-auc:0.752529[29]    train-auc:0.752424[30]    train-auc:0.753932[31]    train-auc:0.753449[32]    train-auc:0.754669[33]    train-auc:0.755053[34]    train-auc:0.755589[35]    train-auc:0.755971[36]    train-auc:0.757188[37]    train-auc:0.757529[38]    train-auc:0.757631[39]    train-auc:0.757584[40]    train-auc:0.757568[41]    train-auc:0.758382[42]    train-auc:0.758155[43]    train-auc:0.758213[44]    train-auc:0.758067[45]    train-auc:0.7586[46]    train-auc:0.758911[47]    train-auc:0.759027[48]    train-auc:0.759092[49]    train-auc:0.759198[50]    train-auc:0.759484[51]    train-auc:0.759869[52]    train-auc:0.760239</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># plot feature importances</span>xgb<span class="token punctuation">.</span>plot_importance<span class="token punctuation">(</span>gbt<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x11ffb4e90&gt;</code></pre><p><img src="7_54_1.png" alt="png"></p><p>above feature importance match the result from <a href="#Explore-the-data">explorary analysis</a>.</p><h3 id="Plot-ROC-curve-and-choose-better-probability-threshold"><a href="#Plot-ROC-curve-and-choose-better-probability-threshold" class="headerlink" title="Plot ROC curve and choose better probability threshold"></a>Plot ROC curve and choose better probability threshold</h3><p><span style="color:orange;font-size:1.5em">since the data is highly imbalanced (positive examples is only 2% of the total examples), if using default probability threshold (0.5), the model just classify every example as negative, so we need to plot the ROC curve and choose a better probability threshold.</span></p><p><span style="color:red;font-weight:bold">But ROC cannot be plot on either training set or test set. </span>so I split the original train set into ‘training’ and ‘validation’ sets, <span style="color:orange;font-weight:bold">re-train on ‘training set’ and plot ROC on ‘validation set’. </span></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span> <span class="token string">"n_best_trees={},xgboost parameters: "</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>n_best_trees<span class="token punctuation">)</span>params<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>n_best_trees=53,xgboost parameters: {&#39;colsample_bytree&#39;: 0.8, &#39;early_stopping_rounds&#39;: 30, &#39;eta&#39;: 0.1, &#39;eval_metric&#39;: &#39;auc&#39;, &#39;max_depth&#39;: 6, &#39;num_rounds&#39;: 300, &#39;objective&#39;: &#39;binary:logistic&#39;, &#39;subsample&#39;: 0.8}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># define a function, avoid pollute the current namespace</span><span class="token keyword">def</span> <span class="token function">validation_roc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Xtrain_only<span class="token punctuation">,</span>Xvalid<span class="token punctuation">,</span>ytrain_only<span class="token punctuation">,</span>yvalid <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>Xtrain<span class="token punctuation">,</span>ytrain<span class="token punctuation">,</span>test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span>random_state<span class="token operator">=</span>seed<span class="token punctuation">)</span>    train_only_matrix <span class="token operator">=</span> xgb<span class="token punctuation">.</span>DMatrix<span class="token punctuation">(</span>Xtrain_only<span class="token punctuation">,</span>ytrain_only<span class="token punctuation">)</span>    valid_matrix <span class="token operator">=</span> xgb<span class="token punctuation">.</span>DMatrix<span class="token punctuation">(</span>Xvalid<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># retrain on training set</span>    gbt_train_only <span class="token operator">=</span> xgb<span class="token punctuation">.</span>train<span class="token punctuation">(</span>params<span class="token punctuation">,</span> train_only_matrix<span class="token punctuation">,</span> n_best_trees<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># predict on validation set</span>    yvalid_probas <span class="token operator">=</span> gbt_train_only<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>valid_matrix<span class="token punctuation">,</span> ntree_limit<span class="token operator">=</span>n_best_trees<span class="token punctuation">)</span>    d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    d<span class="token punctuation">[</span><span class="token string">'FPR'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span><span class="token string">'TPR'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span><span class="token string">'Threshold'</span><span class="token punctuation">]</span> <span class="token operator">=</span> roc_curve<span class="token punctuation">(</span>yvalid<span class="token punctuation">,</span>yvalid_probas<span class="token punctuation">)</span>    <span class="token keyword">return</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">roc_results <span class="token operator">=</span> validation_roc<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">_ <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>roc_results<span class="token punctuation">.</span>FPR<span class="token punctuation">,</span>roc_results<span class="token punctuation">.</span>TPR<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"FPR"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'TPR'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.text.Text at 0x11abea2d0&gt;</code></pre><p><img src="7_60_1.png" alt="png"></p><p>according to above ROC curve and make a compromise between Precision and Recall, <span style="color:orange;font-weight:bold;font-size:1.5em">I decide to choose a threshold which makes TPR at about 0.6, then FPR will be about 0.3, which I think is acceptable.</span></p><pre class="line-numbers language-python"><code class="language-python">roc_results<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>roc_results<span class="token punctuation">.</span>TPR <span class="token operator">></span> <span class="token number">0.6</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>roc_results<span class="token punctuation">.</span>TPR <span class="token operator">&lt;</span> <span class="token number">0.65</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>FPR</th>      <th>TPR</th>      <th>Threshold</th>    </tr>  </thead>  <tbody>    <tr>      <th>192</th>      <td>0.274192</td>      <td>0.613861</td>      <td>0.030303</td>    </tr>    <tr>      <th>193</th>      <td>0.274729</td>      <td>0.613861</td>      <td>0.030261</td>    </tr>    <tr>      <th>194</th>      <td>0.274960</td>      <td>0.613861</td>      <td>0.030247</td>    </tr>    <tr>      <th>195</th>      <td>0.284245</td>      <td>0.617162</td>      <td>0.030224</td>    </tr>    <tr>      <th>196</th>      <td>0.288389</td>      <td>0.620462</td>      <td>0.029755</td>    </tr>    <tr>      <th>197</th>      <td>0.288619</td>      <td>0.620462</td>      <td>0.029587</td>    </tr>    <tr>      <th>198</th>      <td>0.290998</td>      <td>0.623762</td>      <td>0.029482</td>    </tr>    <tr>      <th>199</th>      <td>0.291229</td>      <td>0.623762</td>      <td>0.029463</td>    </tr>    <tr>      <th>200</th>      <td>0.291996</td>      <td>0.630363</td>      <td>0.029195</td>    </tr>    <tr>      <th>201</th>      <td>0.292380</td>      <td>0.630363</td>      <td>0.029118</td>    </tr>    <tr>      <th>202</th>      <td>0.294298</td>      <td>0.630363</td>      <td>0.028849</td>    </tr>    <tr>      <th>203</th>      <td>0.295296</td>      <td>0.630363</td>      <td>0.028624</td>    </tr>    <tr>      <th>204</th>      <td>0.296217</td>      <td>0.630363</td>      <td>0.028613</td>    </tr>    <tr>      <th>205</th>      <td>0.302663</td>      <td>0.630363</td>      <td>0.028445</td>    </tr>    <tr>      <th>206</th>      <td>0.303661</td>      <td>0.630363</td>      <td>0.028363</td>    </tr>    <tr>      <th>207</th>      <td>0.303737</td>      <td>0.630363</td>      <td>0.028344</td>    </tr>    <tr>      <th>208</th>      <td>0.304044</td>      <td>0.630363</td>      <td>0.028225</td>    </tr>    <tr>      <th>209</th>      <td>0.313944</td>      <td>0.643564</td>      <td>0.028042</td>    </tr>    <tr>      <th>210</th>      <td>0.314020</td>      <td>0.646865</td>      <td>0.028016</td>    </tr>    <tr>      <th>211</th>      <td>0.315709</td>      <td>0.646865</td>      <td>0.027908</td>    </tr>    <tr>      <th>212</th>      <td>0.316016</td>      <td>0.646865</td>      <td>0.027625</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># choose a threshold based on ROC</span><span class="token comment" spellcheck="true"># FPR=0.292380, TPR=0.630363, Threshold=0.029118</span>pos_prob_threshold <span class="token operator">=</span> <span class="token number">0.029118</span><span class="token keyword">def</span> <span class="token function">adjust_predict</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">:</span>    y_probas <span class="token operator">=</span> gbt<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> ntree_limit<span class="token operator">=</span>n_best_trees<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>y_probas <span class="token operator">></span> pos_prob_threshold<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">ytrain_pred <span class="token operator">=</span> adjust_predict<span class="token punctuation">(</span>train_matrix<span class="token punctuation">)</span><span class="token keyword">print</span> classification_report<span class="token punctuation">(</span>ytrain<span class="token punctuation">,</span>ytrain_pred<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>             precision    recall  f1-score   support          0       0.99      0.72      0.83     65265          1       0.05      0.65      0.09      1402avg / total       0.97      0.71      0.82     66667</code></pre><p>​    </p><pre class="line-numbers language-python"><code class="language-python">ytest_pred <span class="token operator">=</span> adjust_predict<span class="token punctuation">(</span>test_matrix<span class="token punctuation">)</span><span class="token keyword">print</span> classification_report<span class="token punctuation">(</span>ytest<span class="token punctuation">,</span>ytest_pred<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>             precision    recall  f1-score   support          0       0.99      0.71      0.83     32616          1       0.04      0.60      0.08       717avg / total       0.97      0.71      0.81     33333</code></pre><p>​    </p><p><a id="test-precision-recall"></a><span style="color:orange;font-weight:bold;font-size:1.5em">more accurate Precision and Recall</span></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span> <span class="token string">"test precision: {:.2f}%"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>precision_score<span class="token punctuation">(</span>ytest<span class="token punctuation">,</span>ytest_pred<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"test recall: {:.2f}%"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>recall_score<span class="token punctuation">(</span>ytest<span class="token punctuation">,</span>ytest_pred<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>test precision: 4.35%test recall: 60.11%</code></pre><pre class="line-numbers language-python"><code class="language-python">gbt<span class="token punctuation">.</span>save_model<span class="token punctuation">(</span><span class="token string">'gbt.model'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Answer-question-2-and-question-3’s-first-part"><a href="#Answer-question-2-and-question-3’s-first-part" class="headerlink" title="Answer question 2 and question 3’s first part"></a>Answer question 2 and question 3’s first part</h2><ul><li><span style="color:blue;font-weight:bold">The VP of marketing thinks that it is stupid to send emails to a random subset and in a random way. Based on all the information you have about the emails that were sent, can you build a model to optimize in future email campaigns to maximize the probability of users clicking on the link inside the email?</span></li><li><span style="color:blue;font-weight:bold">By how much do you think your model would improve click through rate ( deﬁned as # of users who click on the link / total users who received the email). How would you test that?</span></li></ul><p>I have build a Gradient Boosting Tree model in previous section which predicts whether a user will click the link or not. Then the new email campaign strategy will be: <span style="color:orange;font-weight:bold;font-size:1.5em">only send email to users which my GBM model predicts positive.</span></p><pre class="line-numbers language-python"><code class="language-python">n_emails_old_sent <span class="token operator">=</span> ytest_pred<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>n_emails_new_sent <span class="token operator">=</span> ytest_pred<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span>saving_percentage <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">-</span> n_emails_new_sent <span class="token operator">*</span> <span class="token number">100.0</span><span class="token operator">/</span>n_emails_old_sentpd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'#emails sent in old way'</span><span class="token punctuation">:</span> n_emails_old_sent<span class="token punctuation">,</span>           <span class="token string">'#emails sent in new way'</span><span class="token punctuation">:</span> n_emails_new_sent<span class="token punctuation">,</span>           <span class="token string">'saving percentage (%)'</span><span class="token punctuation">:</span> saving_percentage<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>#emails sent in new way     9904.000000#emails sent in old way    33333.000000saving percentage (%)         70.287703dtype: float64</code></pre><p>according to its <a href="#test-precision-recall">predictive result on test set</a> </p><ul><li><span style="color:orange;">my model only need to send 30% of the old email amount, saving 70% amount.</span></li><li><span style="color:orange;">my model will cover 60% of valued users which will click the link. </span></li><li><span style="color:orange;">4.35% of the receiver will open email and click the link. </span> compare with <a href="#Answer-question-1">old strategy</a>, whose click rate is <em><em> 2.12% </em></em>, <span style="color:red;">my new strategy can double the click rate</span>.</li></ul><h2 id="Answer-question-3’s-second-part"><a href="#Answer-question-3’s-second-part" class="headerlink" title="Answer question 3’s second part"></a>Answer question 3’s second part</h2><p><span style="color:blue;font-weight:bold">By how much do you think your model would improve click through rate ( deﬁned as # of users who click on the link / total users who received the email). How would you test that?</span></p><p>To test my conclusion, we need to perform a A/B test:</p><ol><li>randomly assign users to two groups, Control group and Experiment group.</li><li>in Control group, still use the old email-campaign strategy, i.e., just send emails to all users in Control group.</li><li>in Experiment group, use my model to predict whether the user will click the link or not. and only send emails to those users whose predictive result is positive.</li><li>then we preform a one-tail unpaired t-test to test whether Experiement group’s population proportion is higher than Control group’s population proportion.</li></ol><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Data Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python_Take home challenge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-Funnel Analysis</title>
      <link href="/2018/01/31/6-price-test/"/>
      <url>/2018/01/31/6-price-test/</url>
      
        <content type="html"><![CDATA[<p>Company XYZ sells a software for 39. Since revenue has been ﬂat for some time, the VP of Product has decided to run a test increasing the price. She hopes that this would increase revenue. In the experiment, 66% of the users have seen the old price (39), while a random sample of 33% users a higher price (59).</p><p>The test has been running for some time and the VP of Product is interested in understanding how it went and whether it would make sense to increase the price for all the users.</p><p>Especially he asked you the following questions:</p><ul><li>Should the company sell its software for 39 or 59?</li><li>The VP of Product is interested in having a holistic view into user behavior, especially focusing on actionable insights that might increase conversion rate. What are your main ﬁndings looking at the data?</li><li><strong>[ Bonus ]</strong> The VP of Product feels that the test has been running for too long and he should have been able to get statistically signiﬁcant results in a shorter time. Do you agree with her intuition? After how many days you would have stopped the test? Please, explain why.</li></ul><h1 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h1><ul><li><a href="#Load-the-data">Load the data</a></li><li><a href="#Check-whether-test-and-control-group-is-randomly-splitted?">Check whether test/control group is randomly splitted?</a></li><li><a href="#Answer-question-1">Answer question 1</a></li><li><a href="#Answer-question-2">Answer question 2</a><ul><li><a href="#Chi-Square-test">Chi-Square test</a></li><li><a href="#How-price-affects-conversion?">How price affects conversion?</a></li><li><a href="#How-OS-affects-conversion?">How OS affects conversion?</a></li><li><a href="#Model-by-Decision-Tree">Model by Decision Tree</a></li><li><a href="#Actionable-Insights"><strong>Actionable-Insights</strong></a></li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> scipy<span class="token punctuation">.</span>stats <span class="token keyword">as</span> ss<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoder<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_selection <span class="token keyword">import</span> chi2<span class="token punctuation">,</span>f_classif<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifier<span class="token punctuation">,</span>export_graphviz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>style<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">'ggplot'</span><span class="token punctuation">)</span><span class="token operator">%</span>matplotlib inlineseed <span class="token operator">=</span> <span class="token number">999</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Load-the-data"><a href="#Load-the-data" class="headerlink" title="Load the data"></a>Load the data</h2><pre class="line-numbers language-python"><code class="language-python">testdata <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"test_results.csv"</span><span class="token punctuation">,</span>index_col<span class="token operator">=</span><span class="token string">"user_id"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># users contains [id,city,country,lat,long]</span><span class="token comment" spellcheck="true"># and all 'country' column is USA</span><span class="token comment" spellcheck="true"># I don't think users can provide useful information to the problems, so just ignore user_table.csv</span><span class="token comment" spellcheck="true"># users = pd.read_csv("user_table.csv")</span><span class="token comment" spellcheck="true"># some time has 60 seconds/minute, which cannot be processed by to_datetime</span><span class="token comment" spellcheck="true"># if given more time, I will fix this incorrect format</span><span class="token comment" spellcheck="true"># testdata["timestamp"] = pd.to_datetime(testdata.timestamp)</span><span class="token comment" spellcheck="true"># rename to short names, make it easier to display</span>testdata<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'operative_system'</span><span class="token punctuation">:</span><span class="token string">'OS'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">testdata<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>timestamp</th>      <th>source</th>      <th>device</th>      <th>OS</th>      <th>test</th>      <th>price</th>      <th>converted</th>    </tr>    <tr>      <th>user_id</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>604839</th>      <td>2015-05-08 03:38:34</td>      <td>ads_facebook</td>      <td>mobile</td>      <td>iOS</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>624057</th>      <td>2015-05-10 21:08:46</td>      <td>seo-google</td>      <td>mobile</td>      <td>android</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>317970</th>      <td>2015-04-04 15:01:23</td>      <td>ads-bing</td>      <td>mobile</td>      <td>android</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>685636</th>      <td>2015-05-07 07:26:01</td>      <td>direct_traffic</td>      <td>mobile</td>      <td>iOS</td>      <td>1</td>      <td>59</td>      <td>0</td>    </tr>    <tr>      <th>820854</th>      <td>2015-05-24 11:04:40</td>      <td>ads_facebook</td>      <td>web</td>      <td>mac</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>  </tbody></table></div><h2 id="Check-whether-test-and-control-group-is-randomly-splitted"><a href="#Check-whether-test-and-control-group-is-randomly-splitted" class="headerlink" title="Check whether test and control group is randomly splitted?"></a>Check whether test and control group is randomly splitted?</h2><pre class="line-numbers language-python"><code class="language-python">X <span class="token operator">=</span> testdata<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">del</span> X<span class="token punctuation">[</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># to use sklearn to check feature importance, we must convert string values to numbers</span>src_label_encoder <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>dev_label_encoder <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>os_label_encoder <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>X<span class="token punctuation">[</span><span class="token string">"source"</span><span class="token punctuation">]</span> <span class="token operator">=</span> src_label_encoder<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>testdata<span class="token punctuation">.</span>source<span class="token punctuation">)</span>X<span class="token punctuation">[</span><span class="token string">"device"</span><span class="token punctuation">]</span> <span class="token operator">=</span> dev_label_encoder<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>testdata<span class="token punctuation">.</span>device<span class="token punctuation">)</span>X<span class="token punctuation">[</span><span class="token string">"OS"</span><span class="token punctuation">]</span> <span class="token operator">=</span> os_label_encoder<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>testdata<span class="token punctuation">.</span>OS<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">X<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>source</th>      <th>device</th>      <th>OS</th>      <th>test</th>      <th>price</th>      <th>converted</th>    </tr>    <tr>      <th>user_id</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>604839</th>      <td>3</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>624057</th>      <td>8</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>317970</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>685636</th>      <td>5</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>59</td>      <td>0</td>    </tr>    <tr>      <th>820854</th>      <td>3</td>      <td>1</td>      <td>3</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>  </tbody></table></div><p>run <em><em> Chi-Square test </em></em> to see which factor impact the splitting between test/control group</p><pre class="line-numbers language-python"><code class="language-python">colnames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"source"</span><span class="token punctuation">,</span><span class="token string">"device"</span><span class="token punctuation">,</span><span class="token string">"OS"</span><span class="token punctuation">]</span>ch2values<span class="token punctuation">,</span>pvalues <span class="token operator">=</span> chi2<span class="token punctuation">(</span>X<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>colnames<span class="token punctuation">]</span><span class="token punctuation">,</span>X<span class="token punctuation">[</span><span class="token string">"test"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'chi2_value'</span><span class="token punctuation">:</span>ch2values<span class="token punctuation">,</span><span class="token string">'pvalue'</span><span class="token punctuation">:</span>pvalues<span class="token punctuation">}</span><span class="token punctuation">,</span>index <span class="token operator">=</span> colnames<span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'pvalue'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>chi2_value</th>      <th>pvalue</th>    </tr>  </thead>  <tbody>    <tr>      <th>OS</th>      <td>83.085986</td>      <td>7.856065e-20</td>    </tr>    <tr>      <th>device</th>      <td>44.366335</td>      <td>2.723301e-11</td>    </tr>    <tr>      <th>source</th>      <td>0.924742</td>      <td>3.362329e-01</td>    </tr>  </tbody></table></div><p>from above result, we know that the splitting between test/control groups aren’t random. OS and device has great impact on the split.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">calc_ratios</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    d <span class="token operator">=</span> s<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    d<span class="token punctuation">[</span><span class="token string">'total'</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> dtest_ctrl_by_os <span class="token operator">=</span> testdata<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'OS'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>calc_ratios<span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span>test_ctrl_by_os<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>total</th>    </tr>    <tr>      <th>OS</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>android</th>      <td>0.643358</td>      <td>0.356642</td>      <td>74935.0</td>    </tr>    <tr>      <th>iOS</th>      <td>0.647934</td>      <td>0.352066</td>      <td>95465.0</td>    </tr>    <tr>      <th>linux</th>      <td>0.533736</td>      <td>0.466264</td>      <td>4135.0</td>    </tr>    <tr>      <th>mac</th>      <td>0.652422</td>      <td>0.347578</td>      <td>25085.0</td>    </tr>    <tr>      <th>other</th>      <td>0.647865</td>      <td>0.352135</td>      <td>16204.0</td>    </tr>    <tr>      <th>windows</th>      <td>0.629764</td>      <td>0.370236</td>      <td>100976.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python">test_ctrl_by_os<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1198e9e10&gt;</code></pre><p><img src="6_14_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">os_by_test_ctrl <span class="token operator">=</span> testdata<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'OS'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span>os_by_test_ctrl <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>windows</th>      <th>iOS</th>      <th>android</th>      <th>mac</th>      <th>other</th>      <th>linux</th>    </tr>    <tr>      <th>test</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.313678</td>      <td>0.305115</td>      <td>0.237807</td>      <td>0.080729</td>      <td>0.051784</td>      <td>0.010887</td>    </tr>    <tr>      <th>1</th>      <td>0.327729</td>      <td>0.294636</td>      <td>0.234280</td>      <td>0.076434</td>      <td>0.050021</td>      <td>0.016901</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python">os_by_test_ctrl<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x119e8f090&gt;</code></pre><p><img src="6_16_1.png" alt="png"></p><p>we can see that <span style="color:red;font-weight:bold">OS distribution in test/control groups are very different</span>.</p><p>the experiment claim that ‘66% of the users have seen the old price (39), while a random sample of 33% users a higher price (59).’, but <a id="linux_imbalance"></a><span style="color:red;font-weight:bold">users from Linux don’t obey such rule, but 53% go to control group, 47% go to test group</span>.</p><h2 id="Answer-question-1"><a href="#Answer-question-1" class="headerlink" title="Answer question 1"></a>Answer question 1</h2><p>Should the company sell its software for 39 or 59?</p><pre class="line-numbers language-python"><code class="language-python">revenues <span class="token operator">=</span> testdata<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> df<span class="token punctuation">:</span> df<span class="token punctuation">.</span>price <span class="token operator">*</span> df<span class="token punctuation">.</span>converted<span class="token punctuation">)</span>ctrl_revenues <span class="token operator">=</span> revenues<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>test_revenues <span class="token operator">=</span> revenues<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">group_statistics</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'n_users'</span><span class="token punctuation">:</span> df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token string">'convert_rate'</span><span class="token punctuation">:</span> df<span class="token punctuation">.</span>converted<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                       <span class="token string">'mean_revenue'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>df<span class="token punctuation">.</span>price <span class="token operator">*</span> df<span class="token punctuation">.</span>converted<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>testdata<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>group_statistics<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>convert_rate</th>      <th>mean_revenue</th>      <th>n_users</th>    </tr>    <tr>      <th>test</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.019904</td>      <td>0.776734</td>      <td>202727.0</td>    </tr>    <tr>      <th>1</th>      <td>0.015543</td>      <td>0.916843</td>      <td>114073.0</td>    </tr>  </tbody></table></div><p>we are going to perform a t-test to test whether the test group’s average revenue is higher than control group’s average revenue</p><ul><li>H0: test group’s average revenue equal to control group’s average revenue</li><li>HA: test group’s average revenue is higher than control group’s average revenue</li></ul><pre class="line-numbers language-python"><code class="language-python">ttest_result <span class="token operator">=</span> ss<span class="token punctuation">.</span>ttest_ind<span class="token punctuation">(</span>test_revenues<span class="token punctuation">,</span>ctrl_revenues<span class="token punctuation">,</span>equal_var<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ttest_ind is a two tailed</span><span class="token comment" spellcheck="true"># since our HA is test_mean > ctrl_mean, so we need to divide by 2</span>ttest_result<span class="token punctuation">.</span>pvalue<span class="token operator">/</span><span class="token number">2</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>7.7037493023391909e-09</code></pre><p>since the p-value is much smaller than 0.05 threshold, so we reject H0, and accept HA, that is, test group’s average revenue is significantly higher than control group’s average revenue.</p><p>but due to <a href="#linux_imbalance">OS distribution aren’t the same between test/control groups</a>, price isn’t the only difference between test/control groups, so we cannot contribute the increase in average revenue to price.</p><p>the experiment design fails, I cannot answer decide whether we can sell software to all users in 59 dollars. I suggest </p><ol><li>find the reason why linux users have different representation ratio than other OS.</li><li>then run the experiment again, make sure price is the only difference between test and control group</li><li>then run t-test again, to see whether the average revenue is significantly improved.</li><li>then I can draw the conclusion.</li></ol><h2 id="Answer-question-2"><a href="#Answer-question-2" class="headerlink" title="Answer question 2"></a>Answer question 2</h2><p>The VP of Product is interested in having a holistic view into user behavior, especially focusing on actionable insights that might increase conversion rate. What are your main ﬁndings looking at the data?</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># X is the data after being transformed by LabelEncoder</span>X<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># glance the data</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>source</th>      <th>device</th>      <th>OS</th>      <th>test</th>      <th>price</th>      <th>converted</th>    </tr>    <tr>      <th>user_id</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>17427</th>      <td>3</td>      <td>1</td>      <td>5</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>687787</th>      <td>5</td>      <td>1</td>      <td>5</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>618863</th>      <td>1</td>      <td>1</td>      <td>3</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>154636</th>      <td>6</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>832372</th>      <td>3</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>59</td>      <td>0</td>    </tr>  </tbody></table></div><h3 id="Chi-Square-test"><a href="#Chi-Square-test" class="headerlink" title="Chi-Square test"></a>Chi-Square test</h3><p>I first run <em><em> Chi-Square test </em></em> to see which feature greatly impact converted or not</p><pre class="line-numbers language-python"><code class="language-python">colnames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"source"</span><span class="token punctuation">,</span><span class="token string">"device"</span><span class="token punctuation">,</span><span class="token string">"OS"</span><span class="token punctuation">,</span><span class="token string">'price'</span><span class="token punctuation">]</span>ch2values<span class="token punctuation">,</span>pvalues <span class="token operator">=</span> chi2<span class="token punctuation">(</span>X<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>colnames<span class="token punctuation">]</span><span class="token punctuation">,</span>X<span class="token punctuation">[</span><span class="token string">"converted"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'chi2_value'</span><span class="token punctuation">:</span>ch2values<span class="token punctuation">,</span><span class="token string">'pvalue'</span><span class="token punctuation">:</span>pvalues<span class="token punctuation">}</span><span class="token punctuation">,</span>index <span class="token operator">=</span> colnames<span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'pvalue'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>chi2_value</th>      <th>pvalue</th>    </tr>  </thead>  <tbody>    <tr>      <th>price</th>      <td>150.992849</td>      <td>1.051844e-34</td>    </tr>    <tr>      <th>OS</th>      <td>7.642955</td>      <td>5.699447e-03</td>    </tr>    <tr>      <th>source</th>      <td>2.373391</td>      <td>1.234187e-01</td>    </tr>    <tr>      <th>device</th>      <td>0.729490</td>      <td>3.930485e-01</td>    </tr>  </tbody></table></div><p>Chi-Square test tells us, </p><ul><li><span style="color:orange;font-weight:bold;font-size:1.2em">Price and OS are two main factor which impact converted or not</span>. </li><li><span style="color:orange;font-weight:bold;font-size:1.2em">Source and Device don’t impact conversion rate that much.</span></li></ul><h3 id="How-price-affects-conversion"><a href="#How-price-affects-conversion" class="headerlink" title="How price affects conversion?"></a>How price affects conversion?</h3><pre class="line-numbers language-python"><code class="language-python">converted_by_price<span class="token operator">=</span> testdata<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'converted'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span>converted_by_price<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>    </tr>    <tr>      <th>price</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>39</th>      <td>0.980111</td>      <td>0.019889</td>    </tr>    <tr>      <th>59</th>      <td>0.984430</td>      <td>0.015570</td>    </tr>  </tbody></table></div><p><span style="color:orange;font-weight:bold;font-size:1.2em">Users see 59 dollar has lower conversion rate than users see 39 dollars.</span></p><h3 id="How-OS-affects-conversion"><a href="#How-OS-affects-conversion" class="headerlink" title="How OS affects conversion?"></a>How OS affects conversion?</h3><pre class="line-numbers language-python"><code class="language-python">converted_by_os <span class="token operator">=</span> testdata<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">"OS"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'converted'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span>converted_by_os<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>    </tr>    <tr>      <th>OS</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>mac</th>      <td>0.976002</td>      <td>0.023998</td>    </tr>    <tr>      <th>iOS</th>      <td>0.977678</td>      <td>0.022322</td>    </tr>    <tr>      <th>windows</th>      <td>0.983045</td>      <td>0.016955</td>    </tr>    <tr>      <th>android</th>      <td>0.985067</td>      <td>0.014933</td>    </tr>    <tr>      <th>other</th>      <td>0.987040</td>      <td>0.012960</td>    </tr>    <tr>      <th>linux</th>      <td>0.991778</td>      <td>0.008222</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python">os_by_converted <span class="token operator">=</span> testdata<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">"converted"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'OS'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span>os_by_converted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>android</th>      <th>iOS</th>      <th>linux</th>      <th>mac</th>      <th>other</th>      <th>windows</th>    </tr>    <tr>      <th>converted</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.237357</td>      <td>0.300117</td>      <td>0.013187</td>      <td>0.078725</td>      <td>0.051429</td>      <td>0.319185</td>    </tr>    <tr>      <th>1</th>      <td>0.192665</td>      <td>0.366908</td>      <td>0.005854</td>      <td>0.103650</td>      <td>0.036157</td>      <td>0.294766</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python">os_by_converted<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x11b253f10&gt;</code></pre><p><img src="6_files/6_33_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">os_by_converted<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1250d40d0&gt;</code></pre><p><img src="6_34_1.png" alt="png"></p><p>from above result, we can see</p><ul><li><span style="color:orange;font-size:1.5em">Mac and iOS users have higher conversion rate than users from other OS.</span></li><li><span style="color:orange;font-size:1.5em">Linux users have lower conversion rate than users from other OS.</span></li></ul><h3 id="Model-by-Decision-Tree"><a href="#Model-by-Decision-Tree" class="headerlink" title="Model by Decision Tree"></a>Model by Decision Tree</h3><p>I will build a Decision Tree to get feature importance. Since the question is asking about “actionable insight” other than a model which precisely predict converted or not, so I will just fit a shallow Decision Tree on all the data, without giving out model’s performance on test set.</p><pre class="line-numbers language-python"><code class="language-python">testdata<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># glance the data</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>timestamp</th>      <th>source</th>      <th>device</th>      <th>OS</th>      <th>test</th>      <th>price</th>      <th>converted</th>    </tr>    <tr>      <th>user_id</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>840498</th>      <td>2015-03-23 19:22:17</td>      <td>seo-google</td>      <td>mobile</td>      <td>other</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>839879</th>      <td>2015-05-05 09:59:57</td>      <td>direct_traffic</td>      <td>mobile</td>      <td>iOS</td>      <td>1</td>      <td>59</td>      <td>0</td>    </tr>    <tr>      <th>468013</th>      <td>2015-03-29 23:52:11</td>      <td>direct_traffic</td>      <td>mobile</td>      <td>iOS</td>      <td>1</td>      <td>59</td>      <td>0</td>    </tr>    <tr>      <th>377372</th>      <td>2015-04-05 07:12:46</td>      <td>seo-google</td>      <td>mobile</td>      <td>android</td>      <td>1</td>      <td>59</td>      <td>0</td>    </tr>    <tr>      <th>713838</th>      <td>2015-03-10 13:53:46</td>      <td>seo-other</td>      <td>web</td>      <td>windows</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>140135</th>      <td>2015-03-08 10:12:03</td>      <td>ads_other</td>      <td>mobile</td>      <td>iOS</td>      <td>1</td>      <td>59</td>      <td>0</td>    </tr>    <tr>      <th>198679</th>      <td>2015-04-11 07:05:34</td>      <td>seo-google</td>      <td>web</td>      <td>windows</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>547268</th>      <td>2015-03-14 14:04:22</td>      <td>ads-google</td>      <td>mobile</td>      <td>iOS</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>334905</th>      <td>2015-05-28 10:14:47</td>      <td>ads-bing</td>      <td>web</td>      <td>mac</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>813274</th>      <td>2015-03-09 19:43:28</td>      <td>friend_referral</td>      <td>web</td>      <td>windows</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python">X <span class="token operator">=</span> testdata<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">del</span> X<span class="token punctuation">[</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span><span class="token keyword">del</span> X<span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">X<span class="token punctuation">.</span>source<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>direct_traffic     60357ads-google         59379ads_facebook       53396ads_other          29876seo-google         23175ads-bing           22873seo_facebook       21205friend_referral    20695seo-other           9260ads-yahoo           7583seo-yahoo           6848seo-bing            2153Name: source, dtype: int64</code></pre><pre class="line-numbers language-python"><code class="language-python">X<span class="token punctuation">.</span>device<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>mobile    186471web       130329Name: device, dtype: int64</code></pre><pre class="line-numbers language-python"><code class="language-python">X<span class="token punctuation">.</span>OS<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>windows    100976iOS         95465android     74935mac         25085other       16204linux        4135Name: OS, dtype: int64</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># One-Hot-Encoding on categorical features</span>X <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># a categorical feature of K unique values, only need K-1 vectors</span><span class="token comment" spellcheck="true"># I don't use 'drop_first' parameter in get_dummies, since it cannot specify which level to drop</span><span class="token keyword">del</span> X<span class="token punctuation">[</span><span class="token string">'source_ads_other'</span><span class="token punctuation">]</span><span class="token keyword">del</span> X<span class="token punctuation">[</span><span class="token string">'device_web'</span><span class="token punctuation">]</span><span class="token keyword">del</span> X<span class="token punctuation">[</span><span class="token string">'OS_other'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">X<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># glance the data</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>price</th>      <th>converted</th>      <th>source_ads-bing</th>      <th>source_ads-google</th>      <th>source_ads-yahoo</th>      <th>source_ads_facebook</th>      <th>source_direct_traffic</th>      <th>source_friend_referral</th>      <th>source_seo-bing</th>      <th>source_seo-google</th>      <th>source_seo-other</th>      <th>source_seo-yahoo</th>      <th>source_seo_facebook</th>      <th>device_mobile</th>      <th>OS_android</th>      <th>OS_iOS</th>      <th>OS_linux</th>      <th>OS_mac</th>      <th>OS_windows</th>    </tr>    <tr>      <th>user_id</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>17427</th>      <td>39</td>      <td>0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>    </tr>    <tr>      <th>687787</th>      <td>39</td>      <td>0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>    </tr>    <tr>      <th>618863</th>      <td>39</td>      <td>0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>    </tr>    <tr>      <th>154636</th>      <td>39</td>      <td>0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>    </tr>    <tr>      <th>832372</th>      <td>59</td>      <td>0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python">Xtrain <span class="token operator">=</span> X<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>X<span class="token punctuation">.</span>columns <span class="token operator">!=</span> <span class="token string">'converted'</span><span class="token punctuation">]</span>ytrain <span class="token operator">=</span> X<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token string">'converted'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">Xtrain<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># glance the data</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>price</th>      <th>source_ads-bing</th>      <th>source_ads-google</th>      <th>source_ads-yahoo</th>      <th>source_ads_facebook</th>      <th>source_direct_traffic</th>      <th>source_friend_referral</th>      <th>source_seo-bing</th>      <th>source_seo-google</th>      <th>source_seo-other</th>      <th>source_seo-yahoo</th>      <th>source_seo_facebook</th>      <th>device_mobile</th>      <th>OS_android</th>      <th>OS_iOS</th>      <th>OS_linux</th>      <th>OS_mac</th>      <th>OS_windows</th>    </tr>    <tr>      <th>user_id</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>604839</th>      <td>39</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>    </tr>    <tr>      <th>624057</th>      <td>39</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>    </tr>    <tr>      <th>317970</th>      <td>39</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>    </tr>    <tr>      <th>685636</th>      <td>59</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>    </tr>    <tr>      <th>820854</th>      <td>39</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python">dt <span class="token operator">=</span> DecisionTreeClassifier<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>dt<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>Xtrain<span class="token punctuation">,</span>ytrain<span class="token punctuation">)</span>export_graphviz<span class="token punctuation">(</span>dt<span class="token punctuation">,</span>feature_names<span class="token operator">=</span>Xtrain<span class="token punctuation">.</span>columns<span class="token punctuation">,</span>proportion<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>leaves_parallel<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="tree.png"></p><p>from above tree plot, we can see that, to reach the leaf node with highest conversion rate (the third leaf from right with conversion rate=0.05), the path is:</p><ol><li>source ‘friend_referral’ = true</li><li>price &lt; 49, i.e., price = 39</li><li>OS ‘iOS’= true</li></ol><pre class="line-numbers language-python"><code class="language-python">pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>dt<span class="token punctuation">.</span>feature_importances_<span class="token punctuation">,</span>index <span class="token operator">=</span> Xtrain<span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>source_friend_referral    0.663549OS_iOS                    0.143231OS_mac                    0.107014source_ads-google         0.043922price                     0.022918OS_linux                  0.019366source_ads-bing           0.000000source_ads-yahoo          0.000000source_ads_facebook       0.000000source_direct_traffic     0.000000OS_windows                0.000000source_seo-bing           0.000000source_seo-other          0.000000source_seo-yahoo          0.000000source_seo_facebook       0.000000device_mobile             0.000000OS_android                0.000000source_seo-google         0.000000dtype: float64</code></pre><h3 id="Actionable-Insights"><a href="#Actionable-Insights" class="headerlink" title="Actionable Insights"></a>Actionable Insights</h3><ul><li>friend_referral, Apple user (MAC or iOS), low price are three great positive factors which improve the conversion rate</li><li>if we want to increase the price, which impacts negatively on conversion rate, we must compensate on the other two factors<ul><li>lauch special marketing program targeted to Apple users (MAC or iOS users)</li><li>run some program which rewards user which can invite his/her friend to use our software</li></ul></li><li>Linux users don’t like our software as much as users on other OS. Development team should find out the reason. For example, is there any incompatibility issue on Linux?</li></ul><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Data Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python_Take home challenge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-Employee_rentention</title>
      <link href="/2018/01/24/3-employee-rentention/"/>
      <url>/2018/01/24/3-employee-rentention/</url>
      
        <content type="html"><![CDATA[<p>In this challenge, you have a dataset with info about the employees and have to predict when employees are going to quit by understanding the main drivers of employee churn.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span>  warningswarnings<span class="token punctuation">.</span>simplefilter<span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> graphviz<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> tree<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifier<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoder<span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'employee_retention.csv'</span><span class="token punctuation">,</span> parse_dates<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'join_date'</span><span class="token punctuation">,</span> <span class="token string">'quit_date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>employee_id</th>      <th>company_id</th>      <th>dept</th>      <th>seniority</th>      <th>salary</th>      <th>join_date</th>      <th>quit_date</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>13021.0</td>      <td>7</td>      <td>customer_service</td>      <td>28</td>      <td>89000.0</td>      <td>2014-03-24</td>      <td>2015-10-30</td>    </tr>    <tr>      <th>1</th>      <td>825355.0</td>      <td>7</td>      <td>marketing</td>      <td>20</td>      <td>183000.0</td>      <td>2013-04-29</td>      <td>2014-04-04</td>    </tr>    <tr>      <th>2</th>      <td>927315.0</td>      <td>4</td>      <td>marketing</td>      <td>14</td>      <td>101000.0</td>      <td>2014-10-13</td>      <td>NaT</td>    </tr>    <tr>      <th>3</th>      <td>662910.0</td>      <td>7</td>      <td>customer_service</td>      <td>20</td>      <td>115000.0</td>      <td>2012-05-14</td>      <td>2013-06-07</td>    </tr>    <tr>      <th>4</th>      <td>256971.0</td>      <td>2</td>      <td>data_science</td>      <td>23</td>      <td>276000.0</td>      <td>2011-10-17</td>      <td>2014-08-22</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python">data<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 24702 entries, 0 to 24701Data columns (total 7 columns):employee_id    24702 non-null float64company_id     24702 non-null int64dept           24702 non-null objectseniority      24702 non-null int64salary         24702 non-null float64join_date      24702 non-null datetime64[ns]quit_date      13510 non-null datetime64[ns]dtypes: datetime64[ns](2), float64(2), int64(2), object(1)memory usage: 1.3+ MB</code></pre><pre class="line-numbers language-python"><code class="language-python">data<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>employee_id</th>      <th>company_id</th>      <th>seniority</th>      <th>salary</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>24702.000000</td>      <td>24702.000000</td>      <td>24702.000000</td>      <td>24702.000000</td>    </tr>    <tr>      <th>mean</th>      <td>501604.403530</td>      <td>3.426969</td>      <td>14.127803</td>      <td>138183.345478</td>    </tr>    <tr>      <th>std</th>      <td>288909.026101</td>      <td>2.700011</td>      <td>8.089520</td>      <td>76058.184573</td>    </tr>    <tr>      <th>min</th>      <td>36.000000</td>      <td>1.000000</td>      <td>1.000000</td>      <td>17000.000000</td>    </tr>    <tr>      <th>25%</th>      <td>250133.750000</td>      <td>1.000000</td>      <td>7.000000</td>      <td>79000.000000</td>    </tr>    <tr>      <th>50%</th>      <td>500793.000000</td>      <td>2.000000</td>      <td>14.000000</td>      <td>123000.000000</td>    </tr>    <tr>      <th>75%</th>      <td>753137.250000</td>      <td>5.000000</td>      <td>21.000000</td>      <td>187000.000000</td>    </tr>    <tr>      <th>max</th>      <td>999969.000000</td>      <td>12.000000</td>      <td>99.000000</td>      <td>408000.000000</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Null information</span>data<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>employee_id        0company_id         0dept               0seniority          0salary             0join_date          0quit_date      11192dtype: int64</code></pre><h1 id="Create-Table-for-day-employee-headcount-and-company-id"><a href="#Create-Table-for-day-employee-headcount-and-company-id" class="headerlink" title="Create Table for day, employee_headcount, and company_id"></a>Create Table for <code>day</code>, <code>employee_headcount</code>, and <code>company_id</code></h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define useful information</span>unique_date <span class="token operator">=</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'2011-01-24'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'2015-12-13'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span>unique_company <span class="token operator">=</span> sorted<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'company_id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">day <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>company <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>headcount <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Loop through date and company id</span><span class="token keyword">for</span> date <span class="token keyword">in</span> unique_date<span class="token punctuation">:</span>    <span class="token keyword">for</span> idx <span class="token keyword">in</span> unique_company<span class="token punctuation">:</span>        total_join <span class="token operator">=</span> len<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'join_date'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> date<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'company_id'</span><span class="token punctuation">]</span> <span class="token operator">==</span> idx<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        total_quit <span class="token operator">=</span> len<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'quit_date'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> date<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'company_id'</span><span class="token punctuation">]</span> <span class="token operator">==</span> idx<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        day<span class="token punctuation">.</span>append<span class="token punctuation">(</span>date<span class="token punctuation">)</span>        company<span class="token punctuation">.</span>append<span class="token punctuation">(</span>idx<span class="token punctuation">)</span>        headcount<span class="token punctuation">.</span>append<span class="token punctuation">(</span>total_join <span class="token operator">-</span> total_quit<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Create table for day, employee_headcount, company_id</span>table <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'day'</span><span class="token punctuation">:</span> day<span class="token punctuation">,</span> <span class="token string">'company_id'</span><span class="token punctuation">:</span> company<span class="token punctuation">,</span> <span class="token string">'employee_headcount'</span><span class="token punctuation">:</span> headcount<span class="token punctuation">}</span><span class="token punctuation">,</span>                      columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'day'</span><span class="token punctuation">,</span> <span class="token string">'company_id'</span><span class="token punctuation">,</span> <span class="token string">'employee_headcount'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">table<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>day</th>      <th>company_id</th>      <th>employee_headcount</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2011-01-24</td>      <td>1</td>      <td>25</td>    </tr>    <tr>      <th>1</th>      <td>2011-01-24</td>      <td>2</td>      <td>17</td>    </tr>    <tr>      <th>2</th>      <td>2011-01-24</td>      <td>3</td>      <td>9</td>    </tr>    <tr>      <th>3</th>      <td>2011-01-24</td>      <td>4</td>      <td>12</td>    </tr>    <tr>      <th>4</th>      <td>2011-01-24</td>      <td>5</td>      <td>5</td>    </tr>  </tbody></table></div><h1 id="Employee-Churn-Analysis"><a href="#Employee-Churn-Analysis" class="headerlink" title="Employee Churn Analysis"></a>Employee Churn Analysis</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Separate stay and quit data</span>quit_data <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token operator">~</span>data<span class="token punctuation">[</span><span class="token string">'quit_date'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>stay_data <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'quit_date'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Feature-Engineering"><a href="#Feature-Engineering" class="headerlink" title="Feature Engineering"></a>Feature Engineering</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Total working days</span>work_days <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>days<span class="token punctuation">,</span> quit_data<span class="token punctuation">[</span><span class="token string">'quit_date'</span><span class="token punctuation">]</span> <span class="token operator">-</span> quit_data<span class="token punctuation">[</span><span class="token string">'join_date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>hist_kws<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'histtype'</span><span class="token punctuation">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'edgecolor'</span><span class="token punctuation">:</span><span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token string">'alpha'</span><span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">}</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>distplot<span class="token punctuation">(</span>work_days<span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> kde<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">,</span> hist_kws<span class="token operator">=</span>hist_kws<span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Histogram of Working Days'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Working Days'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Frequency'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="3_12_0.png" alt="png"></p><p>there are peaks around each employee year anniversary</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Week No. for quiting</span>quit_week <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>month<span class="token punctuation">,</span> quit_data<span class="token punctuation">[</span><span class="token string">'quit_date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>countplot<span class="token punctuation">(</span>quit_week<span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Countplot of Quit Month'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Month'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Frequency'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="3_14_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Week No. for quiting</span>weeks  <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>week<span class="token punctuation">,</span> quit_data<span class="token punctuation">[</span><span class="token string">'quit_date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>hist_kws<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'histtype'</span><span class="token punctuation">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'edgecolor'</span><span class="token punctuation">:</span><span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token string">'alpha'</span><span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">}</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>distplot<span class="token punctuation">(</span>weeks <span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> kde<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">,</span> hist_kws<span class="token operator">=</span>hist_kws<span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Histogram of Quit Weeks'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Quit Weeks'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Frequency'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="3_15_0.png" alt="png"></p><p>And it also peaks around the new year. Makes sense, companies have much more money to hire at the beginning of the year. So our goal becomes to prevent employees to quit within 1 year.</p><p>Now, let’s see if we find the characteristics of the people who quit early. Looking at the histogram of employment_length, it looks like we could define early quitters as those people who quit within 1 yr or so.</p><p>So, let’s create two classes of users : quit within 13 months or not (if they haven’t been in the current company for at least 13 months, we remove them).</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Choose quit data</span>quit_data<span class="token punctuation">[</span><span class="token string">'work_days'</span><span class="token punctuation">]</span> <span class="token operator">=</span> work_daysquit_data<span class="token punctuation">[</span><span class="token string">'quit_week'</span><span class="token punctuation">]</span> <span class="token operator">=</span> quit_weekquit_data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>employee_id</th>      <th>company_id</th>      <th>dept</th>      <th>seniority</th>      <th>salary</th>      <th>join_date</th>      <th>quit_date</th>      <th>work_days</th>      <th>quit_week</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>13021.0</td>      <td>7</td>      <td>customer_service</td>      <td>28</td>      <td>89000.0</td>      <td>2014-03-24</td>      <td>2015-10-30</td>      <td>585</td>      <td>44</td>    </tr>    <tr>      <th>1</th>      <td>825355.0</td>      <td>7</td>      <td>marketing</td>      <td>20</td>      <td>183000.0</td>      <td>2013-04-29</td>      <td>2014-04-04</td>      <td>340</td>      <td>14</td>    </tr>    <tr>      <th>3</th>      <td>662910.0</td>      <td>7</td>      <td>customer_service</td>      <td>20</td>      <td>115000.0</td>      <td>2012-05-14</td>      <td>2013-06-07</td>      <td>389</td>      <td>23</td>    </tr>    <tr>      <th>4</th>      <td>256971.0</td>      <td>2</td>      <td>data_science</td>      <td>23</td>      <td>276000.0</td>      <td>2011-10-17</td>      <td>2014-08-22</td>      <td>1040</td>      <td>34</td>    </tr>    <tr>      <th>5</th>      <td>509529.0</td>      <td>4</td>      <td>data_science</td>      <td>14</td>      <td>165000.0</td>      <td>2012-01-30</td>      <td>2013-08-30</td>      <td>578</td>      <td>35</td>    </tr>  </tbody></table></div><h3 id="Decision-Tree-Model"><a href="#Decision-Tree-Model" class="headerlink" title="Decision Tree Model"></a>Decision Tree Model</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Choose the subset data</span>stop_date <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span><span class="token string">'2015-12-13'</span><span class="token punctuation">)</span> <span class="token operator">-</span> pd<span class="token punctuation">.</span>DateOffset<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">365</span> <span class="token operator">+</span> <span class="token number">31</span><span class="token punctuation">)</span>subset <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'join_date'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> stop_date<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Binary label for early quit (less than 13 months)</span>quit <span class="token operator">=</span> subset<span class="token punctuation">[</span><span class="token string">'quit_date'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>subset<span class="token punctuation">[</span><span class="token string">'quit_date'</span><span class="token punctuation">]</span> <span class="token operator">></span> subset<span class="token punctuation">[</span><span class="token string">'join_date'</span><span class="token punctuation">]</span> <span class="token operator">+</span> pd<span class="token punctuation">.</span>DateOffset<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">396</span><span class="token punctuation">)</span><span class="token punctuation">)</span>subset<span class="token punctuation">[</span><span class="token string">'quit'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> quit<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>int<span class="token punctuation">)</span>subset<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>employee_id</th>      <th>company_id</th>      <th>dept</th>      <th>seniority</th>      <th>salary</th>      <th>join_date</th>      <th>quit_date</th>      <th>quit</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>13021.0</td>      <td>7</td>      <td>customer_service</td>      <td>28</td>      <td>89000.0</td>      <td>2014-03-24</td>      <td>2015-10-30</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>825355.0</td>      <td>7</td>      <td>marketing</td>      <td>20</td>      <td>183000.0</td>      <td>2013-04-29</td>      <td>2014-04-04</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>927315.0</td>      <td>4</td>      <td>marketing</td>      <td>14</td>      <td>101000.0</td>      <td>2014-10-13</td>      <td>NaT</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>662910.0</td>      <td>7</td>      <td>customer_service</td>      <td>20</td>      <td>115000.0</td>      <td>2012-05-14</td>      <td>2013-06-07</td>      <td>1</td>    </tr>    <tr>      <th>4</th>      <td>256971.0</td>      <td>2</td>      <td>data_science</td>      <td>23</td>      <td>276000.0</td>      <td>2011-10-17</td>      <td>2014-08-22</td>      <td>0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Label encoder</span>le <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>train_x <span class="token operator">=</span> subset<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'company_id'</span><span class="token punctuation">,</span> <span class="token string">'seniority'</span><span class="token punctuation">,</span> <span class="token string">'salary'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>train_x<span class="token punctuation">[</span><span class="token string">'dept'</span><span class="token punctuation">]</span> <span class="token operator">=</span> le<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>subset<span class="token punctuation">[</span><span class="token string">'dept'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>train_y <span class="token operator">=</span> subset<span class="token punctuation">[</span><span class="token string">'quit'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuestrain_x<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>company_id</th>      <th>seniority</th>      <th>salary</th>      <th>dept</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>7</td>      <td>28</td>      <td>89000.0</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>7</td>      <td>20</td>      <td>183000.0</td>      <td>4</td>    </tr>    <tr>      <th>2</th>      <td>4</td>      <td>14</td>      <td>101000.0</td>      <td>4</td>    </tr>    <tr>      <th>3</th>      <td>7</td>      <td>20</td>      <td>115000.0</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>2</td>      <td>23</td>      <td>276000.0</td>      <td>1</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Build decision tree</span>clf <span class="token operator">=</span> DecisionTreeClassifier<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> min_samples_leaf<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>clf <span class="token operator">=</span> clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token operator">=</span>train_x<span class="token punctuation">,</span> y<span class="token operator">=</span>train_y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Visualization</span>features <span class="token operator">=</span> list<span class="token punctuation">(</span>train_x<span class="token punctuation">.</span>columns<span class="token punctuation">)</span>targets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Not quit'</span><span class="token punctuation">,</span> <span class="token string">'Quit'</span><span class="token punctuation">]</span>dot_data <span class="token operator">=</span> tree<span class="token punctuation">.</span>export_graphviz<span class="token punctuation">(</span>clf<span class="token punctuation">,</span> out_file<span class="token operator">=</span>None<span class="token punctuation">,</span> feature_names<span class="token operator">=</span>features<span class="token punctuation">,</span> class_names<span class="token operator">=</span>targets<span class="token punctuation">,</span>                                 filled<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> rounded<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> special_characters<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>  graph <span class="token operator">=</span> graphviz<span class="token punctuation">.</span>Source<span class="token punctuation">(</span>dot_data<span class="token punctuation">)</span>graph<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="3_22_0.svg" alt="svg"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Feature importance</span>importance <span class="token operator">=</span> sorted<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>features<span class="token punctuation">,</span> clf<span class="token punctuation">.</span>feature_importances_<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">for</span> feature<span class="token punctuation">,</span> val <span class="token keyword">in</span> importance<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0:10s} | {1:.5f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>feature<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>salary     | 0.97439seniority  | 0.02561company_id | 0.00000dept       | 0.00000</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Visualization</span>hist_kws<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'histtype'</span><span class="token punctuation">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'edgecolor'</span><span class="token punctuation">:</span><span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token string">'alpha'</span><span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">}</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>distplot<span class="token punctuation">(</span>subset<span class="token punctuation">[</span>subset<span class="token punctuation">[</span><span class="token string">'quit'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'salary'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              label<span class="token operator">=</span><span class="token string">'Not Quit'</span><span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">,</span> hist_kws<span class="token operator">=</span>hist_kws<span class="token punctuation">)</span>sns<span class="token punctuation">.</span>distplot<span class="token punctuation">(</span>subset<span class="token punctuation">[</span>subset<span class="token punctuation">[</span><span class="token string">'quit'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'salary'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              label<span class="token operator">=</span><span class="token string">'Quit'</span><span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">,</span> hist_kws<span class="token operator">=</span>hist_kws<span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Salary'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'PDF'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="3_24_0.png" alt="png"></p><p>From this graph, people who make a lot of money and very little are not likely to quit. If salary between 80000 and 200000, the employee has higher probability of being an early quitter.</p><h1 id="Other-Factors"><a href="#Other-Factors" class="headerlink" title="Other Factors"></a>Other Factors</h1><ol><li><p>Given how important is salary, I would definitely love to have as a variable the salary the employee who quit was offered in the next job. Otherwise, things like: promotions or raises received during the employee tenure would be interesting.</p></li><li><p>The major findings are that employees quit at year anniversaries or at the beginning of the year. Both cases make sense. Even if you don’t like your current job, you often stay for 1 yr before quitting + you often get stocks after 1 yr so it makes sense to wait. Also, the beginning of the year is well known to be the best time to change job: companies are hiring more and you often want to stay until end of Dec to get the calendar year bonus.</p></li><li><p>Employees with low and high salaries are less likely to quit. Probably because employees with high salaries are happy there and employees with low salaries are not that marketable, so they have a hard time finding a new job.</p></li></ol><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Data Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python_Take home challenge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-Identifying Fraudulent activities</title>
      <link href="/2018/01/24/4-identifying-fraudulent-activities/"/>
      <url>/2018/01/24/4-identifying-fraudulent-activities/</url>
      
        <content type="html"><![CDATA[<p>The goal of this challenge is to build a machine learning model that predicts the probability that the first transaction of a new user is fraudulent.</p><h1 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h1><ul><li><a href="#Answer-question-1">Answer question 1</a></li><li><a href="#Answer-question-2">Answer question 2</a><ul><li><a href="#Feature-Engineering">Feature Engineering</a></li><li><a href="#Train-the-model">Train the model</a></li><li><a href="#Plot-ROC-and-choose-threshold">Plot ROC and choose threshold</a></li><li><a href="#Impact-of-FP-vs.-FN">Impact of FP vs. FN</a></li></ul></li><li><a href="#Answer-question-3">Answer question 3</a></li><li><a href="#Answer-question-4">Answer question 4</a></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> bisect<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifier<span class="token punctuation">,</span>export_graphviz<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span>  train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score<span class="token punctuation">,</span>classification_report<span class="token punctuation">,</span>roc_curve<span class="token keyword">import</span> xgboost <span class="token keyword">as</span> xgb<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>style<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">'ggplot'</span><span class="token punctuation">)</span><span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span>  warningswarnings<span class="token punctuation">.</span>simplefilter<span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> auc<span class="token punctuation">,</span> roc_curve<span class="token punctuation">,</span> classification_report<span class="token keyword">import</span> h2o<span class="token keyword">from</span> h2o<span class="token punctuation">.</span>frame <span class="token keyword">import</span> H2OFrame<span class="token keyword">from</span> h2o<span class="token punctuation">.</span>estimators<span class="token punctuation">.</span>random_forest <span class="token keyword">import</span> H2ORandomForestEstimator<span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Answer-question-1"><a href="#Answer-question-1" class="headerlink" title="Answer question 1"></a>Answer question 1</h1><p><span style="color:blue">For each user, determine her country based on the numeric IP address.</span></p><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'Fraud_Data.csv'</span><span class="token punctuation">,</span> parse_dates<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'signup_time'</span><span class="token punctuation">,</span> <span class="token string">'purchase_time'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 151112 entries, 0 to 151111Data columns (total 11 columns):user_id           151112 non-null int64signup_time       151112 non-null datetime64[ns]purchase_time     151112 non-null datetime64[ns]purchase_value    151112 non-null int64device_id         151112 non-null objectsource            151112 non-null objectbrowser           151112 non-null objectsex               151112 non-null objectage               151112 non-null int64ip_address        151112 non-null float64class             151112 non-null int64dtypes: datetime64[ns](2), float64(1), int64(4), object(4)memory usage: 12.7+ MB</code></pre><pre class="line-numbers language-python"><code class="language-python">data<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> data<span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nunique<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>151112</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>signup_day</th>      <th>signup_week</th>      <th>purchase_day</th>      <th>purchase_week</th>      <th>purchase_value</th>      <th>source</th>      <th>browser</th>      <th>sex</th>      <th>age</th>      <th>country</th>      <th>time_diff</th>      <th>device_num</th>      <th>ip_num</th>      <th>class</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>9</td>      <td>5</td>      <td>16</td>      <td>34</td>      <td>SEO</td>      <td>Chrome</td>      <td>M</td>      <td>39</td>      <td>Japan</td>      <td>13882</td>      <td>1</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>6</td>      <td>23</td>      <td>0</td>      <td>24</td>      <td>16</td>      <td>Ads</td>      <td>Chrome</td>      <td>F</td>      <td>53</td>      <td>United States</td>      <td>17944</td>      <td>1</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>1</td>      <td>3</td>      <td>1</td>      <td>15</td>      <td>SEO</td>      <td>Opera</td>      <td>M</td>      <td>53</td>      <td>United States</td>      <td>1</td>      <td>12</td>      <td>12</td>      <td>1</td>    </tr>    <tr>      <th>3</th>      <td>1</td>      <td>18</td>      <td>0</td>      <td>19</td>      <td>44</td>      <td>SEO</td>      <td>Safari</td>      <td>M</td>      <td>41</td>      <td>NA</td>      <td>60085</td>      <td>1</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>1</td>      <td>30</td>      <td>2</td>      <td>37</td>      <td>39</td>      <td>Ads</td>      <td>Safari</td>      <td>M</td>      <td>45</td>      <td>United States</td>      <td>41461</td>      <td>1</td>      <td>1</td>      <td>0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python">address2country <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'IpAddress_to_Country.csv'</span><span class="token punctuation">)</span>address2country<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>lower_bound_ip_address</th>      <th>upper_bound_ip_address</th>      <th>country</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>16777216.0</td>      <td>16777471</td>      <td>Australia</td>    </tr>    <tr>      <th>1</th>      <td>16777472.0</td>      <td>16777727</td>      <td>China</td>    </tr>    <tr>      <th>2</th>      <td>16777728.0</td>      <td>16778239</td>      <td>China</td>    </tr>    <tr>      <th>3</th>      <td>16778240.0</td>      <td>16779263</td>      <td>Australia</td>    </tr>    <tr>      <th>4</th>      <td>16779264.0</td>      <td>16781311</td>      <td>China</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python">countries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ip_address <span class="token operator">=</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token string">'ip_address'</span><span class="token punctuation">]</span>    tmp <span class="token operator">=</span> address2country<span class="token punctuation">[</span><span class="token punctuation">(</span>address2country<span class="token punctuation">[</span><span class="token string">'lower_bound_ip_address'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> ip_address<span class="token punctuation">)</span> <span class="token operator">&amp;</span>                          <span class="token punctuation">(</span>address2country<span class="token punctuation">[</span><span class="token string">'upper_bound_ip_address'</span><span class="token punctuation">]</span> <span class="token operator">>=</span> ip_address<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        countries<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        countries<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'NA'</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span> <span class="token operator">=</span> countriesdata<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>signup_time</th>      <th>purchase_time</th>      <th>purchase_value</th>      <th>device_id</th>      <th>source</th>      <th>browser</th>      <th>sex</th>      <th>age</th>      <th>ip_address</th>      <th>class</th>      <th>country</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>22058</td>      <td>2015-02-24 22:55:49</td>      <td>2015-04-18 02:47:11</td>      <td>34</td>      <td>QVPSPJUOCKZAR</td>      <td>SEO</td>      <td>Chrome</td>      <td>M</td>      <td>39</td>      <td>7.327584e+08</td>      <td>0</td>      <td>Japan</td>    </tr>    <tr>      <th>1</th>      <td>333320</td>      <td>2015-06-07 20:39:50</td>      <td>2015-06-08 01:38:54</td>      <td>16</td>      <td>EOGFQPIZPYXFZ</td>      <td>Ads</td>      <td>Chrome</td>      <td>F</td>      <td>53</td>      <td>3.503114e+08</td>      <td>0</td>      <td>United States</td>    </tr>    <tr>      <th>2</th>      <td>1359</td>      <td>2015-01-01 18:52:44</td>      <td>2015-01-01 18:52:45</td>      <td>15</td>      <td>YSSKYOSJHPPLJ</td>      <td>SEO</td>      <td>Opera</td>      <td>M</td>      <td>53</td>      <td>2.621474e+09</td>      <td>1</td>      <td>United States</td>    </tr>    <tr>      <th>3</th>      <td>150084</td>      <td>2015-04-28 21:13:25</td>      <td>2015-05-04 13:54:50</td>      <td>44</td>      <td>ATGTXKYKUDUQN</td>      <td>SEO</td>      <td>Safari</td>      <td>M</td>      <td>41</td>      <td>3.840542e+09</td>      <td>0</td>      <td>NA</td>    </tr>    <tr>      <th>4</th>      <td>221365</td>      <td>2015-07-21 07:09:52</td>      <td>2015-09-09 18:40:53</td>      <td>39</td>      <td>NAUITBZFJKHWW</td>      <td>Ads</td>      <td>Safari</td>      <td>M</td>      <td>45</td>      <td>4.155831e+08</td>      <td>0</td>      <td>United States</td>    </tr>  </tbody></table></div><h1 id="Feature-Engineering"><a href="#Feature-Engineering" class="headerlink" title="Feature Engineering"></a>Feature Engineering</h1><ul><li>Time difference between sign-up time and purchase time</li><li>If the device id is unique or certain users are sharing the same device (many different user ids using the same device could be an indicator of fake accounts)</li><li>Same for the ip address. Many different users having the same ip address could be an indicator of fake accounts</li><li>Usual week of the year and day of the week from time variables</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Get the time difference between purchase time and signup time</span>time_diff <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'purchase_time'</span><span class="token punctuation">]</span> <span class="token operator">-</span> data<span class="token punctuation">[</span><span class="token string">'signup_time'</span><span class="token punctuation">]</span>time_diff <span class="token operator">=</span> time_diff<span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>seconds<span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'time_diff'</span><span class="token punctuation">]</span> <span class="token operator">=</span> time_diffdata<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>signup_time</th>      <th>purchase_time</th>      <th>purchase_value</th>      <th>device_id</th>      <th>source</th>      <th>browser</th>      <th>sex</th>      <th>age</th>      <th>ip_address</th>      <th>class</th>      <th>country</th>      <th>time_diff</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>22058</td>      <td>2015-02-24 22:55:49</td>      <td>2015-04-18 02:47:11</td>      <td>34</td>      <td>QVPSPJUOCKZAR</td>      <td>SEO</td>      <td>Chrome</td>      <td>M</td>      <td>39</td>      <td>7.327584e+08</td>      <td>0</td>      <td>Japan</td>      <td>13882</td>    </tr>    <tr>      <th>1</th>      <td>333320</td>      <td>2015-06-07 20:39:50</td>      <td>2015-06-08 01:38:54</td>      <td>16</td>      <td>EOGFQPIZPYXFZ</td>      <td>Ads</td>      <td>Chrome</td>      <td>F</td>      <td>53</td>      <td>3.503114e+08</td>      <td>0</td>      <td>United States</td>      <td>17944</td>    </tr>    <tr>      <th>2</th>      <td>1359</td>      <td>2015-01-01 18:52:44</td>      <td>2015-01-01 18:52:45</td>      <td>15</td>      <td>YSSKYOSJHPPLJ</td>      <td>SEO</td>      <td>Opera</td>      <td>M</td>      <td>53</td>      <td>2.621474e+09</td>      <td>1</td>      <td>United States</td>      <td>1</td>    </tr>    <tr>      <th>3</th>      <td>150084</td>      <td>2015-04-28 21:13:25</td>      <td>2015-05-04 13:54:50</td>      <td>44</td>      <td>ATGTXKYKUDUQN</td>      <td>SEO</td>      <td>Safari</td>      <td>M</td>      <td>41</td>      <td>3.840542e+09</td>      <td>0</td>      <td>NA</td>      <td>60085</td>    </tr>    <tr>      <th>4</th>      <td>221365</td>      <td>2015-07-21 07:09:52</td>      <td>2015-09-09 18:40:53</td>      <td>39</td>      <td>NAUITBZFJKHWW</td>      <td>Ads</td>      <td>Safari</td>      <td>M</td>      <td>45</td>      <td>4.155831e+08</td>      <td>0</td>      <td>United States</td>      <td>41461</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Check user number for unique devices</span>device_num <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">,</span> <span class="token string">'device_id'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'device_id'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>device_num <span class="token operator">=</span> device_num<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'user_id'</span><span class="token punctuation">:</span> <span class="token string">'device_num'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>device_num<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'device_id'</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>signup_time</th>      <th>purchase_time</th>      <th>purchase_value</th>      <th>device_id</th>      <th>source</th>      <th>browser</th>      <th>sex</th>      <th>age</th>      <th>ip_address</th>      <th>class</th>      <th>country</th>      <th>time_diff</th>      <th>device_num</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>22058</td>      <td>2015-02-24 22:55:49</td>      <td>2015-04-18 02:47:11</td>      <td>34</td>      <td>QVPSPJUOCKZAR</td>      <td>SEO</td>      <td>Chrome</td>      <td>M</td>      <td>39</td>      <td>7.327584e+08</td>      <td>0</td>      <td>Japan</td>      <td>13882</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>333320</td>      <td>2015-06-07 20:39:50</td>      <td>2015-06-08 01:38:54</td>      <td>16</td>      <td>EOGFQPIZPYXFZ</td>      <td>Ads</td>      <td>Chrome</td>      <td>F</td>      <td>53</td>      <td>3.503114e+08</td>      <td>0</td>      <td>United States</td>      <td>17944</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>1359</td>      <td>2015-01-01 18:52:44</td>      <td>2015-01-01 18:52:45</td>      <td>15</td>      <td>YSSKYOSJHPPLJ</td>      <td>SEO</td>      <td>Opera</td>      <td>M</td>      <td>53</td>      <td>2.621474e+09</td>      <td>1</td>      <td>United States</td>      <td>1</td>      <td>12</td>    </tr>    <tr>      <th>3</th>      <td>150084</td>      <td>2015-04-28 21:13:25</td>      <td>2015-05-04 13:54:50</td>      <td>44</td>      <td>ATGTXKYKUDUQN</td>      <td>SEO</td>      <td>Safari</td>      <td>M</td>      <td>41</td>      <td>3.840542e+09</td>      <td>0</td>      <td>NA</td>      <td>60085</td>      <td>1</td>    </tr>    <tr>      <th>4</th>      <td>221365</td>      <td>2015-07-21 07:09:52</td>      <td>2015-09-09 18:40:53</td>      <td>39</td>      <td>NAUITBZFJKHWW</td>      <td>Ads</td>      <td>Safari</td>      <td>M</td>      <td>45</td>      <td>4.155831e+08</td>      <td>0</td>      <td>United States</td>      <td>41461</td>      <td>1</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Check user number for unique ip_address</span>ip_num <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">,</span> <span class="token string">'ip_address'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'ip_address'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>ip_num <span class="token operator">=</span> ip_num<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'user_id'</span><span class="token punctuation">:</span> <span class="token string">'ip_num'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>ip_num<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'ip_address'</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>signup_time</th>      <th>purchase_time</th>      <th>purchase_value</th>      <th>device_id</th>      <th>source</th>      <th>browser</th>      <th>sex</th>      <th>age</th>      <th>ip_address</th>      <th>class</th>      <th>country</th>      <th>time_diff</th>      <th>device_num</th>      <th>ip_num</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>22058</td>      <td>2015-02-24 22:55:49</td>      <td>2015-04-18 02:47:11</td>      <td>34</td>      <td>QVPSPJUOCKZAR</td>      <td>SEO</td>      <td>Chrome</td>      <td>M</td>      <td>39</td>      <td>7.327584e+08</td>      <td>0</td>      <td>Japan</td>      <td>13882</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>333320</td>      <td>2015-06-07 20:39:50</td>      <td>2015-06-08 01:38:54</td>      <td>16</td>      <td>EOGFQPIZPYXFZ</td>      <td>Ads</td>      <td>Chrome</td>      <td>F</td>      <td>53</td>      <td>3.503114e+08</td>      <td>0</td>      <td>United States</td>      <td>17944</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>1359</td>      <td>2015-01-01 18:52:44</td>      <td>2015-01-01 18:52:45</td>      <td>15</td>      <td>YSSKYOSJHPPLJ</td>      <td>SEO</td>      <td>Opera</td>      <td>M</td>      <td>53</td>      <td>2.621474e+09</td>      <td>1</td>      <td>United States</td>      <td>1</td>      <td>12</td>      <td>12</td>    </tr>    <tr>      <th>3</th>      <td>150084</td>      <td>2015-04-28 21:13:25</td>      <td>2015-05-04 13:54:50</td>      <td>44</td>      <td>ATGTXKYKUDUQN</td>      <td>SEO</td>      <td>Safari</td>      <td>M</td>      <td>41</td>      <td>3.840542e+09</td>      <td>0</td>      <td>NA</td>      <td>60085</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>4</th>      <td>221365</td>      <td>2015-07-21 07:09:52</td>      <td>2015-09-09 18:40:53</td>      <td>39</td>      <td>NAUITBZFJKHWW</td>      <td>Ads</td>      <td>Safari</td>      <td>M</td>      <td>45</td>      <td>4.155831e+08</td>      <td>0</td>      <td>United States</td>      <td>41461</td>      <td>1</td>      <td>1</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Signup day and week</span>data<span class="token punctuation">[</span><span class="token string">'signup_day'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'signup_time'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>dayofweek<span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'signup_week'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'signup_time'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>week<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Purchase day and week</span>data<span class="token punctuation">[</span><span class="token string">'purchase_day'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'purchase_time'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>dayofweek<span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'purchase_week'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'purchase_time'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>week<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>signup_time</th>      <th>purchase_time</th>      <th>purchase_value</th>      <th>device_id</th>      <th>source</th>      <th>browser</th>      <th>sex</th>      <th>age</th>      <th>ip_address</th>      <th>class</th>      <th>country</th>      <th>time_diff</th>      <th>device_num</th>      <th>ip_num</th>      <th>signup_day</th>      <th>signup_week</th>      <th>purchase_day</th>      <th>purchase_week</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>22058</td>      <td>2015-02-24 22:55:49</td>      <td>2015-04-18 02:47:11</td>      <td>34</td>      <td>QVPSPJUOCKZAR</td>      <td>SEO</td>      <td>Chrome</td>      <td>M</td>      <td>39</td>      <td>7.327584e+08</td>      <td>0</td>      <td>Japan</td>      <td>13882</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>9</td>      <td>5</td>      <td>16</td>    </tr>    <tr>      <th>1</th>      <td>333320</td>      <td>2015-06-07 20:39:50</td>      <td>2015-06-08 01:38:54</td>      <td>16</td>      <td>EOGFQPIZPYXFZ</td>      <td>Ads</td>      <td>Chrome</td>      <td>F</td>      <td>53</td>      <td>3.503114e+08</td>      <td>0</td>      <td>United States</td>      <td>17944</td>      <td>1</td>      <td>1</td>      <td>6</td>      <td>23</td>      <td>0</td>      <td>24</td>    </tr>    <tr>      <th>2</th>      <td>1359</td>      <td>2015-01-01 18:52:44</td>      <td>2015-01-01 18:52:45</td>      <td>15</td>      <td>YSSKYOSJHPPLJ</td>      <td>SEO</td>      <td>Opera</td>      <td>M</td>      <td>53</td>      <td>2.621474e+09</td>      <td>1</td>      <td>United States</td>      <td>1</td>      <td>12</td>      <td>12</td>      <td>3</td>      <td>1</td>      <td>3</td>      <td>1</td>    </tr>    <tr>      <th>3</th>      <td>150084</td>      <td>2015-04-28 21:13:25</td>      <td>2015-05-04 13:54:50</td>      <td>44</td>      <td>ATGTXKYKUDUQN</td>      <td>SEO</td>      <td>Safari</td>      <td>M</td>      <td>41</td>      <td>3.840542e+09</td>      <td>0</td>      <td>NA</td>      <td>60085</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>18</td>      <td>0</td>      <td>19</td>    </tr>    <tr>      <th>4</th>      <td>221365</td>      <td>2015-07-21 07:09:52</td>      <td>2015-09-09 18:40:53</td>      <td>39</td>      <td>NAUITBZFJKHWW</td>      <td>Ads</td>      <td>Safari</td>      <td>M</td>      <td>45</td>      <td>4.155831e+08</td>      <td>0</td>      <td>United States</td>      <td>41461</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>30</td>      <td>2</td>      <td>37</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define features and target to be used</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'signup_day'</span><span class="token punctuation">,</span> <span class="token string">'signup_week'</span><span class="token punctuation">,</span> <span class="token string">'purchase_day'</span><span class="token punctuation">,</span> <span class="token string">'purchase_week'</span><span class="token punctuation">,</span> <span class="token string">'purchase_value'</span><span class="token punctuation">,</span> <span class="token string">'source'</span><span class="token punctuation">,</span>            <span class="token string">'browser'</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'country'</span><span class="token punctuation">,</span> <span class="token string">'time_diff'</span><span class="token punctuation">,</span> <span class="token string">'device_num'</span><span class="token punctuation">,</span> <span class="token string">'ip_num'</span><span class="token punctuation">,</span> <span class="token string">'class'</span><span class="token punctuation">]</span>data <span class="token operator">=</span> data<span class="token punctuation">[</span>columns<span class="token punctuation">]</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>signup_day</th>      <th>signup_week</th>      <th>purchase_day</th>      <th>purchase_week</th>      <th>purchase_value</th>      <th>source</th>      <th>browser</th>      <th>sex</th>      <th>age</th>      <th>country</th>      <th>time_diff</th>      <th>device_num</th>      <th>ip_num</th>      <th>class</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>9</td>      <td>5</td>      <td>16</td>      <td>34</td>      <td>SEO</td>      <td>Chrome</td>      <td>M</td>      <td>39</td>      <td>Japan</td>      <td>13882</td>      <td>1</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>6</td>      <td>23</td>      <td>0</td>      <td>24</td>      <td>16</td>      <td>Ads</td>      <td>Chrome</td>      <td>F</td>      <td>53</td>      <td>United States</td>      <td>17944</td>      <td>1</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>1</td>      <td>3</td>      <td>1</td>      <td>15</td>      <td>SEO</td>      <td>Opera</td>      <td>M</td>      <td>53</td>      <td>United States</td>      <td>1</td>      <td>12</td>      <td>12</td>      <td>1</td>    </tr>    <tr>      <th>3</th>      <td>1</td>      <td>18</td>      <td>0</td>      <td>19</td>      <td>44</td>      <td>SEO</td>      <td>Safari</td>      <td>M</td>      <td>41</td>      <td>NA</td>      <td>60085</td>      <td>1</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>1</td>      <td>30</td>      <td>2</td>      <td>37</td>      <td>39</td>      <td>Ads</td>      <td>Safari</td>      <td>M</td>      <td>45</td>      <td>United States</td>      <td>41461</td>      <td>1</td>      <td>1</td>      <td>0</td>    </tr>  </tbody></table></div><h1 id="Fraudulent-Activity-Identification"><a href="#Fraudulent-Activity-Identification" class="headerlink" title="Fraudulent Activity Identification"></a>Fraudulent Activity Identification</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Initialize H2O cluster</span>h2o<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>h2o<span class="token punctuation">.</span>remove_all<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>Checking whether there is an H2O instance running at http://localhost:54321 ..... not found.Attempting to start a local H2O server...; Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)  Starting server from C:\Users\Naixin\Anaconda3\lib\site-packages\h2o\backend\bin\h2o.jar  Ice root: C:\Users\Naixin\AppData\Local\Temp\tmpaer_0p20  JVM stdout: C:\Users\Naixin\AppData\Local\Temp\tmpaer_0p20\h2o_Naixin_started_from_python.out  JVM stderr: C:\Users\Naixin\AppData\Local\Temp\tmpaer_0p20\h2o_Naixin_started_from_python.err  Server is running at http://127.0.0.1:54321Connecting to H2O server at http://127.0.0.1:54321 ... successful.</code></pre><div style="overflow:auto"><table style="width:50%"><tr><td>H2O cluster uptime:</td><td>03 secs</td></tr><tr><td>H2O cluster timezone:</td><td>America/Chicago</td></tr><tr><td>H2O data parsing timezone:</td><td>UTC</td></tr><tr><td>H2O cluster version:</td><td>3.26.0.6</td></tr><tr><td>H2O cluster version age:</td><td>5 days </td></tr><tr><td>H2O cluster name:</td><td>H2O_from_python_Naixin_uxelgu</td></tr><tr><td>H2O cluster total nodes:</td><td>1</td></tr><tr><td>H2O cluster free memory:</td><td>1.747 Gb</td></tr><tr><td>H2O cluster total cores:</td><td>0</td></tr><tr><td>H2O cluster allowed cores:</td><td>0</td></tr><tr><td>H2O cluster status:</td><td>accepting new members, healthy</td></tr><tr><td>H2O connection url:</td><td>http://127.0.0.1:54321</td></tr><tr><td>H2O connection proxy:</td><td>None</td></tr><tr><td>H2O internal security:</td><td>False</td></tr><tr><td>H2O API Extensions:</td><td>Amazon S3, Algos, AutoML, Core V3, TargetEncoder, Core V4</td></tr><tr><td>Python version:</td><td>3.7.3 final</td></tr></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Transform to H2O Frame, and make sure the target variable is categorical</span>h2o_df <span class="token operator">=</span> H2OFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">for</span> name <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'signup_day'</span><span class="token punctuation">,</span> <span class="token string">'purchase_day'</span><span class="token punctuation">,</span> <span class="token string">'source'</span><span class="token punctuation">,</span> <span class="token string">'browser'</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">,</span> <span class="token string">'country'</span><span class="token punctuation">,</span> <span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    h2o_df<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> h2o_df<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span>asfactor<span class="token punctuation">(</span><span class="token punctuation">)</span>h2o_df<span class="token punctuation">.</span>summary<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Parse progress: |█████████████████████████████████████████████████████████| 100%</code></pre><table><thead><tr><th>       </th><th>signup_day  </th><th>signup_week      </th><th>purchase_day  </th><th>purchase_week     </th><th>purchase_value   </th><th>source  </th><th>browser  </th><th>sex  </th><th>age              </th><th>country      </th><th>time_diff        </th><th>device_num        </th><th>ip_num            </th><th>class  </th></tr></thead><tbody><tr><td>type   </td><td>enum        </td><td>int              </td><td>enum          </td><td>int               </td><td>int              </td><td>enum    </td><td>enum     </td><td>enum </td><td>int              </td><td>enum         </td><td>int              </td><td>int               </td><td>int               </td><td>enum   </td></tr><tr><td>mins   </td><td>            </td><td>1.0              </td><td>              </td><td>1.0               </td><td>9.0              </td><td>        </td><td>         </td><td>     </td><td>18.0             </td><td>             </td><td>1.0              </td><td>1.0               </td><td>1.0               </td><td>       </td></tr><tr><td>mean   </td><td>            </td><td>16.50174043093866</td><td>              </td><td>24.65857112605202 </td><td>36.93537243898601</td><td>        </td><td>         </td><td>     </td><td>33.14070358409675</td><td>             </td><td>40942.58442744426</td><td>1.6843665625496351</td><td>1.6027185134205097</td><td>       </td></tr><tr><td>maxs   </td><td>            </td><td>34.0             </td><td>              </td><td>51.0              </td><td>154.0            </td><td>        </td><td>         </td><td>     </td><td>76.0             </td><td>             </td><td>86399.0          </td><td>20.0              </td><td>20.0              </td><td>       </td></tr><tr><td>sigma  </td><td>            </td><td>9.814287461798903</td><td>              </td><td>11.651556782719481</td><td>18.32276214866213</td><td>        </td><td>         </td><td>     </td><td>8.617733490961495</td><td>             </td><td>26049.66190211841</td><td>2.616953602804173 </td><td>2.596239527375834 </td><td>       </td></tr><tr><td>zeros  </td><td>            </td><td>0                </td><td>              </td><td>0                 </td><td>0                </td><td>        </td><td>         </td><td>     </td><td>0                </td><td>             </td><td>0                </td><td>0                 </td><td>0                 </td><td>       </td></tr><tr><td>missing</td><td>0           </td><td>0                </td><td>0             </td><td>0                 </td><td>0                </td><td>0       </td><td>0        </td><td>0    </td><td>0                </td><td>0            </td><td>0                </td><td>0                 </td><td>0                 </td><td>0      </td></tr><tr><td>0      </td><td>1           </td><td>9.0              </td><td>5             </td><td>16.0              </td><td>34.0             </td><td>SEO     </td><td>Chrome   </td><td>M    </td><td>39.0             </td><td>Japan        </td><td>13882.0          </td><td>1.0               </td><td>1.0               </td><td>0      </td></tr><tr><td>1      </td><td>6           </td><td>23.0             </td><td>0             </td><td>24.0              </td><td>16.0             </td><td>Ads     </td><td>Chrome   </td><td>F    </td><td>53.0             </td><td>United States</td><td>17944.0          </td><td>1.0               </td><td>1.0               </td><td>0      </td></tr><tr><td>2      </td><td>3           </td><td>1.0              </td><td>3             </td><td>1.0               </td><td>15.0             </td><td>SEO     </td><td>Opera    </td><td>M    </td><td>53.0             </td><td>United States</td><td>1.0              </td><td>12.0              </td><td>12.0              </td><td>1      </td></tr><tr><td>3      </td><td>1           </td><td>18.0             </td><td>0             </td><td>19.0              </td><td>44.0             </td><td>SEO     </td><td>Safari   </td><td>M    </td><td>41.0             </td><td>NA           </td><td>60085.0          </td><td>1.0               </td><td>1.0               </td><td>0      </td></tr><tr><td>4      </td><td>1           </td><td>30.0             </td><td>2             </td><td>37.0              </td><td>39.0             </td><td>Ads     </td><td>Safari   </td><td>M    </td><td>45.0             </td><td>United States</td><td>41461.0          </td><td>1.0               </td><td>1.0               </td><td>0      </td></tr><tr><td>5      </td><td>3           </td><td>21.0             </td><td>3             </td><td>28.0              </td><td>42.0             </td><td>Ads     </td><td>Chrome   </td><td>M    </td><td>18.0             </td><td>Canada       </td><td>7331.0           </td><td>1.0               </td><td>1.0               </td><td>0      </td></tr><tr><td>6      </td><td>5           </td><td>31.0             </td><td>3             </td><td>35.0              </td><td>11.0             </td><td>Ads     </td><td>Chrome   </td><td>F    </td><td>19.0             </td><td>NA           </td><td>17825.0          </td><td>1.0               </td><td>1.0               </td><td>0      </td></tr><tr><td>7      </td><td>0           </td><td>15.0             </td><td>0             </td><td>22.0              </td><td>27.0             </td><td>Ads     </td><td>Opera    </td><td>M    </td><td>34.0             </td><td>United States</td><td>35129.0          </td><td>1.0               </td><td>1.0               </td><td>0      </td></tr><tr><td>8      </td><td>1           </td><td>17.0             </td><td>1             </td><td>23.0              </td><td>30.0             </td><td>SEO     </td><td>IE       </td><td>F    </td><td>43.0             </td><td>China        </td><td>51800.0          </td><td>1.0               </td><td>1.0               </td><td>0      </td></tr><tr><td>9      </td><td>6           </td><td>4.0              </td><td>0             </td><td>13.0              </td><td>62.0             </td><td>Ads     </td><td>IE       </td><td>M    </td><td>31.0             </td><td>United States</td><td>18953.0          </td><td>1.0               </td><td>1.0               </td><td>0      </td></tr></tbody></table><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Split into 70% training and 30% test dataset</span>strat_split <span class="token operator">=</span> h2o_df<span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>stratified_split<span class="token punctuation">(</span>test_frac<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span> seed<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>train <span class="token operator">=</span> h2o_df<span class="token punctuation">[</span>strat_split <span class="token operator">==</span> <span class="token string">'train'</span><span class="token punctuation">]</span>test <span class="token operator">=</span> h2o_df<span class="token punctuation">[</span>strat_split <span class="token operator">==</span> <span class="token string">'test'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Define features and target</span>feature <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'signup_day'</span><span class="token punctuation">,</span> <span class="token string">'signup_week'</span><span class="token punctuation">,</span> <span class="token string">'purchase_day'</span><span class="token punctuation">,</span> <span class="token string">'purchase_week'</span><span class="token punctuation">,</span> <span class="token string">'purchase_value'</span><span class="token punctuation">,</span>            <span class="token string">'source'</span><span class="token punctuation">,</span> <span class="token string">'browser'</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'country'</span><span class="token punctuation">,</span> <span class="token string">'time_diff'</span><span class="token punctuation">,</span> <span class="token string">'device_num'</span><span class="token punctuation">,</span> <span class="token string">'ip_num'</span><span class="token punctuation">]</span>target <span class="token operator">=</span> <span class="token string">'class'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Build random forest model </span>model <span class="token operator">=</span> H2ORandomForestEstimator<span class="token punctuation">(</span>balance_classes<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> ntrees<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> mtries<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> stopping_rounds<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>                                  stopping_metric<span class="token operator">=</span><span class="token string">'auc'</span><span class="token punctuation">,</span> score_each_iteration<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> seed<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>train<span class="token punctuation">(</span>x<span class="token operator">=</span>feature<span class="token punctuation">,</span> y<span class="token operator">=</span>target<span class="token punctuation">,</span> training_frame<span class="token operator">=</span>train<span class="token punctuation">,</span> validation_frame<span class="token operator">=</span>test<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>drf Model Build progress: |███████████████████████████████████████████████| 100%</code></pre><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Feature importance</span>importance <span class="token operator">=</span> model<span class="token punctuation">.</span>varimp<span class="token punctuation">(</span>use_pandas<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'scaled_importance'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'variable'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>importance<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="4_23_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Make predictions </span>train_true <span class="token operator">=</span> train<span class="token punctuation">.</span>as_data_frame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuestest_true <span class="token operator">=</span> test<span class="token punctuation">.</span>as_data_frame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuestrain_pred <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>train<span class="token punctuation">)</span><span class="token punctuation">.</span>as_data_frame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'p1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuestest_pred <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">.</span>as_data_frame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'p1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuestrain_fpr<span class="token punctuation">,</span> train_tpr<span class="token punctuation">,</span> _ <span class="token operator">=</span> roc_curve<span class="token punctuation">(</span>train_true<span class="token punctuation">,</span> train_pred<span class="token punctuation">)</span>test_fpr<span class="token punctuation">,</span> test_tpr<span class="token punctuation">,</span> _ <span class="token operator">=</span> roc_curve<span class="token punctuation">(</span>test_true<span class="token punctuation">,</span> test_pred<span class="token punctuation">)</span>train_auc <span class="token operator">=</span> np<span class="token punctuation">.</span>round<span class="token punctuation">(</span>auc<span class="token punctuation">(</span>train_fpr<span class="token punctuation">,</span> train_tpr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>test_auc <span class="token operator">=</span> np<span class="token punctuation">.</span>round<span class="token punctuation">(</span>auc<span class="token punctuation">(</span>test_fpr<span class="token punctuation">,</span> test_tpr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>drf prediction progress: |████████████████████████████████████████████████| 100%drf prediction progress: |████████████████████████████████████████████████| 100%</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Classification report</span><span class="token keyword">print</span><span class="token punctuation">(</span>classification_report<span class="token punctuation">(</span>y_true<span class="token operator">=</span>test_true<span class="token punctuation">,</span> y_pred<span class="token operator">=</span><span class="token punctuation">(</span>test_pred <span class="token operator">></span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>              precision    recall  f1-score   support           0       0.95      1.00      0.98     41088           1       1.00      0.53      0.69      4245    accuracy                           0.96     45333   macro avg       0.98      0.76      0.83     45333weighted avg       0.96      0.96      0.95     45333</code></pre><p>​    </p><pre class="line-numbers language-python"><code class="language-python">train_fpr <span class="token operator">=</span> np<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>train_fpr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>train_tpr <span class="token operator">=</span> np<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>train_tpr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>test_fpr <span class="token operator">=</span> np<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>test_fpr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>test_tpr <span class="token operator">=</span> np<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>test_tpr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>train_fpr<span class="token punctuation">,</span> train_tpr<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Train AUC: '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>train_auc<span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>test_fpr<span class="token punctuation">,</span> test_tpr<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Test AUC: '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>test_auc<span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>train_fpr<span class="token punctuation">,</span> train_fpr<span class="token punctuation">,</span> <span class="token string">'k--'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Chance Curve'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'False Positive Rate'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'True Positive Rate'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="4_26_0.png" alt="png"></p><p>Based on the ROC, if we care about minimizing false positive, we would choose a cut-off that would give us true positive rate of ~0.5 and false positive rate almost zero (this was essentially the random forest output). However, if we care about maximizing true positive, we will have to decrease the cut-off. This way we will classify more events as “1”: some will be true ones (so true positive goes up) and many, unfortunately, will be false ones (so false positive will also go up).</p><pre class="line-numbers language-python"><code class="language-python">cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'device_num'</span><span class="token punctuation">,</span> <span class="token string">'time_diff'</span><span class="token punctuation">,</span> <span class="token string">'purchase_week'</span><span class="token punctuation">,</span> <span class="token string">'country'</span><span class="token punctuation">,</span> <span class="token string">'ip_num'</span><span class="token punctuation">]</span>_ <span class="token operator">=</span> model<span class="token punctuation">.</span>partial_plot<span class="token punctuation">(</span>data<span class="token operator">=</span>train<span class="token punctuation">,</span> cols<span class="token operator">=</span>cols<span class="token punctuation">,</span> nbins<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>PartialDependencePlot progress: |█████████████████████████████████████████| 100%</code></pre><p><img src="4_28_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Shutdown h2o instance</span>h2o<span class="token punctuation">.</span>cluster<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Regarding “how to use this from a product perspective”: you now have a model that assigns to each user a probability of committing a fraud. You want to think about creating different experiences based on that. For instance:</p><ol><li>If predicted fraud probability &lt; X, the user has the normal experience (the high majority should fall here)</li><li>If X &lt;= predicted fraud probability &lt; Z (so the user is at risk, but not too much), you can create an additional verification step, like verify your phone number via a code sent by SMS or log in via Facebook.</li><li>If predicted fraud probability &gt;= Z (so here is really likely the user is trying to commit a fraud), you can tell the user his session has been put on hold, send this user info to someone who reviews it manually and either blocks the user or decides it is not a fraud so the session is resumed.</li></ol><p>This is just an example and there are many different ways to build products around some fraud score. However, it is important because it highlights that a ML model is often really useful when it is combined with a product which is able to take advantage of its strengths and minimize its possible drawbacks (like false positives).</p><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Data Analysis, Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python_Take home challenge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-spanish_translation AB test</title>
      <link href="/2018/01/23/2-spanish-translation-ab-test/"/>
      <url>/2018/01/23/2-spanish-translation-ab-test/</url>
      
        <content type="html"><![CDATA[<p>This notebook details the approaches and the conclusions of how I approached verifying the results of an A/B Test. The test measured conversion rates when a website used custom language tamplates for spanish speaking countries compared to the same template (a Spain dialect translation) for all countries. We would think that custom templates would do better but that was not the case, the results point to the same template increasing conversions. So in this notebook I seek to see if the test can be trusted and if not what could be done differently for the next test.</p><p>This notebook covers:</p><ul><li>Data Cleaning</li><li>Verifying Results</li><li>Using Statistical Tools to test for Sample Bias</li></ul><p>Conclusions:</p><ul><li>If the results seem unbelievable, they probably are. We intuitively know that a custom website for each region would yield better results. So when it didn’t it’s important to take extra precautions to make sure that the test was run appropriately, in this case we found that the test sample wasn’t indicative of the population</li><li>The test was misleading because suffered from sample bias and a possible small sample size which needs to be addressed.</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> scipy<span class="token punctuation">.</span>stats <span class="token keyword">import</span> ttest_ind<span class="token keyword">from</span> scipy <span class="token keyword">import</span> stats<span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> statsmodels<span class="token punctuation">.</span>stats<span class="token punctuation">.</span>weightstats <span class="token keyword">import</span> ttest_ind <span class="token keyword">as</span> sm_ttest<span class="token keyword">from</span> statsmodels<span class="token punctuation">.</span>stats<span class="token punctuation">.</span>weightstats <span class="token keyword">import</span> zconfint <span class="token keyword">as</span> sm_confint<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoder<span class="token punctuation">,</span> OneHotEncoder<span class="token punctuation">,</span> LabelBinarizer<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifier<span class="token punctuation">,</span> export_graphviz<span class="token punctuation">,</span> DecisionTreeRegressor<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>dates <span class="token keyword">as</span> mdates<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token keyword">from</span> pylab <span class="token keyword">import</span> rcParams<span class="token keyword">from</span> pydotplus <span class="token keyword">import</span> graph_from_dot_data<span class="token keyword">from</span> IPython<span class="token punctuation">.</span>display <span class="token keyword">import</span> Image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>set_printoptions<span class="token punctuation">(</span>precision<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'precision'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">test_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'test_table.csv'</span><span class="token punctuation">)</span>user_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'user_table.csv'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">test_df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>date</th>      <th>source</th>      <th>device</th>      <th>browser_language</th>      <th>ads_channel</th>      <th>browser</th>      <th>conversion</th>      <th>test</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>315281</td>      <td>2015-12-03</td>      <td>Direct</td>      <td>Web</td>      <td>ES</td>      <td>NaN</td>      <td>IE</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>497851</td>      <td>2015-12-04</td>      <td>Ads</td>      <td>Web</td>      <td>ES</td>      <td>Google</td>      <td>IE</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>848402</td>      <td>2015-12-04</td>      <td>Ads</td>      <td>Web</td>      <td>ES</td>      <td>Facebook</td>      <td>Chrome</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>290051</td>      <td>2015-12-03</td>      <td>Ads</td>      <td>Mobile</td>      <td>Other</td>      <td>Facebook</td>      <td>Android_App</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>4</th>      <td>548435</td>      <td>2015-11-30</td>      <td>Ads</td>      <td>Web</td>      <td>ES</td>      <td>Google</td>      <td>FireFox</td>      <td>0</td>      <td>1</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python">test_df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 453321 entries, 0 to 453320Data columns (total 9 columns):user_id             453321 non-null int64date                453321 non-null objectsource              453321 non-null objectdevice              453321 non-null objectbrowser_language    453321 non-null objectads_channel         181877 non-null objectbrowser             453321 non-null objectconversion          453321 non-null int64test                453321 non-null int64dtypes: int64(3), object(6)memory usage: 31.1+ MB</code></pre><pre class="line-numbers language-python"><code class="language-python">user_df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>sex</th>      <th>age</th>      <th>country</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>765821</td>      <td>M</td>      <td>20</td>      <td>Mexico</td>    </tr>    <tr>      <th>1</th>      <td>343561</td>      <td>F</td>      <td>27</td>      <td>Nicaragua</td>    </tr>    <tr>      <th>2</th>      <td>118744</td>      <td>M</td>      <td>23</td>      <td>Colombia</td>    </tr>    <tr>      <th>3</th>      <td>987753</td>      <td>F</td>      <td>27</td>      <td>Venezuela</td>    </tr>    <tr>      <th>4</th>      <td>554597</td>      <td>F</td>      <td>20</td>      <td>Spain</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python">user_df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 452867 entries, 0 to 452866Data columns (total 4 columns):user_id    452867 non-null int64sex        452867 non-null objectage        452867 non-null int64country    452867 non-null objectdtypes: int64(2), object(2)memory usage: 13.8+ MB</code></pre><p>Steps:</p><ul><li>Join the Tables on the common column user_id</li><li>Check for Null Values</li><li>Deal with Null Values</li></ul><h2 id="1-join-data"><a href="#1-join-data" class="headerlink" title="1.join data"></a>1.join data</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># check the two tables uniqueness</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Test ID:\t'</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>test_df<span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>test_df<span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>test_df<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'User ID:\t'</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>user_df<span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>user_df<span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>user_df<span class="token punctuation">)</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>Test ID:     453321      TrueUser ID:     452867      True</code></pre><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> test_df<span class="token punctuation">.</span>join<span class="token punctuation">(</span>user_df<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token string">'user_id'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'user_id'</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">data<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 453321 entries, 0 to 453320Data columns (total 12 columns):user_id             453321 non-null int64date                453321 non-null objectsource              453321 non-null objectdevice              453321 non-null objectbrowser_language    453321 non-null objectads_channel         181877 non-null objectbrowser             453321 non-null objectconversion          453321 non-null int64test                453321 non-null int64sex                 452867 non-null objectage                 452867 non-null float64country             452867 non-null objectdtypes: float64(1), int64(3), object(8)memory usage: 41.5+ MB</code></pre><h2 id="2-check-null-value"><a href="#2-check-null-value" class="headerlink" title="2. check null value"></a>2. check null value</h2><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>data<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>user_id                  0date                     0source                   0device                   0browser_language         0ads_channel         271444browser                  0conversion               0test                     0sex                    454age                    454country                454dtype: int64</code></pre><ul><li>There are null values in 3 columns: sex, age, country, and ads channel</li><li>We will delete the rows with null values for sex, age and country because it’s so few.</li><li>Since there are so many missing values for ads_channel we will fill create a different colum that raises a 1 when it’s a null value and a 0 when it’s not. </li><li>We will investigate the ads_channel to determine whether to erase it or not.</li></ul><h2 id="3-dealing-with-null-values"><a href="#3-dealing-with-null-values" class="headerlink" title="3. dealing with null values"></a>3. dealing with null values</h2><pre class="line-numbers language-python"><code class="language-python">data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>sex<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>date</th>      <th>source</th>      <th>device</th>      <th>browser_language</th>      <th>ads_channel</th>      <th>browser</th>      <th>conversion</th>      <th>test</th>      <th>sex</th>      <th>age</th>      <th>country</th>    </tr>  </thead>  <tbody>    <tr>      <th>819</th>      <td>657841</td>      <td>2015-12-02</td>      <td>Ads</td>      <td>Mobile</td>      <td>ES</td>      <td>Bing</td>      <td>Android_App</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>1696</th>      <td>859340</td>      <td>2015-12-04</td>      <td>Direct</td>      <td>Mobile</td>      <td>EN</td>      <td>NaN</td>      <td>Android_App</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>1934</th>      <td>716487</td>      <td>2015-12-04</td>      <td>SEO</td>      <td>Mobile</td>      <td>ES</td>      <td>NaN</td>      <td>Android_App</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>2409</th>      <td>87209</td>      <td>2015-12-01</td>      <td>Direct</td>      <td>Web</td>      <td>ES</td>      <td>NaN</td>      <td>Chrome</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>2721</th>      <td>771642</td>      <td>2015-11-30</td>      <td>SEO</td>      <td>Mobile</td>      <td>ES</td>      <td>NaN</td>      <td>Android_App</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>    </tr>  </tbody></table></div><p>The missing values for sex,age, and country are all the same 454 rows so we will get rid of them</p><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>data<span class="token punctuation">.</span>index<span class="token punctuation">.</span>difference<span class="token punctuation">(</span>data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>sex<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">data<span class="token punctuation">[</span><span class="token string">'ads_channel_is_null'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token boolean">True</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">.</span>ads_channel<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>data<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>user_id                     0date                        0source                      0device                      0browser_language            0ads_channel            271174browser                     0conversion                  0test                        0sex                         0age                         0country                     0ads_channel_is_null         0dtype: int64</code></pre><h2 id="First-question-check-test-results"><a href="#First-question-check-test-results" class="headerlink" title="First question: check test results."></a>First question: check test results.</h2><p>But even before that, let’s make sure it is true Spain coverts much better than rest of LatAm countries</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># First check that Spain converts much better than the rest of LatAm countries</span>groupby_country <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'conversion'</span><span class="token punctuation">,</span> <span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'country'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>groupby_country <span class="token operator">=</span> groupby_country<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>groupby_country <span class="token operator">=</span> groupby_country<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">'conversion'</span><span class="token punctuation">,</span> ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Visualization</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'country'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'conversion'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>groupby_country<span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="2_26_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Visualization</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'country'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'conversion'</span><span class="token punctuation">,</span> hue<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="2_27_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># A/B test</span>data <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'Spain'</span><span class="token punctuation">]</span>test_val <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'conversion'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuescont_val <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'conversion'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token keyword">print</span><span class="token punctuation">(</span>test_val<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">,</span> cont_val<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0.043411161678422794      0.04829179055749524</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>ttest_ind<span class="token punctuation">(</span>test_val<span class="token punctuation">,</span> cont_val<span class="token punctuation">,</span> equal_var<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Ttest_indResult(statistic=-7.353895203080277, pvalue=1.9289178577799033e-13)</code></pre><p>Mmh..not in the test are converting at 4.8% while users in the test just at 4.3%.That’s a 10% drop, which should be dramatic if it were true. The most likely reason for weired A/B test results are:</p><ul><li>we didn’t collect enough data</li><li>some bias has been introduce in the experiment so that test/control people are not really random</li></ul><p>Firstly, let’s plot day by day, to see if these weird results have been constantly happening or they just started happening all of a sudden</p><pre class="line-numbers language-python"><code class="language-python">data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token string">'date'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token string">'date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data_test_by_day <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>test<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'conversion'</span><span class="token punctuation">]</span><span class="token operator">/</span>data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>test<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'conversion'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data_test_by_day<span class="token punctuation">.</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'test_vs_control'</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data_test_by_day<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data_test_by_day<span class="token punctuation">.</span>test_vs_control<span class="token punctuation">)</span><span class="token punctuation">;</span>plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_major_locator<span class="token punctuation">(</span>mdates<span class="token punctuation">.</span>DayLocator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_major_formatter<span class="token punctuation">(</span>mdates<span class="token punctuation">.</span>DateFormatter<span class="token punctuation">(</span><span class="token string">'%b %d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'test_vs_control'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Test Conversion in Relation to Control Conversion'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>C:\Users\Naixin\Anaconda3\lib\site-packages\pandas\plotting\_converter.py:129: FutureWarning: Using an implicitly registered datetime converter for a matplotlib plotting method. The converter was registered by pandas on import. Future versions of pandas will require you to explicitly register matplotlib converters.To register the converters:    &gt;&gt;&gt; from pandas.plotting import register_matplotlib_converters    &gt;&gt;&gt; register_matplotlib_converters()  warnings.warn(msg, FutureWarning)Text(0.5, 1.0, &#39;Test Conversion in Relation to Control Conversion&#39;)</code></pre><p><img src="2_32_2.png" alt="png"></p><p>From this plot, we notice a couple of things:</p><ul><li>The Control sample consistently under-performs throughout the 5 days</li><li>It is trending upward which could be a sign that the a/b test was for too short a time span</li></ul><p>To prove if the test was valid we can check for two things:</p><ul><li>Small Sample Size</li><li>Sample Bias</li></ul><p>We already saw that the test ran for 5 days in which the test sample was beginning to trend upwards, so that could be the culprit. However, we cannot know so we can look to bias get a further understanding.</p><p>For the a/b test to be valid, both the control and test sample have to be the same except for the one feature. If they are not then the effect of another feature could of caused the change in conversion. So here we will use three tools:</p><ul><li>We will plot the distributions of each feature in for the test and control</li><li>We will use a decision tree to see if any feature can predict whether a data point is in a test or control (it shouldn’t!)</li><li>We will use a t-test to verify results</li></ul><h1 id="1-Distribution-of-Columns-in-Relation-to-Test-or-Control-Sample"><a href="#1-Distribution-of-Columns-in-Relation-to-Test-or-Control-Sample" class="headerlink" title="1. Distribution of Columns in Relation to Test or Control Sample"></a>1. Distribution of Columns in Relation to Test or Control Sample</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Let's look at each feature's conversion in relation</span><span class="token comment" spellcheck="true">#to whether it's a test or control sample</span><span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>difference<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sns<span class="token punctuation">.</span>factorplot<span class="token punctuation">(</span>i<span class="token punctuation">,</span> data <span class="token operator">=</span> data<span class="token punctuation">,</span> kind <span class="token operator">=</span> <span class="token string">'count'</span><span class="token punctuation">,</span> col <span class="token operator">=</span> <span class="token string">'test'</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> aspect <span class="token operator">=</span> <span class="token number">1.5</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>C:\Users\Naixin\Anaconda3\lib\site-packages\seaborn\categorical.py:3666: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`&#39;point&#39;`) has changed `&#39;strip&#39;` in `catplot`.  warnings.warn(msg)C:\Users\Naixin\Anaconda3\lib\site-packages\seaborn\categorical.py:3672: UserWarning: The `size` paramter has been renamed to `height`; please update your code.  warnings.warn(msg, UserWarning)</code></pre><p><img src="2_35_1.png" alt="png"></p><p><img src="2_35_2.png" alt="png"></p><p><img src="2_35_3.png" alt="png"></p><p><img src="2_35_4.png" alt="png"></p><p><img src="2_35_5.png" alt="png"></p><p><img src="2_35_6.png" alt="png"></p><p><img src="2_35_7.png" alt="png"></p><p><img src="2_35_8.png" alt="png"></p><p><img src="2_35_9.png" alt="png"></p><p><img src="2_35_10.png" alt="png"></p><p><img src="2_35_11.png" alt="png"></p><ul><li>There is no clear difference between the control and test sample for each features</li><li>There seem to make small differences between age and countries but it’s not definite.</li><li>The new feature we made for the null values seems to have no effect.</li></ul><h1 id="2-Training-a-Model-To-Test-for-Bias"><a href="#2-Training-a-Model-To-Test-for-Bias" class="headerlink" title="2. Training a Model To Test for Bias"></a>2. Training a Model To Test for Bias</h1><p>Here we will use a random forrest classifier to see if any features become significant in predicting whether a data point is in a test or control sample. We will make the test column the dependent variable and the rest of the features conversion as independent variables.</p><h3 id="This-process-can-be-fully-automated-in-the-future-and-give-a-warning-when-an-a-b-test-may-contain-sample-bias"><a href="#This-process-can-be-fully-automated-in-the-future-and-give-a-warning-when-an-a-b-test-may-contain-sample-bias" class="headerlink" title="This process can be fully automated in the future and give a warning when an a/b test may contain sample bias!"></a>This process can be fully automated in the future and give a warning when an a/b test may contain sample bias!</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create a New Dataframe without the conversion column</span>tree_df <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>difference<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'conversion'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create dummy variables for categorical values</span>ads_channel_dums <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>tree_df<span class="token punctuation">.</span>ads_channel<span class="token punctuation">,</span> prefix<span class="token operator">=</span> <span class="token string">'ads'</span><span class="token punctuation">)</span>browser_dums <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>tree_df<span class="token punctuation">.</span>browser<span class="token punctuation">,</span>prefix<span class="token operator">=</span> <span class="token string">'browser'</span><span class="token punctuation">)</span>browser_language_dums <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>tree_df<span class="token punctuation">.</span>browser_language<span class="token punctuation">,</span>prefix<span class="token operator">=</span> <span class="token string">'browser_language'</span><span class="token punctuation">)</span>country_dums <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>tree_df<span class="token punctuation">.</span>country<span class="token punctuation">,</span>prefix<span class="token operator">=</span> <span class="token string">'country'</span><span class="token punctuation">)</span>device_dums <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>tree_df<span class="token punctuation">.</span>device<span class="token punctuation">,</span>prefix<span class="token operator">=</span> <span class="token string">'device'</span><span class="token punctuation">)</span>sex_dums <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>tree_df<span class="token punctuation">.</span>sex<span class="token punctuation">,</span>prefix<span class="token operator">=</span> <span class="token string">'sex'</span><span class="token punctuation">)</span>source_dums <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>tree_df<span class="token punctuation">.</span>source<span class="token punctuation">,</span>prefix<span class="token operator">=</span> <span class="token string">'source'</span><span class="token punctuation">)</span>dums_list <span class="token operator">=</span> <span class="token punctuation">[</span>ads_channel_dums<span class="token punctuation">,</span> browser_dums<span class="token punctuation">,</span>browser_language_dums<span class="token punctuation">,</span>country_dums<span class="token punctuation">,</span>device_dums<span class="token punctuation">,</span>sex_dums<span class="token punctuation">,</span>source_dums <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Training the Tree</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifierX <span class="token operator">=</span> tree_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>dums_list<span class="token punctuation">)</span>y <span class="token operator">=</span> tree_df<span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span>tree <span class="token operator">=</span> DecisionTreeClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>tree<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>DecisionTreeClassifier(class_weight=None, criterion=&#39;gini&#39;, max_depth=None,                       max_features=None, max_leaf_nodes=None,                       min_impurity_decrease=0.0, min_impurity_split=None,                       min_samples_leaf=1, min_samples_split=2,                       min_weight_fraction_leaf=0.0, presort=False,                       random_state=None, splitter=&#39;best&#39;)</code></pre><pre class="line-numbers language-python"><code class="language-python">features_significance<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>features</th>      <th>importance</th>    </tr>  </thead>  <tbody>    <tr>      <th>16</th>      <td>country_Argentina</td>      <td>0.21</td>    </tr>    <tr>      <th>30</th>      <td>country_Uruguay</td>      <td>0.04</td>    </tr>    <tr>      <th>35</th>      <td>sex_M</td>      <td>0.04</td>    </tr>    <tr>      <th>34</th>      <td>sex_F</td>      <td>0.04</td>    </tr>    <tr>      <th>13</th>      <td>browser_language_EN</td>      <td>0.03</td>    </tr>    <tr>      <th>3</th>      <td>ads_Google</td>      <td>0.02</td>    </tr>    <tr>      <th>14</th>      <td>browser_language_ES</td>      <td>0.02</td>    </tr>    <tr>      <th>15</th>      <td>browser_language_Other</td>      <td>0.02</td>    </tr>    <tr>      <th>5</th>      <td>ads_Yahoo</td>      <td>0.02</td>    </tr>    <tr>      <th>29</th>      <td>country_Peru</td>      <td>0.02</td>    </tr>    <tr>      <th>31</th>      <td>country_Venezuela</td>      <td>0.02</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># ploting</span>features_significance <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'features'</span><span class="token punctuation">:</span> X<span class="token punctuation">.</span>columns<span class="token punctuation">,</span>\          <span class="token string">'importance'</span><span class="token punctuation">:</span> tree<span class="token punctuation">.</span>feature_importances_<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">'importance'</span><span class="token punctuation">,</span> ascending <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">]</span>_ <span class="token operator">=</span> sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token string">'features'</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token string">'importance'</span>                  <span class="token punctuation">,</span>data <span class="token operator">=</span> features_significance<span class="token punctuation">,</span> orient <span class="token operator">=</span> <span class="token string">'v'</span><span class="token punctuation">)</span>_<span class="token punctuation">.</span>figure<span class="token punctuation">.</span>set_size_inches<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="2_44_0.png" alt="png"></p><ul><li>There is one very predictive features: whether country is Argentina</li><li>This is a signal for bias so we can verify with T-tests</li></ul><h1 id="3-using-T-tests-to-verify-results"><a href="#3-using-T-tests-to-verify-results" class="headerlink" title="3. using T-tests to verify results"></a>3. using T-tests to verify results</h1><p>Approach:</p><ul><li><p>We will then verify the power of these features by running t-tests on country</p></li><li><p>We will conclude that there is bias in the data if the data comes back non-significant for the features </p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">##1. Running T-Test</span>country <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>conversion_test <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>conversion_control <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ttest_vals<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>p_vals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">.</span>country<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">:</span>    temp <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>country <span class="token operator">==</span> i<span class="token punctuation">]</span>    cat1 <span class="token operator">=</span> temp<span class="token punctuation">[</span>data<span class="token punctuation">.</span>test <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>conversion    cat2 <span class="token operator">=</span> temp<span class="token punctuation">[</span>data<span class="token punctuation">.</span>test <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>conversion    ttest<span class="token punctuation">,</span> p <span class="token operator">=</span>stats<span class="token punctuation">.</span>ttest_ind<span class="token punctuation">(</span>cat2<span class="token punctuation">,</span> cat1<span class="token punctuation">)</span>    country<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    conversion_test<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cat1<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>float<span class="token punctuation">(</span>len<span class="token punctuation">(</span>cat1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    conversion_control<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cat2<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>float<span class="token punctuation">(</span>len<span class="token punctuation">(</span>cat2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ttest_vals<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ttest<span class="token punctuation">)</span>    p_vals<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'country'</span><span class="token punctuation">:</span> country<span class="token punctuation">,</span>               <span class="token string">'conversion_test'</span><span class="token punctuation">:</span> conversion_test<span class="token punctuation">,</span>              <span class="token string">'conversion_control'</span><span class="token punctuation">:</span> conversion_control<span class="token punctuation">,</span>             <span class="token string">'p_value'</span><span class="token punctuation">:</span> p_vals<span class="token punctuation">}</span><span class="token punctuation">)</span>\<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">,</span> <span class="token string">'p_value'</span><span class="token punctuation">,</span> <span class="token string">'conversion_test'</span><span class="token punctuation">,</span> <span class="token string">'conversion_control'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>C:\Users\Naixin\Anaconda3\lib\site-packages\ipykernel_launcher.py:9: UserWarning: Boolean Series key will be reindexed to match DataFrame index.  if __name__ == &#39;__main__&#39;:C:\Users\Naixin\Anaconda3\lib\site-packages\ipykernel_launcher.py:10: UserWarning: Boolean Series key will be reindexed to match DataFrame index.  # Remove the CWD from sys.path while we load stuff.</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>country</th>      <th>p_value</th>      <th>conversion_test</th>      <th>conversion_control</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Mexico</td>      <td>0.17</td>      <td>0.05</td>      <td>0.05</td>    </tr>    <tr>      <th>1</th>      <td>Colombia</td>      <td>0.42</td>      <td>0.05</td>      <td>0.05</td>    </tr>    <tr>      <th>2</th>      <td>Argentina</td>      <td>0.32</td>      <td>0.01</td>      <td>0.02</td>    </tr>    <tr>      <th>3</th>      <td>Peru</td>      <td>0.77</td>      <td>0.05</td>      <td>0.05</td>    </tr>    <tr>      <th>4</th>      <td>Venezuela</td>      <td>0.57</td>      <td>0.05</td>      <td>0.05</td>    </tr>    <tr>      <th>5</th>      <td>Chile</td>      <td>0.30</td>      <td>0.05</td>      <td>0.05</td>    </tr>    <tr>      <th>6</th>      <td>Ecuador</td>      <td>0.96</td>      <td>0.05</td>      <td>0.05</td>    </tr>    <tr>      <th>7</th>      <td>Guatemala</td>      <td>0.57</td>      <td>0.05</td>      <td>0.05</td>    </tr>    <tr>      <th>8</th>      <td>Bolivia</td>      <td>0.72</td>      <td>0.05</td>      <td>0.05</td>    </tr>    <tr>      <th>9</th>      <td>Honduras</td>      <td>0.47</td>      <td>0.05</td>      <td>0.05</td>    </tr>    <tr>      <th>10</th>      <td>El Salvador</td>      <td>0.25</td>      <td>0.05</td>      <td>0.05</td>    </tr>    <tr>      <th>11</th>      <td>Paraguay</td>      <td>0.88</td>      <td>0.05</td>      <td>0.05</td>    </tr>    <tr>      <th>12</th>      <td>Nicaragua</td>      <td>0.78</td>      <td>0.05</td>      <td>0.05</td>    </tr>    <tr>      <th>13</th>      <td>Costa Rica</td>      <td>0.69</td>      <td>0.05</td>      <td>0.05</td>    </tr>    <tr>      <th>14</th>      <td>Uruguay</td>      <td>0.88</td>      <td>0.01</td>      <td>0.01</td>    </tr>    <tr>      <th>15</th>      <td>Panama</td>      <td>0.71</td>      <td>0.05</td>      <td>0.05</td>    </tr>  </tbody></table></div><p>After control for country, the test clearly appears non-significant.Not a great success given that the goal was to impove conversion rate, but at least we know that a localized translation didn’t make things worse.</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p><b>1. If the Results Seem Unbelievable, They Probably Are  </b></p><ul><li>We intuitively know that a custom website for each region would yield better results. So when it didn’t it’s important to take extra precautions to make sure that the test was run appropriately, in this case we found that the test sample wasn’t indicative of the population</li></ul><p><b>2. We can Automate This Process Using Machine Learning  </b></p><ul><li>By building a model that can show us if any features can predict whether a user is in the test or control sample, we can automate the process. We can set a threshold for feature significance and let the model tell us automatically if the sample is biased or not! This gives us more time to deal with deeper subjects. 3. By simply looking at feature distributions, we miss the subtly of sample bias</li><li>When we saw the distribution of features, all the features seemed balanced. There were a little discrepancies in country but aged seemed balanced. If we had not run T-test or the decision tree to prove statistical significance then we would of missed country as the major indicator of a biased data set. When running an A/B test, the quality of the test is just important if not more important than the results.</li></ul><p><b>There are many ways to test bias but I’m going to try 2 here:</b>a. Train a to see if it can predict whether it’s the test or control sample(if the sample is unbiased then no features should be predictive)b. : A t-test should reveal whether a feature’s effect on conversion is statistically significant</p>]]></content>
      
      
      <categories>
          
          <category> Data Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python_Take home challenge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-converison rate</title>
      <link href="/2018/01/22/1-conversion-rate/"/>
      <url>/2018/01/22/1-conversion-rate/</url>
      
        <content type="html"><![CDATA[<p>You are asked to :</p><ul><li><p>confirm that the test is actually negative. That is, it appears that the old version of the site with just one translation across Spain AND LatAm performs better.</p></li><li><p>Explain why that might be happening. Are the localized translations really worse?</p></li><li><p>If you are identified what was wrong, design an algorithm that would return FALSE if the same problem is happening in the future and TRUE if everything is good and the results can be trusted.</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> warningswarnings<span class="token punctuation">.</span>simplefilter<span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> auc<span class="token punctuation">,</span> roc_curve<span class="token punctuation">,</span> classification_report<span class="token keyword">from</span> IPython<span class="token punctuation">.</span>display <span class="token keyword">import</span> display<span class="token punctuation">,</span> Image<span class="token punctuation">,</span> SVG<span class="token punctuation">,</span> Math<span class="token punctuation">,</span> YouTubeVideo<span class="token keyword">import</span> h2o<span class="token keyword">from</span> h2o<span class="token punctuation">.</span>frame <span class="token keyword">import</span> H2OFrame<span class="token keyword">from</span> h2o<span class="token punctuation">.</span>estimators<span class="token punctuation">.</span>random_forest <span class="token keyword">import</span> H2ORandomForestEstimator<span class="token keyword">from</span> h2o<span class="token punctuation">.</span>grid<span class="token punctuation">.</span>grid_search <span class="token keyword">import</span> H2OGridSearch<span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'conversion_data.csv'</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>country</th>      <th>age</th>      <th>new_user</th>      <th>source</th>      <th>total_pages_visited</th>      <th>converted</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>UK</td>      <td>25</td>      <td>1</td>      <td>Ads</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>US</td>      <td>23</td>      <td>1</td>      <td>Seo</td>      <td>5</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>US</td>      <td>28</td>      <td>1</td>      <td>Seo</td>      <td>4</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>China</td>      <td>39</td>      <td>1</td>      <td>Seo</td>      <td>5</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>US</td>      <td>30</td>      <td>1</td>      <td>Seo</td>      <td>6</td>      <td>0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python">data<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 316200 entries, 0 to 316199Data columns (total 6 columns):country                316200 non-null objectage                    316200 non-null int64new_user               316200 non-null int64source                 316200 non-null objecttotal_pages_visited    316200 non-null int64converted              316200 non-null int64dtypes: int64(4), object(2)memory usage: 14.5+ MB</code></pre><pre class="line-numbers language-python"><code class="language-python">data<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>age</th>      <th>new_user</th>      <th>total_pages_visited</th>      <th>converted</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>316200.000000</td>      <td>316200.000000</td>      <td>316200.000000</td>      <td>316200.000000</td>    </tr>    <tr>      <th>mean</th>      <td>30.569858</td>      <td>0.685465</td>      <td>4.872966</td>      <td>0.032258</td>    </tr>    <tr>      <th>std</th>      <td>8.271802</td>      <td>0.464331</td>      <td>3.341104</td>      <td>0.176685</td>    </tr>    <tr>      <th>min</th>      <td>17.000000</td>      <td>0.000000</td>      <td>1.000000</td>      <td>0.000000</td>    </tr>    <tr>      <th>25%</th>      <td>24.000000</td>      <td>0.000000</td>      <td>2.000000</td>      <td>0.000000</td>    </tr>    <tr>      <th>50%</th>      <td>30.000000</td>      <td>1.000000</td>      <td>4.000000</td>      <td>0.000000</td>    </tr>    <tr>      <th>75%</th>      <td>36.000000</td>      <td>1.000000</td>      <td>7.000000</td>      <td>0.000000</td>    </tr>    <tr>      <th>max</th>      <td>123.000000</td>      <td>1.000000</td>      <td>29.000000</td>      <td>1.000000</td>    </tr>  </tbody></table></div><p>user base is pretty young, conversion rate at around 3% is industry standard. it make sense.everything seems to make sense here except for max age 123 yrs</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> column <span class="token keyword">in</span> data<span class="token punctuation">.</span>columns<span class="token punctuation">:</span>    uniques <span class="token operator">=</span> sorted<span class="token punctuation">(</span>data<span class="token punctuation">[</span>column<span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0:20s} {1:5d}\t'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>column<span class="token punctuation">,</span> len<span class="token punctuation">(</span>uniques<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> uniques<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>country                  4     [&#39;China&#39;, &#39;Germany&#39;, &#39;UK&#39;, &#39;US&#39;]age                     60     [17, 18, 19, 20, 21, 22, 23, 24, 25, 26]new_user                 2     [0, 1]source                   3     [&#39;Ads&#39;, &#39;Direct&#39;, &#39;Seo&#39;]total_pages_visited     29     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]converted                2     [0, 1]</code></pre><p>A few quick observations: the site is probably a US site, although it does have a large Chinese user base as well user base is pretty young conversion rate at around 3% is industry standard. It makes sense. everything seems to make sense here except for max age 123 yrs! Let’s investigate it:</p><h1 id="Remove-Outliers"><a href="#Remove-Outliers" class="headerlink" title="Remove Outliers"></a>Remove Outliers</h1><p>Typically, age should be below 100. So, first let check outliers and clean the dataset</p><pre class="line-numbers language-python"><code class="language-python">data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">90</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>country</th>      <th>age</th>      <th>new_user</th>      <th>source</th>      <th>total_pages_visited</th>      <th>converted</th>    </tr>  </thead>  <tbody>    <tr>      <th>90928</th>      <td>Germany</td>      <td>123</td>      <td>0</td>      <td>Seo</td>      <td>15</td>      <td>1</td>    </tr>    <tr>      <th>295581</th>      <td>UK</td>      <td>111</td>      <td>0</td>      <td>Ads</td>      <td>10</td>      <td>1</td>    </tr>  </tbody></table></div><p>There are only two records that is invalid, let’s first remove them directly</p><p>It is just 2 users! In this case, we can remove them, nothing will change. In general, depending on theproblem, you can:</p><ul><li>remove the entire row saying you don’t trust the data</li><li>treat those values as NAsif there is a pattern, try to figure out what went wrong.In doubt, always go with removing the row. It is the safest choice.You probably also want to emphasize in the text that wrong data is worrisome and can be an indicator ofsome bug in the logging code. Therefore, you’d like to talk to the software engineer who implemented thecode to see if, perhaps, there are some bugs which affect the data significantly.</li><li>Anyway, here is probably just users who put wrong data. So let’s remove them:</li></ul><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Exploratory-Data-Analysis"><a href="#Exploratory-Data-Analysis" class="headerlink" title="Exploratory Data Analysis"></a>Exploratory Data Analysis</h1><p>now let’s quickly investigate the variables and how their distribution differs for the two classes, this will help us understand whether ther is any information in our data in the first place and get a sense of the data</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Visualization of different countries</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ncols<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>countplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'country'</span><span class="token punctuation">,</span> hue<span class="token operator">=</span><span class="token string">'converted'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Count Plot of Country'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_yscale<span class="token punctuation">(</span><span class="token string">'log'</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'country'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'converted'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Mean Conversion Rate per Country'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="conversion_rate_14_0.jpg" alt="png"></p><p>Here it clearly looks like Chinese covert at a much lower rate than other countries.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Visualization of different user types</span>grouped <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'new_user'</span><span class="token punctuation">,</span> <span class="token string">'converted'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'new_user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ncols<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>countplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'new_user'</span><span class="token punctuation">,</span> hue<span class="token operator">=</span><span class="token string">'converted'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Count Plot of User Types'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_yscale<span class="token punctuation">(</span><span class="token string">'log'</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'new_user'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'converted'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Mean Conversion Rate per User Type'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="conversion_rate_16_0.jpg" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Visualization of different sources</span>grouped <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'source'</span><span class="token punctuation">,</span> <span class="token string">'converted'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'source'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ncols<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>countplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'source'</span><span class="token punctuation">,</span> hue<span class="token operator">=</span><span class="token string">'converted'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Count Plot of Different Sources'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_yscale<span class="token punctuation">(</span><span class="token string">'log'</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'source'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'converted'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Mean Conversion Rate per Source'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="conversion_rate_17_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Visualization of different age</span>grouped <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'converted'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>hist_kws<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'histtype'</span><span class="token punctuation">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'edgecolor'</span><span class="token punctuation">:</span><span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token string">'alpha'</span><span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">}</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ncols<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>distplot<span class="token punctuation">(</span>data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'converted'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Converted 0'</span><span class="token punctuation">,</span>              ax<span class="token operator">=</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hist_kws<span class="token operator">=</span>hist_kws<span class="token punctuation">)</span>sns<span class="token punctuation">.</span>distplot<span class="token punctuation">(</span>data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'converted'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Converted 1'</span><span class="token punctuation">,</span>              ax<span class="token operator">=</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hist_kws<span class="token operator">=</span>hist_kws<span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Count Plot of Age'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>grouped<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grouped<span class="token punctuation">[</span><span class="token string">'converted'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'.-'</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Mean Conversion Rate vs. Age'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Mean convertion rate'</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="conversion_rate_18_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Visualization of different sources</span>grouped <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'total_pages_visited'</span><span class="token punctuation">,</span> <span class="token string">'converted'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'total_pages_visited'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ncols<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>distplot<span class="token punctuation">(</span>data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'converted'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'total_pages_visited'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              label<span class="token operator">=</span><span class="token string">'Converted 0'</span><span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hist_kws<span class="token operator">=</span>hist_kws<span class="token punctuation">)</span>sns<span class="token punctuation">.</span>distplot<span class="token punctuation">(</span>data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'converted'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'total_pages_visited'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              label<span class="token operator">=</span><span class="token string">'Converted 1'</span><span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hist_kws<span class="token operator">=</span>hist_kws<span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Count Plot of Age'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>grouped<span class="token punctuation">[</span><span class="token string">'total_pages_visited'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grouped<span class="token punctuation">[</span><span class="token string">'converted'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'.-'</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Mean Conversion Rate vs. Total_pages_visited'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'total_pages_visited'</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Mean convertion rate'</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="conversion_rate_19_0.png" alt="png"></p><p>definitely spending more time on the site implies higher probability of conversion</p><h1 id="Machine-Learning"><a href="#Machine-Learning" class="headerlink" title="Machine Learning"></a>Machine Learning</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Initialize H2O cluster</span>h2o<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>h2o<span class="token punctuation">.</span>remove_all<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>Checking whether there is an H2O instance running at http://localhost:54321 ..... not found.Attempting to start a local H2O server...; Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)  Starting server from C:\Users\Naixin\Anaconda3\lib\site-packages\h2o\backend\bin\h2o.jar  Ice root: C:\Users\Naixin\AppData\Local\Temp\tmpmhgna45g  JVM stdout: C:\Users\Naixin\AppData\Local\Temp\tmpmhgna45g\h2o_Naixin_started_from_python.out  JVM stderr: C:\Users\Naixin\AppData\Local\Temp\tmpmhgna45g\h2o_Naixin_started_from_python.err  Server is running at http://127.0.0.1:54321Connecting to H2O server at http://127.0.0.1:54321 ... successful.</code></pre><div style="overflow:auto"><table style="width:50%"><tr><td>H2O cluster uptime:</td><td>03 secs</td></tr><tr><td>H2O cluster timezone:</td><td>America/Chicago</td></tr><tr><td>H2O data parsing timezone:</td><td>UTC</td></tr><tr><td>H2O cluster version:</td><td>3.26.0.6</td></tr><tr><td>H2O cluster version age:</td><td>4 days </td></tr><tr><td>H2O cluster name:</td><td>H2O_from_python_Naixin_fptvaq</td></tr><tr><td>H2O cluster total nodes:</td><td>1</td></tr><tr><td>H2O cluster free memory:</td><td>1.747 Gb</td></tr><tr><td>H2O cluster total cores:</td><td>4</td></tr><tr><td>H2O cluster allowed cores:</td><td>4</td></tr><tr><td>H2O cluster status:</td><td>accepting new members, healthy</td></tr><tr><td>H2O connection url:</td><td>http://127.0.0.1:54321</td></tr><tr><td>H2O connection proxy:</td><td>None</td></tr><tr><td>H2O internal security:</td><td>False</td></tr><tr><td>H2O API Extensions:</td><td>Amazon S3, Algos, AutoML, Core V3, TargetEncoder, Core V4</td></tr><tr><td>Python version:</td><td>3.7.3 final</td></tr></table></div><ul><li>I am going to pick a random forest to predict conversion rate. </li><li>I pick a random forest cause: it usually<ol><li>requires very little time to optimize it (its default params are often close to the best ones) </li><li>it is strong with outliers, irrelevant variables, continuous and discrete variables. </li></ol></li></ul><p>I will use the random forest to predict conversion, then I will use its partial dependence plots and variable importance to get insights about howit got information from the variables. Also, I will build a simple tree to find the most obvious user segmentsand see if they agree with RF partial dependence plots.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Transform to H2O Frame, and make sure the target variable is categorical</span>h2o_df <span class="token operator">=</span> H2OFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>h2o_df<span class="token punctuation">[</span><span class="token string">'new_user'</span><span class="token punctuation">]</span> <span class="token operator">=</span> h2o_df<span class="token punctuation">[</span><span class="token string">'new_user'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>asfactor<span class="token punctuation">(</span><span class="token punctuation">)</span>h2o_df<span class="token punctuation">[</span><span class="token string">'converted'</span><span class="token punctuation">]</span> <span class="token operator">=</span> h2o_df<span class="token punctuation">[</span><span class="token string">'converted'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>asfactor<span class="token punctuation">(</span><span class="token punctuation">)</span>h2o_df<span class="token punctuation">.</span>summary<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Parse progress: |█████████████████████████████████████████████████████████| 100%</code></pre><table><thead><tr><th>       </th><th>country  </th><th>age              </th><th>new_user  </th><th>source  </th><th>total_pages_visited  </th><th>converted  </th></tr></thead><tbody><tr><td>type   </td><td>enum     </td><td>int              </td><td>enum      </td><td>enum    </td><td>int                  </td><td>enum       </td></tr><tr><td>mins   </td><td>         </td><td>17.0             </td><td>          </td><td>        </td><td>1.0                  </td><td>           </td></tr><tr><td>mean   </td><td>         </td><td>30.5693110013347 </td><td>          </td><td>        </td><td>4.872918234777034    </td><td>           </td></tr><tr><td>maxs   </td><td>         </td><td>79.0             </td><td>          </td><td>        </td><td>29.0                 </td><td>           </td></tr><tr><td>sigma  </td><td>         </td><td>8.268957596421474</td><td>          </td><td>        </td><td>3.3410533442156267   </td><td>           </td></tr><tr><td>zeros  </td><td>         </td><td>0                </td><td>          </td><td>        </td><td>0                    </td><td>           </td></tr><tr><td>missing</td><td>0        </td><td>0                </td><td>0         </td><td>0       </td><td>0                    </td><td>0          </td></tr><tr><td>0      </td><td>UK       </td><td>25.0             </td><td>1         </td><td>Ads     </td><td>1.0                  </td><td>0          </td></tr><tr><td>1      </td><td>US       </td><td>23.0             </td><td>1         </td><td>Seo     </td><td>5.0                  </td><td>0          </td></tr><tr><td>2      </td><td>US       </td><td>28.0             </td><td>1         </td><td>Seo     </td><td>4.0                  </td><td>0          </td></tr><tr><td>3      </td><td>China    </td><td>39.0             </td><td>1         </td><td>Seo     </td><td>5.0                  </td><td>0          </td></tr><tr><td>4      </td><td>US       </td><td>30.0             </td><td>1         </td><td>Seo     </td><td>6.0                  </td><td>0          </td></tr><tr><td>5      </td><td>US       </td><td>31.0             </td><td>0         </td><td>Seo     </td><td>1.0                  </td><td>0          </td></tr><tr><td>6      </td><td>China    </td><td>27.0             </td><td>1         </td><td>Seo     </td><td>4.0                  </td><td>0          </td></tr><tr><td>7      </td><td>US       </td><td>23.0             </td><td>0         </td><td>Ads     </td><td>4.0                  </td><td>0          </td></tr><tr><td>8      </td><td>UK       </td><td>29.0             </td><td>0         </td><td>Direct  </td><td>4.0                  </td><td>0          </td></tr><tr><td>9      </td><td>US       </td><td>25.0             </td><td>0         </td><td>Ads     </td><td>2.0                  </td><td>0          </td></tr></tbody></table><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Split into 75% training and 25% test dataset</span>strat_split <span class="token operator">=</span> h2o_df<span class="token punctuation">[</span><span class="token string">'converted'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>stratified_split<span class="token punctuation">(</span>test_frac<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">,</span> seed<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>train <span class="token operator">=</span> h2o_df<span class="token punctuation">[</span>strat_split <span class="token operator">==</span> <span class="token string">'train'</span><span class="token punctuation">]</span>test <span class="token operator">=</span> h2o_df<span class="token punctuation">[</span>strat_split <span class="token operator">==</span> <span class="token string">'test'</span><span class="token punctuation">]</span>feature <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'new_user'</span><span class="token punctuation">,</span> <span class="token string">'source'</span><span class="token punctuation">,</span> <span class="token string">'total_pages_visited'</span><span class="token punctuation">]</span>target <span class="token operator">=</span> <span class="token string">'converted'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Build random forest model</span>model <span class="token operator">=</span> H2ORandomForestEstimator<span class="token punctuation">(</span>balance_classes<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> ntrees<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> max_depth<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>                                  mtries<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> seed<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">,</span> score_each_iteration<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>train<span class="token punctuation">(</span>x<span class="token operator">=</span>feature<span class="token punctuation">,</span> y<span class="token operator">=</span>target<span class="token punctuation">,</span> training_frame<span class="token operator">=</span>train<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>drf Model Build progress: |███████████████████████████████████████████████| 100%</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Feature importance</span>importance <span class="token operator">=</span> model<span class="token punctuation">.</span>varimp<span class="token punctuation">(</span>use_pandas<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'scaled_importance'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'variable'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>importance<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="conversion_rate_27_0.png" alt="png"></p><p>total pages visited is the most important one, by far.Unfortunately, it is probably the least “actionable”. People visit many pages cause they already want to buy. Also, in order to buy you have to click on multipages</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Make predictions</span>train_true <span class="token operator">=</span> train<span class="token punctuation">.</span>as_data_frame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'converted'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuestest_true <span class="token operator">=</span> test<span class="token punctuation">.</span>as_data_frame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'converted'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuestrain_pred <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>train<span class="token punctuation">)</span><span class="token punctuation">.</span>as_data_frame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'p1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuestest_pred <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">.</span>as_data_frame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'p1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuestrain_fpr<span class="token punctuation">,</span> train_tpr<span class="token punctuation">,</span> _ <span class="token operator">=</span> roc_curve<span class="token punctuation">(</span>train_true<span class="token punctuation">,</span> train_pred<span class="token punctuation">)</span>test_fpr<span class="token punctuation">,</span> test_tpr<span class="token punctuation">,</span> _ <span class="token operator">=</span> roc_curve<span class="token punctuation">(</span>test_true<span class="token punctuation">,</span> test_pred<span class="token punctuation">)</span>train_auc <span class="token operator">=</span> np<span class="token punctuation">.</span>round<span class="token punctuation">(</span>auc<span class="token punctuation">(</span>train_fpr<span class="token punctuation">,</span> train_tpr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>test_auc <span class="token operator">=</span> np<span class="token punctuation">.</span>round<span class="token punctuation">(</span>auc<span class="token punctuation">(</span>test_fpr<span class="token punctuation">,</span> test_tpr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>drf prediction progress: |████████████████████████████████████████████████| 100%drf prediction progress: |████████████████████████████████████████████████| 100%</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Classification report</span><span class="token keyword">print</span><span class="token punctuation">(</span>classification_report<span class="token punctuation">(</span>y_true<span class="token operator">=</span>test_true<span class="token punctuation">,</span> y_pred<span class="token operator">=</span><span class="token punctuation">(</span>test_pred <span class="token operator">></span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>              precision    recall  f1-score   support           0       0.99      1.00      0.99     76500           1       0.84      0.63      0.72      2550    accuracy                           0.98     79050   macro avg       0.91      0.82      0.86     79050weighted avg       0.98      0.98      0.98     79050</code></pre><p>​    </p><pre class="line-numbers language-python"><code class="language-python">fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>train_fpr<span class="token punctuation">,</span> train_tpr<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Train AUC: '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>train_auc<span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>test_fpr<span class="token punctuation">,</span> test_tpr<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Test AUC: '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>test_auc<span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'False Positive Rate'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'True Positive Rate'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="conversion_rate_31_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">_ <span class="token operator">=</span> model<span class="token punctuation">.</span>partial_plot<span class="token punctuation">(</span>train<span class="token punctuation">,</span> cols<span class="token operator">=</span>feature<span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>PartialDependencePlot progress: |█████████████████████████████████████████| 100%</code></pre><p><img src="conversion_rate_32_1.png" alt="png"></p><p>In partial dependency plots, we just care about trends, not the actual y valueso this shows:</p><ul><li>user with old account are better than new users</li><li>china is really bad, all other country are similar with Germany being the best</li><li>the site works very well for young people and bad for less young people(&gt;30)</li><li>source is irrelative</li></ul><h1 id="Conclusions-and-suggestions"><a href="#Conclusions-and-suggestions" class="headerlink" title="Conclusions and suggestions:"></a>Conclusions and suggestions:</h1><pre class="line-numbers language-python"><code class="language-python">i <span class="token operator">=</span> Image<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'conclusion.png'</span><span class="token punctuation">)</span>i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="conversion_rate_35_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Shutdown h2o instance</span>h2o<span class="token punctuation">.</span>cluster<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>H2O session _sid_a87c closed.</code></pre><p>with more time you spend ~ 1 day trying other models/different params and I would pick the best</p><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Data Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python_Take home challenge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ISLR-Multiple Linear Regression</title>
      <link href="/2018/01/22/islr-multiple-linear-regression/"/>
      <url>/2018/01/22/islr-multiple-linear-regression/</url>
      
        <content type="html"><![CDATA[<h1 id="Comparing-Logistic-Regression-LDA-QDA-and-KNN"><a href="#Comparing-Logistic-Regression-LDA-QDA-and-KNN" class="headerlink" title="Comparing Logistic Regression, LDA, QDA, and KNN"></a>Comparing Logistic Regression, LDA, QDA, and KNN</h1><h2 id="logistic-regression-and-LDA-methods-are-closely-connected"><a href="#logistic-regression-and-LDA-methods-are-closely-connected" class="headerlink" title="logistic regression and LDA methods are closely connected."></a>logistic regression and LDA methods are closely connected.</h2><p><strong>Setting</strong>: Consider the two-class setting with $p = 1$ predictor,and let $p_1(x)$ and $p_2(x) = 1−p_1(x)$ be the probabilities that the observation$X = x$ belongs to class 1 and class 2, respectively.</p><p>In LDA, from</p><p>\begin{align}p_k(x)=\frac{\pi_k \frac{1}{\sqrt{2\pi}\sigma}\exp{\left( -\frac{1}{2\sigma^2}(x-\mu_k)^2 \right)}}{\sum_{l=1}^K\pi_l\frac{1}{\sqrt{2\pi}\sigma}\exp{\left( -\frac{1}{2\sigma^2}(x-\mu_l)^2 \right)}}\end{align}</p><p>\begin{align}\delta_k(x)=x\frac{\mu_k}{\sigma^2}-\frac{\mu_k^2}{2\sigma^2}+\log(\pi_k) \end{align}</p><p>The <strong>log odds</strong> is given by</p><p>\begin{align}\log{\frac{p_1(x)}{1-p_1(x)}}=\log{\frac{p_1(x)}{p_2(x)}}=c_0+c_1x\end{align}</p><p>where c0 and c1 are functions of μ1, μ2, and σ2.</p><p>In Logistic Regression,</p><p>\begin{align}\log{\frac{p_1}{1-p_1}}=\beta_0+\beta_1x\end{align}</p><p><strong>SAME</strong></p><ul><li><strong>Both logistic regressionand LDA produce linear decision boundaries.</strong> </li></ul><p><strong>DIFFERENCES</strong></p><ul><li><p>The only differencebetween the two approaches lies in the fact that β0 and β1 are estimatedusing maximum likelihood, whereas c0 and c1 are computed using the estimatedmean and variance from a normal distribution. This same connectionbetween LDA and logistic regression also holds for multidimensional datawith p &gt; 1.</p></li><li><p>LDA assumes that the observations are drawnfrom a Gaussian distribution with a common covariance matrix in eachclass, and so can provide some improvements over logistic regression whenthis assumption approximately holds. Conversely, logistic regression canoutperform LDA if these Gaussian assumptions are not met.</p></li></ul><h2 id="KNN-dominate-LDA-and-Logistic-in-non-linear-setting"><a href="#KNN-dominate-LDA-and-Logistic-in-non-linear-setting" class="headerlink" title="KNN dominate LDA and Logistic in non-linear setting"></a>KNN dominate LDA and Logistic in non-linear setting</h2><p>In order to make a prediction for an observation X = x, the K training observations that are closest to x areidentified. Then X is assigned to the class to which the plurality of theseobservations belong. Hence KNN is a completely <strong>non-parametric</strong> approach:<em>no assumptions are made about the shape of the decision boundary</em>. </p><blockquote><p>Therefore,we can expect KNN to dominate LDA and logistic regressionwhen the decision boundary is highly non-linear. </p></blockquote><p>On the other hand, KNNdoes not tell us which predictors are important</p><h2 id="QDA-serves-as-a-compromise-between-KNN-LDA-and-logistic-regression"><a href="#QDA-serves-as-a-compromise-between-KNN-LDA-and-logistic-regression" class="headerlink" title="QDA serves as a compromise between KNN, LDA and logistic regression"></a>QDA serves as a compromise between KNN, LDA and logistic regression</h2><p>QDA serves as a compromise between the non-parametric KNNmethod and the linear LDA and logistic regression approaches. Since QDAassumes a quadratic decision boundary, it can accurately model a widerrange of problems than can the linear methods. Though not as flexibleas KNN, QDA can perform better in the presence of a <em>limited number oftraining observations</em> because it does make some assumptions about theform of the decision boundary. </p><img src="17.png" width="800"> <p><strong>Scenario 1</strong>: </p><ul><li>20 training observations in each of two classes. The observations within each class were uncorrelated random normal variables with a different mean in each class.</li><li>LDA performed well in this setting. KNN performed poorly because it paid a price in terms of variance thatwas not offset by a reduction in bias. </li></ul><p><strong>Scenario 2</strong>: </p><ul><li>Details are as in Scenario 1, except that within eachclass, the two predictors had a correlation of −0.5. </li><li>Little change in the relative performances ofthe methods as compared to the previous scenario.</li></ul><p><strong>Scenario 3</strong>: </p><ul><li>X1 and X2 are from the t-distribution, with 50 observations per class. </li></ul><blockquote><p>The <strong>t-distribution</strong> has a similar shape to the normal distribution, but it has a tendency to yield more extremepoints—that is, more points that are far from the mean. </p></blockquote><ul><li>The decision boundary was still linear, and so fit into the logisticregression framework. The set-up violated the assumptions of LDA,since the observations were not drawn from a normal distribution. QDA results deteriorated considerablyas a consequence of non-normality.</li></ul><p><strong>Scenario 4</strong>: </p><ul><li>The data were generated from a normal distribution,with a correlation of 0.5 between the predictors in the first class,and correlation of −0.5 between the predictors in the second class.</li><li>This setup corresponded to the QDA assumption, and resulted inquadratic decision boundaries. </li></ul><p><strong>Scenario 5</strong>: </p><ul><li>Within each class, the observations were generated froma normal distribution with uncorrelated predictors. However, the responseswere sampled from the logistic function using $X^2_1 , X^2_2, and \, X1 × X2$ as predictors. </li><li>Consequently, there is a quadratic decisionboundary. QDA onceagain performed best, followed closely by KNN-CV. The linear methodshad poor performance.</li></ul><p><strong>Scenario 6</strong>: </p><ul><li>Details are as in the previous scenario, but the responseswere sampled from a more complicated non-linear function. </li><li>Even the quadratic decision boundaries of QDA could not adequatelymodel the data. </li><li>Much more flexible KNN-CV method gave the best results. ButKNN with K = 1 gave the worst results out of all methods. </li></ul><blockquote><p>Thishighlights the fact that <strong>even when the data exhibits a complex nonlinearrelationship, a non-parametric method such as KNN can stillgive poor results if the level of smoothness is not chosen correctly.</strong></p></blockquote><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><ul><li><p>When the true decision boundaries are linear, thenthe LDA and logistic regression approaches will tend to perform well.</p></li><li><p>Whenthe boundaries are moderately non-linear, QDA may give better results.</p></li><li><p>For much more complicated decision boundaries, a non-parametricapproach such as KNN can be superior. But the level of smoothness for anon-parametric approach must be chosen carefully.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Regression </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
