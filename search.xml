<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2020/01/22/cs301-proj8/"/>
      <url>/2020/01/22/cs301-proj8/</url>
      
        <content type="html"><![CDATA[<hr><p>title: CS301_Proj8date: 2019-011-23 12:32:09top: falsecover: falsepassword:toc: truemathjax: falsetags:</p><ul><li>CS301 Data Programming Icategories:</li><li>CS301Proj</li></ul><hr><h1 id="CS301-Proj8"><a href="#CS301-Proj8" class="headerlink" title="CS301_Proj8"></a>CS301_Proj8</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Having worked our way through soccer and hurricanes, we are now goingto work on the IMDB Movies Dataset. A very exciting fortnight liesahead where we find out some cool facts about our favorite movies,actors, and directors.</p><p>You’ll hand in a <code>main.ipynb</code> file for this project; use the usual<code>#qN</code> format.  Start by downloading the following files: <code>test.py</code>,<code>small_mapping.csv</code>, <code>small_movies.csv</code>, <code>mapping.csv</code>, and<code>movies.csv</code>.</p><h2 id="The-Data"><a href="#The-Data" class="headerlink" title="The Data"></a>The Data</h2><p>By stage 2, you will be mostly working mainly with <code>movies.csv</code> and<code>mapping.csv</code>. The <code>small_movies.csv</code> and <code>small_mapping.csv</code> havebeen provided to help you get your core logic working in stage 1 withsome simpler data.</p><p><code>small_movies.csv</code> and <code>movies.csv</code> have 6 columns: <code>title</code>, <code>year</code>, <code>rating</code>, <code>directors</code>, <code>actors</code>, and <code>genres</code></p><p>Here are a few rows from <code>movies.csv</code>:</p><pre><code>title,year,rating,directors,actors,genrestt1931435,2013,5.6,nm0951698,nm0000134,&quot;Comedy,Drama,Romance&quot;tt0242252,2001,6.1,nm0796124,&quot;nm0048932,nm0000596,nm0004778&quot;,&quot;Drama,History,Romance&quot;tt0066811,1971,6.0,nm0125111,&quot;nm0000621,nm0283499,nm0604702,nm0185281&quot;,&quot;Comedy,Family&quot;</code></pre><p><code>small_mapping.csv</code> and <code>mapping.csv</code> have 2 columns: <code>id</code> and <code>name</code></p><p>Here are a few rows from <code>mapping.csv</code>:</p><pre><code>nm0000001,Fred Astairenm0000004,John Belushinm0000007,Humphrey Bogarttt0110997,The River Wild</code></pre><p>Each of those weird alphanumeric sequence is a unique identifier foreither an actor or a director or a movie title.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#project: p8</span><span class="token comment" spellcheck="true">#submitter: naixinzhang</span><span class="token comment" spellcheck="true">#partner: none</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> csv  <span class="token keyword">import</span> matplotlib<span class="token punctuation">,</span> pandas<span class="token keyword">import</span> copy<span class="token keyword">from</span> numpy <span class="token keyword">import</span> median<span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">process_csv</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    exampleFile <span class="token operator">=</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    exampleReader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>exampleFile<span class="token punctuation">)</span>    <span class="token keyword">return</span> list<span class="token punctuation">(</span>exampleReader<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_mapping</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    csv_data <span class="token operator">=</span> process_csv<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    newdict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> csv_data<span class="token punctuation">:</span>        newdict<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> newdict<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q1 what is returned by your get_mapping("small_mapping.csv") function?</span>mapping <span class="token operator">=</span> get_mapping<span class="token punctuation">(</span><span class="token string">"small_mapping.csv"</span><span class="token punctuation">)</span>mapping<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>{&#39;nm0000131&#39;: &#39;John Cusack&#39;, &#39;nm0000154&#39;: &#39;Mel Gibson&#39;, &#39;nm0000163&#39;: &#39;Dustin Hoffman&#39;, &#39;nm0000418&#39;: &#39;Danny Glover&#39;, &#39;nm0000432&#39;: &#39;Gene Hackman&#39;, &#39;nm0000997&#39;: &#39;Gary Busey&#39;, &#39;nm0001149&#39;: &#39;Richard Donner&#39;, &#39;nm0001219&#39;: &#39;Gary Fleder&#39;, &#39;nm0752751&#39;: &#39;Mitchell Ryan&#39;, &#39;tt0313542&#39;: &#39;Runaway Jury&#39;, &#39;tt0093409&#39;: &#39;Lethal Weapon&#39;}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q2 what is the value associated with the key "nm0752751"?</span>mapping<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'nm0752751'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>&#39;Mitchell Ryan&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q3 what are the values in the mapping associated with keys beginning with "nm"?</span><span class="token keyword">def</span> <span class="token function">get_values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> mapping<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> key<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'nm'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mapping<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> resget_values<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;John Cusack&#39;, &#39;Mel Gibson&#39;, &#39;Dustin Hoffman&#39;, &#39;Danny Glover&#39;, &#39;Gene Hackman&#39;, &#39;Gary Busey&#39;, &#39;Richard Donner&#39;, &#39;Gary Fleder&#39;, &#39;Mitchell Ryan&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q4:which keys in the mapping map to people with a first name of "Gary"?</span><span class="token keyword">def</span> <span class="token function">get_key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>values <span class="token keyword">in</span> mapping<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> values<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'Gary '</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">return</span> resget_key<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;nm0000997&#39;, &#39;nm0001219&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_raw_movies</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    csv_data <span class="token operator">=</span> process_csv<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    header <span class="token operator">=</span> csv_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> csv_data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> key <span class="token keyword">in</span> header<span class="token punctuation">:</span>            value <span class="token operator">=</span> i<span class="token punctuation">[</span>header<span class="token punctuation">.</span>index<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token string">'title'</span><span class="token punctuation">:</span>                dict<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>key<span class="token punctuation">:</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token string">'year'</span><span class="token punctuation">:</span>                   dict<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>key<span class="token punctuation">:</span>int<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token string">'rating'</span><span class="token punctuation">:</span>                dict<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>key<span class="token punctuation">:</span>float<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token string">'directors'</span> <span class="token operator">or</span> key <span class="token operator">==</span> <span class="token string">'actors'</span> <span class="token operator">or</span> key <span class="token operator">==</span><span class="token string">'genres'</span><span class="token punctuation">:</span>                value <span class="token operator">=</span> value<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>                dict<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>key<span class="token punctuation">:</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dict<span class="token punctuation">)</span>    <span class="token keyword">return</span> res <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q5 what does get_raw_movies("small_movies.csv") return?</span>small_movies <span class="token operator">=</span> get_raw_movies<span class="token punctuation">(</span><span class="token string">'small_movies.csv'</span><span class="token punctuation">)</span>small_movies<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[{&#39;title&#39;: &#39;tt0313542&#39;,  &#39;year&#39;: 2003,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;nm0001219&#39;],  &#39;actors&#39;: [&#39;nm0000131&#39;, &#39;nm0000432&#39;, &#39;nm0000163&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;tt0093409&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;nm0001149&#39;],  &#39;actors&#39;: [&#39;nm0000154&#39;, &#39;nm0000418&#39;, &#39;nm0000997&#39;, &#39;nm0752751&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q6 how many genres did the movie at index 0 have?</span><span class="token keyword">def</span> <span class="token function">get_num_genre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> small_movies<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'genres'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> numget_num_genre<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>3</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q7 what is the ID of the last actor listed for the move at index 1?</span><span class="token keyword">def</span> <span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> small_movies<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'actors'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>get_id<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;nm0752751&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_movies</span><span class="token punctuation">(</span>movies_path<span class="token punctuation">,</span> mapping_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    maps <span class="token operator">=</span> get_mapping<span class="token punctuation">(</span>mapping_path<span class="token punctuation">)</span>    mov <span class="token operator">=</span> get_raw_movies<span class="token punctuation">(</span>movies_path<span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>mov<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> maps<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> mov<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                mov<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> maps<span class="token punctuation">.</span>get<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">for</span> t <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>mov<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'actors'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> mov<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'actors'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">:</span>                    mov<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'actors'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span>  <span class="token operator">=</span> maps<span class="token punctuation">.</span>get<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">for</span> p <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>mov<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'directors'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> mov<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'directors'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">:</span>                    mov<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'directors'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span>  <span class="token operator">=</span> maps<span class="token punctuation">.</span>get<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> mov<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">small <span class="token operator">=</span> get_movies<span class="token punctuation">(</span><span class="token string">"small_movies.csv"</span><span class="token punctuation">,</span> <span class="token string">"small_mapping.csv"</span><span class="token punctuation">)</span>small<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[{&#39;title&#39;: &#39;Runaway Jury&#39;,  &#39;year&#39;: 2003,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Gary Fleder&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Gene Hackman&#39;, &#39;Dustin Hoffman&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Lethal Weapon&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Richard Donner&#39;],  &#39;actors&#39;: [&#39;Mel Gibson&#39;, &#39;Danny Glover&#39;, &#39;Gary Busey&#39;, &#39;Mitchell Ryan&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q8  what is small[0]["title"]?</span>small<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>&#39;Runaway Jury&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q9 what is small[1]["actors"]?</span>small<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"actors"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[&#39;Mel Gibson&#39;, &#39;Danny Glover&#39;, &#39;Gary Busey&#39;, &#39;Mitchell Ryan&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q10 what is small[-1]["directors"]?</span>small<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"directors"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[&#39;Richard Donner&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q11 what is small?</span>small<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[{&#39;title&#39;: &#39;Runaway Jury&#39;,  &#39;year&#39;: 2003,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Gary Fleder&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Gene Hackman&#39;, &#39;Dustin Hoffman&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Lethal Weapon&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Richard Donner&#39;],  &#39;actors&#39;: [&#39;Mel Gibson&#39;, &#39;Danny Glover&#39;, &#39;Gary Busey&#39;, &#39;Mitchell Ryan&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}]</code></pre><pre class="line-numbers language-python"><code class="language-python">movies <span class="token operator">=</span> get_movies<span class="token punctuation">(</span><span class="token string">"movies.csv"</span><span class="token punctuation">,</span> <span class="token string">"mapping.csv"</span><span class="token punctuation">)</span>movies<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[{&#39;title&#39;: &#39;The Big Wedding&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Justin Zackham&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Affair of the Necklace&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Charles Shyer&#39;],  &#39;actors&#39;: [&#39;Simon Baker&#39;, &#39;Jonathan Pryce&#39;, &#39;Adrien Brody&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Barefoot Executive&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Robert Butler&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Joe Flynn&#39;, &#39;Harry Morgan&#39;, &#39;Wally Cox&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;I Melt with You&#39;,  &#39;year&#39;: 2011,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Mark Pellington&#39;],  &#39;actors&#39;: [&#39;Thomas Jane&#39;, &#39;Rob Lowe&#39;, &#39;Jeremy Piven&#39;, &#39;Christian McKay&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Vision of Murder: The Story of Donielle&#39;,  &#39;year&#39;: 2000,  &#39;rating&#39;: 4.9,  &#39;directors&#39;: [&#39;Donald Wrye&#39;],  &#39;actors&#39;: [&#39;Thomas Ian Griffith&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Flying Tigers&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;David Miller&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;John Carroll&#39;, &#39;Paul Kelly&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Life Begins for Andy Hardy&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Lewis Stone&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Family&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Luc Besson&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &quot;John D&#39;Leo&quot;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Rachel and the Stranger&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Norman Foster&#39;],  &#39;actors&#39;: [&#39;William Holden&#39;, &#39;Robert Mitchum&#39;, &#39;Gary Gray&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Red River&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Arthur Rosson&#39;, &#39;Howard Hawks&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Montgomery Clift&#39;, &#39;Walter Brennan&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Person to Person&#39;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Dustin Guy Defa&#39;],  &#39;actors&#39;: [&#39;Michael Cera&#39;, &#39;Bene Coopersmith&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Wrong Man&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Alfred Hitchcock&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Anthony Quayle&#39;, &#39;Harold J. Stone&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Playing for Keeps&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 4.1,  &#39;directors&#39;: [&#39;Harvey Weinstein&#39;, &#39;Bob Weinstein&#39;],  &#39;actors&#39;: [&#39;Daniel Jordano&#39;, &#39;Matthew Penn&#39;, &#39;Leon W. Grant&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Doors&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Oliver Stone&#39;],  &#39;actors&#39;: [&#39;Val Kilmer&#39;, &#39;Kyle MacLachlan&#39;, &#39;Frank Whaley&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Shoot-Out at Medicine Bend&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Richard L. Bare&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;James Craig&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Watch the Birdie&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Jack Donohue&#39;],  &#39;actors&#39;: [&#39;Red Skelton&#39;, &#39;Leon Ames&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Rainbow Valley&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;Lloyd Ingraham&#39;,   &#39;John Wayne&#39;,   &quot;George &#39;Gabby&#39; Hayes&quot;,   &#39;LeRoy Mason&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Sexual Tension: Volatile&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Marcelo Briem Stamm&#39;, &#39;Marco Berger&#39;],  &#39;actors&#39;: [&#39;Lucas Lagré&#39;,   &#39;Mario Verón&#39;,   &#39;Javier De Pietro&#39;,   &#39;Lautaro Machaca&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Man from the Alamo&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Chill Wills&#39;, &quot;Hugh O&#39;Brian&quot;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;I Met My Love Again&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;George Cukor&#39;, &#39;Arthur Ripley&#39;, &#39;Joshua Logan&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Alan Marshal&#39;],  &#39;genres&#39;: [&#39;Romance&#39;]}, {&#39;title&#39;: &#39;Bad Company&#39;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Robert Benton&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Barry Brown&#39;, &#39;Jim Davis&#39;, &#39;David Huddleston&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Signed, Sealed, Delivered: One in a Million&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Kevin Fair&#39;],  &#39;actors&#39;: [&#39;Eric Mabius&#39;, &#39;Geoff Gustafson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Man Who Understood Women&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Nunnally Johnson&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Cesare Danova&#39;, &#39;Myron McCormick&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Floundering&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Peter McCarthy&#39;],  &#39;actors&#39;: [&#39;James Le Gros&#39;, &#39;Zander Schloss&#39;, &#39;John Cusack&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Lust Connection&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Jim Wynorski&#39;],  &#39;actors&#39;: [&#39;Frank Harper&#39;, &#39;John Henry Richardson&#39;, &#39;Kirk Flavious&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Another Man, Another Chance&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Claude Lelouch&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Francis Huster&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &quot;The Moon&#39;s Our Home&quot;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Charles Butterworth&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Modern Times&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 8.5,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;Al Ernest Garcia&#39;,   &#39;Charles Chaplin&#39;,   &#39;Henry Bergman&#39;,   &#39;Tiny Sandford&#39;,   &#39;Chester Conklin&#39;,   &#39;Hank Mann&#39;,   &#39;Stanley Blystone&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &quot;Santa Claus Is Comin&#39; to Town&quot;,  &#39;year&#39;: 1970,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Jules Bass&#39;, &#39;Arthur Rankin Jr.&#39;],  &#39;actors&#39;: [&#39;Fred Astaire&#39;, &#39;Mickey Rooney&#39;, &#39;Keenan Wynn&#39;, &#39;Paul Frees&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Small Apartments&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Jonas Åkerlund&#39;],  &#39;actors&#39;: [&#39;Matt Lucas&#39;, &#39;Peter Stormare&#39;, &#39;James Caan&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;What a Way to Go!&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;J. Lee Thompson&#39;],  &#39;actors&#39;: [&#39;Paul Newman&#39;, &#39;Robert Mitchum&#39;, &#39;Dean Martin&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Konrad&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Nell Cox&#39;],  &#39;actors&#39;: [&#39;Max Wright&#39;, &#39;Huckleberry Fox&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Out Cold&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Brendan Malloy&#39;, &#39;Emmett Malloy&#39;],  &#39;actors&#39;: [&#39;Flex Alexander&#39;, &#39;David Denman&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Interstate 60: Episodes of the Road&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Bob Gale&#39;],  &#39;actors&#39;: [&#39;James Marsden&#39;, &#39;Gary Oldman&#39;, &#39;Kurt Russell&#39;, &#39;Matthew Edison&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Comes a Horseman&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Alan J. Pakula&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Jason Robards&#39;, &#39;George Grizzard&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Righteous Kill&#39;,  &#39;year&#39;: 2008,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Jon Avnet&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Al Pacino&#39;, &#39;50 Cent&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Porco Rosso&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Hayao Miyazaki&#39;],  &#39;actors&#39;: [&#39;Shûichirô Moriyama&#39;, &#39;Bunshi Katsura Vi&#39;, &#39;Tsunehiko Kamijô&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;West of the Pecos&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Edward Killy&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Richard Martin&#39;, &#39;Thurston Hall&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Without Reservations&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Mervyn LeRoy&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Don DeFore&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Charley and the Angel&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Vincent McEveety&#39;],  &#39;actors&#39;: [&#39;Fred MacMurray&#39;, &#39;Harry Morgan&#39;, &#39;Kurt Russell&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Silk&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Cirio H. Santiago&#39;],  &#39;actors&#39;: [&#39;Bill McLaughlin&#39;, &#39;Joe Mari Avellana&#39;, &#39;Frederick Bailey&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;China Sky&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;His Private Secretary&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Phil Whitman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Reginald Barlow&#39;, &#39;Alec B. Francis&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Wake of the Red Witch&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Edward Ludwig&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Gig Young&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Legend of the Lost&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Rossano Brazzi&#39;, &#39;Kurt Kasznar&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Stealing Las Vegas&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Francisco Menéndez&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Antonio Fargas&#39;, &#39;Ethan Landry&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Computer Wore Tennis Shoes&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Robert Butler&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Cesar Romero&#39;, &#39;Joe Flynn&#39;, &#39;William Schallert&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Goodfellas&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 8.7,  &#39;directors&#39;: [&#39;Martin Scorsese&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Ray Liotta&#39;, &#39;Joe Pesci&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Better Off Dead...&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Savage Steve Holland&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;David Ogden Stiers&#39;, &#39;Demian Slade&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Go Toward the Light&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Mike Robe&#39;],  &#39;actors&#39;: [&#39;Joshua Harris&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Wagon Wheels&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Charles Barton&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Billy Lee&#39;, &#39;Monte Blue&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;They Were Expendable&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;John Ford&#39;, &#39;Robert Montgomery&#39;],  &#39;actors&#39;: [&#39;Robert Montgomery&#39;, &#39;John Wayne&#39;, &#39;Jack Holt&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &quot;This Man&#39;s Navy&quot;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;Wallace Beery&#39;, &#39;Tom Drake&#39;, &#39;James Gleason&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Santee&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Gary Nelson&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Michael Burns&#39;, &#39;Jay Silverheels&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Lawless Frontier&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;Gordon De Main&#39;,   &#39;John Wayne&#39;,   &quot;George &#39;Gabby&#39; Hayes&quot;,   &#39;Jack Rockwell&#39;,   &#39;Jay Wilsey&#39;,   &#39;Yakima Canutt&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Rio 70&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;Jesús Franco&#39;],  &#39;actors&#39;: [&#39;Richard Wyler&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;]}, {&#39;title&#39;: &#39;Spartacus&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Stanley Kubrick&#39;],  &#39;actors&#39;: [&#39;Kirk Douglas&#39;, &#39;Laurence Olivier&#39;, &#39;Charles Laughton&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Time Trackers&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Howard R. Cohen&#39;],  &#39;actors&#39;: [&#39;Wil Shriner&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Tale of the Princess Kaguya&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Isao Takahata&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;James Marsden&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Kid&#39;,  &#39;year&#39;: 1921,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;F. Blinn&#39;,   &#39;Charles Chaplin&#39;,   &#39;Jackie Coogan&#39;,   &#39;Carl Miller&#39;,   &#39;Albert Austin&#39;,   &#39;Henry Bergman&#39;,   &#39;Edward Biby&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;A Lady Takes a Chance&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Charles Winninger&#39;, &#39;Phil Silvers&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Pacific and Eddy&#39;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Matthew Nourse&#39;],  &#39;actors&#39;: [&#39;Ryan Donowho&#39;, &#39;James Duval&#39;, &#39;Nikki Sudden&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Undercover Blues&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Herbert Ross&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Stanley Tucci&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;The Wrong Boyfriend&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 4.1,  &#39;directors&#39;: [&#39;Anthony DiBlasi&#39;],  &#39;actors&#39;: [&#39;Andrew Jacobs&#39;, &#39;Matthew Boehm&#39;, &#39;James Caan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Ride, Vaquero!&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;Robert Taylor&#39;, &#39;Howard Keel&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Road to Wellville&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Alan Parker&#39;],  &#39;actors&#39;: [&#39;Anthony Hopkins&#39;, &#39;Matthew Broderick&#39;, &#39;John Cusack&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Night Has a Thousand Eyes&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;Edward G. Robinson&#39;, &#39;John Lund&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Graves End&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 8.8,  &#39;directors&#39;: [&#39;James Marlowe&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Steven Williams&#39;, &#39;Daniel Roebuck&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Mr. Muggs Rides Again&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Wallace Fox&#39;],  &#39;actors&#39;: [&#39;Leo Gorcey&#39;,   &#39;Huntz Hall&#39;,   &quot;William &#39;Billy&#39; Benedict&quot;,   &#39;Johnny Duncan&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Once Upon a Time in America&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 8.4,  &#39;directors&#39;: [&#39;Sergio Leone&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;James Woods&#39;, &#39;Treat Williams&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Regina Roma&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Jean-Yves Prate&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Ray Sharkey&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Domino One&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Nick Louvel&#39;],  &#39;actors&#39;: [&#39;Nick Garrison&#39;, &#39;Ken Cheeseman&#39;, &#39;Steve Guttenberg&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Love by Chance&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Gary Harvey&#39;],  &#39;actors&#39;: [&#39;Benjamin Ayres&#39;, &#39;Garwin Sanford&#39;, &#39;John Cassini&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Score&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Frank Oz&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Edward Norton&#39;, &#39;Marlon Brando&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Stranger Wore a Gun&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;André De Toth&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;George Macready&#39;],  &#39;genres&#39;: [&#39;War&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Both Sides of the Law&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Muriel Box&#39;],  &#39;actors&#39;: [&#39;Terence Morgan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Glass Key&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Stuart Heisler&#39;],  &#39;actors&#39;: [&#39;Alan Ladd&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Tennessee Waltz&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Nicolas Gessner&#39;],  &#39;actors&#39;: [&#39;Julian Sands&#39;, &#39;Ed Lauter&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Federal Protection&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Anthony Hickox&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;David Lipper&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &quot;Everybody&#39;s All-American&quot;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Taylor Hackford&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Timothy Hutton&#39;, &#39;John Goodman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Starcrossed&#39;,  &#39;year&#39;: 2014,  &#39;rating&#39;: 4.2,  &#39;directors&#39;: [&#39;Chase Mohseni&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Grant Harvey&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Buchanan Rides Alone&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Craig Stevens&#39;, &#39;Barry Kelley&#39;, &#39;Tol Avery&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Arizona&#39;,  &#39;year&#39;: 1931,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Forrest Stanley&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Yours, Mine and Ours&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Melville Shavelson&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Van Johnson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Romola&#39;,  &#39;year&#39;: 1924,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Henry King&#39;],  &#39;actors&#39;: [&#39;William Powell&#39;, &#39;Ronald Colman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Purple People Eater&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;Linda Shayne&#39;],  &#39;actors&#39;: [&#39;Ned Beatty&#39;, &#39;Bobby Porter&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Circus&#39;,  &#39;year&#39;: 1928,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;Steve Murphy&#39;,   &#39;Charles Chaplin&#39;,   &#39;Al Ernest Garcia&#39;,   &#39;Harry Crocker&#39;,   &#39;George Davis&#39;,   &#39;Henry Bergman&#39;,   &#39;Tiny Sandford&#39;,   &#39;John Rand&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Tycoon&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Richard Wallace&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Cedric Hardwicke&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;7th Cavalry&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Joseph H. Lewis&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Jay C. Flippen&#39;, &#39;Frank Faylen&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;7 Men from Now&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Lee Marvin&#39;, &#39;Walter Reed&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Analyze That&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Harold Ramis&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Billy Crystal&#39;, &#39;Joe Viterelli&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Albuquerque&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &quot;George &#39;Gabby&#39; Hayes&quot;, &#39;Lon Chaney Jr.&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Circus World&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Lloyd Nolan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Rednecks&#39;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;John Birmingham&#39;],  &#39;actors&#39;: [&#39;John Birmingham&#39;, &#39;Royce Hobson&#39;, &#39;Jeremy Ambler&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Dragonfly&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Siko Dolidze&#39;, &#39;Levan Khotivari&#39;],  &#39;actors&#39;: [&#39;Aleksandre Omiadze&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Virginia City&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Michael Curtiz&#39;],  &#39;actors&#39;: [&#39;Errol Flynn&#39;, &#39;Randolph Scott&#39;, &#39;Humphrey Bogart&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Luck of the Irish&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Paul Hoen&#39;],  &#39;actors&#39;: [&#39;Ryan Merriman&#39;, &#39;Henry Gibson&#39;, &#39;Glenndon Chatman&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;4th Man Out&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Andrew Nackman&#39;],  &#39;actors&#39;: [&#39;Parker Young&#39;, &#39;Evan Todd&#39;, &#39;Chord Overstreet&#39;, &#39;Jon Gabrus&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Dangerous Liaisons&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Stephen Frears&#39;],  &#39;actors&#39;: [&#39;John Malkovich&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Raw Nerve&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 4.3,  &#39;directors&#39;: [&#39;David A. Prior&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &quot;Randall &#39;Tex&#39; Cobb&quot;, &#39;Ted Prior&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Teahouse of the August Moon&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Daniel Mann&#39;],  &#39;actors&#39;: [&#39;Marlon Brando&#39;, &#39;Glenn Ford&#39;, &#39;Eddie Albert&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Monkey on My Back&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;André De Toth&#39;],  &#39;actors&#39;: [&#39;Cameron Mitchell&#39;, &#39;Paul Richards&#39;, &#39;Jack Albertson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Runaway Train&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Andrey Konchalovskiy&#39;],  &#39;actors&#39;: [&#39;Jon Voight&#39;, &#39;Eric Roberts&#39;, &#39;Kyle T. Heffner&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Sonny&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Nicolas Cage&#39;],  &#39;actors&#39;: [&#39;James Franco&#39;, &#39;Harry Dean Stanton&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Tall T&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Richard Boone&#39;, &#39;Arthur Hunnicutt&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Thriller&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &quot;She Couldn&#39;t Say No&quot;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Lloyd Bacon&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Arthur Hunnicutt&#39;, &#39;Edgar Buchanan&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Quality of Mercy&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Andreas Gruber&#39;],  &#39;actors&#39;: [&#39;Rainer Egger&#39;, &#39;Oliver Broumis&#39;, &#39;Merab Ninidze&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Stalked by My Doctor&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Doug Campbell&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Jon Briddell&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Eagles Over London&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Enzo G. Castellari&#39;],  &#39;actors&#39;: [&#39;Frederick Stafford&#39;, &#39;Van Johnson&#39;, &#39;Francisco Rabal&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Bopha!&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Morgan Freeman&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Malcolm McDowell&#39;, &#39;Marius Weyers&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Money for Nothing&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Ramón Menéndez&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Michael Madsen&#39;, &#39;Benicio Del Toro&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &quot;Andy Hardy&#39;s Blonde Trouble&quot;,  &#39;year&#39;: 1944,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Lewis Stone&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Billy the Kid&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;David Miller&#39;, &#39;Frank Borzage&#39;],  &#39;actors&#39;: [&#39;Robert Taylor&#39;, &#39;Brian Donlevy&#39;, &#39;Ian Hunter&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Belle Starr&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Irving Cummings&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Dana Andrews&#39;, &#39;Shepperd Strudwick&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Love Is All There Is&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Renée Taylor&#39;, &#39;Joseph Bologna&#39;],  &#39;actors&#39;: [&#39;Joseph Bologna&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Funny Lady&#39;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Herbert Ross&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Omar Sharif&#39;, &#39;Roddy McDowall&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Human Desire&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Fritz Lang&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Broderick Crawford&#39;, &#39;Edgar Buchanan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Dark Blue&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Ron Shelton&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Ving Rhames&#39;, &#39;Scott Speedman&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &quot;Boston Blackie&#39;s Chinese Venture&quot;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Seymour Friedman&#39;],  &#39;actors&#39;: [&#39;Chester Morris&#39;, &#39;Richard Lane&#39;, &#39;Don McGuire&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Intoxicating&#39;,  &#39;year&#39;: 2003,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Mark David&#39;],  &#39;actors&#39;: [&#39;Kirk Harris&#39;, &#39;John Savage&#39;, &#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Grace Is Gone&#39;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Jim Strouse&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Quality of Life&#39;,  &#39;year&#39;: 2004,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Benjamin Morgan&#39;],  &#39;actors&#39;: [&#39;Lane Garrison&#39;, &#39;Brian Burnam&#39;, &#39;Luis Saguar&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Naked Street&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Maxwell Shane&#39;],  &#39;actors&#39;: [&#39;Farley Granger&#39;, &#39;Anthony Quinn&#39;, &#39;Peter Graves&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Cop Car&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Jon Watts&#39;],  &#39;actors&#39;: [&#39;Kevin Bacon&#39;,   &#39;James Freedson-Jackson&#39;,   &#39;Hays Wellford&#39;,   &#39;Shea Whigham&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Texas Cyclone&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;D. Ross Lederman&#39;],  &#39;actors&#39;: [&#39;Wallace MacDonald&#39;, &#39;Tim McCoy&#39;, &#39;Wheeler Oakman&#39;, &#39;John Wayne&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Children of Wax&#39;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 4.2,  &#39;directors&#39;: [&#39;Ivan Nitchev&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;Udo Kier&#39;, &#39;Daniel Bernhardt&#39;, &#39;Hal Ozsan&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Max Havelaar&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Fons Rademakers&#39;],  &#39;actors&#39;: [&#39;Peter Faber&#39;, &#39;Adendu Soesilaningrat&#39;, &#39;Maruli Sitompul&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Back to You and Me&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;David S. Cass Sr.&#39;],  &#39;actors&#39;: [&#39;Dale Midkiff&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Haiku Tunnel&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Josh Kornbluth&#39;, &#39;Jacob Kornbluth&#39;],  &#39;actors&#39;: [&#39;Josh Kornbluth&#39;, &#39;Warren Keith&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Track of the Cat&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Tab Hunter&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Road to El Dorado&#39;,  &#39;year&#39;: 2000,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Jeffrey Katzenberg&#39;, &#39;Bibo Bergeron&#39;, &#39;Don Paul&#39;],  &#39;actors&#39;: [&#39;Kevin Kline&#39;, &#39;Kenneth Branagh&#39;, &#39;Armand Assante&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;For Better, for Worse&#39;,  &#39;year&#39;: 1919,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Cecil B. DeMille&#39;],  &#39;actors&#39;: [&#39;Elliott Dexter&#39;, &#39;Tom Forman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Broken Trust&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Geoffrey Sax&#39;],  &#39;actors&#39;: [&#39;Tom Selleck&#39;, &#39;William Atherton&#39;, &#39;Charles Haid&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Babylon 5: Thirdspace&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Jesús Salvador Treviño&#39;],  &#39;actors&#39;: [&#39;Bruce Boxleitner&#39;, &#39;Richard Biggs&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;7 Chinese Brothers&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Bob Byington&#39;],  &#39;actors&#39;: [&#39;Jason Schwartzman&#39;, &#39;Tunde Adebimpe&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Once Upon a Time in the West&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 8.5,  &#39;directors&#39;: [&#39;Sergio Leone&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Charles Bronson&#39;, &#39;Jason Robards&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Dreamgirls&#39;,  &#39;year&#39;: 2006,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Bill Condon&#39;],  &#39;actors&#39;: [&#39;Jamie Foxx&#39;, &#39;Eddie Murphy&#39;, &#39;Danny Glover&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;A Southern Yankee&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Edward Sedgwick&#39;],  &#39;actors&#39;: [&#39;Red Skelton&#39;, &#39;Brian Donlevy&#39;, &#39;George Coulouris&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;History&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Execution of Private Slovik&#39;,  &#39;year&#39;: 1974,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Lamont Johnson&#39;],  &#39;actors&#39;: [&#39;Martin Sheen&#39;, &#39;Ned Beatty&#39;, &#39;Gary Busey&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Alpha Caper&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Robert Michael Lewis&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Leonard Nimoy&#39;, &#39;James McEachin&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Crimes of the Past&#39;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Garrett Bennett&#39;],  &#39;actors&#39;: [&#39;David Rasche&#39;, &#39;Eric Roberts&#39;, &#39;Chad Lindberg&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Husband for Christmas&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;David DeCoteau&#39;],  &#39;actors&#39;: [&#39;Ricco Ross&#39;, &#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Gardens of Stone&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Francis Ford Coppola&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;James Earl Jones&#39;, &#39;D.B. Sweeney&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;To the Shores of Tripoli&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;H. Bruce Humberstone&#39;],  &#39;actors&#39;: [&#39;John Payne&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Thunderbolt and Lightfoot&#39;,  &#39;year&#39;: 1974,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Michael Cimino&#39;],  &#39;actors&#39;: [&#39;Clint Eastwood&#39;, &#39;Jeff Bridges&#39;, &#39;Geoffrey Lewis&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Gambler&#39;,  &#39;year&#39;: 1974,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Karel Reisz&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Paul Sorvino&#39;, &#39;Morris Carnovsky&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Shepherd of the Hills&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Harry Carey&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Last Tycoon&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Elia Kazan&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Tony Curtis&#39;, &#39;Robert Mitchum&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;R.I.P.D.&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Robert Schwentke&#39;],  &#39;actors&#39;: [&#39;Ryan Reynolds&#39;, &#39;Jeff Bridges&#39;, &#39;Kevin Bacon&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &quot;The Perfect Age of Rock &#39;n&#39; Roll&quot;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Scott D. Rosenbaum&#39;],  &#39;actors&#39;: [&#39;Lukas Haas&#39;, &#39;Kevin Zegers&#39;, &#39;Jason Ritter&#39;, &#39;Billy Morrison&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Advance to the Rear&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;George Marshall&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Melvyn Douglas&#39;, &#39;Jim Backus&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;War&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Cosmic Man&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 4.7,  &#39;directors&#39;: [&#39;Herbert S. Greene&#39;],  &#39;actors&#39;: [&#39;John Carradine&#39;, &#39;Bruce Bennett&#39;, &#39;Paul Langton&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Sci-Fi&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Memento&#39;,  &#39;year&#39;: 2000,  &#39;rating&#39;: 8.5,  &#39;directors&#39;: [&#39;Christopher Nolan&#39;],  &#39;actors&#39;: [&#39;Guy Pearce&#39;, &#39;Joe Pantoliano&#39;, &#39;Mark Boone Junior&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Revenge&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Tony Scott&#39;],  &#39;actors&#39;: [&#39;Kevin Costner&#39;, &#39;Anthony Quinn&#39;, &#39;Tomas Milian&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Morning Patrol&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Nikos Nikolaidis&#39;],  &#39;actors&#39;: [&#39;Takis Spiridakis&#39;, &#39;Nikos Hatzis&#39;],  &#39;genres&#39;: [&#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Vanity Fair&#39;,  &#39;year&#39;: 2004,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Mira Nair&#39;],  &#39;actors&#39;: [&#39;James Purefoy&#39;, &#39;Jonathan Rhys Meyers&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Courtship of Andy Hardy&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Lewis Stone&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Shooter&#39;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Antoine Fuqua&#39;],  &#39;actors&#39;: [&#39;Mark Wahlberg&#39;, &#39;Michael Peña&#39;, &#39;Danny Glover&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Heaven with a Gun&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Lee H. Katzin&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;John Anderson&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Set It Up&#39;,  &#39;year&#39;: 2018,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Claire Scanlon&#39;],  &#39;actors&#39;: [&#39;Glen Powell&#39;, &#39;Taye Diggs&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;We Are Not Animals&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Alejandro Agresti&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Paul Hipp&#39;, &#39;Kevin Morris&#39;, &#39;Alejandro Agresti&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Hide and Seek&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;John Polson&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Horror&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Wizard of Lies&#39;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Barry Levinson&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Alessandro Nivola&#39;, &#39;Nathan Darrow&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Strange Woman&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Douglas Sirk&#39;, &#39;Edgar G. Ulmer&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Louis Hayward&#39;, &#39;Gene Lockhart&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Dragon Ball Z: Bojack Unbound&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Yoshihiro Ueda&#39;],  &#39;actors&#39;: [&#39;Toshio Furukawa&#39;, &#39;Takeshi Kusao&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Animation&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Bullets Over Broadway&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Woody Allen&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Chazz Palminteri&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Enemy from Space&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Val Guest&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;John Longden&#39;, &#39;Sidney James&#39;, &#39;Bryan Forbes&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Lonely Trail&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Joseph Kane&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Cy Kendall&#39;, &#39;Bob Kortman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Lightning, the White Stallion&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;William A. Levey&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Billy Wesley&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Never a Dull Moment&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;George Marshall&#39;],  &#39;actors&#39;: [&#39;Fred MacMurray&#39;, &#39;William Demarest&#39;, &#39;Andy Devine&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Is Anybody There?&#39;,  &#39;year&#39;: 2008,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;John Crowley&#39;],  &#39;actors&#39;: [&#39;Michael Caine&#39;, &#39;Bill Milner&#39;, &#39;Ralph Riach&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Hateful Eight&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Quentin Tarantino&#39;],  &#39;actors&#39;: [&#39;Samuel L. Jackson&#39;, &#39;Kurt Russell&#39;, &#39;Walton Goggins&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Night Train&#39;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Brian King&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Steve Zahn&#39;, &#39;Matthias Schweighöfer&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Horror&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &quot;I&#39;m a Fool&quot;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Noel Black&#39;],  &#39;actors&#39;: [&#39;Ron Howard&#39;, &#39;Otis Calef&#39;, &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Johnny Got His Gun&#39;,  &#39;year&#39;: 2008,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Rowan Joseph&#39;],  &#39;actors&#39;: [&#39;Matty Ferraro&#39;, &#39;Rowan Joseph&#39;, &#39;Ben McKenzie&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Village Barbershop&#39;,  &#39;year&#39;: 2008,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Chris J. Ford&#39;],  &#39;actors&#39;: [&#39;John Ratzenberger&#39;, &#39;George McRae&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Mean Streets&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Martin Scorsese&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Harvey Keitel&#39;, &#39;David Proval&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Marcus-Nelson Murders&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;Joseph Sargent&#39;],  &#39;actors&#39;: [&#39;Telly Savalas&#39;, &#39;Marjoe Gortner&#39;, &#39;José Ferrer&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Hook Line and Sinker&#39;,  &#39;year&#39;: 1930,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Edward F. Cline&#39;],  &#39;actors&#39;: [&#39;Bert Wheeler&#39;, &#39;Robert Woolsey&#39;, &#39;Ralf Harolde&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Haunted Gold&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Mack V. Wright&#39;],  &#39;actors&#39;: [&#39;Otto Hoffman&#39;,   &#39;John Wayne&#39;,   &#39;Duke&#39;,   &#39;Harry Woods&#39;,   &#39;Erville Alderson&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Mystery&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Westward Ho&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Frank McGlynn Jr.&#39;, &#39;Jim Farley&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Pocketful of Miracles&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Frank Capra&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &quot;Arthur O&#39;Connell&quot;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Vanished Without a Trace&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Douglas Barr&#39;],  &#39;actors&#39;: [&#39;William R. Moses&#39;, &#39;Joshua Peace&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Phantom Love&#39;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Nina Menkes&#39;],  &#39;actors&#39;: [&#39;Michael Joseph Carr&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Good Shepherd&#39;,  &#39;year&#39;: 2006,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Robert De Niro&#39;],  &#39;actors&#39;: [&#39;Matt Damon&#39;, &#39;Robert De Niro&#39;, &#39;Alec Baldwin&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Command Decision&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Sam Wood&#39;],  &#39;actors&#39;: [&#39;Clark Gable&#39;, &#39;Walter Pidgeon&#39;, &#39;Van Johnson&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Coroner Creek&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;George Macready&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Dark Moon Rising&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Justin Price&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Billy Blanks&#39;],  &#39;genres&#39;: [&#39;Fantasy&#39;]}, {&#39;title&#39;: &quot;Maria&#39;s Lovers&quot;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Andrey Konchalovskiy&#39;],  &#39;actors&#39;: [&#39;John Savage&#39;, &#39;Keith Carradine&#39;, &#39;Robert Mitchum&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Butcher&#39;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Jesse V. Johnson&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Robert Davi&#39;, &#39;Keith David&#39;, &#39;Geoffrey Lewis&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Wag the Dog&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Barry Levinson&#39;],  &#39;actors&#39;: [&#39;Dustin Hoffman&#39;, &#39;Robert De Niro&#39;, &#39;Woody Harrelson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;While You Were Dating&#39;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;David Winning&#39;],  &#39;actors&#39;: [&#39;William Baldwin&#39;, &#39;Robert Moloney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Christmas Eve&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Edwin L. Marin&#39;],  &#39;actors&#39;: [&#39;George Raft&#39;, &#39;George Brent&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Schizopolis&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Steven Soderbergh&#39;],  &#39;actors&#39;: [&#39;Darrin Dickerson&#39;,   &#39;Steven Soderbergh&#39;,   &#39;Miles Hardy&#39;,   &#39;Scott Allen&#39;,   &#39;Marcus Lyle Brown&#39;,   &#39;Silas Cooper&#39;,   &#39;C.C. Courtney&#39;,   &#39;Sonny Cranch&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Fantasy&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Harimaya Bridge&#39;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Aaron Woolfolk&#39;],  &#39;actors&#39;: [&#39;Bennet Guillory&#39;, &#39;Danny Glover&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Son of Monte Cristo&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Rowland V. Lee&#39;],  &#39;actors&#39;: [&#39;Louis Hayward&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Love &amp; Mercy&#39;,  &#39;year&#39;: 2014,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Bill Pohlad&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Paul Dano&#39;, &#39;Paul Giamatti&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Tango &amp; Cash&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Albert Magnoli&#39;, &#39;Andrey Konchalovskiy&#39;],  &#39;actors&#39;: [&#39;Sylvester Stallone&#39;, &#39;Kurt Russell&#39;, &#39;Jack Palance&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Out of the Past&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Jacques Tourneur&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Kirk Douglas&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &quot;Soul&#39;s Midnight&quot;,  &#39;year&#39;: 2006,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Harry Basil&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;Robert Floyd&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;One Minute to Zero&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Tay Garnett&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;William Talman&#39;, &#39;Charles McGraw&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Iron Man&#39;,  &#39;year&#39;: 2008,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Jon Favreau&#39;],  &#39;actors&#39;: [&#39;Robert Downey Jr.&#39;, &#39;Terrence Howard&#39;, &#39;Jeff Bridges&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 8.4,  &#39;directors&#39;: [&#39;Stanley Kubrick&#39;],  &#39;actors&#39;: [&#39;Peter Sellers&#39;,   &#39;George C. Scott&#39;,   &#39;Sterling Hayden&#39;,   &#39;Keenan Wynn&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Dirty Grandpa&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Dan Mazer&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Zac Efron&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Last Mile&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Howard W. Koch&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;,   &#39;Frank Overton&#39;,   &#39;Michael Constantine&#39;,   &#39;John Vari&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Last Train from Gun Hill&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;John Sturges&#39;],  &#39;actors&#39;: [&#39;Kirk Douglas&#39;, &#39;Anthony Quinn&#39;, &#39;Earl Holliman&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Lethal Weapon 2&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Richard Donner&#39;],  &#39;actors&#39;: [&#39;Mel Gibson&#39;, &#39;Danny Glover&#39;, &#39;Joe Pesci&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Blizhniy Boy: The Ultimate Fighter&#39;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Erken Ialgashev&#39;],  &#39;actors&#39;: [&#39;Cung Le&#39;, &#39;David Carradine&#39;, &#39;Eric Roberts&#39;, &#39;Gary Busey&#39;],  &#39;genres&#39;: [&#39;Action&#39;]}, {&#39;title&#39;: &#39;Last Vegas&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Jon Turteltaub&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;,   &#39;Michael Douglas&#39;,   &#39;Morgan Freeman&#39;,   &#39;Kevin Kline&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Power 98&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;Jaime Hellman&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Jason Gedrick&#39;, &#39;Jack Betts&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Error in Judgment&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 4.7,  &#39;directors&#39;: [&#39;Scott P. Levy&#39;],  &#39;actors&#39;: [&#39;Joe Mantegna&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Everything That Rises&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Dennis Quaid&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Harve Presnell&#39;, &#39;Meat Loaf&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Simpatico&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Matthew Warchus&#39;],  &#39;actors&#39;: [&#39;Nick Nolte&#39;, &#39;Jeff Bridges&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Attila&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Pietro Francisci&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Henri Vidal&#39;, &#39;Claude Laydu&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Gazebo&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;George Marshall&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Carl Reiner&#39;, &#39;John McGiver&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;3:10 to Yuma&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Delmer Daves&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Van Heflin&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Return of Swamp Thing&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Jim Wynorski&#39;],  &#39;actors&#39;: [&#39;Dick Durock&#39;, &#39;Louis Jourdan&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Breaking Away&#39;,  &#39;year&#39;: 1979,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Peter Yates&#39;],  &#39;actors&#39;: [&#39;Paul Dooley&#39;,   &#39;Dennis Christopher&#39;,   &#39;Dennis Quaid&#39;,   &#39;Daniel Stern&#39;,   &#39;Jackie Earle Haley&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Barabbas&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Richard Fleischer&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Arthur Kennedy&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Kin&#39;,  &#39;year&#39;: 2018,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Josh Baker&#39;, &#39;Jonathan Baker&#39;],  &#39;actors&#39;: [&#39;Myles Truitt&#39;, &#39;Jack Reynor&#39;, &#39;Dennis Quaid&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Children on Their Birthdays&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Mark Medoff&#39;],  &#39;actors&#39;: [&#39;Christopher McDonald&#39;, &#39;Tom Arnold&#39;, &#39;Joe Pichler&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Kiss Me Goodbye&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Robert Mulligan&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Jeff Bridges&#39;, &#39;Paul Dooley&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Fantasy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;A Slight Case of Larceny&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Don Weis&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Eddie Bracken&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Baby Face Nelson&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Don Siegel&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Cedric Hardwicke&#39;, &#39;Leo Gordon&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;I Can Get It for You Wholesale&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Michael Gordon&#39;],  &#39;actors&#39;: [&#39;Dan Dailey&#39;, &#39;George Sanders&#39;, &#39;Sam Jaffe&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Paradise Canyon&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Carl Pierson&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Reed Howes&#39;, &#39;Earle Hodgins&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &quot;It Can&#39;t Be!&quot;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Leonid Gayday&#39;],  &#39;actors&#39;: [&#39;Mikhail Pugovkin&#39;, &#39;Vyacheslav Nevinnyy&#39;, &#39;Mikhail Svetin&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Long Voyage Home&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Thomas Mitchell&#39;, &#39;Ian Hunter&#39;, &#39;Ward Bond&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Leaves of the Tree&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Ante Novakovic&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Armand Assante&#39;, &#39;Federico Castelluccio&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Coco&#39;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 8.4,  &#39;directors&#39;: [&#39;Lee Unkrich&#39;, &#39;Adrian Molina&#39;],  &#39;actors&#39;: [&#39;Anthony Gonzalez&#39;, &#39;Gael García Bernal&#39;, &#39;Benjamin Bratt&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;From the Earth to the Moon&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Byron Haskin&#39;],  &#39;actors&#39;: [&#39;Joseph Cotten&#39;, &#39;George Sanders&#39;, &#39;Don Dubbins&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Fantasy&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Creeper&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Matthew Gunnoe&#39;],  &#39;actors&#39;: [&#39;Wilmar Frometta&#39;,   &#39;Darryl Baldwin&#39;,   &#39;David Vogel&#39;,   &#39;Ryan Charles&#39;,   &#39;Roy Knect&#39;,   &#39;Luis Reyes&#39;],  &#39;genres&#39;: [&#39;Horror&#39;]}, {&#39;title&#39;: &#39;Looking for an Echo&#39;,  &#39;year&#39;: 2000,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Martin Davidson&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;Joe Grifasi&#39;, &#39;Tom Mason&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Charles Bradley: Soul of America&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Poull Brien&#39;],  &#39;actors&#39;: [&#39;Alex Everett&#39;, &#39;Jonny Santos&#39;],  &#39;genres&#39;: [&#39;Music&#39;]}, {&#39;title&#39;: &#39;Soul Surfer&#39;,  &#39;year&#39;: 2011,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Sean McNamara&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Hondo&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ward Bond&#39;, &#39;Michael Pate&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Convoy&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Sam Peckinpah&#39;],  &#39;actors&#39;: [&#39;Kris Kristofferson&#39;, &#39;Ernest Borgnine&#39;, &#39;Burt Young&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &quot;Everything&#39;s Ducky&quot;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 4.7,  &#39;directors&#39;: [&#39;Don Taylor&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Buddy Hackett&#39;, &#39;Jackie Cooper&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Smith!&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&quot;Michael O&#39;Herlihy&quot;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Dean Jagger&#39;, &#39;Keenan Wynn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;True Colors&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Herbert Ross&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;James Spader&#39;, &#39;Mandy Patinkin&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Repossessed&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Bob Logan&#39;],  &#39;actors&#39;: [&#39;Leslie Nielsen&#39;, &#39;Ned Beatty&#39;, &#39;Anthony Starke&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Fantasy&#39;, &#39;Horror&#39;]}, {&#39;title&#39;: &#39;The Boston Strangler&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Richard Fleischer&#39;],  &#39;actors&#39;: [&#39;Tony Curtis&#39;, &#39;Henry Fonda&#39;, &#39;George Kennedy&#39;, &#39;Mike Kellin&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Diamond Arm&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 8.5,  &#39;directors&#39;: [&#39;Leonid Gayday&#39;],  &#39;actors&#39;: [&#39;Yuriy Nikulin&#39;, &#39;Andrey Mironov&#39;, &#39;Anatoliy Papanov&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Best of the Best&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Robert Radler&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;James Earl Jones&#39;, &#39;Phillip Rhee&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;The Mind Reader&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Roy Del Ruth&#39;],  &#39;actors&#39;: [&#39;Warren William&#39;, &#39;Allen Jenkins&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;War, Inc.&#39;,  &#39;year&#39;: 2008,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Joshua Seftel&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Hatari!&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Howard Hawks&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Hardy Krüger&#39;, &#39;Red Buttons&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Night Walker&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;William Castle&#39;],  &#39;actors&#39;: [&#39;Robert Taylor&#39;, &#39;Hayden Rorke&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Contender&#39;,  &#39;year&#39;: 2000,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Rod Lurie&#39;],  &#39;actors&#39;: [&#39;Gary Oldman&#39;, &#39;Jeff Bridges&#39;, &#39;Christian Slater&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Yamato Takeru&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Takao Okawara&#39;],  &#39;actors&#39;: [&#39;Masahiro Takashima&#39;, &#39;Hiroshi Fujioka&#39;, &#39;Hiroshi Abe&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Till the End of Time&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Edward Dmytryk&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Guy Madison&#39;, &#39;Bill Williams&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Telegraph Trail&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Tenny Wright&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Duke&#39;, &#39;Frank McHugh&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Pather Panchali&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 8.4,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Kanu Bannerjee&#39;, &#39;Subir Banerjee&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Lolly-Madonna XXX&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Richard C. Sarafian&#39;],  &#39;actors&#39;: [&#39;Rod Steiger&#39;, &#39;Robert Ryan&#39;, &#39;Jeff Bridges&#39;, &#39;Scott Wilson&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Reunion at Fairborough&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Herbert Wise&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Red Buttons&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;She Wore a Yellow Ribbon&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;John Agar&#39;, &#39;Ben Johnson&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Le Tigre se parfume à la dynamite&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Claude Chabrol&#39;],  &#39;actors&#39;: [&#39;Roger Hanin&#39;, &#39;Michel Bouquet&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;The Morning After&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Sidney Lumet&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Raul Julia&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Mystery&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Pop Star&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 5.0,  &#39;directors&#39;: [&#39;Carlos Portugal&#39;],  &#39;actors&#39;: [&#39;Ross Thomas&#39;, &#39;Robert Adamson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Last of the Mohicans&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Henry Wilcoxon&#39;, &#39;Bruce Cabot&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Beginning or the End&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Norman Taurog&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;Robert Walker&#39;, &#39;Tom Drake&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Radioland Murders&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Mel Smith&#39;],  &#39;actors&#39;: [&#39;Brian Benben&#39;, &#39;Ned Beatty&#39;, &#39;George Burns&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Girl Crazy&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;Bert Wheeler&#39;, &#39;Robert Woolsey&#39;, &#39;Eddie Quillan&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Zoe&#39;,  &#39;year&#39;: 2018,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Drake Doremus&#39;],  &#39;actors&#39;: [&#39;Ewan McGregor&#39;, &#39;Theo James&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Last Days in the Desert&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Rodrigo García&#39;],  &#39;actors&#39;: [&#39;Ewan McGregor&#39;, &#39;Ciarán Hinds&#39;, &#39;Tye Sheridan&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Popsy Pop&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;Jean Herman&#39;],  &#39;actors&#39;: [&#39;Stanley Baker&#39;, &#39;Henri Charrière&#39;, &#39;Georges Aminel&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;New York, New York&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Martin Scorsese&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Lionel Stander&#39;, &#39;Barry Primus&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;The Trail of the Lonesome Pine&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Fred MacMurray&#39;, &#39;Henry Fonda&#39;, &#39;Fred Stone&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Woman Who Sinned&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 5.0,  &#39;directors&#39;: [&#39;Michael Switzer&#39;],  &#39;actors&#39;: [&#39;Tim Matheson&#39;, &#39;Michael Dudikoff&#39;, &#39;John Vernon&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Ghost and Mrs. Muir&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Joseph L. Mankiewicz&#39;],  &#39;actors&#39;: [&#39;Rex Harrison&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Ambush Bay&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Ron Winston&#39;],  &#39;actors&#39;: [&quot;Hugh O&#39;Brian&quot;,   &#39;Mickey Rooney&#39;,   &#39;James Mitchum&#39;,   &#39;Peter Masterson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Operation Pacific&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;George Waggner&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ward Bond&#39;, &#39;Scott Forbes&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Balls Out&#39;,  &#39;year&#39;: 2014,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Andrew Disney&#39;],  &#39;actors&#39;: [&#39;Jake Lacy&#39;, &#39;Beck Bennett&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Flying Leathernecks&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Nicholas Ray&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Robert Ryan&#39;, &#39;Don Taylor&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Cape Fear&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Martin Scorsese&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Nick Nolte&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;11:59&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Jamin Winans&#39;],  &#39;actors&#39;: [&#39;Raymond Andrew Bailey&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Sci-Fi&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Darc&#39;,  &#39;year&#39;: 2018,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Julius R. Nasso&#39;],  &#39;actors&#39;: [&#39;Tony Schiena&#39;, &#39;Armand Assante&#39;, &#39;Kippei Shîna&#39;, &#39;Shô Ikushima&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Guns of Navarone&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;J. Lee Thompson&#39;],  &#39;actors&#39;: [&#39;David Niven&#39;, &#39;Gregory Peck&#39;, &#39;Anthony Quinn&#39;, &#39;Anthony Quayle&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &quot;Va&#39; dove ti porta il cuore&quot;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Cristina Comencini&#39;],  &#39;actors&#39;: [&#39;Massimo Ghini&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Switching Channels&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Ted Kotcheff&#39;],  &#39;actors&#39;: [&#39;Burt Reynolds&#39;, &#39;Christopher Reeve&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;No Reservations&#39;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Scott Hicks&#39;],  &#39;actors&#39;: [&#39;Aaron Eckhart&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;New Frontier&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;George Sherman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ray Corrigan&#39;, &#39;Raymond Hatton&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Long Wait&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Victor Saville&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Charles Coburn&#39;, &#39;Gene Evans&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Spy Kids 2: Island of Lost Dreams&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Robert Rodriguez&#39;],  &#39;actors&#39;: [&#39;Daryl Sabara&#39;, &#39;Antonio Banderas&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Treasure of the Silver Lake&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Harald Reinl&#39;],  &#39;actors&#39;: [&#39;Pierre Brice&#39;, &#39;Lex Barker&#39;, &#39;Herbert Lom&#39;, &#39;Götz George&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Something to Talk About&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Lasse Hallström&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Robert Duvall&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Men Who Stare at Goats&#39;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Grant Heslov&#39;],  &#39;actors&#39;: [&#39;Ewan McGregor&#39;,   &#39;George Clooney&#39;,   &#39;Kevin Spacey&#39;,   &#39;Jeff Bridges&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Blood Alley&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;John Wayne&#39;, &#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Paul Fix&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;]}, {&#39;title&#39;: &#39;Wyoming Outlaw&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;George Sherman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;,   &#39;Ray Corrigan&#39;,   &#39;Raymond Hatton&#39;,   &quot;Don &#39;Red&#39; Barry&quot;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Plunder of the Sun&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Francis L. Sullivan&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Sinbad, the Sailor&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Richard Wallace&#39;],  &#39;actors&#39;: [&#39;Douglas Fairbanks Jr.&#39;, &#39;Walter Slezak&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Fantasy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Godfather: Part II&#39;,  &#39;year&#39;: 1974,  &#39;rating&#39;: 9.0,  &#39;directors&#39;: [&#39;Francis Ford Coppola&#39;],  &#39;actors&#39;: [&#39;Al Pacino&#39;, &#39;Robert De Niro&#39;, &#39;Robert Duvall&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Runaway&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Michael Crichton&#39;],  &#39;actors&#39;: [&#39;Tom Selleck&#39;, &#39;Gene Simmons&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Locket&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;John Brahm&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Brian Aherne&#39;, &#39;Gene Raymond&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;TRON&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Steven Lisberger&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Bruce Boxleitner&#39;, &#39;David Warner&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Manderlay&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Lars von Trier&#39;],  &#39;actors&#39;: [&#39;Isaach De Bankolé&#39;, &#39;Danny Glover&#39;, &#39;Willem Dafoe&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Behold a Pale Horse&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Fred Zinnemann&#39;],  &#39;actors&#39;: [&#39;Gregory Peck&#39;,   &#39;Anthony Quinn&#39;,   &#39;Omar Sharif&#39;,   &#39;Raymond Pellegrin&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Racket&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Mel Ferrer&#39;,   &#39;John Cromwell&#39;,   &#39;Nicholas Ray&#39;,   &#39;Sherman Todd&#39;,   &#39;Tay Garnett&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Robert Ryan&#39;, &#39;William Talman&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Cowboy&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Delmer Daves&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Jack Lemmon&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The List of Adrian Messenger&#39;,  &#39;year&#39;: 1963,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;John Huston&#39;],  &#39;actors&#39;: [&#39;Kirk Douglas&#39;,   &#39;Robert Mitchum&#39;,   &#39;Tony Curtis&#39;,   &#39;Burt Lancaster&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Colossus of Rhodes&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Sergio Leone&#39;],  &#39;actors&#39;: [&#39;Rory Calhoun&#39;, &#39;Georges Marchal&#39;, &#39;Conrado San Martín&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Comancheros&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;John Wayne&#39;, &#39;Michael Curtiz&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Stuart Whitman&#39;, &#39;Nehemiah Persoff&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Fabulous Baker Boys&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Steve Kloves&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Beau Bridges&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Big City&#39;,  &#39;year&#39;: 1963,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Anil Chatterjee&#39;, &#39;Haren Chatterjee&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &quot;Don&#39;t Go Near the Water&quot;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Charles Walters&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Earl Holliman&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;What Would Jesus Do?&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Thomas Makowski&#39;],  &#39;actors&#39;: [&#39;John Schneider&#39;, &#39;Adam Gregory&#39;, &#39;Mark Arnold&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Somebody to Love&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Alexandre Rockwell&#39;],  &#39;actors&#39;: [&#39;Harvey Keitel&#39;, &#39;Anthony Quinn&#39;, &#39;Michael DeLorenzo&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Wild Party&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Harry Horner&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Arthur Franz&#39;, &#39;Jay Robinson&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Grifters&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Stephen Frears&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Jan Munroe&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Presenting Lily Mars&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Norman Taurog&#39;],  &#39;actors&#39;: [&#39;Van Heflin&#39;, &#39;Richard Carlson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Last of the Secret Agents?&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Norman Abbott&#39;],  &#39;actors&#39;: [&#39;Marty Allen&#39;, &#39;Steve Rossi&#39;, &#39;John Williams&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Changeling&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Peter Medak&#39;],  &#39;actors&#39;: [&#39;George C. Scott&#39;, &#39;Melvyn Douglas&#39;],  &#39;genres&#39;: [&#39;Horror&#39;]}, {&#39;title&#39;: &#39;Star Wars: Episode III - Revenge of the Sith&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;George Lucas&#39;],  &#39;actors&#39;: [&#39;Hayden Christensen&#39;, &#39;Ewan McGregor&#39;, &#39;Samuel L. Jackson&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Star Wars: Episode II - Attack of the Clones&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;George Lucas&#39;],  &#39;actors&#39;: [&#39;Hayden Christensen&#39;, &#39;Ewan McGregor&#39;, &#39;Christopher Lee&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Charulata&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Soumitra Chatterjee&#39;, &#39;Shailen Mukherjee&#39;, &#39;Shyamal Ghoshal&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Stars&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Konrad Wolf&#39;],  &#39;actors&#39;: [&#39;Jürgen Frohriep&#39;, &#39;Erik S. Klein&#39;, &#39;Stefan Pejchev&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Waco&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;R.G. Springsteen&#39;],  &#39;actors&#39;: [&#39;Howard Keel&#39;, &#39;Brian Donlevy&#39;, &#39;Wendell Corey&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;3 Strikes&#39;,  &#39;year&#39;: 2000,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;DJ Pooh&#39;],  &#39;actors&#39;: [&#39;Brian Hooks&#39;, &#39;Faizon Love&#39;, &#39;E-40&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Last Days of Frankie the Fly&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Peter Markle&#39;],  &#39;actors&#39;: [&#39;Dennis Hopper&#39;, &#39;Michael Madsen&#39;, &#39;Kiefer Sutherland&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Virginian&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Stuart Gilmore&#39;],  &#39;actors&#39;: [&#39;Joel McCrea&#39;, &#39;Brian Donlevy&#39;, &#39;Sonny Tufts&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Air I Breathe&#39;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Jieho Lee&#39;],  &#39;actors&#39;: [&#39;Brendan Fraser&#39;, &#39;Andy Garcia&#39;, &#39;Kevin Bacon&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Naughty Girl&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Michel Boisrond&#39;],  &#39;actors&#39;: [&#39;Jean Bretonnière&#39;, &#39;Mischa Auer&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Chimes at Midnight&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Orson Welles&#39;],  &#39;actors&#39;: [&#39;Orson Welles&#39;, &#39;John Gielgud&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Battle of the Bulge&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Ken Annakin&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Robert Shaw&#39;, &#39;Robert Ryan&#39;, &#39;Dana Andrews&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Night the Lights Went Out in Georgia&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Ron Maxwell&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Mark Hamill&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Our Winning Season&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Joseph Ruben&#39;],  &#39;actors&#39;: [&#39;Scott Jacoby&#39;, &#39;Dennis Quaid&#39;, &#39;Robert Wahler&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Hot Tub Time Machine&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Steve Pink&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Rob Corddry&#39;, &#39;Craig Robinson&#39;, &#39;Clark Duke&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Jack Bull&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;John Badham&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;John Goodman&#39;, &#39;L.Q. Jones&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Go West, Young Lady&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Frank R. Strayer&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Charles Ruggles&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Music&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;A Family Affair&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Lionel Barrymore&#39;, &#39;Eric Linden&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Flicka&#39;,  &#39;year&#39;: 2006,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Michael Mayer&#39;],  &#39;actors&#39;: [&#39;Tim McGraw&#39;, &#39;Ryan Kwanten&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;The Shootist&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Don Siegel&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ron Howard&#39;, &#39;James Stewart&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Girl Crazy&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Busby Berkeley&#39;, &#39;Norman Taurog&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Gil Stratton&#39;, &#39;Robert E. Strickland&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Sophia Loren: Her Own Story&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Mel Stuart&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;John Gavin&#39;, &#39;Rip Torn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;My Little Pony: The Movie&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Mike Joens&#39;],  &#39;actors&#39;: [&#39;Danny DeVito&#39;],  &#39;genres&#39;: [&#39;Animation&#39;, &#39;Family&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Singularity&#39;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Robert Kouba&#39;],  &#39;actors&#39;: [&#39;Julian Schaffner&#39;, &#39;John Cusack&#39;, &#39;Carmen Argenziano&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Body and Soul&#39;,  &#39;year&#39;: 2000,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Sam Henry Kass&#39;],  &#39;actors&#39;: [&quot;Ray &#39;Boom Boom&#39; Mancini&quot;, &#39;Michael Chiklis&#39;, &#39;Rod Steiger&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &quot;Dead Man&#39;s Revenge&quot;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Alan J. Levi&#39;],  &#39;actors&#39;: [&#39;Bruce Dern&#39;,   &#39;Michael Ironside&#39;,   &#39;Vondie Curtis-Hall&#39;,   &#39;Keith Coulouris&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Seven Cities of Gold&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Robert D. Webb&#39;],  &#39;actors&#39;: [&#39;Richard Egan&#39;,   &#39;Anthony Quinn&#39;,   &#39;Michael Rennie&#39;,   &#39;Jeffrey Hunter&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Macao&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Josef von Sternberg&#39;, &#39;Nicholas Ray&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;William Bendix&#39;, &#39;Thomas Gomez&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Lusty Men&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Robert Parrish&#39;, &#39;Nicholas Ray&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Arthur Kennedy&#39;, &#39;Arthur Hunnicutt&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Angel Face&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Otto Preminger&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Herbert Marshall&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Son of Fury: The Story of Benjamin Blake&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;John Cromwell&#39;],  &#39;actors&#39;: [&#39;Tyrone Power&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Digital Reaper&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;John Irvin&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;,   &#39;Sonny Marinelli&#39;,   &#39;Raffaello Degruttola&#39;,   &#39;Stanley Townsend&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Come See the Paradise&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Alan Parker&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Sab Shimono&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Peace, Love &amp; Misunderstanding&#39;,  &#39;year&#39;: 2011,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Bruce Beresford&#39;],  &#39;actors&#39;: [&#39;Nat Wolff&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Pit Stop&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Jack Hill&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;Richard Davalos&#39;, &#39;Sid Haig&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Born to the West&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Charles Barton&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Johnny Mack Brown&#39;, &#39;John Patterson&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &quot;California Dreamin&#39;&quot;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Cristian Nemescu&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;Jamie Elman&#39;, &#39;Razvan Vasilescu&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Killing Season&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Mark Steven Johnson&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;John Travolta&#39;, &#39;Milo Ventimiglia&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Comanche Station&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Rand Brooks&#39;,   &#39;Randolph Scott&#39;,   &#39;Claude Akins&#39;,   &#39;Skip Homeier&#39;,   &#39;Richard Rust&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Far from Heaven&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Todd Haynes&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Dennis Haysbert&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Wildflowers&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Melissa Painter&#39;],  &#39;actors&#39;: [&#39;Tomas Arana&#39;, &#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Magnificent Dope&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Walter Lang&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Don Ameche&#39;, &#39;Edward Everett Horton&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &quot;Heaven&#39;s Door&quot;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Craig Clyde&#39;],  &#39;actors&#39;: [&#39;Kaden Billin&#39;, &#39;Mark Brocksmith&#39;, &#39;Dean Cain&#39;],  &#39;genres&#39;: [&#39;Family&#39;]}, {&#39;title&#39;: &#39;The Cariboo Trail&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Edwin L. Marin&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &quot;George &#39;Gabby&#39; Hayes&quot;, &#39;Bill Williams&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Mr. Soft Touch&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Henry Levin&#39;, &#39;Gordon Douglas&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;John Ireland&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;My Neighbor Totoro&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Hayao Miyazaki&#39;],  &#39;actors&#39;: [&#39;Hitoshi Takagi&#39;, &#39;Shigesato Itoi&#39;],  &#39;genres&#39;: [&#39;Animation&#39;, &#39;Family&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;The Good Guys and the Bad Guys&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Burt Kennedy&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;,   &#39;George Kennedy&#39;,   &#39;Martin Balsam&#39;,   &#39;David Carradine&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;A Boy Called Hate&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Mitch Marcus&#39;],  &#39;actors&#39;: [&#39;Scott Caan&#39;,   &#39;Lee Nashold&#39;,   &#39;Kevin Michael Richardson&#39;,   &#39;James Caan&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Babyfever&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Victoria Foyt&#39;, &#39;Henry Jaglom&#39;],  &#39;actors&#39;: [&#39;Matt Salinger&#39;, &#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Stressed to Kill&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Mark Savage&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;Bill Oberst Jr.&#39;, &#39;Lance Tafelski&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Sky High&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Mike Mitchell&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Michael Angarano&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Superman II&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Richard Donner&#39;, &#39;Richard Lester&#39;],  &#39;actors&#39;: [&#39;Gene Hackman&#39;, &#39;Christopher Reeve&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Destructors&#39;,  &#39;year&#39;: 1974,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Robert Parrish&#39;],  &#39;actors&#39;: [&#39;Michael Caine&#39;, &#39;Anthony Quinn&#39;, &#39;James Mason&#39;, &#39;Maurice Ronet&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Run All Night&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Jaume Collet-Serra&#39;],  &#39;actors&#39;: [&#39;Liam Neeson&#39;, &#39;Ed Harris&#39;, &#39;Joel Kinnaman&#39;, &quot;Vincent D&#39;Onofrio&quot;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Sundown&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Bruce Cabot&#39;, &#39;George Sanders&#39;, &#39;Harry Carey&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Chapter Two&#39;,  &#39;year&#39;: 1979,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Robert Moore&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Joseph Bologna&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;12 Angry Men&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 8.9,  &#39;directors&#39;: [&#39;Sidney Lumet&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Lee J. Cobb&#39;, &#39;Martin Balsam&#39;, &#39;John Fiedler&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Barbarian and the Geisha&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;John Huston&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Sam Jaffe&#39;, &#39;Sô Yamamura&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;American Heart&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Martin Bell&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Edward Furlong&#39;, &#39;John Boylan&#39;, &#39;Greg Sevigny&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Little Ayse and the Magic Dwarfs in the Land of Dreams&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Tunç Basaran&#39;],  &#39;actors&#39;: [&#39;Süleyman Turan&#39;, &#39;Metin Serezli&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Family&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;80 Steps to Jonah&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Gerd Oswald&#39;],  &#39;actors&#39;: [&#39;Wayne Newton&#39;, &#39;Mickey Rooney&#39;, &#39;Keenan Wynn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Black Hawk Down&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Ridley Scott&#39;],  &#39;actors&#39;: [&#39;Josh Hartnett&#39;, &#39;Ewan McGregor&#39;, &#39;Tom Sizemore&#39;, &#39;Eric Bana&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Flight Lieutenant&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Sidney Salkow&#39;],  &#39;actors&#39;: [&quot;Pat O&#39;Brien&quot;, &#39;Glenn Ford&#39;, &#39;Jonathan Hale&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Night at the Golden Eagle&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Adam Rifkin&#39;],  &#39;actors&#39;: [&#39;Vinny Argiro&#39;, &#39;James Caan&#39;, &#39;Donnie Montemarano&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;1900&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Bernardo Bertolucci&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Gérard Depardieu&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Stalked by My Doctor: The Return&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Doug Campbell&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Mark Grossman&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Where Danger Lives&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Claude Rains&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Elvis&#39;,  &#39;year&#39;: 1979,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;John Carpenter&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Bing Russell&#39;, &#39;Robert Gray&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Return of the Bad Men&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Robert Ryan&#39;, &quot;George &#39;Gabby&#39; Hayes&quot;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Return of October&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Joseph H. Lewis&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Albert Sharpe&#39;, &#39;James Gleason&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Seventh Sin&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Ronald Neame&#39;, &#39;Vincente Minnelli&#39;],  &#39;actors&#39;: [&#39;Bill Travers&#39;, &#39;George Sanders&#39;, &#39;Jean-Pierre Aumont&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Summer Storm&#39;,  &#39;year&#39;: 1944,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Douglas Sirk&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Edward Everett Horton&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;High, Wide and Handsome&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Rouben Mamoulian&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Spoilers&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;John Wayne&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Winds of the Wasteland&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Mack V. Wright&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Lew Kelly&#39;, &#39;Douglas Cosgrove&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Follow the Fleet&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Mark Sandrich&#39;],  &#39;actors&#39;: [&#39;Fred Astaire&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Odyssey of the Pacific&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Fernando Arrabal&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Jonathan Starr&#39;, &#39;Ky Huot Uk&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;]}, {&#39;title&#39;: &quot;In Harm&#39;s Way&quot;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Otto Preminger&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Kirk Douglas&#39;, &#39;Tom Tryon&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Stroker Ace&#39;,  &#39;year&#39;: 1983,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Hal Needham&#39;],  &#39;actors&#39;: [&#39;Burt Reynolds&#39;, &#39;Ned Beatty&#39;, &#39;Jim Nabors&#39;, &#39;Parker Stevenson&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Garden of the Dead&#39;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;John Hayes&#39;],  &#39;actors&#39;: [&#39;Marland Proctor&#39;,   &#39;Philip Kenneally&#39;,   &#39;Duncan McLeod&#39;,   &#39;John Dullaghan&#39;,   &#39;John Dennis&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Sorry, Wrong Number&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Tony Wharmby&#39;],  &#39;actors&#39;: [&#39;Carl Weintraub&#39;, &#39;Patrick Macnee&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Dunkirk&#39;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Christopher Nolan&#39;],  &#39;actors&#39;: [&#39;Fionn Whitehead&#39;, &#39;Barry Keoghan&#39;, &#39;Mark Rylance&#39;, &#39;Tom Hardy&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Fan&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Otto Preminger&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Richard Greene&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Wyatt Earp&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Lawrence Kasdan&#39;],  &#39;actors&#39;: [&#39;Kevin Costner&#39;, &#39;Dennis Quaid&#39;, &#39;Gene Hackman&#39;, &#39;David Andrews&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Doctor Who&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Geoffrey Sax&#39;],  &#39;actors&#39;: [&#39;Paul McGann&#39;, &#39;Eric Roberts&#39;, &#39;Sylvester McCoy&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Huo yun chuan qi&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Woo-Ping Yuen&#39;],  &#39;actors&#39;: [&#39;Gang Wu&#39;, &#39;Siu Chung Mok&#39;, &#39;Joe Chu&#39;, &#39;Lap-Man Sinn&#39;],  &#39;genres&#39;: [&#39;Action&#39;]}, {&#39;title&#39;: &#39;Dragon Ball: The Path to Power&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Shigeyasu Yamauchi&#39;],  &#39;actors&#39;: [&#39;Naoki Tatsuta&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Animation&#39;]}, {&#39;title&#39;: &#39;Race Against Time&#39;,  &#39;year&#39;: 2000,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Geoff Murphy&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Cary Elwes&#39;, &#39;Chris Sarandon&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Quatermass Xperiment&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Val Guest&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;Jack Warner&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Found&#39;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Hrishikesh Mukherjee&#39;],  &#39;actors&#39;: [&#39;Amitabh Bachchan&#39;, &#39;Ashok Kumar&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;In Good Company&#39;,  &#39;year&#39;: 2004,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Paul Weitz&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Topher Grace&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Someone Special&#39;,  &#39;year&#39;: 2004,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Jin Jang&#39;],  &#39;actors&#39;: [&#39;Jae-yeong Jeong&#39;, &#39;Jin Jang&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Brothers&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Gary Hardwick&#39;],  &#39;actors&#39;: [&#39;Morris Chestnut&#39;,   &#39;Shemar Moore&#39;,   &#39;D.L. Hughley&#39;,   &#39;Bill Bellamy&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Shadows in Paradise&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 4.2,  &#39;directors&#39;: [&#39;J. Stephen Maunder&#39;],  &#39;actors&#39;: [&#39;Mark Dacascos&#39;,   &#39;Armand Assante&#39;,   &#39;Tom Sizemore&#39;,   &#39;Bruce Boxleitner&#39;],  &#39;genres&#39;: [&#39;Action&#39;]}, {&#39;title&#39;: &#39;Rio Lobo&#39;,  &#39;year&#39;: 1970,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Howard Hawks&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Jorge Rivero&#39;, &#39;Jack Elam&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Wild Bill&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Walter Hill&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;John Hurt&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Visitors of the Night&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Jorge Montesi&#39;],  &#39;actors&#39;: [&#39;Stephen McHattie&#39;, &#39;Dale Midkiff&#39;],  &#39;genres&#39;: [&#39;Sci-Fi&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Rancho Deluxe&#39;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Frank Perry&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Sam Waterston&#39;, &#39;Clifton James&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Bombardier&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Richard Wallace&#39;, &#39;Lambert Hillyer&#39;],  &#39;actors&#39;: [&quot;Pat O&#39;Brien&quot;, &#39;Randolph Scott&#39;, &#39;Eddie Albert&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Youth of the Son&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Masaki Kobayashi&#39;],  &#39;actors&#39;: [&#39;Akira Ishihama&#39;, &#39;Chishû Ryû&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Big Steal&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Don Siegel&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;William Bendix&#39;, &#39;Patric Knowles&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Red Pony&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Lewis Milestone&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Louis Calhern&#39;, &#39;Shepperd Strudwick&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Violent Men&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Rudolph Maté&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Edward G. Robinson&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Mad Miss Manton&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Leigh Jason&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Sam Levene&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Andy Hardy Gets Spring Fever&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;W.S. Van Dyke&#39;],  &#39;actors&#39;: [&#39;Lewis Stone&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Destruction Los Angeles&#39;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Tibor Takács&#39;],  &#39;actors&#39;: [&#39;Craig Sheffer&#39;, &#39;Romeo Miller&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;]}, {&#39;title&#39;: &#39;Babe: Pig in the City&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;George Miller&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;James Cromwell&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Beyond the Ring&#39;,  &#39;year&#39;: 2008,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Gerson Sanginitto&#39;],  &#39;actors&#39;: [&#39;André Lima&#39;, &#39;Martin Kove&#39;, &#39;Gary Busey&#39;, &#39;Brye Cooper&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Every Afternoon&#39;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Joseph W. Sarno&#39;],  &#39;actors&#39;: [&#39;Peder Kinberg&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;I Wanted Wings&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Mitchell Leisen&#39;],  &#39;actors&#39;: [&#39;Ray Milland&#39;, &#39;William Holden&#39;, &#39;Wayne Morris&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Pittsburgh&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Lewis Seiler&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Randolph Scott&#39;, &#39;Frank Craven&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Fear and Desire&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Stanley Kubrick&#39;],  &#39;actors&#39;: [&#39;Frank Silvera&#39;, &#39;Kenneth Harp&#39;, &#39;Paul Mazursky&#39;, &#39;Stephen Coit&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Impact&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Arthur Lubin&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;Charles Coburn&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Farmer Takes a Wife&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Victor Fleming&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Charles Bickford&#39;, &#39;Slim Summerville&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Showtime&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Tom Dey&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Eddie Murphy&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Eight Men Out&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;John Sayles&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;,   &#39;Clifton James&#39;,   &#39;Michael Lerner&#39;,   &#39;Christopher Lloyd&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Requiem for a Heavyweight&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Ralph Nelson&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Jackie Gleason&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Almost Christmas&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;David E. Talbert&#39;],  &#39;actors&#39;: [&#39;Omar Epps&#39;, &#39;Danny Glover&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Losing Control&#39;,  &#39;year&#39;: 2011,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Valerie Weiss&#39;],  &#39;actors&#39;: [&#39;Reid Scott&#39;, &#39;Theo Alexander&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Captain from Köpenick&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Helmut Käutner&#39;],  &#39;actors&#39;: [&#39;Heinz Rühmann&#39;, &#39;Martin Held&#39;, &#39;Willy A. Kleinau&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Watch Me When I Kill&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Antonio Bido&#39;],  &#39;actors&#39;: [&#39;Corrado Pani&#39;, &#39;Franco Citti&#39;, &#39;Fernando Cerulli&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Solstice&#39;,  &#39;year&#39;: 2008,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Daniel Myrick&#39;],  &#39;actors&#39;: [&#39;Shawn Ashmore&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Horror&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;White Girl&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Elizabeth Wood&#39;],  &#39;actors&#39;: [&#39;Brian Marc&#39;, &#39;Justin Bartha&#39;, &#39;Adrian Martinez&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Fugitive&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Emilio Fernández&#39;, &#39;John Ford&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Pedro Armendáriz&#39;, &#39;J. Carrol Naish&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Gallant Journey&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Charles Ruggles&#39;, &#39;Henry Travers&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Wonderful Country&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Robert Parrish&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Gary Merrill&#39;, &#39;Albert Dekker&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Murder, Inc.&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Burt Balaban&#39;, &#39;Stuart Rosenberg&#39;],  &#39;actors&#39;: [&#39;Stuart Whitman&#39;, &#39;Henry Morgan&#39;, &#39;Peter Falk&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Vanilla Sky&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Cameron Crowe&#39;],  &#39;actors&#39;: [&#39;Tom Cruise&#39;, &#39;Kurt Russell&#39;],  &#39;genres&#39;: [&#39;Fantasy&#39;, &#39;Mystery&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Slow Burn&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Matthew Chapman&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Dennis Lipscomb&#39;, &#39;Raymond J. Barry&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Sheepman&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;George Marshall&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Leslie Nielsen&#39;, &#39;Mickey Shaughnessy&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Love Is a Gun&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;David Hartwell&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;R. Lee Ermey&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Captain Kidd&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Rowland V. Lee&#39;],  &#39;actors&#39;: [&#39;Charles Laughton&#39;, &#39;Randolph Scott&#39;, &#39;Reginald Owen&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Final Analysis&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Phil Joanou&#39;],  &#39;actors&#39;: [&#39;Richard Gere&#39;, &#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;A Lawless Street&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Joseph H. Lewis&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Warner Anderson&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Serpent&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Henri Verneuil&#39;],  &#39;actors&#39;: [&#39;Yul Brynner&#39;, &#39;Henry Fonda&#39;, &#39;Dirk Bogarde&#39;, &#39;Philippe Noiret&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Magic of Lassie&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Don Chaffey&#39;],  &#39;actors&#39;: [&#39;James Stewart&#39;, &#39;Mickey Rooney&#39;, &#39;Pernell Roberts&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Call Me Madam&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Walter Lang&#39;],  &#39;actors&#39;: [&quot;Donald O&#39;Connor&quot;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;La Strada&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Federico Fellini&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Richard Basehart&#39;, &#39;Aldo Silvani&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Falling in Love&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Ulu Grosbard&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Harvey Keitel&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;John Dies at the End&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Don Coscarelli&#39;],  &#39;actors&#39;: [&#39;Chase Williamson&#39;, &#39;Rob Mayes&#39;, &#39;Paul Giamatti&#39;, &#39;Clancy Brown&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Escape from L.A.&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;John Carpenter&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Steve Buscemi&#39;, &#39;Stacy Keach&#39;, &#39;Peter Fonda&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Project Solitude&#39;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Rustam Branaman&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Richard Riehle&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Going Home&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Herbert B. Leonard&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Jan-Michael Vincent&#39;, &#39;Jason Bernard&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;One in a Million: The Ron LeFlore Story&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;William A. Graham&#39;],  &#39;actors&#39;: [&#39;LeVar Burton&#39;, &#39;Paul Benjamin&#39;, &#39;James Luisi&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Shoulder Arms&#39;,  &#39;year&#39;: 1918,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;L.A. Blaisdell&#39;,   &#39;Charles Chaplin&#39;,   &#39;Syd Chaplin&#39;,   &#39;Loyal Underwood&#39;,   &#39;Henry Bergman&#39;,   &#39;Tom Wilson&#39;,   &#39;Albert Austin&#39;,   &#39;Jack Wilson&#39;,   &#39;W.J. Allen&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Down by Law&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Jim Jarmusch&#39;],  &#39;actors&#39;: [&#39;Tom Waits&#39;, &#39;John Lurie&#39;, &#39;Roberto Benigni&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Rounders&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Burt Kennedy&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Untouchables&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Brian De Palma&#39;],  &#39;actors&#39;: [&#39;Kevin Costner&#39;,   &#39;Sean Connery&#39;,   &#39;Robert De Niro&#39;,   &#39;Charles Martin Smith&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Birth of the Blues&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Victor Schertzinger&#39;],  &#39;actors&#39;: [&#39;Bing Crosby&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Music&#39;]}, {&#39;title&#39;: &quot;Thompson&#39;s Last Run&quot;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Jerrold Freedman&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Wilford Brimley&#39;, &#39;Guy Boyd&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Lara Croft: Tomb Raider&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Simon West&#39;],  &#39;actors&#39;: [&#39;Jon Voight&#39;, &#39;Iain Glen&#39;, &#39;Noah Taylor&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Grosse Pointe Blank&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;George Armitage&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Dan Aykroyd&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Abilene Town&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Edwin L. Marin&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Edgar Buchanan&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Rude Awakening&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Aaron Russo&#39;, &#39;David Greenwalt&#39;],  &#39;actors&#39;: [&#39;Cheech Marin&#39;, &#39;Eric Roberts&#39;, &#39;Robert Carradine&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;I Spit on Your Grave: Vengeance is Mine&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;R.D. Braunstein&#39;],  &#39;actors&#39;: [&#39;Doug McKeon&#39;, &#39;Gabriel Hogan&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Night and the City&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Irwin Winkler&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Cliff Gorman&#39;, &#39;Alan King&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Machete&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Ethan Maniquis&#39;, &#39;Robert Rodriguez&#39;],  &#39;actors&#39;: [&#39;Danny Trejo&#39;, &#39;Robert De Niro&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;What Just Happened&#39;,  &#39;year&#39;: 2008,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Barry Levinson&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;John Turturro&#39;, &#39;Stanley Tucci&#39;, &#39;Sean Penn&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Iceman Cometh&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;John Frankenheimer&#39;],  &#39;actors&#39;: [&#39;Lee Marvin&#39;, &#39;Fredric March&#39;, &#39;Robert Ryan&#39;, &#39;Jeff Bridges&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;My Name Is Nobody&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Tonino Valerii&#39;],  &#39;actors&#39;: [&#39;Terence Hill&#39;, &#39;Henry Fonda&#39;, &#39;Jean Martin&#39;, &#39;R.G. Armstrong&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Jersey Justice&#39;,  &#39;year&#39;: 2014,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;John Charles Hunt&#39;],  &#39;actors&#39;: [&#39;Bo Svenson&#39;, &#39;Christopher Mann&#39;, &#39;Sal Mazzotta&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Return of Frank James&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Fritz Lang&#39;],  &#39;actors&#39;: [&#39;John Carradine&#39;, &#39;Henry Fonda&#39;, &#39;Jackie Cooper&#39;, &#39;Henry Hull&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;History&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Proud Family Movie&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Bruce W. Smith&#39;],  &#39;actors&#39;: [&#39;Tommy Davidson&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Throwaways&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Tony Bui&#39;],  &#39;actors&#39;: [&#39;Peter Brooke&#39;, &#39;James Caan&#39;, &#39;Noel Clarke&#39;, &#39;Kevin Dillon&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Killing&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;Stanley Kubrick&#39;],  &#39;actors&#39;: [&#39;Sterling Hayden&#39;, &#39;Vince Edwards&#39;, &#39;Jay C. Flippen&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Convicted&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Henry Levin&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Broderick Crawford&#39;, &#39;Millard Mitchell&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Nous sommes tous des assassins&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;André Cayatte&#39;],  &#39;actors&#39;: [&#39;Marcel Mouloudji&#39;,   &#39;Raymond Pellegrin&#39;,   &#39;Antoine Balpêtré&#39;,   &#39;Julien Verdier&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Lust for Gold&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;S. Sylvan Simon&#39;, &#39;George Marshall&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Gig Young&#39;, &#39;William Prince&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Crime&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Midway&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Jack Smight&#39;],  &#39;actors&#39;: [&#39;Charlton Heston&#39;, &#39;Henry Fonda&#39;, &#39;James Coburn&#39;, &#39;Glenn Ford&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Message&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Moustapha Akkad&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Michael Ansara&#39;, &#39;Johnny Sekka&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Hide in Plain Sight&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;James Caan&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Robert Viharo&#39;, &#39;Joe Grifasi&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;West of the Divide&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;Lafe McKee&#39;,   &#39;John Wayne&#39;,   &quot;George &#39;Gabby&#39; Hayes&quot;,   &#39;Lloyd Whitlock&#39;,   &#39;Yakima Canutt&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;I Cover the War!&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Arthur Lubin&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Don Barclay&#39;, &#39;Charles Brokaw&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Dick Tracy&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Alan James&#39;, &#39;Ray Taylor&#39;],  &#39;actors&#39;: [&#39;Ralph Byrd&#39;, &#39;Smiley Burnette&#39;, &#39;Lee Van Atta&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Paras-Pathar&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Tulsi Chakraborty&#39;, &#39;Kali Bannerjee&#39;, &#39;Gangapada Basu&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Redskin&#39;,  &#39;year&#39;: 1929,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Victor Schertzinger&#39;],  &#39;actors&#39;: [&#39;Richard Dix&#39;, &#39;Tully Marshall&#39;, &#39;George Regas&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;HouseSitter&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Frank Oz&#39;],  &#39;actors&#39;: [&#39;Steve Martin&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Unknown Cyclist&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Bernard Salzmann&#39;],  &#39;actors&#39;: [&#39;Vincent Spano&#39;, &#39;Danny Nucci&#39;, &#39;Stephen Spinella&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Desire Me&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Victor Saville&#39;,   &#39;Jack Conway&#39;,   &#39;George Cukor&#39;,   &#39;Mervyn LeRoy&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Richard Hart&#39;, &#39;Morris Ankrum&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Raggedy Man&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Jack Fisk&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Sam Shepard&#39;, &#39;William Sanderson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Big Wheel&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Edward Ludwig&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Thomas Mitchell&#39;, &quot;Michael O&#39;Shea&quot;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Year of the Dog&#39;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Mike White&#39;],  &#39;actors&#39;: [&#39;John C. Reilly&#39;, &#39;Peter Sarsgaard&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Tex&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Tim Hunter&#39;],  &#39;actors&#39;: [&#39;Matt Dillon&#39;, &#39;Jim Metzler&#39;, &#39;Bill McKinney&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;That Championship Season&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Jason Miller&#39;],  &#39;actors&#39;: [&#39;Bruce Dern&#39;, &#39;Stacy Keach&#39;, &#39;Robert Mitchum&#39;, &#39;Martin Sheen&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Shakespeare in... and Out&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Peter Shushtari&#39;],  &#39;actors&#39;: [&#39;Roger Shank&#39;,   &#39;Lawrence Trilling&#39;,   &#39;J.D. Smith&#39;,   &#39;William Neenan&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Enemy Mine&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Wolfgang Petersen&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;,   &#39;Louis Gossett Jr.&#39;,   &#39;Brion James&#39;,   &#39;Richard Marcus&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;American Violence&#39;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Timothy Woodward Jr.&#39;],  &#39;actors&#39;: [&#39;Kaiwi Lyman&#39;, &#39;Bruce Dern&#39;, &#39;Columbus Short&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Best of Times&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Roger Spottiswoode&#39;],  &#39;actors&#39;: [&#39;Robin Williams&#39;, &#39;Kurt Russell&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Our Very Own&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Cameron Watson&#39;],  &#39;actors&#39;: [&#39;Keith Carradine&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Souls at Sea&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Gary Cooper&#39;, &#39;George Raft&#39;, &#39;Henry Wilcoxon&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;]}, {&#39;title&#39;: &#39;Horatio Hornblower: The Duchess and the Devil&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;Andrew Grieve&#39;],  &#39;actors&#39;: [&#39;Ioan Gruffudd&#39;, &#39;Robert Lindsay&#39;, &#39;Christopher Fulford&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Horatio Hornblower: The Fire Ship&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Andrew Grieve&#39;],  &#39;actors&#39;: [&#39;Ioan Gruffudd&#39;, &#39;Robert Lindsay&#39;, &#39;Denis Lawson&#39;, &#39;Ian McNeice&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Horatio Hornblower: The Wrong War&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Andrew Grieve&#39;],  &#39;actors&#39;: [&#39;John Shrapnel&#39;,   &#39;Ioan Gruffudd&#39;,   &#39;Robert Lindsay&#39;,   &#39;Antony Sher&#39;,   &#39;Samuel West&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Man Hunt&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Fritz Lang&#39;],  &#39;actors&#39;: [&#39;Walter Pidgeon&#39;, &#39;George Sanders&#39;, &#39;John Carradine&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;A Man Betrayed&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;John H. Auer&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Edward Ellis&#39;, &#39;Wallace Ford&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Shaft in Africa&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;John Guillermin&#39;],  &#39;actors&#39;: [&#39;Richard Roundtree&#39;, &#39;Frank Finlay&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Bad Times at the El Royale&#39;,  &#39;year&#39;: 2018,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Drew Goddard&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Jon Hamm&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Rollercoaster&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;James Goldstone&#39;],  &#39;actors&#39;: [&#39;George Segal&#39;,   &#39;Timothy Bottoms&#39;,   &#39;Richard Widmark&#39;,   &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Shoes of the Fisherman&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Michael Anderson&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;,   &#39;Laurence Olivier&#39;,   &#39;Oskar Werner&#39;,   &#39;David Janssen&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Blockade&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;William Dieterle&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Leo Carrillo&#39;, &#39;John Halliday&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Eddie Cantor Story&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Alfred E. Green&#39;],  &#39;actors&#39;: [&#39;Keefe Brasselle&#39;, &#39;Arthur Franz&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;The Savage Innocents&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Nicholas Ray&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Carlo Giustini&#39;, &quot;Peter O&#39;Toole&quot;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Marine Story&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Ned Farr&#39;],  &#39;actors&#39;: [&#39;Anthony Michael Jones&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Betty and Coretta&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Yves Simoneau&#39;],  &#39;actors&#39;: [&#39;Malik Yoba&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Comrades of Summer&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Tommy Lee Wallace&#39;],  &#39;actors&#39;: [&#39;Joe Mantegna&#39;, &#39;Michael Lerner&#39;, &#39;Mark Rolston&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &quot;It&#39;s My Party&quot;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Randal Kleiser&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Gregory Harrison&#39;, &#39;Bruce Davison&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Southern Baptist Sissies&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Del Shores&#39;],  &#39;actors&#39;: [&#39;Emerson Collins&#39;, &#39;Leslie Jordan&#39;, &#39;Willam Belli&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Love Is a Ball&#39;,  &#39;year&#39;: 1963,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;David Swift&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Charles Boyer&#39;, &#39;Ricardo Montalban&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Roberta&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;Fred Astaire&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;War and Peace&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;King Vidor&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Mel Ferrer&#39;, &#39;Vittorio Gassman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Exonerated&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Bob Balaban&#39;],  &#39;actors&#39;: [&#39;Brian Dennehy&#39;, &#39;Danny Glover&#39;, &#39;Delroy Lindo&#39;, &#39;Aidan Quinn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Stranded&#39;,  &#39;year&#39;: 2006,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Kern Konwiser&#39;],  &#39;actors&#39;: [&#39;Jack Hartnett&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Savior&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Predrag Antonijevic&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Pascal Rollin&#39;, &#39;Catlin Foster&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Good Fences&#39;,  &#39;year&#39;: 2003,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Ernest R. Dickerson&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Zachary Simmons Glover&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Dear Heart&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Delbert Mann&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Michael Anderson Jr.&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Freak Talks About Sex&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Paul Todisco&#39;],  &#39;actors&#39;: [&#39;Steve Zahn&#39;, &#39;Josh Hamilton&#39;, &#39;David Kinney&#39;, &#39;Wayne Federman&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Pearls and Swine&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Óskar Jónasson&#39;],  &#39;actors&#39;: [&#39;Ingvar Eggert Sigurðsson&#39;,   &#39;Jóhann Sigurðarson&#39;,   &#39;Ólafur Darri Ólafsson&#39;,   &#39;Þröstur Leó Gunnarsson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Destroyer&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;William A. Seiter&#39;, &#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Edward G. Robinson&#39;, &#39;Glenn Ford&#39;, &#39;Edgar Buchanan&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;A Stolen Life&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Curtis Bernhardt&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Dane Clark&#39;, &#39;Walter Brennan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Love, Cheat &amp; Steal&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;William Curran&#39;],  &#39;actors&#39;: [&#39;John Lithgow&#39;, &#39;Eric Roberts&#39;, &#39;Richard Edson&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;White Banners&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Edmund Goulding&#39;],  &#39;actors&#39;: [&#39;Claude Rains&#39;, &#39;Jackie Cooper&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Snow Queen&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Päivi Hartzell&#39;],  &#39;actors&#39;: [&#39;Sebastian Kaatrasalo&#39;],  &#39;genres&#39;: [&#39;Family&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;The Fisher King&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Terry Gilliam&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Robin Williams&#39;, &#39;Adam Bryant&#39;, &#39;Paul Lombardi&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;The Joneses&#39;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Derrick Borte&#39;],  &#39;actors&#39;: [&#39;David Duchovny&#39;, &#39;Benjamin Hollingsworth&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The River Wild&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Curtis Hanson&#39;],  &#39;actors&#39;: [&#39;Kevin Bacon&#39;, &#39;David Strathairn&#39;, &#39;Joseph Mazzello&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &quot;Thoroughbreds Don&#39;t Cry&quot;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Alfred E. Green&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;C. Aubrey Smith&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Curse of the Fly&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Don Sharp&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;George Baker&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Horror&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;This Is My Affair&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;Robert Taylor&#39;, &#39;Victor McLaglen&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Star Wars: Episode I - The Phantom Menace&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;George Lucas&#39;],  &#39;actors&#39;: [&#39;Ewan McGregor&#39;, &#39;Liam Neeson&#39;, &#39;Jake Lloyd&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Toy Story 3&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Lee Unkrich&#39;],  &#39;actors&#39;: [&#39;Tom Hanks&#39;, &#39;Tim Allen&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Captain Ron&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Thom Eberhardt&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Martin Short&#39;, &#39;Benjamin Salisbury&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Angel and the Badman&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;James Edward Grant&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Harry Carey&#39;, &#39;Bruce Cabot&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Men of Honor&#39;,  &#39;year&#39;: 2000,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;George Tillman Jr.&#39;],  &#39;actors&#39;: [&#39;Cuba Gooding Jr.&#39;, &#39;Robert De Niro&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Last American Hero&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Lamont Johnson&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Hot Saturday&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;Cary Grant&#39;, &#39;Randolph Scott&#39;, &#39;Edward Woods&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;A Remarkable Life&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Vohn Regensburger&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Matrix Reloaded&#39;,  &#39;year&#39;: 2003,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Lilly Wachowski&#39;, &#39;Lana Wachowski&#39;],  &#39;actors&#39;: [&#39;Keanu Reeves&#39;, &#39;Laurence Fishburne&#39;, &#39;Hugo Weaving&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Alambrista!&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Robert M. Young&#39;],  &#39;actors&#39;: [&#39;Domingo Ambriz&#39;, &#39;Trinidad Silva&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Bang the Drum Slowly&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;John D. Hancock&#39;],  &#39;actors&#39;: [&#39;Michael Moriarty&#39;,   &#39;Robert De Niro&#39;,   &#39;Vincent Gardenia&#39;,   &#39;Phil Foster&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Andy Hardy Meets Debutante&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Lewis Stone&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;June Bride&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Bretaigne Windust&#39;],  &#39;actors&#39;: [&#39;Robert Montgomery&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &quot;The People Against O&#39;Hara&quot;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;John Sturges&#39;],  &#39;actors&#39;: [&#39;Spencer Tracy&#39;, &quot;Pat O&#39;Brien&quot;, &#39;John Hodiak&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Dream of Kings&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Daniel Mann&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Sam Levene&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Strangler of the Swamp&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Frank Wisbar&#39;],  &#39;actors&#39;: [&#39;Robert Barrat&#39;, &#39;Blake Edwards&#39;, &#39;Charles Middleton&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Fantasy&#39;, &#39;Horror&#39;]}, {&#39;title&#39;: &#39;Story of G.I. Joe&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;Burgess Meredith&#39;,   &#39;Robert Mitchum&#39;,   &#39;Freddie Steele&#39;,   &#39;Wally Cassell&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Beneath the Darkness&#39;,  &#39;year&#39;: 2011,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Martin Guigui&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Tony Oller&#39;, &#39;Stephen Ford&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &quot;Everybody&#39;s Fine&quot;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Kirk Jones&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Sam Rockwell&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Daisy Kenyon&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Otto Preminger&#39;],  &#39;actors&#39;: [&#39;Dana Andrews&#39;, &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Snow Queen 3: Fire and Ice&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Aleksey Tsitsilin&#39;],  &#39;actors&#39;: [&#39;Jason Griffith&#39;, &#39;Dee Bradley Baker&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Ryde&#39;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Brian Frank Visciglia&#39;],  &#39;actors&#39;: [&#39;David Wachs&#39;, &#39;Ronnie Alvarez&#39;, &#39;Kyle Thomas Schmidt&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Stowaway to the Moon&#39;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Andrew V. McLaglen&#39;],  &#39;actors&#39;: [&#39;Lloyd Bridges&#39;, &#39;Jeremy Slate&#39;, &#39;Jim McMullan&#39;, &#39;Morgan Paull&#39;],  &#39;genres&#39;: [&#39;Family&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Spirited Away&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 8.6,  &#39;directors&#39;: [&#39;Hayao Miyazaki&#39;, &#39;Kirk Wise&#39;],  &#39;actors&#39;: [&#39;Miyu Irino&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Red Sheep&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Amos McKay&#39;],  &#39;actors&#39;: [&#39;George Katt&#39;, &#39;Jonathan Regier&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &quot;Hitman&#39;s Run&quot;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Mark L. Lester&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Esteban Powell&#39;, &#39;C. Thomas Howell&#39;],  &#39;genres&#39;: [&#39;Action&#39;]}, {&#39;title&#39;: &#39;Wiped-Out Footprints&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Enrique Gabriel&#39;],  &#39;actors&#39;: [&#39;Federico Luppi&#39;, &#39;Sergi Calleja&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &quot;Donovan&#39;s Reef&quot;,  &#39;year&#39;: 1963,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Lee Marvin&#39;, &#39;Jack Warden&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Enemy of the World&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Tabrez Hashmi&#39;, &#39;Mehmood&#39;],  &#39;actors&#39;: [&#39;Mehmood&#39;, &#39;Manzoor Ali&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Killer in the Family&#39;,  &#39;year&#39;: 1983,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Richard T. Heffron&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;James Spader&#39;, &#39;Lance Kerwin&#39;, &#39;Eric Stoltz&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The King of Comedy&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Martin Scorsese&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Jerry Lewis&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Hold That Kiss&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Edwin L. Marin&#39;],  &#39;actors&#39;: [&quot;Dennis O&#39;Keefe&quot;, &#39;Mickey Rooney&#39;, &#39;George Barbier&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Playing for Keeps&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Gabriele Muccino&#39;],  &#39;actors&#39;: [&#39;Gerard Butler&#39;, &#39;Dennis Quaid&#39;, &#39;Noah Lomax&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Nest of Vipers&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Tonino Cervi&#39;],  &#39;actors&#39;: [&#39;Paolo Bonacelli&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &quot;A Dog&#39;s Purpose&quot;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Lasse Hallström&#39;],  &#39;actors&#39;: [&#39;Josh Gad&#39;, &#39;Dennis Quaid&#39;, &#39;Bryce Gheisar&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &quot;What to Expect When You&#39;re Expecting&quot;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Kirk Jones&#39;],  &#39;actors&#39;: [&#39;Matthew Morrison&#39;, &#39;J. Todd Smith&#39;, &#39;Dennis Quaid&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Mexican Sunrise&#39;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 4.1,  &#39;directors&#39;: [&#39;Rowdy Stovall&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;,   &#39;Jordan Belfi&#39;,   &#39;William Gregory Lee&#39;,   &#39;Reed Frerichs&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Action in Arabia&#39;,  &#39;year&#39;: 1944,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Léonide Moguy&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Gene Lockhart&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Riders of Destiny&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;Heinie Conklin&#39;,   &#39;John Wayne&#39;,   &#39;Forrest Taylor&#39;,   &quot;George &#39;Gabby&#39; Hayes&quot;,   &#39;Al St. John&#39;],  &#39;genres&#39;: [&#39;Music&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &quot;We Can&#39;t Go Home Again&quot;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Nicholas Ray&#39;],  &#39;actors&#39;: [&#39;Richard Bock&#39;, &#39;Tom Farrell&#39;, &#39;Danny Fisher&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &quot;America&#39;s Sweethearts&quot;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Joe Roth&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Billy Crystal&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &quot;Cutter&#39;s Way&quot;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Ivan Passer&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;John Heard&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;One Christmas Eve&#39;,  &#39;year&#39;: 2014,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Jay Russell&#39;],  &#39;actors&#39;: [&#39;Kevin Daniels&#39;, &#39;Carlos Gómez&#39;, &#39;Griffin Kane&#39;],  &#39;genres&#39;: [&#39;Family&#39;]}, {&#39;title&#39;: &#39;I Love Melvin&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Don Weis&#39;],  &#39;actors&#39;: [&quot;Donald O&#39;Connor&quot;, &#39;Richard Anderson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Luck of the Draw&#39;,  &#39;year&#39;: 2000,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Luca Bercovici&#39;],  &#39;actors&#39;: [&#39;James Marshall&#39;,   &#39;Dennis Hopper&#39;,   &#39;Michael Madsen&#39;,   &#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;How the West Was Won&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;John Ford&#39;,   &#39;Richard Thorpe&#39;,   &#39;George Marshall&#39;,   &#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;James Stewart&#39;, &#39;John Wayne&#39;, &#39;Gregory Peck&#39;, &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Groove&#39;,  &#39;year&#39;: 2000,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Greg Harrison&#39;],  &#39;actors&#39;: [&#39;Chris Ferreira&#39;, &#39;Steve Van Wormer&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;The Lucky Texan&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;Gordon De Main&#39;,   &#39;John Wayne&#39;,   &quot;George &#39;Gabby&#39; Hayes&quot;,   &#39;Lloyd Whitlock&#39;,   &#39;Yakima Canutt&#39;,   &#39;Eddie Parker&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Solomon and Sheba&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;King Vidor&#39;],  &#39;actors&#39;: [&#39;Yul Brynner&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Q &amp; A&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Sidney Lumet&#39;],  &#39;actors&#39;: [&#39;Nick Nolte&#39;,   &#39;Timothy Hutton&#39;,   &#39;Armand Assante&#39;,   &quot;Patrick O&#39;Neal&quot;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;This Land Is Mine&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Jean Renoir&#39;],  &#39;actors&#39;: [&#39;Charles Laughton&#39;, &#39;George Sanders&#39;, &#39;Walter Slezak&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Back to Bataan&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Edward Dmytryk&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Saint of Fort Washington&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Tim Hunter&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Matt Dillon&#39;, &#39;Rick Aviles&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Rage in Heaven&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Richard Thorpe&#39;, &#39;Robert B. Sinclair&#39;, &#39;W.S. Van Dyke&#39;],  &#39;actors&#39;: [&#39;Robert Montgomery&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Not as a Stranger&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Stanley Kramer&#39;],  &#39;actors&#39;: [&#39;Frank Sinatra&#39;, &#39;Robert Mitchum&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Slither&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Howard Zieff&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Peter Boyle&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Late George Apley&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Joseph L. Mankiewicz&#39;],  &#39;actors&#39;: [&#39;Ronald Colman&#39;, &#39;Richard Haydn&#39;, &#39;Charles Russell&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The American Success Company&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;William Richert&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Ned Beatty&#39;, &#39;Steven Keats&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Young Man with Ideas&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Mitchell Leisen&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Hunley&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;John Gray&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;,   &#39;Donald Sutherland&#39;,   &#39;Alex Jennings&#39;,   &#39;Chris Bauer&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Beloved&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Jonathan Demme&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Emil Pinnock&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Horror&#39;]}, {&#39;title&#39;: &#39;Being John Malkovich&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Spike Jonze&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;John Malkovich&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Capricorn One&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Peter Hyams&#39;],  &#39;actors&#39;: [&#39;Elliott Gould&#39;, &#39;James Brolin&#39;, &#39;Sam Waterston&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Santa Fe Stampede&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;George Sherman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ray Corrigan&#39;, &#39;Max Terhune&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Great Balls of Fire!&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Jim McBride&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;John Doe&#39;, &#39;Stephen Tobolowsky&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Hope Springs&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;David Frankel&#39;],  &#39;actors&#39;: [&#39;Tommy Lee Jones&#39;, &#39;Steve Carell&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Supernatural&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Victor Halperin&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Alan Dinehart&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;El kárate, el Colt y el impostor&#39;,  &#39;year&#39;: 1974,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Antonio Margheriti&#39;],  &#39;actors&#39;: [&#39;Lee Van Cleef&#39;, &#39;Lieh Lo&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Scugnizzi&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Nanni Loy&#39;],  &#39;actors&#39;: [&#39;Leo Gullotta&#39;,   &#39;Francesco Allocca&#39;,   &#39;Gaetano Amato&#39;,   &#39;Pino Ammendola&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Generation Gap&#39;,  &#39;year&#39;: 2008,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Bill Norton&#39;],  &#39;actors&#39;: [&#39;Edward Asner&#39;, &#39;Alex Black&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;The Return of the Living Dead&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&quot;Dan O&#39;Bannon&quot;],  &#39;actors&#39;: [&#39;Clu Gulager&#39;, &#39;James Karen&#39;, &#39;Don Calfa&#39;, &#39;Thom Mathews&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Lethal Weapon 4&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Richard Donner&#39;],  &#39;actors&#39;: [&#39;Mel Gibson&#39;, &#39;Danny Glover&#39;, &#39;Joe Pesci&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The World of Apu&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Soumitra Chatterjee&#39;, &#39;Alok Chakravarty&#39;, &#39;Swapan Mukherjee&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Kampf um Rom II - Der Verrat&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Robert Siodmak&#39;, &#39;Sergiu Nicolaescu&#39;, &#39;Andrew Marton&#39;],  &#39;actors&#39;: [&#39;Laurence Harvey&#39;, &#39;Orson Welles&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Another Face&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Christy Cabanne&#39;],  &#39;actors&#39;: [&#39;Wallace Ford&#39;, &#39;Brian Donlevy&#39;, &#39;Erik Rhodes&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Lawless Nineties&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Joseph Kane&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Harry Woods&#39;, &quot;George &#39;Gabby&#39; Hayes&quot;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Breakdown&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Jonathan Mostow&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;J.T. Walsh&#39;, &#39;M.C. Gainey&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Nowhere Land&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 4.3,  &#39;directors&#39;: [&#39;Rupert Hitzig&#39;],  &#39;actors&#39;: [&#39;Peter Dobson&#39;, &#39;Jon Polito&#39;, &#39;Francesco Quinn&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;We Need to Talk About Kevin&#39;,  &#39;year&#39;: 2011,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Lynne Ramsay&#39;],  &#39;actors&#39;: [&#39;John C. Reilly&#39;, &#39;Ezra Miller&#39;, &#39;Jasper Newell&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Tequila Sunrise&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Robert Towne&#39;],  &#39;actors&#39;: [&#39;Mel Gibson&#39;, &#39;Kurt Russell&#39;, &#39;Raul Julia&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Fatal Desire&#39;,  &#39;year&#39;: 2006,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Ralph Hemecker&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Vantage Point&#39;,  &#39;year&#39;: 2008,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Pete Travis&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Forest Whitaker&#39;, &#39;Matthew Fox&#39;, &#39;Bruce McGill&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Greetings&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Brian De Palma&#39;],  &#39;actors&#39;: [&#39;Jonathan Warden&#39;,   &#39;Robert De Niro&#39;,   &#39;Gerrit Graham&#39;,   &#39;Richard Hamilton&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Blue-Eyed Butcher&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Stephen Kay&#39;],  &#39;actors&#39;: [&#39;Justin Bruening&#39;, &#39;W. Earl Brown&#39;, &#39;Michael Gross&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Good Catholic&#39;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Paul Shoulberg&#39;],  &#39;actors&#39;: [&#39;Zachary Spicer&#39;, &#39;Danny Glover&#39;, &#39;John C. McGinley&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Dark Angel&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Robert Iscove&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Linden Ashby&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Trainspotting&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Danny Boyle&#39;],  &#39;actors&#39;: [&#39;Ewan McGregor&#39;,   &#39;Ewen Bremner&#39;,   &#39;Jonny Lee Miller&#39;,   &#39;Kevin McKidd&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Man from Del Rio&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Harry Horner&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Peter Whitney&#39;, &#39;Douglas Fowley&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Ten Wanted Men&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;H. Bruce Humberstone&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Richard Boone&#39;, &#39;Alfonso Bedoya&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Return of Joe Rich&#39;,  &#39;year&#39;: 2011,  &#39;rating&#39;: 4.1,  &#39;directors&#39;: [&#39;Sam Auster&#39;],  &#39;actors&#39;: [&#39;Sam Witwer&#39;, &#39;Armand Assante&#39;, &#39;Tim Kazurinsky&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Carson City&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;André De Toth&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Raymond Massey&#39;, &#39;Richard Webb&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;One Shoe Makes It Murder&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;William Hale&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Mel Ferrer&#39;, &#39;José Pérez&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Promises in the Dark&#39;,  &#39;year&#39;: 1979,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Jerome Hellman&#39;],  &#39;actors&#39;: [&#39;Ned Beatty&#39;, &#39;Michael Brandon&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Beyond the Lights&#39;,  &#39;year&#39;: 2014,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Gina Prince-Bythewood&#39;],  &#39;actors&#39;: [&#39;Nate Parker&#39;, &#39;Danny Glover&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Sweet Bird of Youth&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Richard Brooks&#39;],  &#39;actors&#39;: [&#39;Paul Newman&#39;, &#39;Ed Begley&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Feu Mathias Pascal&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Pierre Chenal&#39;],  &#39;actors&#39;: [&#39;Pierre Blanchar&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Down to the Sea in Ships&#39;,  &#39;year&#39;: 1922,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Elmer Clifton&#39;],  &#39;actors&#39;: [&#39;Leigh Smith&#39;,   &#39;Raymond McKee&#39;,   &#39;William Walcott&#39;,   &#39;James Turfler&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &quot;Lee Daniels&#39; The Butler&quot;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Lee Daniels&#39;],  &#39;actors&#39;: [&#39;Forest Whitaker&#39;, &#39;John Cusack&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Dead Man Out&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Richard Pearce&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Tom Atkins&#39;, &#39;Rubén Blades&#39;, &#39;Larry Block&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Illusions&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Victor Kulle&#39;],  &#39;actors&#39;: [&#39;Robert Carradine&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Deer Hunter&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Michael Cimino&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;,   &#39;Christopher Walken&#39;,   &#39;John Cazale&#39;,   &#39;John Savage&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Island in the Sky&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Lloyd Nolan&#39;, &#39;Walter Abel&#39;, &#39;James Arness&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Walking Hills&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;John Sturges&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;William Bishop&#39;, &#39;Edgar Buchanan&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Thriller&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Her Cardboard Lover&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;George Cukor&#39;],  &#39;actors&#39;: [&#39;Robert Taylor&#39;, &#39;George Sanders&#39;, &#39;Frank McHugh&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Rope of Sand&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;William Dieterle&#39;],  &#39;actors&#39;: [&#39;Burt Lancaster&#39;, &#39;Paul Henreid&#39;, &#39;Claude Rains&#39;, &#39;Peter Lorre&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;]}, {&#39;title&#39;: &#39;Barnyard&#39;,  &#39;year&#39;: 2006,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Steve Oedekerk&#39;],  &#39;actors&#39;: [&#39;Kevin James&#39;, &#39;Danny Glover&#39;, &#39;Sam Elliott&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &quot;A Children&#39;s Story&quot;,  &#39;year&#39;: 2004,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Andrea Frazzi&#39;, &#39;Antonio Frazzi&#39;],  &#39;actors&#39;: [&#39;Gianluca Di Gennaro&#39;,   &#39;Carmine Recano&#39;,   &#39;Arturo Paglia&#39;,   &#39;Sergio Solli&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Class&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;David S. Cass Sr.&#39;],  &#39;actors&#39;: [&#39;Justin Bruening&#39;, &#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Stage Struck&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Sidney Lumet&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Herbert Marshall&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Third Wish&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Shelley Jensen&#39;],  &#39;actors&#39;: [&#39;Sean Maguire&#39;, &#39;Armand Assante&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Great Gatsby&#39;,  &#39;year&#39;: 1974,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Jack Clayton&#39;],  &#39;actors&#39;: [&#39;Robert Redford&#39;, &#39;Bruce Dern&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Jagged Edge&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Richard Marquand&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Peter Coyote&#39;, &#39;Robert Loggia&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Blood of the Condor&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Jorge Sanjinés&#39;],  &#39;actors&#39;: [&#39;Marcelino Yanahuaya&#39;, &#39;Vicente Verneros Salinas&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;D.C. Cab&#39;,  &#39;year&#39;: 1983,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Joel Schumacher&#39;],  &#39;actors&#39;: [&#39;Max Gail&#39;, &#39;Adam Baldwin&#39;, &#39;Mr. T&#39;, &#39;Charlie Barnett&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Jesse James&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Henry King&#39;, &#39;Irving Cummings&#39;],  &#39;actors&#39;: [&#39;Tyrone Power&#39;, &#39;Henry Fonda&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;I Accuse&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Abel Gance&#39;],  &#39;actors&#39;: [&#39;Victor Francen&#39;, &#39;Marcel Delaître&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Fat Man and Little Boy&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Roland Joffé&#39;],  &#39;actors&#39;: [&#39;Paul Newman&#39;, &#39;Dwight Schultz&#39;, &#39;John Cusack&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Flight of the Phoenix&#39;,  &#39;year&#39;: 2004,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;John Moore&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Giovanni Ribisi&#39;, &#39;Tyrese Gibson&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;While the City Sleeps&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Fritz Lang&#39;],  &#39;actors&#39;: [&#39;Dana Andrews&#39;, &#39;George Sanders&#39;, &#39;Howard Duff&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Ox-Bow Incident&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Dana Andrews&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Second Chance&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Rudolph Maté&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Jack Palance&#39;, &#39;Sandro Giglio&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Shark Tale&#39;,  &#39;year&#39;: 2004,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Vicky Jenson&#39;, &#39;Bibo Bergeron&#39;, &#39;Rob Letterman&#39;],  &#39;actors&#39;: [&#39;Will Smith&#39;, &#39;Robert De Niro&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;A Country Wedding&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Anne Wheeler&#39;],  &#39;actors&#39;: [&#39;Jesse Metcalfe&#39;, &#39;Aaron Craven&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &quot;Marvin&#39;s Room&quot;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Jerry Zaks&#39;],  &#39;actors&#39;: [&#39;Leonardo DiCaprio&#39;, &#39;Robert De Niro&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;3 A.M.&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Lee Davis&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Sergej Trifunovic&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Mystery&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The First of May&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Paul Sirmons&#39;],  &#39;actors&#39;: [&#39;Dan Byrd&#39;, &#39;Mickey Rooney&#39;, &#39;Charles Nelson Reilly&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;In Search of the Castaways&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Robert Stevenson&#39;],  &#39;actors&#39;: [&#39;Maurice Chevalier&#39;, &#39;George Sanders&#39;, &#39;Wilfrid Hyde-White&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Family&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Johnny Belinda&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Anthony Page&#39;],  &#39;actors&#39;: [&#39;Richard Thomas&#39;, &#39;Dennis Quaid&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Blood and Sweat&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Rakesh Kumar&#39;],  &#39;actors&#39;: [&#39;Amitabh Bachchan&#39;, &#39;Vinod Khanna&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Jungle Book&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Stephen Sommers&#39;],  &#39;actors&#39;: [&#39;Jason Scott Lee&#39;, &#39;Cary Elwes&#39;, &#39;Sam Neill&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Family&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;At Any Price&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Ramin Bahrani&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Zac Efron&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Paradise Alley&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Sylvester Stallone&#39;],  &#39;actors&#39;: [&#39;Sylvester Stallone&#39;,   &#39;Lee Canalito&#39;,   &#39;Armand Assante&#39;,   &#39;Frank McRae&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Superdad&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Vincent McEveety&#39;],  &#39;actors&#39;: [&#39;Bob Crane&#39;, &#39;Kurt Russell&#39;, &#39;Joe Flynn&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Drum&#39;,  &#39;year&#39;: 2004,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Zola Maseko&#39;],  &#39;actors&#39;: [&#39;Taye Diggs&#39;, &#39;Gabriel Mann&#39;, &#39;Tumisho Masha&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Waffle Street&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Ian Nelms&#39;, &#39;Eshom Nelms&#39;],  &#39;actors&#39;: [&#39;James Lafferty&#39;, &#39;Danny Glover&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Bill&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;Anthony Page&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Dennis Quaid&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &quot;&#39;Gung Ho!&#39;: The Story of Carlson&#39;s Makin Island Raiders&quot;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;,   &#39;Alan Curtis&#39;,   &#39;Noah Beery Jr.&#39;,   &#39;J. Carrol Naish&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Smokey and the Bandit II&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Hal Needham&#39;],  &#39;actors&#39;: [&#39;Burt Reynolds&#39;, &#39;Jackie Gleason&#39;, &#39;Jerry Reed&#39;, &#39;Dom DeLuise&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Honeydripper&#39;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;John Sayles&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Charles S. Dutton&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Diving Bell and the Butterfly&#39;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;Julian Schnabel&#39;],  &#39;actors&#39;: [&#39;Mathieu Amalric&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Se7en&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 8.6,  &#39;directors&#39;: [&#39;David Fincher&#39;],  &#39;actors&#39;: [&#39;Morgan Freeman&#39;,   &#39;Brad Pitt&#39;,   &#39;Kevin Spacey&#39;,   &#39;Andrew Kevin Walker&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Ruby Gentry&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;King Vidor&#39;],  &#39;actors&#39;: [&#39;Charlton Heston&#39;, &#39;Karl Malden&#39;, &#39;Tom Tully&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Two for the Seesaw&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Robert Wise&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Edmon Ryan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Right Stuff&#39;,  &#39;year&#39;: 1983,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Philip Kaufman&#39;],  &#39;actors&#39;: [&#39;Sam Shepard&#39;, &#39;Scott Glenn&#39;, &#39;Ed Harris&#39;, &#39;Dennis Quaid&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Visitor&#39;,  &#39;year&#39;: 1979,  &#39;rating&#39;: 4.9,  &#39;directors&#39;: [&#39;Giulio Paradisi&#39;],  &#39;actors&#39;: [&#39;Mel Ferrer&#39;, &#39;Glenn Ford&#39;, &#39;Lance Henriksen&#39;, &#39;John Huston&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Yards&#39;,  &#39;year&#39;: 2000,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;James Gray&#39;],  &#39;actors&#39;: [&#39;Mark Wahlberg&#39;, &#39;Joaquin Phoenix&#39;, &#39;James Caan&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Tombstone&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;George P. Cosmatos&#39;, &#39;Kevin Jarre&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Val Kilmer&#39;, &#39;Sam Elliott&#39;, &#39;Bill Paxton&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Poltergeist&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 4.9,  &#39;directors&#39;: [&#39;Gil Kenan&#39;],  &#39;actors&#39;: [&#39;Sam Rockwell&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Stone&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;John Curran&#39;],  &#39;actors&#39;: [&#39;Edward Norton&#39;, &#39;Robert De Niro&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Deaden&#39;,  &#39;year&#39;: 2006,  &#39;rating&#39;: 4.3,  &#39;directors&#39;: [&#39;Christian Viel&#39;],  &#39;actors&#39;: [&#39;John Fallon&#39;, &#39;Deke Richards&#39;, &#39;Neil Napier&#39;],  &#39;genres&#39;: [&#39;Action&#39;]}, {&#39;title&#39;: &#39;Dopamine&#39;,  &#39;year&#39;: 2003,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Mark Decena&#39;],  &#39;actors&#39;: [&#39;John Livingston&#39;, &#39;Bruno Campos&#39;, &#39;Rueben Grundy&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Fort Apache&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Henry Fonda&#39;, &#39;Pedro Armendáriz&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;A Fine Step&#39;,  &#39;year&#39;: 2014,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Jonathan Meyers&#39;],  &#39;actors&#39;: [&#39;Luke Perry&#39;, &#39;Armand Assante&#39;, &#39;Cameron Daddo&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Door in the Floor&#39;,  &#39;year&#39;: 2004,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Tod Williams&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Jon Foster&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Fox and the Hound&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Art Stevens&#39;, &#39;Richard Rich&#39;, &#39;Ted Berman&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Kurt Russell&#39;, &#39;Jack Albertson&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Limelight&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;Charles Chaplin&#39;, &#39;Nigel Bruce&#39;, &#39;Buster Keaton&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Big Bad John&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Burt Kennedy&#39;],  &#39;actors&#39;: [&#39;Jimmy Dean&#39;, &#39;Jack Elam&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Maps to the Stars&#39;,  &#39;year&#39;: 2014,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;David Cronenberg&#39;],  &#39;actors&#39;: [&#39;Robert Pattinson&#39;, &#39;John Cusack&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Git Along Little Dogies&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Joseph Kane&#39;],  &#39;actors&#39;: [&#39;Weldon Heyburn&#39;,   &#39;Gene Autry&#39;,   &#39;Smiley Burnette&#39;,   &#39;Maple City Four&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Last Picture Show&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Peter Bogdanovich&#39;],  &#39;actors&#39;: [&#39;Timothy Bottoms&#39;, &#39;Jeff Bridges&#39;, &#39;Ben Johnson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Endangered Species&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 4.3,  &#39;directors&#39;: [&#39;Kevin Tenney&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;,   &#39;Arnold Vosloo&#39;,   &#39;John Rhys-Davies&#39;,   &#39;Tony Lo Bianco&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Sci-Fi&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;City of Ghosts&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Matt Dillon&#39;],  &#39;actors&#39;: [&#39;Matt Dillon&#39;, &#39;James Caan&#39;, &#39;Gérard Depardieu&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &quot;Gideon&#39;s Trumpet&quot;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Robert L. Collins&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;José Ferrer&#39;, &#39;John Houseman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Train Robbers&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Burt Kennedy&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Rod Taylor&#39;, &#39;Ben Johnson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Flapper&#39;,  &#39;year&#39;: 1920,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Alan Crosland&#39;],  &#39;actors&#39;: [&#39;Arthur Housman&#39;,   &#39;Theodore Westman Jr.&#39;,   &#39;William P. Carleton&#39;,   &#39;Warren Cook&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Comedian&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Taylor Hackford&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Danny DeVito&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;City Beneath the Sea&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Robert Ryan&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Soldier&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Paul W.S. Anderson&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Jason Scott Lee&#39;, &#39;Jason Isaacs&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Francesco&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Michele Soavi&#39;],  &#39;actors&#39;: [&#39;Raoul Bova&#39;, &#39;Gianmarco Tognazzi&#39;, &#39;Claudio Gioè&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Hell or High Water&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;David Mackenzie&#39;],  &#39;actors&#39;: [&#39;Chris Pine&#39;, &#39;Ben Foster&#39;, &#39;Jeff Bridges&#39;, &#39;Gil Birmingham&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Rio Bravo&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;Howard Hawks&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Dean Martin&#39;, &#39;Ricky Nelson&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Ride Lonesome&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Pernell Roberts&#39;, &#39;James Best&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Betrayal&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Jack Topalian&#39;],  &#39;actors&#39;: [&#39;Jack Topalian&#39;,   &#39;Eric Roberts&#39;,   &#39;Oleg Taktarov&#39;,   &#39;Scott L. Schwartz&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Guns for San Sebastian&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Henri Verneuil&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Charles Bronson&#39;, &#39;Sam Jaffe&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Winter Wedding&#39;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Jake Helgren&#39;],  &#39;actors&#39;: [&#39;Nick Bateman&#39;, &#39;Adam Senn&#39;],  &#39;genres&#39;: [&#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Lady in Question&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Charles Vidor&#39;],  &#39;actors&#39;: [&#39;Brian Aherne&#39;, &#39;Glenn Ford&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;In Search of America&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Paul Bogart&#39;],  &#39;actors&#39;: [&#39;Carl Betz&#39;, &#39;Jeff Bridges&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Slaughter Trail&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;Irving Allen&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;Gig Young&#39;, &#39;Andy Devine&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Union City&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Marcus Reichert&#39;],  &#39;actors&#39;: [&#39;Dennis Lipscomb&#39;, &#39;Sam McMurray&#39;, &#39;Terry Walsh&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &quot;Jake&#39;s Road&quot;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Mike Mayhall&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Garrett Hines&#39;, &#39;Patrick Flanagan&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Horror&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;A Woman of Paris: A Drama of Fate&#39;,  &#39;year&#39;: 1923,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;Clarence Geldart&#39;,   &#39;Carl Miller&#39;,   &#39;Charles K. French&#39;,   &#39;Adolphe Menjou&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Mr. North&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Danny Huston&#39;],  &#39;actors&#39;: [&#39;Anthony Edwards&#39;, &#39;Robert Mitchum&#39;, &#39;Harry Dean Stanton&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Moving&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Alan Metter&#39;],  &#39;actors&#39;: [&#39;Richard Pryor&#39;, &#39;Raphael Harris&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Union Square&#39;,  &#39;year&#39;: 2011,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Nancy Savoca&#39;],  &#39;actors&#39;: [&#39;Michael Sirow&#39;, &#39;Murray&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;King Kong&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;John Guillermin&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Charles Grodin&#39;, &#39;John Randolph&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Horror&#39;]}, {&#39;title&#39;: &#39;Henry Goes Arizona&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Edwin L. Marin&#39;],  &#39;actors&#39;: [&#39;Frank Morgan&#39;, &#39;Guy Kibbee&#39;, &#39;Slim Summerville&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Happening&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Elliot Silverstein&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;,   &#39;George Maharis&#39;,   &#39;Michael Parks&#39;,   &#39;Robert Walker Jr.&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Boys Town&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Norman Taurog&#39;],  &#39;actors&#39;: [&#39;Spencer Tracy&#39;, &#39;Mickey Rooney&#39;, &#39;Henry Hull&#39;, &#39;Leslie Fenton&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Moonfleet&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Fritz Lang&#39;],  &#39;actors&#39;: [&#39;Stewart Granger&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Mister Roberts&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Joshua Logan&#39;, &#39;John Ford&#39;, &#39;Mervyn LeRoy&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;James Cagney&#39;, &#39;William Powell&#39;, &#39;Jack Lemmon&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Ransom!&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Alex Segal&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Leslie Nielsen&#39;, &#39;Juano Hernandez&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Facade&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 4.7,  &#39;directors&#39;: [&#39;Carl Colpaert&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Angus Macfadyen&#39;, &#39;Brad Garrett&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Escape from New York&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;John Carpenter&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;,   &#39;Lee Van Cleef&#39;,   &#39;Ernest Borgnine&#39;,   &#39;Donald Pleasence&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Express&#39;,  &#39;year&#39;: 2008,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Gary Fleder&#39;],  &#39;actors&#39;: [&#39;Rob Brown&#39;,   &#39;Dennis Quaid&#39;,   &#39;Clancy Brown&#39;,   &#39;Darrin Dewitt Henson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Cahill U.S. Marshal&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Andrew V. McLaglen&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;George Kennedy&#39;, &#39;Gary Grimes&#39;, &#39;Neville Brand&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Inception&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 8.8,  &#39;directors&#39;: [&#39;Christopher Nolan&#39;],  &#39;actors&#39;: [&#39;Leonardo DiCaprio&#39;, &#39;Joseph Gordon-Levitt&#39;, &#39;Ken Watanabe&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;La Cucaracha&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Jack Perez&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;,   &#39;Joaquim de Almeida&#39;,   &#39;Victor Rivers&#39;,   &#39;James McManus&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Last Unicorn&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Arthur Rankin Jr.&#39;, &#39;Jules Bass&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Alan Arkin&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Heat&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Michael Mann&#39;],  &#39;actors&#39;: [&#39;Al Pacino&#39;, &#39;Robert De Niro&#39;, &#39;Val Kilmer&#39;, &#39;Jon Voight&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &quot;Joe&#39;s War&quot;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 4.3,  &#39;directors&#39;: [&#39;Phil Falcone&#39;],  &#39;actors&#39;: [&#39;Michael Markiewicz&#39;,   &#39;Armand Assante&#39;,   &#39;Tom Sizemore&#39;,   &#39;Edward Asner&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &quot;Heaven&#39;s Prisoners&quot;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Phil Joanou&#39;],  &#39;actors&#39;: [&#39;Alec Baldwin&#39;, &#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Way Down East&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Henry King&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Slim Summerville&#39;, &#39;Edward Trevor&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Hellfighters&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Andrew V. McLaglen&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Jim Hutton&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Search for the Gods&#39;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Jud Taylor&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Stephen McHattie&#39;, &#39;Raymond St. Jacques&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Trouble Along the Way&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Michael Curtiz&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Charles Coburn&#39;, &#39;Tom Tully&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Abstraction&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Prince Bagdasarian&#39;],  &#39;actors&#39;: [&#39;Hunter Ives&#39;, &#39;Ken Davitian&#39;, &#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;The Heir Apparent: Largo Winch&#39;,  &#39;year&#39;: 2008,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Jérôme Salle&#39;],  &#39;actors&#39;: [&#39;Tomer Sisley&#39;, &quot;Predrag &#39;Miki&#39; Manojlovic&quot;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Lodger&#39;,  &#39;year&#39;: 1944,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;John Brahm&#39;],  &#39;actors&#39;: [&#39;Laird Cregar&#39;, &#39;George Sanders&#39;, &#39;Cedric Hardwicke&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Horror&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Fade to Black&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Vernon Zimmerman&#39;],  &#39;actors&#39;: [&#39;Dennis Christopher&#39;, &#39;Tim Thomerson&#39;, &#39;Norman Burton&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Horror&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Where Pigeons Go to Die&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Michael Landon&#39;],  &#39;actors&#39;: [&#39;Michael Faustino&#39;,   &#39;Richard Bull&#39;,   &#39;Art Carney&#39;,   &#39;Cliff De Young&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Chisum&#39;,  &#39;year&#39;: 1970,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Andrew V. McLaglen&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;,   &#39;Forrest Tucker&#39;,   &#39;Christopher George&#39;,   &#39;Ben Johnson&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Cheyenne Social Club&#39;,  &#39;year&#39;: 1970,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Gene Kelly&#39;],  &#39;actors&#39;: [&#39;James Stewart&#39;, &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Searchers&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Jeffrey Hunter&#39;, &#39;Ward Bond&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Secrets of Life&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;James Algar&#39;],  &#39;actors&#39;: [&#39;Winston Hibler&#39;],  &#39;genres&#39;: [&#39;Family&#39;]}, {&#39;title&#39;: &#39;Gang Related&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Jim Kouf&#39;],  &#39;actors&#39;: [&#39;Jim Belushi&#39;, &#39;Tupac Shakur&#39;, &#39;Dennis Quaid&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Hearst and Davies Affair&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;David Lowell Rich&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Fritz Weaver&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Samurai Wolf II&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Hideo Gosha&#39;],  &#39;actors&#39;: [&#39;Isao Natsuyagi&#39;, &#39;Ichirô Nakatani&#39;, &#39;Bin Amatsu&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Lord Jeff&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Sam Wood&#39;],  &#39;actors&#39;: [&#39;Freddie Bartholomew&#39;,   &#39;Mickey Rooney&#39;,   &#39;Charles Coburn&#39;,   &#39;Herbert Mundin&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Love Is a Headache&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Richard Thorpe&#39;],  &#39;actors&#39;: [&#39;Franchot Tone&#39;, &#39;Ted Healy&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Love Finds Andy Hardy&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Lewis Stone&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Rocky Mountain Mystery&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Charles Barton&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &quot;Charles &#39;Chic&#39; Sale&quot;, &#39;George F. Marion&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Allegheny Uprising&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;George Sanders&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;History&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Quiet Man&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Barry Fitzgerald&#39;, &#39;Ward Bond&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Against All Flags&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;George Sherman&#39;],  &#39;actors&#39;: [&#39;Errol Flynn&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Affair in Trinidad&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Vincent Sherman&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Alexander Scourby&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Cast a Giant Shadow&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Melville Shavelson&#39;],  &#39;actors&#39;: [&#39;Kirk Douglas&#39;, &#39;John Wayne&#39;, &#39;Frank Sinatra&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Summer Solstice&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Ralph Rosenblum&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Stephen Collins&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Lone Ranger and the Lost City of Gold&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Lesley Selander&#39;],  &#39;actors&#39;: [&#39;Clayton Moore&#39;,   &#39;Jay Silverheels&#39;,   &#39;Douglas Kennedy&#39;,   &#39;Charles Watts&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Man of the Forest&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Barton MacLane&#39;, &#39;Randolph Scott&#39;, &#39;Harry Carey&#39;, &#39;Noah Beery&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Dog Year&#39;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;George LaVoo&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Domhnall Gleeson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;DragonHeart&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Rob Cohen&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Sean Connery&#39;, &#39;Pete Postlethwaite&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Pushing Dead&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Tom E. Brown&#39;],  &#39;actors&#39;: [&#39;James Roday&#39;, &#39;Danny Glover&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Mooz-Lum&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Qasim Basir&#39;],  &#39;actors&#39;: [&#39;Evan Ross&#39;, &#39;Roger Guenveur Smith&#39;, &#39;Danny Glover&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;The Affair&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Paul Seed&#39;],  &#39;actors&#39;: [&#39;Courtney B. Vance&#39;, &#39;Leland Gantt&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &quot;Now You See Him, Now You Don&#39;t&quot;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Robert Butler&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Cesar Romero&#39;, &#39;Joe Flynn&#39;, &#39;Jim Backus&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;White Lightning&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Joseph Sargent&#39;],  &#39;actors&#39;: [&#39;Burt Reynolds&#39;, &#39;Ned Beatty&#39;, &#39;Bo Hopkins&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Mask of the Avenger&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Phil Karlson&#39;],  &#39;actors&#39;: [&#39;John Derek&#39;, &#39;Anthony Quinn&#39;, &#39;Arnold Moss&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;On Our Merry Way&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;George Stevens&#39;,   &#39;Leslie Fenton&#39;,   &#39;King Vidor&#39;,   &#39;John Huston&#39;],  &#39;actors&#39;: [&#39;Burgess Meredith&#39;, &#39;James Stewart&#39;, &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Music&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Legendary&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Mel Damski&#39;],  &#39;actors&#39;: [&#39;John Cena&#39;, &#39;Danny Glover&#39;, &#39;Devon Graye&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Living with the Dead&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Stephen Gyllenhaal&#39;],  &#39;actors&#39;: [&#39;Ted Danson&#39;, &#39;Michael Moriarty&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Used Cars&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Robert Zemeckis&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Jack Warden&#39;, &#39;Gerrit Graham&#39;, &#39;Frank McRae&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Gammera the Invincible&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Noriaki Yuasa&#39;, &#39;Sandy Howard&#39;],  &#39;actors&#39;: [&#39;Albert Dekker&#39;, &#39;Brian Donlevy&#39;, &#39;John Baragrey&#39;],  &#39;genres&#39;: [&#39;Family&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Song of Scheherazade&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Walter Reisch&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;Jean-Pierre Aumont&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Ride the High Country&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Sam Peckinpah&#39;],  &#39;actors&#39;: [&#39;Joel McCrea&#39;, &#39;Randolph Scott&#39;, &#39;Ron Starr&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Good Neighbor&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Kasra Farahani&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Logan Miller&#39;, &#39;Keir Gilchrist&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Horror&#39;]}, {&#39;title&#39;: &quot;Siren&#39;s Kiss&quot;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Edward Holzman&#39;],  &#39;actors&#39;: [&#39;Bobby Johnston&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Saint Strikes Back&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Jonathan Hale&#39;, &#39;Jerome Cowan&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Saint in London&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;John Paddy Carstairs&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;David Burns&#39;, &#39;Gordon McLeod&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;2001: A Space Odyssey&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Stanley Kubrick&#39;],  &#39;actors&#39;: [&#39;Keir Dullea&#39;,   &#39;Gary Lockwood&#39;,   &#39;William Sylvester&#39;,   &#39;Daniel Richter&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;5 Card Stud&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Dean Martin&#39;, &#39;Robert Mitchum&#39;, &#39;Roddy McDowall&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Five Minarets in New York&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Mahsun Kirmizigül&#39;],  &#39;actors&#39;: [&#39;Haluk Bilginer&#39;, &#39;Danny Glover&#39;, &#39;Mahsun Kirmizigül&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Nausicaä of the Valley of the Wind&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Hayao Miyazaki&#39;],  &#39;actors&#39;: [&#39;Mahito Tsujimura&#39;, &#39;Gorô Naya&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;I, the Jury&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Richard T. Heffron&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;Alan King&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Great Diamond Robbery&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Robert Z. Leonard&#39;],  &#39;actors&#39;: [&#39;Red Skelton&#39;, &#39;James Whitmore&#39;, &#39;Kurt Kasznar&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Amelia&#39;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Mira Nair&#39;],  &#39;actors&#39;: [&#39;Richard Gere&#39;, &#39;Ewan McGregor&#39;, &#39;Christopher Eccleston&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Pilgrim&#39;,  &#39;year&#39;: 1923,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;Loyal Underwood&#39;,   &#39;Charles Chaplin&#39;,   &#39;Syd Chaplin&#39;,   &#39;Dean Riesner&#39;,   &#39;Charles Reisner&#39;,   &#39;Tom Murray&#39;,   &#39;Mack Swain&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Watch Out for the Automobile&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Eldar Ryazanov&#39;],  &#39;actors&#39;: [&#39;Innokentiy Smoktunovskiy&#39;, &#39;Oleg Efremov&#39;, &#39;Anatoliy Papanov&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;A Big Hand for the Little Lady&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Fielder Cook&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Jason Robards&#39;, &#39;Paul Ford&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Mister Moses&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Ronald Neame&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Ian Bannen&#39;, &#39;Alexander Knox&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;]}, {&#39;title&#39;: &#39;The Immortals&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Brian Grant&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Joe Pantoliano&#39;, &#39;Tony Curtis&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Quicksand&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Irving Pichel&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Peter Lorre&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Halálos tavasz&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;László Kalmár&#39;],  &#39;actors&#39;: [&#39;Pál Jávor&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Green Glove&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Rudolph Maté&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Cedric Hardwicke&#39;, &#39;George Macready&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Trouble with Spies&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Burt Kennedy&#39;],  &#39;actors&#39;: [&#39;Donald Sutherland&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;I Love You, Alice B. Toklas!&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Hy Averback&#39;],  &#39;actors&#39;: [&#39;Peter Sellers&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Misery&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Rob Reiner&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Richard Farnsworth&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Igor&#39;,  &#39;year&#39;: 2008,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Tony Leondis&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Steve Buscemi&#39;],  &#39;genres&#39;: [&#39;Animation&#39;, &#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;TRON: Legacy&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Joseph Kosinski&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Garrett Hedlund&#39;, &#39;Bruce Boxleitner&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;The Americano&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;William Castle&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Frank Lovejoy&#39;, &#39;Cesar Romero&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;In Montauk&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Kim Cummings&#39;],  &#39;actors&#39;: [&#39;Lukas Hassel&#39;, &#39;George Katt&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Duck, You Sucker&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Sergio Leone&#39;],  &#39;actors&#39;: [&#39;Rod Steiger&#39;, &#39;James Coburn&#39;, &#39;Romolo Valli&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Kansas Raiders&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Tony Curtis&#39;, &#39;Audie Murphy&#39;, &#39;Brian Donlevy&#39;, &#39;Scott Brady&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Guilty by Suspicion&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Irwin Winkler&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;George Wendt&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;To the Last Man&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Noah Beery&#39;,   &#39;Randolph Scott&#39;,   &#39;Jack La Rue&#39;,   &#39;Buster Crabbe&#39;,   &#39;Barton MacLane&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Crimson Ghost&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;William Witney&#39;, &#39;Fred C. Brannon&#39;],  &#39;actors&#39;: [&#39;Charles Quigley&#39;, &#39;Clayton Moore&#39;, &#39;I. Stanford Jolley&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Fatal Instinct&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Carl Reiner&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Sleepers&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Barry Levinson&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Kevin Bacon&#39;, &#39;Brad Pitt&#39;, &#39;Jason Patric&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Dreamer: Inspired by a True Story&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;John Gatins&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Oded Fehr&#39;, &#39;Kris Kristofferson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Mikey and Nicky&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Elaine May&#39;],  &#39;actors&#39;: [&#39;Peter Falk&#39;, &#39;John Cassavetes&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;City Lights&#39;,  &#39;year&#39;: 1931,  &#39;rating&#39;: 8.5,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;Charles Chaplin&#39;, &#39;Harry Myers&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Lonely Guy&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Arthur Hiller&#39;],  &#39;actors&#39;: [&#39;Steve Martin&#39;, &#39;Charles Grodin&#39;, &#39;Steve Lawrence&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;T.R. Baskin&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Herbert Ross&#39;],  &#39;actors&#39;: [&#39;Peter Boyle&#39;, &#39;James Caan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Against Her Will: The Carrie Buck Story&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;John David Coles&#39;],  &#39;actors&#39;: [&#39;Peter Frechette&#39;, &#39;Pat Hingle&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Lillian Russell&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Irving Cummings&#39;],  &#39;actors&#39;: [&#39;Leo Carrillo&#39;,   &#39;Don Ameche&#39;,   &#39;Henry Fonda&#39;,   &#39;Edward Arnold&#39;,   &#39;Warren William&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Lucy &amp; Desi: Before the Laughter&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Charles Jarrott&#39;],  &#39;actors&#39;: [&#39;Maurice Benard&#39;, &#39;John Wheeler&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Blackboard Jungle&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Richard Brooks&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Louis Calhern&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Transatlantic Tunnel&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Maurice Elvey&#39;],  &#39;actors&#39;: [&#39;Richard Dix&#39;, &#39;Leslie Banks&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Dawn Rider&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Dennis Moore&#39;, &#39;Reed Howes&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &quot;Judge Hardy&#39;s Children&quot;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Lewis Stone&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Ash Wednesday&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Larry Peerce&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Helmut Berger&#39;, &#39;Keith Baxter&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Distant Thunder&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Soumitra Chatterjee&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Drums in the Deep South&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;William Cameron Menzies&#39;],  &#39;actors&#39;: [&#39;James Craig&#39;, &#39;Guy Madison&#39;, &#39;Barton MacLane&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Strange Deception&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Curzio Malaparte&#39;],  &#39;actors&#39;: [&#39;Raf Vallone&#39;, &#39;Alain Cuny&#39;, &#39;Gino Cervi&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Man from Colorado&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Henry Levin&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;William Holden&#39;, &#39;Ray Collins&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Words&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Lee Sternthal&#39;, &#39;Brian Klugman&#39;],  &#39;actors&#39;: [&#39;Bradley Cooper&#39;, &#39;Dennis Quaid&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;To Each, Her Own&#39;,  &#39;year&#39;: 2018,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Myriam Aziza&#39;],  &#39;actors&#39;: [&#39;Jean-Christophe Folly&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Flame of Barbary Coast&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Joseph Kane&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Joseph Schildkraut&#39;, &#39;William Frawley&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Last Time I Saw Archie&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Jack Webb&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Jack Webb&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Thief&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Michael Mann&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Willie Nelson&#39;, &#39;Jim Belushi&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Idol of the Crowds&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Arthur Lubin&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Charles Brokaw&#39;, &#39;Bill Burrud&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Ransom&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Ron Howard&#39;],  &#39;actors&#39;: [&#39;Mel Gibson&#39;, &#39;Gary Sinise&#39;, &#39;Brawley Nolte&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Cold and Dark&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 4.1,  &#39;directors&#39;: [&#39;Andrew Goth&#39;],  &#39;actors&#39;: [&#39;Luke Goss&#39;, &#39;Kevin Howarth&#39;, &#39;Matt Lucas&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Horror&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Holiday Affair&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Don Hartman&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Wendell Corey&#39;, &#39;Gordon Gebert&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Hoffa&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Danny DeVito&#39;],  &#39;actors&#39;: [&#39;Jack Nicholson&#39;, &#39;Danny DeVito&#39;, &#39;Armand Assante&#39;, &#39;J.T. Walsh&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;High Rollers&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Sergio Corbucci&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Adriano Celentano&#39;, &#39;Ugo Bologna&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;The Great Bank Hoax&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 5.0,  &#39;directors&#39;: [&#39;Joseph Jacoby&#39;],  &#39;actors&#39;: [&#39;Richard Basehart&#39;, &#39;Ned Beatty&#39;, &#39;Burgess Meredith&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;So Ends Our Night&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;John Cromwell&#39;],  &#39;actors&#39;: [&#39;Fredric March&#39;, &#39;Glenn Ford&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Scared Stiff&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 4.9,  &#39;directors&#39;: [&#39;Frank McDonald&#39;],  &#39;actors&#39;: [&#39;Jack Haley&#39;, &#39;Barton MacLane&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Serenity&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Joss Whedon&#39;],  &#39;actors&#39;: [&#39;Nathan Fillion&#39;, &#39;Chiwetel Ejiofor&#39;, &#39;Alan Tudyk&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Death Proof&#39;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Quentin Tarantino&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Music Room&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Chhabi Biswas&#39;, &#39;Gangapada Basu&#39;, &#39;Bismillah Khan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Sagebrush Trail&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Armand Schaefer&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Lane Chandler&#39;, &#39;Yakima Canutt&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Full Metal Jacket&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Stanley Kubrick&#39;],  &#39;actors&#39;: [&#39;Matthew Modine&#39;,   &#39;R. Lee Ermey&#39;,   &quot;Vincent D&#39;Onofrio&quot;,   &#39;Adam Baldwin&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Madness&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Fernando Di Leo&#39;],  &#39;actors&#39;: [&#39;Joe Dallesandro&#39;, &#39;Gianni Macchia&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Hostage Flight&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Steven Hilliard Stern&#39;],  &#39;actors&#39;: [&#39;Ned Beatty&#39;, &#39;René Enríquez&#39;, &#39;Jack Gilford&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;American Dreamz&#39;,  &#39;year&#39;: 2006,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Paul Weitz&#39;],  &#39;actors&#39;: [&#39;Hugh Grant&#39;, &#39;Dennis Quaid&#39;, &#39;Willem Dafoe&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;The Paperboy&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Lee Daniels&#39;],  &#39;actors&#39;: [&#39;Matthew McConaughey&#39;, &#39;John Cusack&#39;, &#39;Zac Efron&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Young Billy Young&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Burt Kennedy&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Robert Walker Jr.&#39;, &#39;David Carradine&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Show-Off&#39;,  &#39;year&#39;: 1926,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Malcolm St. Clair&#39;],  &#39;actors&#39;: [&#39;Gregory Kelly&#39;, &#39;Ford Sterling&#39;, &#39;Charles Goodrich&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Judge Hardy and Son&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Lewis Stone&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Shift&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Lee Cipolla&#39;],  &#39;actors&#39;: [&#39;Leo Oliva&#39;, &#39;Danny Glover&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Flight of the Intruder&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;John Milius&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Willem Dafoe&#39;, &#39;Brad Johnson&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;A Date with the Falcon&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Irving Reis&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;James Gleason&#39;, &#39;Allen Jenkins&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;My Favorite Wife&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Garson Kanin&#39;],  &#39;actors&#39;: [&#39;Cary Grant&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &quot;You Can&#39;t Escape Forever&quot;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Jo Graham&#39;],  &#39;actors&#39;: [&#39;George Brent&#39;, &#39;Gene Lockhart&#39;, &#39;Roscoe Karns&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Christmas Miracle in Caufield, U.S.A.&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Jud Taylor&#39;],  &#39;actors&#39;: [&#39;Mitchell Ryan&#39;,   &#39;Kurt Russell&#39;,   &#39;Andrew Prine&#39;,   &#39;John Carradine&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;2 Bedroom 1 Bath&#39;,  &#39;year&#39;: 2014,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Stanley Yung&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Andrew W. Walker&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;A Cry in the Night&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Frank Tuttle&#39;],  &#39;actors&#39;: [&quot;Edmond O&#39;Brien&quot;, &#39;Brian Donlevy&#39;, &#39;Raymond Burr&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Skin Traffik&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;Ara Paiaya&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Mickey Rourke&#39;],  &#39;genres&#39;: [&#39;Action&#39;]}, {&#39;title&#39;: &#39;OSS 117: Cairo, Nest of Spies&#39;,  &#39;year&#39;: 2006,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Michel Hazanavicius&#39;],  &#39;actors&#39;: [&#39;Jean Dujardin&#39;,   &#39;François Damiens&#39;,   &#39;Khalid Maadour&#39;,   &#39;Youssef Hamid&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Freefall&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;John Irvin&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Jeff Fahey&#39;, &#39;Ron Smerczak&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Best of the Best II&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Robert Radler&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Phillip Rhee&#39;, &#39;Chris Penn&#39;, &#39;Edan Gross&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Girl in the Show&#39;,  &#39;year&#39;: 1929,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Edgar Selwyn&#39;],  &#39;actors&#39;: [&#39;Raymond Hackett&#39;, &#39;Edward J. Nugent&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Girl-Getters&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Michael Winner&#39;],  &#39;actors&#39;: [&#39;Oliver Reed&#39;, &#39;Harry Andrews&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Elf&#39;,  &#39;year&#39;: 2003,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Jon Favreau&#39;],  &#39;actors&#39;: [&#39;Will Ferrell&#39;, &#39;James Caan&#39;, &#39;Bob Newhart&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Bone Tomahawk&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;S. Craig Zahler&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;,   &#39;Patrick Wilson&#39;,   &#39;Matthew Fox&#39;,   &#39;Richard Jenkins&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Horror&#39;]}, {&#39;title&#39;: &#39;Augustine: The Decline of the Roman Empire&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Christian Duguay&#39;],  &#39;actors&#39;: [&#39;Alessandro Preziosi&#39;, &#39;Alexander Held&#39;, &#39;Johannes Brandrup&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Adult World&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Scott Coffey&#39;],  &#39;actors&#39;: [&#39;Evan Peters&#39;, &#39;John Cusack&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Runaway Jury&#39;,  &#39;year&#39;: 2003,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Gary Fleder&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Gene Hackman&#39;, &#39;Dustin Hoffman&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Swing Shift&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Jonathan Demme&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Fred Ward&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Raging Bull&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Martin Scorsese&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Joe Pesci&#39;, &#39;Frank Vincent&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;The Lost Capone&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;John Gray&#39;],  &#39;actors&#39;: [&#39;Adrian Pasdar&#39;, &#39;Eric Roberts&#39;, &#39;Titus Welliver&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Child Lost Forever: The Jerry Sherwood Story&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Claudia Weill&#39;],  &#39;actors&#39;: [&#39;Michael McGrady&#39;, &#39;Max Gail&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Raven&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;James McTeigue&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Luke Evans&#39;, &#39;Brendan Gleeson&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Fukrey Returns&#39;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Mrighdeep Lamba&#39;],  &#39;actors&#39;: [&#39;Pulkit Samrat&#39;, &#39;Manjot Singh&#39;, &#39;Ali Fazal&#39;, &#39;Varun Sharma&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;American Sniper&#39;,  &#39;year&#39;: 2014,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Clint Eastwood&#39;],  &#39;actors&#39;: [&#39;Bradley Cooper&#39;, &#39;Kyle Gallner&#39;, &#39;Cole Konis&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Cloudy Sunday&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Manousos Manousakis&#39;],  &#39;actors&#39;: [&#39;Andreas Konstantinou&#39;, &#39;Haris Fragoulis&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Blood Vows: The Story of a Mafia Wife&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Paul Wendkos&#39;],  &#39;actors&#39;: [&#39;Joe Penny&#39;, &#39;Anthony Franciosa&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Shattered Dreams&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Robert Iscove&#39;],  &#39;actors&#39;: [&#39;Michael Nouri&#39;, &#39;James Karen&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &quot;Satan&#39;s Black Wedding&quot;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 4.7,  &#39;directors&#39;: [&#39;Nick Millard&#39;],  &#39;actors&#39;: [&#39;Greg Braddock&#39;, &#39;Ray Myles&#39;, &#39;Barrett Cooper&#39;],  &#39;genres&#39;: [&#39;Horror&#39;]}, {&#39;title&#39;: &#39;El Dorado&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Howard Hawks&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Robert Mitchum&#39;, &#39;James Caan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Terror on a Train&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Ted Tetzlaff&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Maurice Denham&#39;, &#39;Harcourt Williams&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Luckytown&#39;,  &#39;year&#39;: 2000,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Paul Nicholas&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Vincent Kartheiser&#39;, &#39;Luis Guzmán&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Cradle Will Rock&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Tim Robbins&#39;],  &#39;actors&#39;: [&#39;Hank Azaria&#39;, &#39;Rubén Blades&#39;, &#39;John Cusack&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Fail-Safe&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;Sidney Lumet&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Walter Matthau&#39;, &#39;Fritz Weaver&#39;, &quot;Dan O&#39;Herlihy&quot;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Fastest&#39;,  &#39;year&#39;: 2011,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Mark Neale&#39;],  &#39;actors&#39;: [&#39;Ewan McGregor&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;300&#39;,  &#39;year&#39;: 2006,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Zack Snyder&#39;],  &#39;actors&#39;: [&#39;Gerard Butler&#39;, &#39;David Wenham&#39;, &#39;Dominic West&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Blood Money&#39;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Lucky McKee&#39;],  &#39;actors&#39;: [&#39;Ellar Coltrane&#39;, &#39;Jacob Artist&#39;, &#39;John Cusack&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;To Sleep with Anger&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Charles Burnett&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Paul Butler&#39;, &#39;DeVaughn Nixon&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Cairo&#39;,  &#39;year&#39;: 1963,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Wolf Rilla&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Richard Johnson&#39;, &#39;John Meillon&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Beau Geste&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;Gary Cooper&#39;, &#39;Ray Milland&#39;, &#39;Robert Preston&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Reason to Live, a Reason to Die&#39;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Tonino Valerii&#39;],  &#39;actors&#39;: [&#39;James Coburn&#39;, &#39;Telly Savalas&#39;, &#39;Bud Spencer&#39;, &#39;Georges Géret&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;WW 3&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 5.0,  &#39;directors&#39;: [&#39;Robert Mandel&#39;],  &#39;actors&#39;: [&#39;Timothy Hutton&#39;, &#39;Lane Smith&#39;, &#39;Michael Constantine&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Crossfire&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Edward Dmytryk&#39;],  &#39;actors&#39;: [&#39;Robert Young&#39;, &#39;Robert Mitchum&#39;, &#39;Robert Ryan&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &quot;Before You Say &#39;I Do&#39;&quot;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Paul Fox&#39;],  &#39;actors&#39;: [&#39;David Sutcliffe&#39;, &#39;Brad Borbridge&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;The Saint Takes Over&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Jack Hively&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Jonathan Hale&#39;, &#39;Paul Guilfoyle&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &quot;The Saint&#39;s Double Trouble&quot;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Jack Hively&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Jonathan Hale&#39;, &#39;Bela Lugosi&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Seminole&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Rock Hudson&#39;, &#39;Anthony Quinn&#39;, &#39;Richard Carlson&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Freelancers&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;Jessy Terrero&#39;],  &#39;actors&#39;: [&#39;50 Cent&#39;,   &#39;Robert De Niro&#39;,   &#39;Forest Whitaker&#39;,   &#39;Malcolm Goodwin&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Ghost Writer&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Roman Polanski&#39;],  &#39;actors&#39;: [&#39;Ewan McGregor&#39;, &#39;Pierce Brosnan&#39;, &#39;Jon Bernthal&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Bad Sister&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Doug Campbell&#39;],  &#39;actors&#39;: [&#39;Devon Werkheiser&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Island&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Michael Bay&#39;],  &#39;actors&#39;: [&#39;Ewan McGregor&#39;, &#39;Djimon Hounsou&#39;, &#39;Steve Buscemi&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Strongest Man in the World&#39;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Vincent McEveety&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Joe Flynn&#39;, &#39;Cesar Romero&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Apache Drums&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Hugo Fregonese&#39;],  &#39;actors&#39;: [&#39;Stephen McNally&#39;, &#39;Willard Parker&#39;, &#39;Arthur Shields&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The 25th Hour&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Henri Verneuil&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Grégoire Aslan&#39;, &#39;Michael Redgrave&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Dinner with Friends&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Norman Jewison&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Greg Kinnear&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Fallen Angel&#39;,  &#39;year&#39;: 2003,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Michael Switzer&#39;],  &#39;actors&#39;: [&#39;Gary Sinise&#39;, &#39;Gordon Pinsent&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Dragonfly&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Cara Greene&#39;, &#39;Maribeth Romslo&#39;],  &#39;actors&#39;: [&#39;David Greene&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Winston Affair&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Guy Hamilton&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Barry Sullivan&#39;, &#39;Trevor Howard&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;See This Movie&#39;,  &#39;year&#39;: 2004,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;David M. Rosenthal&#39;],  &#39;actors&#39;: [&#39;John Cho&#39;, &#39;Seth Meyers&#39;, &quot;Raymond O&#39;Connor&quot;, &#39;Jim Piddock&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Skirts Ahoy!&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Sidney Lanfield&#39;],  &#39;actors&#39;: [&#39;Keefe Brasselle&#39;, &#39;Barry Sullivan&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;A Twist of the Knife&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Jerry London&#39;],  &#39;actors&#39;: [&#39;Dick Van Dyke&#39;, &#39;Stephen Caffrey&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Roulette&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Erik Kristopher Myers&#39;],  &#39;actors&#39;: [&#39;Mike Baldwin&#39;, &#39;Will Haza&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;East of Sumatra&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Jeff Chandler&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Fixer&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 5.0,  &#39;directors&#39;: [&#39;Charles Robert Carner&#39;],  &#39;actors&#39;: [&#39;Jon Voight&#39;, &#39;J.J. Johnston&#39;, &#39;Miguel Sandoval&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Avenging Angelo&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Martyn Burke&#39;],  &#39;actors&#39;: [&#39;Sylvester Stallone&#39;, &#39;Anthony Quinn&#39;, &#39;Raoul Bova&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Arlington Road&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Mark Pellington&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Tim Robbins&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Go West Young Man&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Warren William&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Little Darlings&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Ron Maxwell&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;Matt Dillon&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &quot;We&#39;re No Angels&quot;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Neil Jordan&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Sean Penn&#39;, &#39;Hoyt Axton&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Thunder Road&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Arthur Ripley&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Gene Barry&#39;, &#39;Jacques Aubuchon&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;When the Daltons Rode&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;George Marshall&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Brian Donlevy&#39;, &#39;George Bancroft&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &quot;Nobody&#39;s Fool&quot;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Evelyn Purcell&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Jim Youngs&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Bad Ass 3: Bad Asses on the Bayou&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Craig Moss&#39;],  &#39;actors&#39;: [&#39;Danny Trejo&#39;, &#39;Danny Glover&#39;, &#39;John Amos&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Lost Command&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Mark Robson&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Alain Delon&#39;, &#39;George Segal&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Anzio&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Edward Dmytryk&#39;, &#39;Duilio Coletti&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Peter Falk&#39;, &#39;Robert Ryan&#39;, &#39;Earl Holliman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Fifty Pills&#39;,  &#39;year&#39;: 2006,  &#39;rating&#39;: 5.0,  &#39;directors&#39;: [&#39;Theo Avgerinos&#39;],  &#39;actors&#39;: [&#39;Michael Masini&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Glory Guys&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Arnold Laven&#39;],  &#39;actors&#39;: [&#39;Tom Tryon&#39;, &#39;Harve Presnell&#39;, &#39;James Caan&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Pushing Tin&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Mike Newell&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Billy Bob Thornton&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Seniors&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Rod Amateau&#39;],  &#39;actors&#39;: [&#39;Jeffrey Byron&#39;, &#39;Gary Imhoff&#39;, &#39;Dennis Quaid&#39;, &#39;Lou Richards&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Cruzando&#39;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Michael Ray Escamilla&#39;, &#39;Mando Alvarado&#39;],  &#39;actors&#39;: [&#39;Mando Alvarado&#39;, &#39;David Barrera&#39;, &#39;Tony Campisi&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Friendly Fire&#39;,  &#39;year&#39;: 1979,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;David Greene&#39;],  &#39;actors&#39;: [&#39;Ned Beatty&#39;, &#39;Sam Waterston&#39;, &#39;Dennis Erdman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Mad Max: Fury Road&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;George Miller&#39;],  &#39;actors&#39;: [&#39;Tom Hardy&#39;, &#39;Nicholas Hoult&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Man from Utah&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Edward Peil Sr.&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Crime&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;I Aim at the Stars&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;J. Lee Thompson&#39;],  &#39;actors&#39;: [&#39;Curd Jürgens&#39;, &#39;Herbert Lom&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Eyes of Laura Mars&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Irvin Kershner&#39;],  &#39;actors&#39;: [&#39;Tommy Lee Jones&#39;, &#39;Brad Dourif&#39;, &#39;Rene Auberjonois&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Starman&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;John Carpenter&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Charles Martin Smith&#39;, &#39;Richard Jaeckel&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Home, Sweet Homicide&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Lloyd Bacon&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Dean Stockwell&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &quot;Hangman&#39;s Knot&quot;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Roy Huggins&#39;],  &#39;actors&#39;: [&#39;Richard Denning&#39;,   &#39;Randolph Scott&#39;,   &#39;Claude Jarman Jr.&#39;,   &#39;Frank Faylen&#39;,   &#39;Glenn Langan&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The World in His Arms&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Raoul Walsh&#39;],  &#39;actors&#39;: [&#39;Gregory Peck&#39;, &#39;Anthony Quinn&#39;, &#39;John McIntire&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Lonely Hearts&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Andrew Lane&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Ride Back&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Oscar Rudolph&#39;, &#39;Allen H. Miner&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;William Conrad&#39;, &#39;Victor Millan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Hot Pursuit&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Steven Lisberger&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Robert Loggia&#39;, &#39;Jerry Stiller&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Sidekicks&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 5.0,  &#39;directors&#39;: [&#39;Aaron Norris&#39;],  &#39;actors&#39;: [&#39;Chuck Norris&#39;, &#39;Beau Bridges&#39;, &#39;Jonathan Brandis&#39;, &#39;Mako&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Heist&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Scott Mann&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Jeffrey Dean Morgan&#39;, &#39;Dave Bautista&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Tall in the Saddle&#39;,  &#39;year&#39;: 1944,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Edwin L. Marin&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ward Bond&#39;, &quot;George &#39;Gabby&#39; Hayes&quot;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Good Times&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;William Friedkin&#39;],  &#39;actors&#39;: [&#39;Sonny Bono&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Doctor and the Girl&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Curtis Bernhardt&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Charles Coburn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Finding Nemo&#39;,  &#39;year&#39;: 2003,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Andrew Stanton&#39;, &#39;Lee Unkrich&#39;],  &#39;actors&#39;: [&#39;Albert Brooks&#39;, &#39;Alexander Gould&#39;, &#39;Willem Dafoe&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Lady and Gent&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Stephen Roberts&#39;],  &#39;actors&#39;: [&#39;Morgan Wallace&#39;,   &#39;George Bancroft&#39;,   &#39;Charles Starrett&#39;,   &#39;James Gleason&#39;,   &#39;John Wayne&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;The Rice People&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Rithy Panh&#39;],  &#39;actors&#39;: [&#39;Mom Soth&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Stagecoach&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Andy Devine&#39;, &#39;John Carradine&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Hamlet Goes Business&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Aki Kaurismäki&#39;],  &#39;actors&#39;: [&#39;Pirkka-Pekka Petelius&#39;, &#39;Esko Salminen&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Batwoman&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;René Cardona&#39;],  &#39;actors&#39;: [&#39;Roberto Cañedo&#39;, &#39;Héctor Godoy&#39;, &#39;David Silva&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Sands of Iwo Jima&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Allan Dwan&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;John Agar&#39;, &#39;Forrest Tucker&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Down with Love&#39;,  &#39;year&#39;: 2003,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Peyton Reed&#39;],  &#39;actors&#39;: [&#39;Ewan McGregor&#39;, &#39;David Hyde Pierce&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Desert Trail&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Lewis D. Collins&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Paul Fix&#39;, &#39;Eddy Chandler&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;King of the Pecos&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Joseph Kane&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Cy Kendall&#39;, &#39;Jack Rube Clifford&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &quot;Pete&#39;s Dragon&quot;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Don Chaffey&#39;],  &#39;actors&#39;: [&#39;Sean Marshall&#39;, &#39;Jim Dale&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Tall Man Riding&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Lesley Selander&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;William Ching&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Pursued&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Raoul Walsh&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Dean Jagger&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Private Affairs of Bel Ami&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Albert Lewin&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;John Carradine&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Randy Rides Alone&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Harry L. Fraser&#39;],  &#39;actors&#39;: [&#39;Artie Ortego&#39;,   &#39;John Wayne&#39;,   &quot;George &#39;Gabby&#39; Hayes&quot;,   &#39;Yakima Canutt&#39;,   &#39;Earl Dwire&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;A Matter of Resistance&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Jean-Paul Rappeneau&#39;],  &#39;actors&#39;: [&#39;Pierre Brasseur&#39;, &#39;Philippe Noiret&#39;, &#39;Henri Garcin&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Black Gold&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Phil Karlson&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &quot;&#39;Ducky&#39; Louie&quot;, &#39;Raymond Hatton&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Max&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Menno Meyjes&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Noah Taylor&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Crack-Up&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Malcolm St. Clair&#39;],  &#39;actors&#39;: [&#39;Peter Lorre&#39;, &#39;Brian Donlevy&#39;, &#39;Ralph Morgan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The House of the Seven Gables&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Joe May&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Vincent Price&#39;, &#39;Dick Foran&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Angels &amp; Demons&#39;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Ron Howard&#39;],  &#39;actors&#39;: [&#39;Tom Hanks&#39;, &#39;Ewan McGregor&#39;, &#39;Stellan Skarsgård&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &quot;Kiki&#39;s Delivery Service&quot;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Hayao Miyazaki&#39;],  &#39;actors&#39;: [&#39;Kappei Yamaguchi&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Rover&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Terence Young&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Richard Johnson&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;8 Million Ways to Die&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Hal Ashby&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Randy Brooks&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Sensation&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Brian Grant&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Ron Perlman&#39;, &#39;Paul Le Mat&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Alamo&#39;,  &#39;year&#39;: 2004,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;John Lee Hancock&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;,   &#39;Billy Bob Thornton&#39;,   &#39;Emilio Echevarría&#39;,   &#39;Jason Patric&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Last Run&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 5.0,  &#39;directors&#39;: [&#39;Anthony Hickox&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;,   &#39;Corey Johnson&#39;,   &#39;Barna Illyés&#39;,   &#39;Anthony Hickox&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Why Me?&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Fielder Cook&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;Craig Wasson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Loves of Carmen&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Charles Vidor&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Ron Randell&#39;, &#39;Victor Jory&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Down for Life&#39;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Alan Jacobs&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Snoop Dogg&#39;, &#39;Laz Alonso&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Saw&#39;,  &#39;year&#39;: 2004,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;James Wan&#39;],  &#39;actors&#39;: [&#39;Cary Elwes&#39;, &#39;Leigh Whannell&#39;, &#39;Danny Glover&#39;, &#39;Ken Leung&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Tapeheads&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Bill Fishman&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Tim Robbins&#39;, &#39;Clu Gulager&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;A Question of Love&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Jerry Thorpe&#39;],  &#39;actors&#39;: [&#39;Ned Beatty&#39;, &#39;Clu Gulager&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &quot;Surf&#39;s Up&quot;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Chris Buck&#39;, &#39;Ash Brannon&#39;],  &#39;actors&#39;: [&#39;Shia LaBeouf&#39;, &#39;Jon Heder&#39;, &#39;Jeff Bridges&#39;],  &#39;genres&#39;: [&#39;Animation&#39;, &#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Hot Spell&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;George Cukor&#39;, &#39;Daniel Mann&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Earl Holliman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;So Red the Rose&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;King Vidor&#39;],  &#39;actors&#39;: [&#39;Walter Connolly&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Man of Passion&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;José Antonio de la Loma&#39;],  &#39;actors&#39;: [&#39;R.J. Williams&#39;, &#39;Anthony Quinn&#39;, &#39;Ramon Estevez&#39;, &#39;Ray Walston&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Violation of Sarah McDavid&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;John Llewellyn Moxey&#39;],  &#39;actors&#39;: [&#39;Ned Beatty&#39;, &#39;James Sloyan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Long Ride Home&#39;,  &#39;year&#39;: 2003,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Robert Marcarelli&#39;],  &#39;actors&#39;: [&#39;Randy Travis&#39;, &#39;Eric Roberts&#39;, &#39;Ernest Borgnine&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Bandido!&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Richard Fleischer&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Gilbert Roland&#39;, &#39;Zachary Scott&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Undefeated&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Andrew V. McLaglen&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Rock Hudson&#39;, &#39;Antonio Aguilar&#39;, &#39;Roman Gabriel&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Nature of the Beast&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Victor Salva&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Lance Henriksen&#39;, &#39;Brion James&#39;, &#39;Frank Novak&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Horror&#39;, &#39;Mystery&#39;]}, ...]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q12 what are the first 3 rows in movies?</span><span class="token keyword">def</span> <span class="token function">get_first_rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    new_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        new_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>movies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> new_listget_first_rows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[{&#39;title&#39;: &#39;The Big Wedding&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Justin Zackham&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Affair of the Necklace&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Charles Shyer&#39;],  &#39;actors&#39;: [&#39;Simon Baker&#39;, &#39;Jonathan Pryce&#39;, &#39;Adrien Brody&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Barefoot Executive&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Robert Butler&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Joe Flynn&#39;, &#39;Harry Morgan&#39;, &#39;Wally Cox&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;]}]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q13 what are the last 3 rows in movies?</span><span class="token keyword">def</span> <span class="token function">get_last_rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>movies<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>movies<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>movies<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>get_last_rows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[{&#39;title&#39;: &#39;Fortitude and Glory: Angelo Dundee and His Fighters&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Chris Tasara&#39;],  &#39;actors&#39;: [&#39;Angelo Dundee&#39;, &#39;George Foreman&#39;, &#39;Freddie Roach&#39;],  &#39;genres&#39;: [&#39;Sport&#39;]}, {&#39;title&#39;: &#39;Ivanhoe&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Richard Thorpe&#39;],  &#39;actors&#39;: [&#39;Robert Taylor&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Great Gatsby&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Elliott Nugent&#39;],  &#39;actors&#39;: [&#39;Alan Ladd&#39;, &#39;Macdonald Carey&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># you are not allowed to change this function</span><span class="token keyword">def</span> <span class="token function">filter_movies_by_year</span><span class="token punctuation">(</span>movies<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>movies<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> movies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"year"</span><span class="token punctuation">]</span> <span class="token operator">!=</span> year<span class="token punctuation">:</span>            movies<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> movies<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q14 what are the movies from 1931?</span>movies_14 <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>movies<span class="token punctuation">)</span>filter_movies_by_year<span class="token punctuation">(</span>movies_14<span class="token punctuation">,</span><span class="token number">1931</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[{&#39;title&#39;: &#39;Arizona&#39;,  &#39;year&#39;: 1931,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Forrest Stanley&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;City Lights&#39;,  &#39;year&#39;: 1931,  &#39;rating&#39;: 8.5,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;Charles Chaplin&#39;, &#39;Harry Myers&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Range Feud&#39;,  &#39;year&#39;: 1931,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;D. Ross Lederman&#39;],  &#39;actors&#39;: [&#39;Buck Jones&#39;, &#39;John Wayne&#39;, &#39;Edward LeSaint&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Western&#39;]}]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q15 what are the movies from 1932?</span>movies_15 <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>movies<span class="token punctuation">)</span>filter_movies_by_year<span class="token punctuation">(</span>movies_15<span class="token punctuation">,</span><span class="token number">1932</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[{&#39;title&#39;: &#39;Texas Cyclone&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;D. Ross Lederman&#39;],  &#39;actors&#39;: [&#39;Wallace MacDonald&#39;, &#39;Tim McCoy&#39;, &#39;Wheeler Oakman&#39;, &#39;John Wayne&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Haunted Gold&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Mack V. Wright&#39;],  &#39;actors&#39;: [&#39;Otto Hoffman&#39;,   &#39;John Wayne&#39;,   &#39;Duke&#39;,   &#39;Harry Woods&#39;,   &#39;Erville Alderson&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Mystery&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Girl Crazy&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;Bert Wheeler&#39;, &#39;Robert Woolsey&#39;, &#39;Eddie Quillan&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Hot Saturday&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;Cary Grant&#39;, &#39;Randolph Scott&#39;, &#39;Edward Woods&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Lady and Gent&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Stephen Roberts&#39;],  &#39;actors&#39;: [&#39;Morgan Wallace&#39;,   &#39;George Bancroft&#39;,   &#39;Charles Starrett&#39;,   &#39;James Gleason&#39;,   &#39;John Wayne&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;The Big Stampede&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Tenny Wright&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Noah Beery&#39;, &#39;Paul Hurst&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Shadow of the Eagle&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;B. Reeves Eason&#39;, &#39;Ford Beebe&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Walter Miller&#39;, &#39;Kenneth Harlan&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Ride Him, Cowboy&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Fred Allen&#39;],  &#39;actors&#39;: [&#39;Otis Harlan&#39;, &#39;John Wayne&#39;, &#39;Duke&#39;, &#39;Henry B. Walthall&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &quot;Smilin&#39; Through&quot;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Sidney Franklin&#39;],  &#39;actors&#39;: [&#39;Fredric March&#39;, &#39;Leslie Howard&#39;, &#39;O.P. Heggie&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Hurricane Express&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;J.P. McGowan&#39;, &#39;Armand Schaefer&#39;],  &#39;actors&#39;: [&#39;Tully Marshall&#39;, &#39;Conway Tearle&#39;, &#39;John Wayne&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Crime&#39;]}]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q16 how many unique genres are there in the dataset?</span><span class="token keyword">def</span> <span class="token function">get_unique</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token number">0</span>    temp <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>movies<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> movies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">:</span>            temp<span class="token punctuation">.</span>add<span class="token punctuation">(</span>j<span class="token punctuation">)</span>        i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> len<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>get_unique<span class="token punctuation">(</span><span class="token string">'genres'</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>18</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q17 how many unique director names are there in the dataset?</span>get_unique<span class="token punctuation">(</span><span class="token string">'directors'</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>1247</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q18 which movie has the highest number of actors? Output should be the movie title in string format.</span><span class="token keyword">def</span> <span class="token function">find_highest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token number">0</span>    highest <span class="token operator">=</span> <span class="token number">0</span>    row <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>movies<span class="token punctuation">)</span><span class="token punctuation">:</span>        num <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> movies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'actors'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">if</span> highest <span class="token operator">&lt;</span> num<span class="token punctuation">:</span>            highest <span class="token operator">=</span> num            row <span class="token operator">=</span> i        i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">return</span> movies<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>find_highest<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;Shoulder Arms&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q19 what is the average movie rating?</span><span class="token keyword">def</span> <span class="token function">avg_rating</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sum <span class="token operator">=</span> <span class="token number">0</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>movies<span class="token punctuation">)</span><span class="token punctuation">:</span>        sum <span class="token operator">=</span> sum <span class="token operator">+</span> movies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'rating'</span><span class="token punctuation">]</span>        i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> sum<span class="token operator">/</span>len<span class="token punctuation">(</span>movies<span class="token punctuation">)</span>avg_rating<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>6.401659528907912</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q20 what is the longest movie title in the dataset (in terms of most characters)?</span><span class="token keyword">def</span> <span class="token function">get_longest_title</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    longest <span class="token operator">=</span> <span class="token number">0</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>movies<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> longest <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>movies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            longest <span class="token operator">=</span> len<span class="token punctuation">(</span>movies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            title <span class="token operator">=</span> movies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>        i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> titleget_longest_title<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#works for non-list</span><span class="token keyword">def</span> <span class="token function">bucketize_non</span><span class="token punctuation">(</span>movie_list<span class="token punctuation">,</span> movie_key<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>movie_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> key <span class="token keyword">in</span> movie_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> key <span class="token operator">==</span> movie_key<span class="token punctuation">:</span>                <span class="token keyword">if</span> movie_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token keyword">in</span> res<span class="token punctuation">:</span>                    res<span class="token punctuation">[</span>movie_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>movie_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    res<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>movie_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>movie_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># works for list</span><span class="token keyword">def</span> <span class="token function">bucketize_li</span><span class="token punctuation">(</span>movie_list<span class="token punctuation">,</span> movie_key<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>movie_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> key <span class="token keyword">in</span> movie_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> key <span class="token operator">==</span> movie_key<span class="token punctuation">:</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> movie_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> j <span class="token keyword">in</span> res<span class="token punctuation">:</span>                        res<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>movie_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        res<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>movie_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bucketize</span><span class="token punctuation">(</span>movie_list<span class="token punctuation">,</span> movie_key<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> type<span class="token punctuation">(</span>movie_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>movie_key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> list<span class="token punctuation">:</span>        <span class="token keyword">return</span> bucketize_li<span class="token punctuation">(</span>movie_list<span class="token punctuation">,</span> movie_key<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> bucketize_non<span class="token punctuation">(</span>movie_list<span class="token punctuation">,</span> movie_key<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">test_movies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"year"</span><span class="token punctuation">:</span> <span class="token number">2018</span><span class="token punctuation">,</span> <span class="token string">"style"</span><span class="token punctuation">:</span> <span class="token string">"short"</span><span class="token punctuation">,</span> <span class="token string">"genres"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"g1"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"year"</span><span class="token punctuation">:</span> <span class="token number">2018</span><span class="token punctuation">,</span> <span class="token string">"style"</span><span class="token punctuation">:</span> <span class="token string">"long"</span><span class="token punctuation">,</span>  <span class="token string">"genres"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"g2"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"year"</span><span class="token punctuation">:</span> <span class="token number">2019</span><span class="token punctuation">,</span> <span class="token string">"style"</span><span class="token punctuation">:</span> <span class="token string">"short"</span><span class="token punctuation">,</span> <span class="token string">"genres"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"g3"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"year"</span><span class="token punctuation">:</span> <span class="token number">2019</span><span class="token punctuation">,</span> <span class="token string">"style"</span><span class="token punctuation">:</span> <span class="token string">"long"</span><span class="token punctuation">,</span> <span class="token string">"genres"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"g1"</span><span class="token punctuation">,</span> <span class="token string">"g2"</span><span class="token punctuation">,</span> <span class="token string">"g3"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q21 what is bucketize(test_movies, "year")?</span>bucketize<span class="token punctuation">(</span>test_movies<span class="token punctuation">,</span> <span class="token string">"year"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>{2018: [{&#39;title&#39;: &#39;A&#39;, &#39;year&#39;: 2018, &#39;style&#39;: &#39;short&#39;, &#39;genres&#39;: [&#39;g1&#39;]},  {&#39;title&#39;: &#39;B&#39;, &#39;year&#39;: 2018, &#39;style&#39;: &#39;long&#39;, &#39;genres&#39;: [&#39;g2&#39;]}], 2019: [{&#39;title&#39;: &#39;C&#39;, &#39;year&#39;: 2019, &#39;style&#39;: &#39;short&#39;, &#39;genres&#39;: [&#39;g3&#39;]},  {&#39;title&#39;: &#39;D&#39;, &#39;year&#39;: 2019, &#39;style&#39;: &#39;long&#39;, &#39;genres&#39;: [&#39;g1&#39;, &#39;g2&#39;, &#39;g3&#39;]}]}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q22 what is bucketize(test_movies, "style")?</span>bucketize<span class="token punctuation">(</span>test_movies<span class="token punctuation">,</span> <span class="token string">"style"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>{&#39;short&#39;: [{&#39;title&#39;: &#39;A&#39;, &#39;year&#39;: 2018, &#39;style&#39;: &#39;short&#39;, &#39;genres&#39;: [&#39;g1&#39;]},  {&#39;title&#39;: &#39;C&#39;, &#39;year&#39;: 2019, &#39;style&#39;: &#39;short&#39;, &#39;genres&#39;: [&#39;g3&#39;]}], &#39;long&#39;: [{&#39;title&#39;: &#39;B&#39;, &#39;year&#39;: 2018, &#39;style&#39;: &#39;long&#39;, &#39;genres&#39;: [&#39;g2&#39;]},  {&#39;title&#39;: &#39;D&#39;, &#39;year&#39;: 2019, &#39;style&#39;: &#39;long&#39;, &#39;genres&#39;: [&#39;g1&#39;, &#39;g2&#39;, &#39;g3&#39;]}]}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q23 what is bucketize(test_movies, "genres")?</span>bucketize<span class="token punctuation">(</span>test_movies<span class="token punctuation">,</span> <span class="token string">"genres"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>{&#39;g1&#39;: [{&#39;title&#39;: &#39;A&#39;, &#39;year&#39;: 2018, &#39;style&#39;: &#39;short&#39;, &#39;genres&#39;: [&#39;g1&#39;]},  {&#39;title&#39;: &#39;D&#39;, &#39;year&#39;: 2019, &#39;style&#39;: &#39;long&#39;, &#39;genres&#39;: [&#39;g1&#39;, &#39;g2&#39;, &#39;g3&#39;]}], &#39;g2&#39;: [{&#39;title&#39;: &#39;B&#39;, &#39;year&#39;: 2018, &#39;style&#39;: &#39;long&#39;, &#39;genres&#39;: [&#39;g2&#39;]},  {&#39;title&#39;: &#39;D&#39;, &#39;year&#39;: 2019, &#39;style&#39;: &#39;long&#39;, &#39;genres&#39;: [&#39;g1&#39;, &#39;g2&#39;, &#39;g3&#39;]}], &#39;g3&#39;: [{&#39;title&#39;: &#39;C&#39;, &#39;year&#39;: 2019, &#39;style&#39;: &#39;short&#39;, &#39;genres&#39;: [&#39;g3&#39;]},  {&#39;title&#39;: &#39;D&#39;, &#39;year&#39;: 2019, &#39;style&#39;: &#39;long&#39;, &#39;genres&#39;: [&#39;g1&#39;, &#39;g2&#39;, &#39;g3&#39;]}]}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q24 what is bucketize(small, "genres")?</span>bucketize<span class="token punctuation">(</span>small<span class="token punctuation">,</span> <span class="token string">"genres"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>{&#39;Crime&#39;: [{&#39;title&#39;: &#39;Runaway Jury&#39;,   &#39;year&#39;: 2003,   &#39;rating&#39;: 7.1,   &#39;directors&#39;: [&#39;Gary Fleder&#39;],   &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Gene Hackman&#39;, &#39;Dustin Hoffman&#39;],   &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]},  {&#39;title&#39;: &#39;Lethal Weapon&#39;,   &#39;year&#39;: 1987,   &#39;rating&#39;: 7.6,   &#39;directors&#39;: [&#39;Richard Donner&#39;],   &#39;actors&#39;: [&#39;Mel Gibson&#39;, &#39;Danny Glover&#39;, &#39;Gary Busey&#39;, &#39;Mitchell Ryan&#39;],   &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}], &#39;Drama&#39;: [{&#39;title&#39;: &#39;Runaway Jury&#39;,   &#39;year&#39;: 2003,   &#39;rating&#39;: 7.1,   &#39;directors&#39;: [&#39;Gary Fleder&#39;],   &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Gene Hackman&#39;, &#39;Dustin Hoffman&#39;],   &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}], &#39;Thriller&#39;: [{&#39;title&#39;: &#39;Runaway Jury&#39;,   &#39;year&#39;: 2003,   &#39;rating&#39;: 7.1,   &#39;directors&#39;: [&#39;Gary Fleder&#39;],   &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Gene Hackman&#39;, &#39;Dustin Hoffman&#39;],   &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]},  {&#39;title&#39;: &#39;Lethal Weapon&#39;,   &#39;year&#39;: 1987,   &#39;rating&#39;: 7.6,   &#39;directors&#39;: [&#39;Richard Donner&#39;],   &#39;actors&#39;: [&#39;Mel Gibson&#39;, &#39;Danny Glover&#39;, &#39;Gary Busey&#39;, &#39;Mitchell Ryan&#39;],   &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}], &#39;Action&#39;: [{&#39;title&#39;: &#39;Lethal Weapon&#39;,   &#39;year&#39;: 1987,   &#39;rating&#39;: 7.6,   &#39;directors&#39;: [&#39;Richard Donner&#39;],   &#39;actors&#39;: [&#39;Mel Gibson&#39;, &#39;Danny Glover&#39;, &#39;Gary Busey&#39;, &#39;Mitchell Ryan&#39;],   &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}]}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q25 how many different unique actors appear in the small dataset?</span>len<span class="token punctuation">(</span>bucketize<span class="token punctuation">(</span>small<span class="token punctuation">,</span> <span class="token string">"actors"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>7</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q26 how many unique actors appear in the full dataset?</span>len<span class="token punctuation">(</span>bucketize<span class="token punctuation">(</span>movies<span class="token punctuation">,</span> <span class="token string">"actors"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>2605</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q27 how many movies are there of each genre?</span><span class="token keyword">def</span> <span class="token function">get_num_movies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> bucketize<span class="token punctuation">(</span>movies<span class="token punctuation">,</span><span class="token string">'genres'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>len<span class="token punctuation">(</span>bucketize<span class="token punctuation">(</span>movies<span class="token punctuation">,</span><span class="token string">'genres'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> resget_num_movies<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>{&#39;Comedy&#39;: 485, &#39;Drama&#39;: 1094, &#39;Romance&#39;: 352, &#39;History&#39;: 73, &#39;Family&#39;: 85, &#39;Mystery&#39;: 121, &#39;Thriller&#39;: 250, &#39;Action&#39;: 299, &#39;Crime&#39;: 357, &#39;Adventure&#39;: 283, &#39;Western&#39;: 226, &#39;Music&#39;: 38, &#39;Animation&#39;: 45, &#39;Sport&#39;: 48, &#39;Fantasy&#39;: 59, &#39;War&#39;: 99, &#39;Sci-Fi&#39;: 69, &#39;Horror&#39;: 85}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q28 how many movies are there of each genre? (plot your answer)</span><span class="token keyword">def</span> <span class="token function">plot_dict</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"Please Label Me!!!"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ax <span class="token operator">=</span> pandas<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>plot<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>color<span class="token operator">=</span><span class="token string">"black"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span>label<span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>plot_dict<span class="token punctuation">(</span>get_num_movies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Number of Movies"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_40_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">filter_year</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> movies<span class="token punctuation">:</span>        <span class="token keyword">if</span> start <span class="token operator">!=</span> None <span class="token operator">and</span> end <span class="token operator">!=</span> None <span class="token operator">and</span> i<span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">]</span> <span class="token operator">></span> start <span class="token operator">and</span> i<span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> end<span class="token punctuation">:</span>            temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">elif</span> start <span class="token operator">==</span> None <span class="token operator">and</span> end <span class="token operator">!=</span> None <span class="token operator">and</span> i<span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> end<span class="token punctuation">:</span>            temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">elif</span> start <span class="token operator">!=</span> None <span class="token operator">and</span> end <span class="token operator">==</span> None <span class="token operator">and</span> i<span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">]</span> <span class="token operator">>=</span> start<span class="token punctuation">:</span>            temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> tempfilter_year<span class="token punctuation">(</span>movies<span class="token punctuation">,</span> None<span class="token punctuation">,</span> <span class="token number">1999</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[{&#39;title&#39;: &#39;The Barefoot Executive&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Robert Butler&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Joe Flynn&#39;, &#39;Harry Morgan&#39;, &#39;Wally Cox&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Flying Tigers&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;David Miller&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;John Carroll&#39;, &#39;Paul Kelly&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Life Begins for Andy Hardy&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Lewis Stone&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Rachel and the Stranger&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Norman Foster&#39;],  &#39;actors&#39;: [&#39;William Holden&#39;, &#39;Robert Mitchum&#39;, &#39;Gary Gray&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Red River&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Arthur Rosson&#39;, &#39;Howard Hawks&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Montgomery Clift&#39;, &#39;Walter Brennan&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Wrong Man&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Alfred Hitchcock&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Anthony Quayle&#39;, &#39;Harold J. Stone&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Playing for Keeps&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 4.1,  &#39;directors&#39;: [&#39;Harvey Weinstein&#39;, &#39;Bob Weinstein&#39;],  &#39;actors&#39;: [&#39;Daniel Jordano&#39;, &#39;Matthew Penn&#39;, &#39;Leon W. Grant&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Doors&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Oliver Stone&#39;],  &#39;actors&#39;: [&#39;Val Kilmer&#39;, &#39;Kyle MacLachlan&#39;, &#39;Frank Whaley&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Shoot-Out at Medicine Bend&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Richard L. Bare&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;James Craig&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Watch the Birdie&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Jack Donohue&#39;],  &#39;actors&#39;: [&#39;Red Skelton&#39;, &#39;Leon Ames&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Rainbow Valley&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;Lloyd Ingraham&#39;,   &#39;John Wayne&#39;,   &quot;George &#39;Gabby&#39; Hayes&quot;,   &#39;LeRoy Mason&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Man from the Alamo&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Chill Wills&#39;, &quot;Hugh O&#39;Brian&quot;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;I Met My Love Again&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;George Cukor&#39;, &#39;Arthur Ripley&#39;, &#39;Joshua Logan&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Alan Marshal&#39;],  &#39;genres&#39;: [&#39;Romance&#39;]}, {&#39;title&#39;: &#39;Bad Company&#39;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Robert Benton&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Barry Brown&#39;, &#39;Jim Davis&#39;, &#39;David Huddleston&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Man Who Understood Women&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Nunnally Johnson&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Cesare Danova&#39;, &#39;Myron McCormick&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Floundering&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Peter McCarthy&#39;],  &#39;actors&#39;: [&#39;James Le Gros&#39;, &#39;Zander Schloss&#39;, &#39;John Cusack&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Another Man, Another Chance&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Claude Lelouch&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Francis Huster&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &quot;The Moon&#39;s Our Home&quot;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Charles Butterworth&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Modern Times&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 8.5,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;Al Ernest Garcia&#39;,   &#39;Charles Chaplin&#39;,   &#39;Henry Bergman&#39;,   &#39;Tiny Sandford&#39;,   &#39;Chester Conklin&#39;,   &#39;Hank Mann&#39;,   &#39;Stanley Blystone&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &quot;Santa Claus Is Comin&#39; to Town&quot;,  &#39;year&#39;: 1970,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Jules Bass&#39;, &#39;Arthur Rankin Jr.&#39;],  &#39;actors&#39;: [&#39;Fred Astaire&#39;, &#39;Mickey Rooney&#39;, &#39;Keenan Wynn&#39;, &#39;Paul Frees&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;What a Way to Go!&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;J. Lee Thompson&#39;],  &#39;actors&#39;: [&#39;Paul Newman&#39;, &#39;Robert Mitchum&#39;, &#39;Dean Martin&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Konrad&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Nell Cox&#39;],  &#39;actors&#39;: [&#39;Max Wright&#39;, &#39;Huckleberry Fox&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Comes a Horseman&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Alan J. Pakula&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Jason Robards&#39;, &#39;George Grizzard&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Porco Rosso&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Hayao Miyazaki&#39;],  &#39;actors&#39;: [&#39;Shûichirô Moriyama&#39;, &#39;Bunshi Katsura Vi&#39;, &#39;Tsunehiko Kamijô&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;West of the Pecos&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Edward Killy&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Richard Martin&#39;, &#39;Thurston Hall&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Without Reservations&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Mervyn LeRoy&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Don DeFore&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Charley and the Angel&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Vincent McEveety&#39;],  &#39;actors&#39;: [&#39;Fred MacMurray&#39;, &#39;Harry Morgan&#39;, &#39;Kurt Russell&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Silk&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Cirio H. Santiago&#39;],  &#39;actors&#39;: [&#39;Bill McLaughlin&#39;, &#39;Joe Mari Avellana&#39;, &#39;Frederick Bailey&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;China Sky&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;His Private Secretary&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Phil Whitman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Reginald Barlow&#39;, &#39;Alec B. Francis&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Wake of the Red Witch&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Edward Ludwig&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Gig Young&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Legend of the Lost&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Rossano Brazzi&#39;, &#39;Kurt Kasznar&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Computer Wore Tennis Shoes&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Robert Butler&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Cesar Romero&#39;, &#39;Joe Flynn&#39;, &#39;William Schallert&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Goodfellas&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 8.7,  &#39;directors&#39;: [&#39;Martin Scorsese&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Ray Liotta&#39;, &#39;Joe Pesci&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Better Off Dead...&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Savage Steve Holland&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;David Ogden Stiers&#39;, &#39;Demian Slade&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Go Toward the Light&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Mike Robe&#39;],  &#39;actors&#39;: [&#39;Joshua Harris&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Wagon Wheels&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Charles Barton&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Billy Lee&#39;, &#39;Monte Blue&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;They Were Expendable&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;John Ford&#39;, &#39;Robert Montgomery&#39;],  &#39;actors&#39;: [&#39;Robert Montgomery&#39;, &#39;John Wayne&#39;, &#39;Jack Holt&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &quot;This Man&#39;s Navy&quot;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;Wallace Beery&#39;, &#39;Tom Drake&#39;, &#39;James Gleason&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Santee&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Gary Nelson&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Michael Burns&#39;, &#39;Jay Silverheels&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Lawless Frontier&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;Gordon De Main&#39;,   &#39;John Wayne&#39;,   &quot;George &#39;Gabby&#39; Hayes&quot;,   &#39;Jack Rockwell&#39;,   &#39;Jay Wilsey&#39;,   &#39;Yakima Canutt&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Rio 70&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;Jesús Franco&#39;],  &#39;actors&#39;: [&#39;Richard Wyler&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;]}, {&#39;title&#39;: &#39;Spartacus&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Stanley Kubrick&#39;],  &#39;actors&#39;: [&#39;Kirk Douglas&#39;, &#39;Laurence Olivier&#39;, &#39;Charles Laughton&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Time Trackers&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Howard R. Cohen&#39;],  &#39;actors&#39;: [&#39;Wil Shriner&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Kid&#39;,  &#39;year&#39;: 1921,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;F. Blinn&#39;,   &#39;Charles Chaplin&#39;,   &#39;Jackie Coogan&#39;,   &#39;Carl Miller&#39;,   &#39;Albert Austin&#39;,   &#39;Henry Bergman&#39;,   &#39;Edward Biby&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;A Lady Takes a Chance&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Charles Winninger&#39;, &#39;Phil Silvers&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Undercover Blues&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Herbert Ross&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Stanley Tucci&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Ride, Vaquero!&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;Robert Taylor&#39;, &#39;Howard Keel&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Road to Wellville&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Alan Parker&#39;],  &#39;actors&#39;: [&#39;Anthony Hopkins&#39;, &#39;Matthew Broderick&#39;, &#39;John Cusack&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Night Has a Thousand Eyes&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;Edward G. Robinson&#39;, &#39;John Lund&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Mr. Muggs Rides Again&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Wallace Fox&#39;],  &#39;actors&#39;: [&#39;Leo Gorcey&#39;,   &#39;Huntz Hall&#39;,   &quot;William &#39;Billy&#39; Benedict&quot;,   &#39;Johnny Duncan&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Once Upon a Time in America&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 8.4,  &#39;directors&#39;: [&#39;Sergio Leone&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;James Woods&#39;, &#39;Treat Williams&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Regina Roma&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Jean-Yves Prate&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Ray Sharkey&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Stranger Wore a Gun&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;André De Toth&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;George Macready&#39;],  &#39;genres&#39;: [&#39;War&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Both Sides of the Law&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Muriel Box&#39;],  &#39;actors&#39;: [&#39;Terence Morgan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Glass Key&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Stuart Heisler&#39;],  &#39;actors&#39;: [&#39;Alan Ladd&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Tennessee Waltz&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Nicolas Gessner&#39;],  &#39;actors&#39;: [&#39;Julian Sands&#39;, &#39;Ed Lauter&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &quot;Everybody&#39;s All-American&quot;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Taylor Hackford&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Timothy Hutton&#39;, &#39;John Goodman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Buchanan Rides Alone&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Craig Stevens&#39;, &#39;Barry Kelley&#39;, &#39;Tol Avery&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Arizona&#39;,  &#39;year&#39;: 1931,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Forrest Stanley&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Yours, Mine and Ours&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Melville Shavelson&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Van Johnson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Romola&#39;,  &#39;year&#39;: 1924,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Henry King&#39;],  &#39;actors&#39;: [&#39;William Powell&#39;, &#39;Ronald Colman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Purple People Eater&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;Linda Shayne&#39;],  &#39;actors&#39;: [&#39;Ned Beatty&#39;, &#39;Bobby Porter&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Circus&#39;,  &#39;year&#39;: 1928,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;Steve Murphy&#39;,   &#39;Charles Chaplin&#39;,   &#39;Al Ernest Garcia&#39;,   &#39;Harry Crocker&#39;,   &#39;George Davis&#39;,   &#39;Henry Bergman&#39;,   &#39;Tiny Sandford&#39;,   &#39;John Rand&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Tycoon&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Richard Wallace&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Cedric Hardwicke&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;7th Cavalry&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Joseph H. Lewis&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Jay C. Flippen&#39;, &#39;Frank Faylen&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;7 Men from Now&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Lee Marvin&#39;, &#39;Walter Reed&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Albuquerque&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &quot;George &#39;Gabby&#39; Hayes&quot;, &#39;Lon Chaney Jr.&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Circus World&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Lloyd Nolan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Dragonfly&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Siko Dolidze&#39;, &#39;Levan Khotivari&#39;],  &#39;actors&#39;: [&#39;Aleksandre Omiadze&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Virginia City&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Michael Curtiz&#39;],  &#39;actors&#39;: [&#39;Errol Flynn&#39;, &#39;Randolph Scott&#39;, &#39;Humphrey Bogart&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Dangerous Liaisons&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Stephen Frears&#39;],  &#39;actors&#39;: [&#39;John Malkovich&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Raw Nerve&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 4.3,  &#39;directors&#39;: [&#39;David A. Prior&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &quot;Randall &#39;Tex&#39; Cobb&quot;, &#39;Ted Prior&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Teahouse of the August Moon&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Daniel Mann&#39;],  &#39;actors&#39;: [&#39;Marlon Brando&#39;, &#39;Glenn Ford&#39;, &#39;Eddie Albert&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Monkey on My Back&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;André De Toth&#39;],  &#39;actors&#39;: [&#39;Cameron Mitchell&#39;, &#39;Paul Richards&#39;, &#39;Jack Albertson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Runaway Train&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Andrey Konchalovskiy&#39;],  &#39;actors&#39;: [&#39;Jon Voight&#39;, &#39;Eric Roberts&#39;, &#39;Kyle T. Heffner&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Tall T&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Richard Boone&#39;, &#39;Arthur Hunnicutt&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Thriller&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &quot;She Couldn&#39;t Say No&quot;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Lloyd Bacon&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Arthur Hunnicutt&#39;, &#39;Edgar Buchanan&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Quality of Mercy&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Andreas Gruber&#39;],  &#39;actors&#39;: [&#39;Rainer Egger&#39;, &#39;Oliver Broumis&#39;, &#39;Merab Ninidze&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Eagles Over London&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Enzo G. Castellari&#39;],  &#39;actors&#39;: [&#39;Frederick Stafford&#39;, &#39;Van Johnson&#39;, &#39;Francisco Rabal&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Bopha!&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Morgan Freeman&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Malcolm McDowell&#39;, &#39;Marius Weyers&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Money for Nothing&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Ramón Menéndez&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Michael Madsen&#39;, &#39;Benicio Del Toro&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &quot;Andy Hardy&#39;s Blonde Trouble&quot;,  &#39;year&#39;: 1944,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Lewis Stone&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Billy the Kid&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;David Miller&#39;, &#39;Frank Borzage&#39;],  &#39;actors&#39;: [&#39;Robert Taylor&#39;, &#39;Brian Donlevy&#39;, &#39;Ian Hunter&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Belle Starr&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Irving Cummings&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Dana Andrews&#39;, &#39;Shepperd Strudwick&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Love Is All There Is&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Renée Taylor&#39;, &#39;Joseph Bologna&#39;],  &#39;actors&#39;: [&#39;Joseph Bologna&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Funny Lady&#39;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Herbert Ross&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Omar Sharif&#39;, &#39;Roddy McDowall&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Human Desire&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Fritz Lang&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Broderick Crawford&#39;, &#39;Edgar Buchanan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &quot;Boston Blackie&#39;s Chinese Venture&quot;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Seymour Friedman&#39;],  &#39;actors&#39;: [&#39;Chester Morris&#39;, &#39;Richard Lane&#39;, &#39;Don McGuire&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Naked Street&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Maxwell Shane&#39;],  &#39;actors&#39;: [&#39;Farley Granger&#39;, &#39;Anthony Quinn&#39;, &#39;Peter Graves&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Texas Cyclone&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;D. Ross Lederman&#39;],  &#39;actors&#39;: [&#39;Wallace MacDonald&#39;, &#39;Tim McCoy&#39;, &#39;Wheeler Oakman&#39;, &#39;John Wayne&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Max Havelaar&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Fons Rademakers&#39;],  &#39;actors&#39;: [&#39;Peter Faber&#39;, &#39;Adendu Soesilaningrat&#39;, &#39;Maruli Sitompul&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Track of the Cat&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Tab Hunter&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;For Better, for Worse&#39;,  &#39;year&#39;: 1919,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Cecil B. DeMille&#39;],  &#39;actors&#39;: [&#39;Elliott Dexter&#39;, &#39;Tom Forman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Broken Trust&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Geoffrey Sax&#39;],  &#39;actors&#39;: [&#39;Tom Selleck&#39;, &#39;William Atherton&#39;, &#39;Charles Haid&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Babylon 5: Thirdspace&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Jesús Salvador Treviño&#39;],  &#39;actors&#39;: [&#39;Bruce Boxleitner&#39;, &#39;Richard Biggs&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Once Upon a Time in the West&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 8.5,  &#39;directors&#39;: [&#39;Sergio Leone&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Charles Bronson&#39;, &#39;Jason Robards&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;A Southern Yankee&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Edward Sedgwick&#39;],  &#39;actors&#39;: [&#39;Red Skelton&#39;, &#39;Brian Donlevy&#39;, &#39;George Coulouris&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;History&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Execution of Private Slovik&#39;,  &#39;year&#39;: 1974,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Lamont Johnson&#39;],  &#39;actors&#39;: [&#39;Martin Sheen&#39;, &#39;Ned Beatty&#39;, &#39;Gary Busey&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Alpha Caper&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Robert Michael Lewis&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Leonard Nimoy&#39;, &#39;James McEachin&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Gardens of Stone&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Francis Ford Coppola&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;James Earl Jones&#39;, &#39;D.B. Sweeney&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;To the Shores of Tripoli&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;H. Bruce Humberstone&#39;],  &#39;actors&#39;: [&#39;John Payne&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Thunderbolt and Lightfoot&#39;,  &#39;year&#39;: 1974,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Michael Cimino&#39;],  &#39;actors&#39;: [&#39;Clint Eastwood&#39;, &#39;Jeff Bridges&#39;, &#39;Geoffrey Lewis&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Gambler&#39;,  &#39;year&#39;: 1974,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Karel Reisz&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Paul Sorvino&#39;, &#39;Morris Carnovsky&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Shepherd of the Hills&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Harry Carey&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Last Tycoon&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Elia Kazan&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Tony Curtis&#39;, &#39;Robert Mitchum&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Advance to the Rear&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;George Marshall&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Melvyn Douglas&#39;, &#39;Jim Backus&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;War&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Cosmic Man&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 4.7,  &#39;directors&#39;: [&#39;Herbert S. Greene&#39;],  &#39;actors&#39;: [&#39;John Carradine&#39;, &#39;Bruce Bennett&#39;, &#39;Paul Langton&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Sci-Fi&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Revenge&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Tony Scott&#39;],  &#39;actors&#39;: [&#39;Kevin Costner&#39;, &#39;Anthony Quinn&#39;, &#39;Tomas Milian&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Morning Patrol&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Nikos Nikolaidis&#39;],  &#39;actors&#39;: [&#39;Takis Spiridakis&#39;, &#39;Nikos Hatzis&#39;],  &#39;genres&#39;: [&#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Courtship of Andy Hardy&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Lewis Stone&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Heaven with a Gun&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Lee H. Katzin&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;John Anderson&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Strange Woman&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Douglas Sirk&#39;, &#39;Edgar G. Ulmer&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Louis Hayward&#39;, &#39;Gene Lockhart&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Dragon Ball Z: Bojack Unbound&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Yoshihiro Ueda&#39;],  &#39;actors&#39;: [&#39;Toshio Furukawa&#39;, &#39;Takeshi Kusao&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Animation&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Bullets Over Broadway&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Woody Allen&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Chazz Palminteri&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Enemy from Space&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Val Guest&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;John Longden&#39;, &#39;Sidney James&#39;, &#39;Bryan Forbes&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Lonely Trail&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Joseph Kane&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Cy Kendall&#39;, &#39;Bob Kortman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Lightning, the White Stallion&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;William A. Levey&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Billy Wesley&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Never a Dull Moment&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;George Marshall&#39;],  &#39;actors&#39;: [&#39;Fred MacMurray&#39;, &#39;William Demarest&#39;, &#39;Andy Devine&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &quot;I&#39;m a Fool&quot;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Noel Black&#39;],  &#39;actors&#39;: [&#39;Ron Howard&#39;, &#39;Otis Calef&#39;, &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Mean Streets&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Martin Scorsese&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Harvey Keitel&#39;, &#39;David Proval&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Marcus-Nelson Murders&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;Joseph Sargent&#39;],  &#39;actors&#39;: [&#39;Telly Savalas&#39;, &#39;Marjoe Gortner&#39;, &#39;José Ferrer&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Hook Line and Sinker&#39;,  &#39;year&#39;: 1930,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Edward F. Cline&#39;],  &#39;actors&#39;: [&#39;Bert Wheeler&#39;, &#39;Robert Woolsey&#39;, &#39;Ralf Harolde&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Haunted Gold&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Mack V. Wright&#39;],  &#39;actors&#39;: [&#39;Otto Hoffman&#39;,   &#39;John Wayne&#39;,   &#39;Duke&#39;,   &#39;Harry Woods&#39;,   &#39;Erville Alderson&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Mystery&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Westward Ho&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Frank McGlynn Jr.&#39;, &#39;Jim Farley&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Pocketful of Miracles&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Frank Capra&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &quot;Arthur O&#39;Connell&quot;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Vanished Without a Trace&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Douglas Barr&#39;],  &#39;actors&#39;: [&#39;William R. Moses&#39;, &#39;Joshua Peace&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Command Decision&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Sam Wood&#39;],  &#39;actors&#39;: [&#39;Clark Gable&#39;, &#39;Walter Pidgeon&#39;, &#39;Van Johnson&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Coroner Creek&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;George Macready&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &quot;Maria&#39;s Lovers&quot;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Andrey Konchalovskiy&#39;],  &#39;actors&#39;: [&#39;John Savage&#39;, &#39;Keith Carradine&#39;, &#39;Robert Mitchum&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Wag the Dog&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Barry Levinson&#39;],  &#39;actors&#39;: [&#39;Dustin Hoffman&#39;, &#39;Robert De Niro&#39;, &#39;Woody Harrelson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Christmas Eve&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Edwin L. Marin&#39;],  &#39;actors&#39;: [&#39;George Raft&#39;, &#39;George Brent&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Schizopolis&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Steven Soderbergh&#39;],  &#39;actors&#39;: [&#39;Darrin Dickerson&#39;,   &#39;Steven Soderbergh&#39;,   &#39;Miles Hardy&#39;,   &#39;Scott Allen&#39;,   &#39;Marcus Lyle Brown&#39;,   &#39;Silas Cooper&#39;,   &#39;C.C. Courtney&#39;,   &#39;Sonny Cranch&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Fantasy&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Son of Monte Cristo&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Rowland V. Lee&#39;],  &#39;actors&#39;: [&#39;Louis Hayward&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Tango &amp; Cash&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Albert Magnoli&#39;, &#39;Andrey Konchalovskiy&#39;],  &#39;actors&#39;: [&#39;Sylvester Stallone&#39;, &#39;Kurt Russell&#39;, &#39;Jack Palance&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Out of the Past&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Jacques Tourneur&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Kirk Douglas&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;One Minute to Zero&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Tay Garnett&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;William Talman&#39;, &#39;Charles McGraw&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 8.4,  &#39;directors&#39;: [&#39;Stanley Kubrick&#39;],  &#39;actors&#39;: [&#39;Peter Sellers&#39;,   &#39;George C. Scott&#39;,   &#39;Sterling Hayden&#39;,   &#39;Keenan Wynn&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Last Mile&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Howard W. Koch&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;,   &#39;Frank Overton&#39;,   &#39;Michael Constantine&#39;,   &#39;John Vari&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Last Train from Gun Hill&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;John Sturges&#39;],  &#39;actors&#39;: [&#39;Kirk Douglas&#39;, &#39;Anthony Quinn&#39;, &#39;Earl Holliman&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Lethal Weapon 2&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Richard Donner&#39;],  &#39;actors&#39;: [&#39;Mel Gibson&#39;, &#39;Danny Glover&#39;, &#39;Joe Pesci&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Power 98&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;Jaime Hellman&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Jason Gedrick&#39;, &#39;Jack Betts&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Error in Judgment&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 4.7,  &#39;directors&#39;: [&#39;Scott P. Levy&#39;],  &#39;actors&#39;: [&#39;Joe Mantegna&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Everything That Rises&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Dennis Quaid&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Harve Presnell&#39;, &#39;Meat Loaf&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Simpatico&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Matthew Warchus&#39;],  &#39;actors&#39;: [&#39;Nick Nolte&#39;, &#39;Jeff Bridges&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Attila&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Pietro Francisci&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Henri Vidal&#39;, &#39;Claude Laydu&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Gazebo&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;George Marshall&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Carl Reiner&#39;, &#39;John McGiver&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;3:10 to Yuma&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Delmer Daves&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Van Heflin&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Return of Swamp Thing&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Jim Wynorski&#39;],  &#39;actors&#39;: [&#39;Dick Durock&#39;, &#39;Louis Jourdan&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Breaking Away&#39;,  &#39;year&#39;: 1979,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Peter Yates&#39;],  &#39;actors&#39;: [&#39;Paul Dooley&#39;,   &#39;Dennis Christopher&#39;,   &#39;Dennis Quaid&#39;,   &#39;Daniel Stern&#39;,   &#39;Jackie Earle Haley&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Barabbas&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Richard Fleischer&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Arthur Kennedy&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Kiss Me Goodbye&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Robert Mulligan&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Jeff Bridges&#39;, &#39;Paul Dooley&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Fantasy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;A Slight Case of Larceny&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Don Weis&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Eddie Bracken&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Baby Face Nelson&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Don Siegel&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Cedric Hardwicke&#39;, &#39;Leo Gordon&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;I Can Get It for You Wholesale&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Michael Gordon&#39;],  &#39;actors&#39;: [&#39;Dan Dailey&#39;, &#39;George Sanders&#39;, &#39;Sam Jaffe&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Paradise Canyon&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Carl Pierson&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Reed Howes&#39;, &#39;Earle Hodgins&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &quot;It Can&#39;t Be!&quot;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Leonid Gayday&#39;],  &#39;actors&#39;: [&#39;Mikhail Pugovkin&#39;, &#39;Vyacheslav Nevinnyy&#39;, &#39;Mikhail Svetin&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Long Voyage Home&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Thomas Mitchell&#39;, &#39;Ian Hunter&#39;, &#39;Ward Bond&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;From the Earth to the Moon&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Byron Haskin&#39;],  &#39;actors&#39;: [&#39;Joseph Cotten&#39;, &#39;George Sanders&#39;, &#39;Don Dubbins&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Fantasy&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Hondo&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ward Bond&#39;, &#39;Michael Pate&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Convoy&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Sam Peckinpah&#39;],  &#39;actors&#39;: [&#39;Kris Kristofferson&#39;, &#39;Ernest Borgnine&#39;, &#39;Burt Young&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &quot;Everything&#39;s Ducky&quot;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 4.7,  &#39;directors&#39;: [&#39;Don Taylor&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Buddy Hackett&#39;, &#39;Jackie Cooper&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Smith!&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&quot;Michael O&#39;Herlihy&quot;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Dean Jagger&#39;, &#39;Keenan Wynn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;True Colors&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Herbert Ross&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;James Spader&#39;, &#39;Mandy Patinkin&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Repossessed&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Bob Logan&#39;],  &#39;actors&#39;: [&#39;Leslie Nielsen&#39;, &#39;Ned Beatty&#39;, &#39;Anthony Starke&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Fantasy&#39;, &#39;Horror&#39;]}, {&#39;title&#39;: &#39;The Boston Strangler&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Richard Fleischer&#39;],  &#39;actors&#39;: [&#39;Tony Curtis&#39;, &#39;Henry Fonda&#39;, &#39;George Kennedy&#39;, &#39;Mike Kellin&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Diamond Arm&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 8.5,  &#39;directors&#39;: [&#39;Leonid Gayday&#39;],  &#39;actors&#39;: [&#39;Yuriy Nikulin&#39;, &#39;Andrey Mironov&#39;, &#39;Anatoliy Papanov&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Best of the Best&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Robert Radler&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;James Earl Jones&#39;, &#39;Phillip Rhee&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;The Mind Reader&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Roy Del Ruth&#39;],  &#39;actors&#39;: [&#39;Warren William&#39;, &#39;Allen Jenkins&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Hatari!&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Howard Hawks&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Hardy Krüger&#39;, &#39;Red Buttons&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Night Walker&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;William Castle&#39;],  &#39;actors&#39;: [&#39;Robert Taylor&#39;, &#39;Hayden Rorke&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Yamato Takeru&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Takao Okawara&#39;],  &#39;actors&#39;: [&#39;Masahiro Takashima&#39;, &#39;Hiroshi Fujioka&#39;, &#39;Hiroshi Abe&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Till the End of Time&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Edward Dmytryk&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Guy Madison&#39;, &#39;Bill Williams&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Telegraph Trail&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Tenny Wright&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Duke&#39;, &#39;Frank McHugh&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Pather Panchali&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 8.4,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Kanu Bannerjee&#39;, &#39;Subir Banerjee&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Lolly-Madonna XXX&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Richard C. Sarafian&#39;],  &#39;actors&#39;: [&#39;Rod Steiger&#39;, &#39;Robert Ryan&#39;, &#39;Jeff Bridges&#39;, &#39;Scott Wilson&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Reunion at Fairborough&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Herbert Wise&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Red Buttons&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;She Wore a Yellow Ribbon&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;John Agar&#39;, &#39;Ben Johnson&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Le Tigre se parfume à la dynamite&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Claude Chabrol&#39;],  &#39;actors&#39;: [&#39;Roger Hanin&#39;, &#39;Michel Bouquet&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;The Morning After&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Sidney Lumet&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Raul Julia&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Mystery&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Last of the Mohicans&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Henry Wilcoxon&#39;, &#39;Bruce Cabot&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Beginning or the End&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Norman Taurog&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;Robert Walker&#39;, &#39;Tom Drake&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Radioland Murders&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Mel Smith&#39;],  &#39;actors&#39;: [&#39;Brian Benben&#39;, &#39;Ned Beatty&#39;, &#39;George Burns&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Girl Crazy&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;Bert Wheeler&#39;, &#39;Robert Woolsey&#39;, &#39;Eddie Quillan&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Popsy Pop&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;Jean Herman&#39;],  &#39;actors&#39;: [&#39;Stanley Baker&#39;, &#39;Henri Charrière&#39;, &#39;Georges Aminel&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;New York, New York&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Martin Scorsese&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Lionel Stander&#39;, &#39;Barry Primus&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;The Trail of the Lonesome Pine&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Fred MacMurray&#39;, &#39;Henry Fonda&#39;, &#39;Fred Stone&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Woman Who Sinned&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 5.0,  &#39;directors&#39;: [&#39;Michael Switzer&#39;],  &#39;actors&#39;: [&#39;Tim Matheson&#39;, &#39;Michael Dudikoff&#39;, &#39;John Vernon&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Ghost and Mrs. Muir&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Joseph L. Mankiewicz&#39;],  &#39;actors&#39;: [&#39;Rex Harrison&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Ambush Bay&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Ron Winston&#39;],  &#39;actors&#39;: [&quot;Hugh O&#39;Brian&quot;,   &#39;Mickey Rooney&#39;,   &#39;James Mitchum&#39;,   &#39;Peter Masterson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Operation Pacific&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;George Waggner&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ward Bond&#39;, &#39;Scott Forbes&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Flying Leathernecks&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Nicholas Ray&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Robert Ryan&#39;, &#39;Don Taylor&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Cape Fear&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Martin Scorsese&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Nick Nolte&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Guns of Navarone&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;J. Lee Thompson&#39;],  &#39;actors&#39;: [&#39;David Niven&#39;, &#39;Gregory Peck&#39;, &#39;Anthony Quinn&#39;, &#39;Anthony Quayle&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &quot;Va&#39; dove ti porta il cuore&quot;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Cristina Comencini&#39;],  &#39;actors&#39;: [&#39;Massimo Ghini&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Switching Channels&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Ted Kotcheff&#39;],  &#39;actors&#39;: [&#39;Burt Reynolds&#39;, &#39;Christopher Reeve&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;New Frontier&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;George Sherman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ray Corrigan&#39;, &#39;Raymond Hatton&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Long Wait&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Victor Saville&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Charles Coburn&#39;, &#39;Gene Evans&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Treasure of the Silver Lake&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Harald Reinl&#39;],  &#39;actors&#39;: [&#39;Pierre Brice&#39;, &#39;Lex Barker&#39;, &#39;Herbert Lom&#39;, &#39;Götz George&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Something to Talk About&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Lasse Hallström&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Robert Duvall&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Blood Alley&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;John Wayne&#39;, &#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Paul Fix&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;]}, {&#39;title&#39;: &#39;Wyoming Outlaw&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;George Sherman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;,   &#39;Ray Corrigan&#39;,   &#39;Raymond Hatton&#39;,   &quot;Don &#39;Red&#39; Barry&quot;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Plunder of the Sun&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Francis L. Sullivan&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Sinbad, the Sailor&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Richard Wallace&#39;],  &#39;actors&#39;: [&#39;Douglas Fairbanks Jr.&#39;, &#39;Walter Slezak&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Fantasy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Godfather: Part II&#39;,  &#39;year&#39;: 1974,  &#39;rating&#39;: 9.0,  &#39;directors&#39;: [&#39;Francis Ford Coppola&#39;],  &#39;actors&#39;: [&#39;Al Pacino&#39;, &#39;Robert De Niro&#39;, &#39;Robert Duvall&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Runaway&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Michael Crichton&#39;],  &#39;actors&#39;: [&#39;Tom Selleck&#39;, &#39;Gene Simmons&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Locket&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;John Brahm&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Brian Aherne&#39;, &#39;Gene Raymond&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;TRON&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Steven Lisberger&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Bruce Boxleitner&#39;, &#39;David Warner&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Behold a Pale Horse&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Fred Zinnemann&#39;],  &#39;actors&#39;: [&#39;Gregory Peck&#39;,   &#39;Anthony Quinn&#39;,   &#39;Omar Sharif&#39;,   &#39;Raymond Pellegrin&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Racket&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Mel Ferrer&#39;,   &#39;John Cromwell&#39;,   &#39;Nicholas Ray&#39;,   &#39;Sherman Todd&#39;,   &#39;Tay Garnett&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Robert Ryan&#39;, &#39;William Talman&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Cowboy&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Delmer Daves&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Jack Lemmon&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The List of Adrian Messenger&#39;,  &#39;year&#39;: 1963,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;John Huston&#39;],  &#39;actors&#39;: [&#39;Kirk Douglas&#39;,   &#39;Robert Mitchum&#39;,   &#39;Tony Curtis&#39;,   &#39;Burt Lancaster&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Colossus of Rhodes&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Sergio Leone&#39;],  &#39;actors&#39;: [&#39;Rory Calhoun&#39;, &#39;Georges Marchal&#39;, &#39;Conrado San Martín&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Comancheros&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;John Wayne&#39;, &#39;Michael Curtiz&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Stuart Whitman&#39;, &#39;Nehemiah Persoff&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Fabulous Baker Boys&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Steve Kloves&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Beau Bridges&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Big City&#39;,  &#39;year&#39;: 1963,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Anil Chatterjee&#39;, &#39;Haren Chatterjee&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &quot;Don&#39;t Go Near the Water&quot;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Charles Walters&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Earl Holliman&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Somebody to Love&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Alexandre Rockwell&#39;],  &#39;actors&#39;: [&#39;Harvey Keitel&#39;, &#39;Anthony Quinn&#39;, &#39;Michael DeLorenzo&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Wild Party&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Harry Horner&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Arthur Franz&#39;, &#39;Jay Robinson&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Grifters&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Stephen Frears&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Jan Munroe&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Presenting Lily Mars&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Norman Taurog&#39;],  &#39;actors&#39;: [&#39;Van Heflin&#39;, &#39;Richard Carlson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Last of the Secret Agents?&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Norman Abbott&#39;],  &#39;actors&#39;: [&#39;Marty Allen&#39;, &#39;Steve Rossi&#39;, &#39;John Williams&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Changeling&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Peter Medak&#39;],  &#39;actors&#39;: [&#39;George C. Scott&#39;, &#39;Melvyn Douglas&#39;],  &#39;genres&#39;: [&#39;Horror&#39;]}, {&#39;title&#39;: &#39;Charulata&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Soumitra Chatterjee&#39;, &#39;Shailen Mukherjee&#39;, &#39;Shyamal Ghoshal&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Stars&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Konrad Wolf&#39;],  &#39;actors&#39;: [&#39;Jürgen Frohriep&#39;, &#39;Erik S. Klein&#39;, &#39;Stefan Pejchev&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Waco&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;R.G. Springsteen&#39;],  &#39;actors&#39;: [&#39;Howard Keel&#39;, &#39;Brian Donlevy&#39;, &#39;Wendell Corey&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Last Days of Frankie the Fly&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Peter Markle&#39;],  &#39;actors&#39;: [&#39;Dennis Hopper&#39;, &#39;Michael Madsen&#39;, &#39;Kiefer Sutherland&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Virginian&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Stuart Gilmore&#39;],  &#39;actors&#39;: [&#39;Joel McCrea&#39;, &#39;Brian Donlevy&#39;, &#39;Sonny Tufts&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Naughty Girl&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Michel Boisrond&#39;],  &#39;actors&#39;: [&#39;Jean Bretonnière&#39;, &#39;Mischa Auer&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Chimes at Midnight&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Orson Welles&#39;],  &#39;actors&#39;: [&#39;Orson Welles&#39;, &#39;John Gielgud&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Battle of the Bulge&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Ken Annakin&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Robert Shaw&#39;, &#39;Robert Ryan&#39;, &#39;Dana Andrews&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Night the Lights Went Out in Georgia&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Ron Maxwell&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Mark Hamill&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Our Winning Season&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Joseph Ruben&#39;],  &#39;actors&#39;: [&#39;Scott Jacoby&#39;, &#39;Dennis Quaid&#39;, &#39;Robert Wahler&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Jack Bull&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;John Badham&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;John Goodman&#39;, &#39;L.Q. Jones&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Go West, Young Lady&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Frank R. Strayer&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Charles Ruggles&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Music&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;A Family Affair&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Lionel Barrymore&#39;, &#39;Eric Linden&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Shootist&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Don Siegel&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ron Howard&#39;, &#39;James Stewart&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Girl Crazy&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Busby Berkeley&#39;, &#39;Norman Taurog&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Gil Stratton&#39;, &#39;Robert E. Strickland&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Sophia Loren: Her Own Story&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Mel Stuart&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;John Gavin&#39;, &#39;Rip Torn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;My Little Pony: The Movie&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Mike Joens&#39;],  &#39;actors&#39;: [&#39;Danny DeVito&#39;],  &#39;genres&#39;: [&#39;Animation&#39;, &#39;Family&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &quot;Dead Man&#39;s Revenge&quot;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Alan J. Levi&#39;],  &#39;actors&#39;: [&#39;Bruce Dern&#39;,   &#39;Michael Ironside&#39;,   &#39;Vondie Curtis-Hall&#39;,   &#39;Keith Coulouris&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Seven Cities of Gold&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Robert D. Webb&#39;],  &#39;actors&#39;: [&#39;Richard Egan&#39;,   &#39;Anthony Quinn&#39;,   &#39;Michael Rennie&#39;,   &#39;Jeffrey Hunter&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Macao&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Josef von Sternberg&#39;, &#39;Nicholas Ray&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;William Bendix&#39;, &#39;Thomas Gomez&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Lusty Men&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Robert Parrish&#39;, &#39;Nicholas Ray&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Arthur Kennedy&#39;, &#39;Arthur Hunnicutt&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Angel Face&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Otto Preminger&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Herbert Marshall&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Son of Fury: The Story of Benjamin Blake&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;John Cromwell&#39;],  &#39;actors&#39;: [&#39;Tyrone Power&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Come See the Paradise&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Alan Parker&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Sab Shimono&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Pit Stop&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Jack Hill&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;Richard Davalos&#39;, &#39;Sid Haig&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Born to the West&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Charles Barton&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Johnny Mack Brown&#39;, &#39;John Patterson&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Comanche Station&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Rand Brooks&#39;,   &#39;Randolph Scott&#39;,   &#39;Claude Akins&#39;,   &#39;Skip Homeier&#39;,   &#39;Richard Rust&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Wildflowers&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Melissa Painter&#39;],  &#39;actors&#39;: [&#39;Tomas Arana&#39;, &#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Magnificent Dope&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Walter Lang&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Don Ameche&#39;, &#39;Edward Everett Horton&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Cariboo Trail&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Edwin L. Marin&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &quot;George &#39;Gabby&#39; Hayes&quot;, &#39;Bill Williams&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Mr. Soft Touch&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Henry Levin&#39;, &#39;Gordon Douglas&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;John Ireland&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;My Neighbor Totoro&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Hayao Miyazaki&#39;],  &#39;actors&#39;: [&#39;Hitoshi Takagi&#39;, &#39;Shigesato Itoi&#39;],  &#39;genres&#39;: [&#39;Animation&#39;, &#39;Family&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;The Good Guys and the Bad Guys&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Burt Kennedy&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;,   &#39;George Kennedy&#39;,   &#39;Martin Balsam&#39;,   &#39;David Carradine&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;A Boy Called Hate&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Mitch Marcus&#39;],  &#39;actors&#39;: [&#39;Scott Caan&#39;,   &#39;Lee Nashold&#39;,   &#39;Kevin Michael Richardson&#39;,   &#39;James Caan&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Babyfever&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Victoria Foyt&#39;, &#39;Henry Jaglom&#39;],  &#39;actors&#39;: [&#39;Matt Salinger&#39;, &#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Superman II&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Richard Donner&#39;, &#39;Richard Lester&#39;],  &#39;actors&#39;: [&#39;Gene Hackman&#39;, &#39;Christopher Reeve&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Destructors&#39;,  &#39;year&#39;: 1974,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Robert Parrish&#39;],  &#39;actors&#39;: [&#39;Michael Caine&#39;, &#39;Anthony Quinn&#39;, &#39;James Mason&#39;, &#39;Maurice Ronet&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Sundown&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Bruce Cabot&#39;, &#39;George Sanders&#39;, &#39;Harry Carey&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Chapter Two&#39;,  &#39;year&#39;: 1979,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Robert Moore&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Joseph Bologna&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;12 Angry Men&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 8.9,  &#39;directors&#39;: [&#39;Sidney Lumet&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Lee J. Cobb&#39;, &#39;Martin Balsam&#39;, &#39;John Fiedler&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Barbarian and the Geisha&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;John Huston&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Sam Jaffe&#39;, &#39;Sô Yamamura&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;American Heart&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Martin Bell&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Edward Furlong&#39;, &#39;John Boylan&#39;, &#39;Greg Sevigny&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Little Ayse and the Magic Dwarfs in the Land of Dreams&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Tunç Basaran&#39;],  &#39;actors&#39;: [&#39;Süleyman Turan&#39;, &#39;Metin Serezli&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Family&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;80 Steps to Jonah&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Gerd Oswald&#39;],  &#39;actors&#39;: [&#39;Wayne Newton&#39;, &#39;Mickey Rooney&#39;, &#39;Keenan Wynn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Flight Lieutenant&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Sidney Salkow&#39;],  &#39;actors&#39;: [&quot;Pat O&#39;Brien&quot;, &#39;Glenn Ford&#39;, &#39;Jonathan Hale&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;1900&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Bernardo Bertolucci&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Gérard Depardieu&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Where Danger Lives&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Claude Rains&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Elvis&#39;,  &#39;year&#39;: 1979,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;John Carpenter&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Bing Russell&#39;, &#39;Robert Gray&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Return of the Bad Men&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Robert Ryan&#39;, &quot;George &#39;Gabby&#39; Hayes&quot;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Return of October&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Joseph H. Lewis&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Albert Sharpe&#39;, &#39;James Gleason&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Seventh Sin&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Ronald Neame&#39;, &#39;Vincente Minnelli&#39;],  &#39;actors&#39;: [&#39;Bill Travers&#39;, &#39;George Sanders&#39;, &#39;Jean-Pierre Aumont&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Summer Storm&#39;,  &#39;year&#39;: 1944,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Douglas Sirk&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Edward Everett Horton&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;High, Wide and Handsome&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Rouben Mamoulian&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Spoilers&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;John Wayne&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Winds of the Wasteland&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Mack V. Wright&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Lew Kelly&#39;, &#39;Douglas Cosgrove&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Follow the Fleet&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Mark Sandrich&#39;],  &#39;actors&#39;: [&#39;Fred Astaire&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Odyssey of the Pacific&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Fernando Arrabal&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Jonathan Starr&#39;, &#39;Ky Huot Uk&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;]}, {&#39;title&#39;: &quot;In Harm&#39;s Way&quot;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Otto Preminger&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Kirk Douglas&#39;, &#39;Tom Tryon&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Stroker Ace&#39;,  &#39;year&#39;: 1983,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Hal Needham&#39;],  &#39;actors&#39;: [&#39;Burt Reynolds&#39;, &#39;Ned Beatty&#39;, &#39;Jim Nabors&#39;, &#39;Parker Stevenson&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Garden of the Dead&#39;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;John Hayes&#39;],  &#39;actors&#39;: [&#39;Marland Proctor&#39;,   &#39;Philip Kenneally&#39;,   &#39;Duncan McLeod&#39;,   &#39;John Dullaghan&#39;,   &#39;John Dennis&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Sorry, Wrong Number&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Tony Wharmby&#39;],  &#39;actors&#39;: [&#39;Carl Weintraub&#39;, &#39;Patrick Macnee&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Fan&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Otto Preminger&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Richard Greene&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Wyatt Earp&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Lawrence Kasdan&#39;],  &#39;actors&#39;: [&#39;Kevin Costner&#39;, &#39;Dennis Quaid&#39;, &#39;Gene Hackman&#39;, &#39;David Andrews&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Doctor Who&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Geoffrey Sax&#39;],  &#39;actors&#39;: [&#39;Paul McGann&#39;, &#39;Eric Roberts&#39;, &#39;Sylvester McCoy&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Huo yun chuan qi&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Woo-Ping Yuen&#39;],  &#39;actors&#39;: [&#39;Gang Wu&#39;, &#39;Siu Chung Mok&#39;, &#39;Joe Chu&#39;, &#39;Lap-Man Sinn&#39;],  &#39;genres&#39;: [&#39;Action&#39;]}, {&#39;title&#39;: &#39;Dragon Ball: The Path to Power&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Shigeyasu Yamauchi&#39;],  &#39;actors&#39;: [&#39;Naoki Tatsuta&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Animation&#39;]}, {&#39;title&#39;: &#39;The Quatermass Xperiment&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Val Guest&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;Jack Warner&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Found&#39;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Hrishikesh Mukherjee&#39;],  &#39;actors&#39;: [&#39;Amitabh Bachchan&#39;, &#39;Ashok Kumar&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Rio Lobo&#39;,  &#39;year&#39;: 1970,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Howard Hawks&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Jorge Rivero&#39;, &#39;Jack Elam&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Wild Bill&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Walter Hill&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;John Hurt&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Visitors of the Night&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Jorge Montesi&#39;],  &#39;actors&#39;: [&#39;Stephen McHattie&#39;, &#39;Dale Midkiff&#39;],  &#39;genres&#39;: [&#39;Sci-Fi&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Rancho Deluxe&#39;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Frank Perry&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Sam Waterston&#39;, &#39;Clifton James&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Bombardier&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Richard Wallace&#39;, &#39;Lambert Hillyer&#39;],  &#39;actors&#39;: [&quot;Pat O&#39;Brien&quot;, &#39;Randolph Scott&#39;, &#39;Eddie Albert&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Youth of the Son&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Masaki Kobayashi&#39;],  &#39;actors&#39;: [&#39;Akira Ishihama&#39;, &#39;Chishû Ryû&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Big Steal&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Don Siegel&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;William Bendix&#39;, &#39;Patric Knowles&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Red Pony&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Lewis Milestone&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Louis Calhern&#39;, &#39;Shepperd Strudwick&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Violent Men&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Rudolph Maté&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Edward G. Robinson&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Mad Miss Manton&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Leigh Jason&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Sam Levene&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Andy Hardy Gets Spring Fever&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;W.S. Van Dyke&#39;],  &#39;actors&#39;: [&#39;Lewis Stone&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Babe: Pig in the City&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;George Miller&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;James Cromwell&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Every Afternoon&#39;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Joseph W. Sarno&#39;],  &#39;actors&#39;: [&#39;Peder Kinberg&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;I Wanted Wings&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Mitchell Leisen&#39;],  &#39;actors&#39;: [&#39;Ray Milland&#39;, &#39;William Holden&#39;, &#39;Wayne Morris&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Pittsburgh&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Lewis Seiler&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Randolph Scott&#39;, &#39;Frank Craven&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Fear and Desire&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Stanley Kubrick&#39;],  &#39;actors&#39;: [&#39;Frank Silvera&#39;, &#39;Kenneth Harp&#39;, &#39;Paul Mazursky&#39;, &#39;Stephen Coit&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Impact&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Arthur Lubin&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;Charles Coburn&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Farmer Takes a Wife&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Victor Fleming&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Charles Bickford&#39;, &#39;Slim Summerville&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Eight Men Out&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;John Sayles&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;,   &#39;Clifton James&#39;,   &#39;Michael Lerner&#39;,   &#39;Christopher Lloyd&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Requiem for a Heavyweight&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Ralph Nelson&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Jackie Gleason&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;The Captain from Köpenick&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Helmut Käutner&#39;],  &#39;actors&#39;: [&#39;Heinz Rühmann&#39;, &#39;Martin Held&#39;, &#39;Willy A. Kleinau&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Watch Me When I Kill&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Antonio Bido&#39;],  &#39;actors&#39;: [&#39;Corrado Pani&#39;, &#39;Franco Citti&#39;, &#39;Fernando Cerulli&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Fugitive&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Emilio Fernández&#39;, &#39;John Ford&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Pedro Armendáriz&#39;, &#39;J. Carrol Naish&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Gallant Journey&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Charles Ruggles&#39;, &#39;Henry Travers&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Wonderful Country&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Robert Parrish&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Gary Merrill&#39;, &#39;Albert Dekker&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Murder, Inc.&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Burt Balaban&#39;, &#39;Stuart Rosenberg&#39;],  &#39;actors&#39;: [&#39;Stuart Whitman&#39;, &#39;Henry Morgan&#39;, &#39;Peter Falk&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Slow Burn&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Matthew Chapman&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Dennis Lipscomb&#39;, &#39;Raymond J. Barry&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Sheepman&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;George Marshall&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Leslie Nielsen&#39;, &#39;Mickey Shaughnessy&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Love Is a Gun&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;David Hartwell&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;R. Lee Ermey&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Captain Kidd&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Rowland V. Lee&#39;],  &#39;actors&#39;: [&#39;Charles Laughton&#39;, &#39;Randolph Scott&#39;, &#39;Reginald Owen&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Final Analysis&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Phil Joanou&#39;],  &#39;actors&#39;: [&#39;Richard Gere&#39;, &#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;A Lawless Street&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Joseph H. Lewis&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Warner Anderson&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Serpent&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Henri Verneuil&#39;],  &#39;actors&#39;: [&#39;Yul Brynner&#39;, &#39;Henry Fonda&#39;, &#39;Dirk Bogarde&#39;, &#39;Philippe Noiret&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Magic of Lassie&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Don Chaffey&#39;],  &#39;actors&#39;: [&#39;James Stewart&#39;, &#39;Mickey Rooney&#39;, &#39;Pernell Roberts&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Call Me Madam&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Walter Lang&#39;],  &#39;actors&#39;: [&quot;Donald O&#39;Connor&quot;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;La Strada&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Federico Fellini&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Richard Basehart&#39;, &#39;Aldo Silvani&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Falling in Love&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Ulu Grosbard&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Harvey Keitel&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Escape from L.A.&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;John Carpenter&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Steve Buscemi&#39;, &#39;Stacy Keach&#39;, &#39;Peter Fonda&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Going Home&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Herbert B. Leonard&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Jan-Michael Vincent&#39;, &#39;Jason Bernard&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;One in a Million: The Ron LeFlore Story&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;William A. Graham&#39;],  &#39;actors&#39;: [&#39;LeVar Burton&#39;, &#39;Paul Benjamin&#39;, &#39;James Luisi&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Shoulder Arms&#39;,  &#39;year&#39;: 1918,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;L.A. Blaisdell&#39;,   &#39;Charles Chaplin&#39;,   &#39;Syd Chaplin&#39;,   &#39;Loyal Underwood&#39;,   &#39;Henry Bergman&#39;,   &#39;Tom Wilson&#39;,   &#39;Albert Austin&#39;,   &#39;Jack Wilson&#39;,   &#39;W.J. Allen&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Down by Law&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Jim Jarmusch&#39;],  &#39;actors&#39;: [&#39;Tom Waits&#39;, &#39;John Lurie&#39;, &#39;Roberto Benigni&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Rounders&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Burt Kennedy&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Untouchables&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Brian De Palma&#39;],  &#39;actors&#39;: [&#39;Kevin Costner&#39;,   &#39;Sean Connery&#39;,   &#39;Robert De Niro&#39;,   &#39;Charles Martin Smith&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Birth of the Blues&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Victor Schertzinger&#39;],  &#39;actors&#39;: [&#39;Bing Crosby&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Music&#39;]}, {&#39;title&#39;: &quot;Thompson&#39;s Last Run&quot;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Jerrold Freedman&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Wilford Brimley&#39;, &#39;Guy Boyd&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Grosse Pointe Blank&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;George Armitage&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Dan Aykroyd&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Abilene Town&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Edwin L. Marin&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Edgar Buchanan&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Rude Awakening&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Aaron Russo&#39;, &#39;David Greenwalt&#39;],  &#39;actors&#39;: [&#39;Cheech Marin&#39;, &#39;Eric Roberts&#39;, &#39;Robert Carradine&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Night and the City&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Irwin Winkler&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Cliff Gorman&#39;, &#39;Alan King&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Iceman Cometh&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;John Frankenheimer&#39;],  &#39;actors&#39;: [&#39;Lee Marvin&#39;, &#39;Fredric March&#39;, &#39;Robert Ryan&#39;, &#39;Jeff Bridges&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;My Name Is Nobody&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Tonino Valerii&#39;],  &#39;actors&#39;: [&#39;Terence Hill&#39;, &#39;Henry Fonda&#39;, &#39;Jean Martin&#39;, &#39;R.G. Armstrong&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Return of Frank James&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Fritz Lang&#39;],  &#39;actors&#39;: [&#39;John Carradine&#39;, &#39;Henry Fonda&#39;, &#39;Jackie Cooper&#39;, &#39;Henry Hull&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;History&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Killing&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;Stanley Kubrick&#39;],  &#39;actors&#39;: [&#39;Sterling Hayden&#39;, &#39;Vince Edwards&#39;, &#39;Jay C. Flippen&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Convicted&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Henry Levin&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Broderick Crawford&#39;, &#39;Millard Mitchell&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Nous sommes tous des assassins&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;André Cayatte&#39;],  &#39;actors&#39;: [&#39;Marcel Mouloudji&#39;,   &#39;Raymond Pellegrin&#39;,   &#39;Antoine Balpêtré&#39;,   &#39;Julien Verdier&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Lust for Gold&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;S. Sylvan Simon&#39;, &#39;George Marshall&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Gig Young&#39;, &#39;William Prince&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Crime&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Midway&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Jack Smight&#39;],  &#39;actors&#39;: [&#39;Charlton Heston&#39;, &#39;Henry Fonda&#39;, &#39;James Coburn&#39;, &#39;Glenn Ford&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Message&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Moustapha Akkad&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Michael Ansara&#39;, &#39;Johnny Sekka&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Hide in Plain Sight&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;James Caan&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Robert Viharo&#39;, &#39;Joe Grifasi&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;West of the Divide&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;Lafe McKee&#39;,   &#39;John Wayne&#39;,   &quot;George &#39;Gabby&#39; Hayes&quot;,   &#39;Lloyd Whitlock&#39;,   &#39;Yakima Canutt&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;I Cover the War!&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Arthur Lubin&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Don Barclay&#39;, &#39;Charles Brokaw&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Dick Tracy&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Alan James&#39;, &#39;Ray Taylor&#39;],  &#39;actors&#39;: [&#39;Ralph Byrd&#39;, &#39;Smiley Burnette&#39;, &#39;Lee Van Atta&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Paras-Pathar&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Tulsi Chakraborty&#39;, &#39;Kali Bannerjee&#39;, &#39;Gangapada Basu&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Redskin&#39;,  &#39;year&#39;: 1929,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Victor Schertzinger&#39;],  &#39;actors&#39;: [&#39;Richard Dix&#39;, &#39;Tully Marshall&#39;, &#39;George Regas&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;HouseSitter&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Frank Oz&#39;],  &#39;actors&#39;: [&#39;Steve Martin&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Unknown Cyclist&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Bernard Salzmann&#39;],  &#39;actors&#39;: [&#39;Vincent Spano&#39;, &#39;Danny Nucci&#39;, &#39;Stephen Spinella&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Desire Me&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Victor Saville&#39;,   &#39;Jack Conway&#39;,   &#39;George Cukor&#39;,   &#39;Mervyn LeRoy&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Richard Hart&#39;, &#39;Morris Ankrum&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Raggedy Man&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Jack Fisk&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Sam Shepard&#39;, &#39;William Sanderson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Big Wheel&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Edward Ludwig&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Thomas Mitchell&#39;, &quot;Michael O&#39;Shea&quot;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Tex&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Tim Hunter&#39;],  &#39;actors&#39;: [&#39;Matt Dillon&#39;, &#39;Jim Metzler&#39;, &#39;Bill McKinney&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;That Championship Season&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Jason Miller&#39;],  &#39;actors&#39;: [&#39;Bruce Dern&#39;, &#39;Stacy Keach&#39;, &#39;Robert Mitchum&#39;, &#39;Martin Sheen&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Shakespeare in... and Out&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Peter Shushtari&#39;],  &#39;actors&#39;: [&#39;Roger Shank&#39;,   &#39;Lawrence Trilling&#39;,   &#39;J.D. Smith&#39;,   &#39;William Neenan&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Enemy Mine&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Wolfgang Petersen&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;,   &#39;Louis Gossett Jr.&#39;,   &#39;Brion James&#39;,   &#39;Richard Marcus&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Best of Times&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Roger Spottiswoode&#39;],  &#39;actors&#39;: [&#39;Robin Williams&#39;, &#39;Kurt Russell&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Souls at Sea&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Gary Cooper&#39;, &#39;George Raft&#39;, &#39;Henry Wilcoxon&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;]}, {&#39;title&#39;: &#39;Horatio Hornblower: The Duchess and the Devil&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;Andrew Grieve&#39;],  &#39;actors&#39;: [&#39;Ioan Gruffudd&#39;, &#39;Robert Lindsay&#39;, &#39;Christopher Fulford&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Horatio Hornblower: The Fire Ship&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Andrew Grieve&#39;],  &#39;actors&#39;: [&#39;Ioan Gruffudd&#39;, &#39;Robert Lindsay&#39;, &#39;Denis Lawson&#39;, &#39;Ian McNeice&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Horatio Hornblower: The Wrong War&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Andrew Grieve&#39;],  &#39;actors&#39;: [&#39;John Shrapnel&#39;,   &#39;Ioan Gruffudd&#39;,   &#39;Robert Lindsay&#39;,   &#39;Antony Sher&#39;,   &#39;Samuel West&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Man Hunt&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Fritz Lang&#39;],  &#39;actors&#39;: [&#39;Walter Pidgeon&#39;, &#39;George Sanders&#39;, &#39;John Carradine&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;A Man Betrayed&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;John H. Auer&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Edward Ellis&#39;, &#39;Wallace Ford&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Shaft in Africa&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;John Guillermin&#39;],  &#39;actors&#39;: [&#39;Richard Roundtree&#39;, &#39;Frank Finlay&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Rollercoaster&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;James Goldstone&#39;],  &#39;actors&#39;: [&#39;George Segal&#39;,   &#39;Timothy Bottoms&#39;,   &#39;Richard Widmark&#39;,   &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Shoes of the Fisherman&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Michael Anderson&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;,   &#39;Laurence Olivier&#39;,   &#39;Oskar Werner&#39;,   &#39;David Janssen&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Blockade&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;William Dieterle&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Leo Carrillo&#39;, &#39;John Halliday&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Eddie Cantor Story&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Alfred E. Green&#39;],  &#39;actors&#39;: [&#39;Keefe Brasselle&#39;, &#39;Arthur Franz&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;The Savage Innocents&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Nicholas Ray&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Carlo Giustini&#39;, &quot;Peter O&#39;Toole&quot;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Comrades of Summer&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Tommy Lee Wallace&#39;],  &#39;actors&#39;: [&#39;Joe Mantegna&#39;, &#39;Michael Lerner&#39;, &#39;Mark Rolston&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &quot;It&#39;s My Party&quot;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Randal Kleiser&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Gregory Harrison&#39;, &#39;Bruce Davison&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Love Is a Ball&#39;,  &#39;year&#39;: 1963,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;David Swift&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Charles Boyer&#39;, &#39;Ricardo Montalban&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Roberta&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;Fred Astaire&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;War and Peace&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;King Vidor&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Mel Ferrer&#39;, &#39;Vittorio Gassman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Savior&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Predrag Antonijevic&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Pascal Rollin&#39;, &#39;Catlin Foster&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Dear Heart&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Delbert Mann&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Michael Anderson Jr.&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Freak Talks About Sex&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Paul Todisco&#39;],  &#39;actors&#39;: [&#39;Steve Zahn&#39;, &#39;Josh Hamilton&#39;, &#39;David Kinney&#39;, &#39;Wayne Federman&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Pearls and Swine&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Óskar Jónasson&#39;],  &#39;actors&#39;: [&#39;Ingvar Eggert Sigurðsson&#39;,   &#39;Jóhann Sigurðarson&#39;,   &#39;Ólafur Darri Ólafsson&#39;,   &#39;Þröstur Leó Gunnarsson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Destroyer&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;William A. Seiter&#39;, &#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Edward G. Robinson&#39;, &#39;Glenn Ford&#39;, &#39;Edgar Buchanan&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;A Stolen Life&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Curtis Bernhardt&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Dane Clark&#39;, &#39;Walter Brennan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Love, Cheat &amp; Steal&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;William Curran&#39;],  &#39;actors&#39;: [&#39;John Lithgow&#39;, &#39;Eric Roberts&#39;, &#39;Richard Edson&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;White Banners&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Edmund Goulding&#39;],  &#39;actors&#39;: [&#39;Claude Rains&#39;, &#39;Jackie Cooper&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Snow Queen&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Päivi Hartzell&#39;],  &#39;actors&#39;: [&#39;Sebastian Kaatrasalo&#39;],  &#39;genres&#39;: [&#39;Family&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;The Fisher King&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Terry Gilliam&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Robin Williams&#39;, &#39;Adam Bryant&#39;, &#39;Paul Lombardi&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;The River Wild&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Curtis Hanson&#39;],  &#39;actors&#39;: [&#39;Kevin Bacon&#39;, &#39;David Strathairn&#39;, &#39;Joseph Mazzello&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &quot;Thoroughbreds Don&#39;t Cry&quot;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Alfred E. Green&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;C. Aubrey Smith&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Curse of the Fly&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Don Sharp&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;George Baker&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Horror&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;This Is My Affair&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;Robert Taylor&#39;, &#39;Victor McLaglen&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Star Wars: Episode I - The Phantom Menace&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;George Lucas&#39;],  &#39;actors&#39;: [&#39;Ewan McGregor&#39;, &#39;Liam Neeson&#39;, &#39;Jake Lloyd&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Captain Ron&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Thom Eberhardt&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Martin Short&#39;, &#39;Benjamin Salisbury&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Angel and the Badman&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;James Edward Grant&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Harry Carey&#39;, &#39;Bruce Cabot&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Last American Hero&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Lamont Johnson&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Hot Saturday&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;Cary Grant&#39;, &#39;Randolph Scott&#39;, &#39;Edward Woods&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Alambrista!&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Robert M. Young&#39;],  &#39;actors&#39;: [&#39;Domingo Ambriz&#39;, &#39;Trinidad Silva&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Bang the Drum Slowly&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;John D. Hancock&#39;],  &#39;actors&#39;: [&#39;Michael Moriarty&#39;,   &#39;Robert De Niro&#39;,   &#39;Vincent Gardenia&#39;,   &#39;Phil Foster&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Andy Hardy Meets Debutante&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Lewis Stone&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;June Bride&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Bretaigne Windust&#39;],  &#39;actors&#39;: [&#39;Robert Montgomery&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &quot;The People Against O&#39;Hara&quot;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;John Sturges&#39;],  &#39;actors&#39;: [&#39;Spencer Tracy&#39;, &quot;Pat O&#39;Brien&quot;, &#39;John Hodiak&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Dream of Kings&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Daniel Mann&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Sam Levene&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Strangler of the Swamp&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Frank Wisbar&#39;],  &#39;actors&#39;: [&#39;Robert Barrat&#39;, &#39;Blake Edwards&#39;, &#39;Charles Middleton&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Fantasy&#39;, &#39;Horror&#39;]}, {&#39;title&#39;: &#39;Story of G.I. Joe&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;Burgess Meredith&#39;,   &#39;Robert Mitchum&#39;,   &#39;Freddie Steele&#39;,   &#39;Wally Cassell&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Daisy Kenyon&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Otto Preminger&#39;],  &#39;actors&#39;: [&#39;Dana Andrews&#39;, &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Stowaway to the Moon&#39;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Andrew V. McLaglen&#39;],  &#39;actors&#39;: [&#39;Lloyd Bridges&#39;, &#39;Jeremy Slate&#39;, &#39;Jim McMullan&#39;, &#39;Morgan Paull&#39;],  &#39;genres&#39;: [&#39;Family&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &quot;Hitman&#39;s Run&quot;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Mark L. Lester&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Esteban Powell&#39;, &#39;C. Thomas Howell&#39;],  &#39;genres&#39;: [&#39;Action&#39;]}, {&#39;title&#39;: &#39;Wiped-Out Footprints&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Enrique Gabriel&#39;],  &#39;actors&#39;: [&#39;Federico Luppi&#39;, &#39;Sergi Calleja&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &quot;Donovan&#39;s Reef&quot;,  &#39;year&#39;: 1963,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Lee Marvin&#39;, &#39;Jack Warden&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Enemy of the World&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Tabrez Hashmi&#39;, &#39;Mehmood&#39;],  &#39;actors&#39;: [&#39;Mehmood&#39;, &#39;Manzoor Ali&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Killer in the Family&#39;,  &#39;year&#39;: 1983,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Richard T. Heffron&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;James Spader&#39;, &#39;Lance Kerwin&#39;, &#39;Eric Stoltz&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The King of Comedy&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Martin Scorsese&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Jerry Lewis&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Hold That Kiss&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Edwin L. Marin&#39;],  &#39;actors&#39;: [&quot;Dennis O&#39;Keefe&quot;, &#39;Mickey Rooney&#39;, &#39;George Barbier&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Nest of Vipers&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Tonino Cervi&#39;],  &#39;actors&#39;: [&#39;Paolo Bonacelli&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Action in Arabia&#39;,  &#39;year&#39;: 1944,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Léonide Moguy&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Gene Lockhart&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Riders of Destiny&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;Heinie Conklin&#39;,   &#39;John Wayne&#39;,   &#39;Forrest Taylor&#39;,   &quot;George &#39;Gabby&#39; Hayes&quot;,   &#39;Al St. John&#39;],  &#39;genres&#39;: [&#39;Music&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &quot;We Can&#39;t Go Home Again&quot;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Nicholas Ray&#39;],  &#39;actors&#39;: [&#39;Richard Bock&#39;, &#39;Tom Farrell&#39;, &#39;Danny Fisher&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &quot;Cutter&#39;s Way&quot;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Ivan Passer&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;John Heard&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;I Love Melvin&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Don Weis&#39;],  &#39;actors&#39;: [&quot;Donald O&#39;Connor&quot;, &#39;Richard Anderson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;How the West Was Won&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;John Ford&#39;,   &#39;Richard Thorpe&#39;,   &#39;George Marshall&#39;,   &#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;James Stewart&#39;, &#39;John Wayne&#39;, &#39;Gregory Peck&#39;, &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Lucky Texan&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;Gordon De Main&#39;,   &#39;John Wayne&#39;,   &quot;George &#39;Gabby&#39; Hayes&quot;,   &#39;Lloyd Whitlock&#39;,   &#39;Yakima Canutt&#39;,   &#39;Eddie Parker&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Solomon and Sheba&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;King Vidor&#39;],  &#39;actors&#39;: [&#39;Yul Brynner&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Q &amp; A&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Sidney Lumet&#39;],  &#39;actors&#39;: [&#39;Nick Nolte&#39;,   &#39;Timothy Hutton&#39;,   &#39;Armand Assante&#39;,   &quot;Patrick O&#39;Neal&quot;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;This Land Is Mine&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Jean Renoir&#39;],  &#39;actors&#39;: [&#39;Charles Laughton&#39;, &#39;George Sanders&#39;, &#39;Walter Slezak&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Back to Bataan&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Edward Dmytryk&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Saint of Fort Washington&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Tim Hunter&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Matt Dillon&#39;, &#39;Rick Aviles&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Rage in Heaven&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Richard Thorpe&#39;, &#39;Robert B. Sinclair&#39;, &#39;W.S. Van Dyke&#39;],  &#39;actors&#39;: [&#39;Robert Montgomery&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Not as a Stranger&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Stanley Kramer&#39;],  &#39;actors&#39;: [&#39;Frank Sinatra&#39;, &#39;Robert Mitchum&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Slither&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Howard Zieff&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Peter Boyle&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Late George Apley&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Joseph L. Mankiewicz&#39;],  &#39;actors&#39;: [&#39;Ronald Colman&#39;, &#39;Richard Haydn&#39;, &#39;Charles Russell&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The American Success Company&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;William Richert&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Ned Beatty&#39;, &#39;Steven Keats&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Young Man with Ideas&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Mitchell Leisen&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Hunley&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;John Gray&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;,   &#39;Donald Sutherland&#39;,   &#39;Alex Jennings&#39;,   &#39;Chris Bauer&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Beloved&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Jonathan Demme&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Emil Pinnock&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Horror&#39;]}, {&#39;title&#39;: &#39;Being John Malkovich&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Spike Jonze&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;John Malkovich&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Capricorn One&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Peter Hyams&#39;],  &#39;actors&#39;: [&#39;Elliott Gould&#39;, &#39;James Brolin&#39;, &#39;Sam Waterston&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Santa Fe Stampede&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;George Sherman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ray Corrigan&#39;, &#39;Max Terhune&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Great Balls of Fire!&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Jim McBride&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;John Doe&#39;, &#39;Stephen Tobolowsky&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Supernatural&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Victor Halperin&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Alan Dinehart&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;El kárate, el Colt y el impostor&#39;,  &#39;year&#39;: 1974,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Antonio Margheriti&#39;],  &#39;actors&#39;: [&#39;Lee Van Cleef&#39;, &#39;Lieh Lo&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Scugnizzi&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Nanni Loy&#39;],  &#39;actors&#39;: [&#39;Leo Gullotta&#39;,   &#39;Francesco Allocca&#39;,   &#39;Gaetano Amato&#39;,   &#39;Pino Ammendola&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Return of the Living Dead&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&quot;Dan O&#39;Bannon&quot;],  &#39;actors&#39;: [&#39;Clu Gulager&#39;, &#39;James Karen&#39;, &#39;Don Calfa&#39;, &#39;Thom Mathews&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Lethal Weapon 4&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Richard Donner&#39;],  &#39;actors&#39;: [&#39;Mel Gibson&#39;, &#39;Danny Glover&#39;, &#39;Joe Pesci&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The World of Apu&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Soumitra Chatterjee&#39;, &#39;Alok Chakravarty&#39;, &#39;Swapan Mukherjee&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Kampf um Rom II - Der Verrat&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Robert Siodmak&#39;, &#39;Sergiu Nicolaescu&#39;, &#39;Andrew Marton&#39;],  &#39;actors&#39;: [&#39;Laurence Harvey&#39;, &#39;Orson Welles&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Another Face&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Christy Cabanne&#39;],  &#39;actors&#39;: [&#39;Wallace Ford&#39;, &#39;Brian Donlevy&#39;, &#39;Erik Rhodes&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Lawless Nineties&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Joseph Kane&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Harry Woods&#39;, &quot;George &#39;Gabby&#39; Hayes&quot;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Breakdown&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Jonathan Mostow&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;J.T. Walsh&#39;, &#39;M.C. Gainey&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Nowhere Land&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 4.3,  &#39;directors&#39;: [&#39;Rupert Hitzig&#39;],  &#39;actors&#39;: [&#39;Peter Dobson&#39;, &#39;Jon Polito&#39;, &#39;Francesco Quinn&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Tequila Sunrise&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Robert Towne&#39;],  &#39;actors&#39;: [&#39;Mel Gibson&#39;, &#39;Kurt Russell&#39;, &#39;Raul Julia&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Greetings&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Brian De Palma&#39;],  &#39;actors&#39;: [&#39;Jonathan Warden&#39;,   &#39;Robert De Niro&#39;,   &#39;Gerrit Graham&#39;,   &#39;Richard Hamilton&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Dark Angel&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Robert Iscove&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Linden Ashby&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Trainspotting&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Danny Boyle&#39;],  &#39;actors&#39;: [&#39;Ewan McGregor&#39;,   &#39;Ewen Bremner&#39;,   &#39;Jonny Lee Miller&#39;,   &#39;Kevin McKidd&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Man from Del Rio&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Harry Horner&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Peter Whitney&#39;, &#39;Douglas Fowley&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Ten Wanted Men&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;H. Bruce Humberstone&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Richard Boone&#39;, &#39;Alfonso Bedoya&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Carson City&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;André De Toth&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Raymond Massey&#39;, &#39;Richard Webb&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;One Shoe Makes It Murder&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;William Hale&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Mel Ferrer&#39;, &#39;José Pérez&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Promises in the Dark&#39;,  &#39;year&#39;: 1979,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Jerome Hellman&#39;],  &#39;actors&#39;: [&#39;Ned Beatty&#39;, &#39;Michael Brandon&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Sweet Bird of Youth&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Richard Brooks&#39;],  &#39;actors&#39;: [&#39;Paul Newman&#39;, &#39;Ed Begley&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Feu Mathias Pascal&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Pierre Chenal&#39;],  &#39;actors&#39;: [&#39;Pierre Blanchar&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Down to the Sea in Ships&#39;,  &#39;year&#39;: 1922,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Elmer Clifton&#39;],  &#39;actors&#39;: [&#39;Leigh Smith&#39;,   &#39;Raymond McKee&#39;,   &#39;William Walcott&#39;,   &#39;James Turfler&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Dead Man Out&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Richard Pearce&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Tom Atkins&#39;, &#39;Rubén Blades&#39;, &#39;Larry Block&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Illusions&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Victor Kulle&#39;],  &#39;actors&#39;: [&#39;Robert Carradine&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Deer Hunter&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Michael Cimino&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;,   &#39;Christopher Walken&#39;,   &#39;John Cazale&#39;,   &#39;John Savage&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Island in the Sky&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Lloyd Nolan&#39;, &#39;Walter Abel&#39;, &#39;James Arness&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Walking Hills&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;John Sturges&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;William Bishop&#39;, &#39;Edgar Buchanan&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Thriller&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Her Cardboard Lover&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;George Cukor&#39;],  &#39;actors&#39;: [&#39;Robert Taylor&#39;, &#39;George Sanders&#39;, &#39;Frank McHugh&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Rope of Sand&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;William Dieterle&#39;],  &#39;actors&#39;: [&#39;Burt Lancaster&#39;, &#39;Paul Henreid&#39;, &#39;Claude Rains&#39;, &#39;Peter Lorre&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;]}, {&#39;title&#39;: &#39;Stage Struck&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Sidney Lumet&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Herbert Marshall&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Great Gatsby&#39;,  &#39;year&#39;: 1974,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Jack Clayton&#39;],  &#39;actors&#39;: [&#39;Robert Redford&#39;, &#39;Bruce Dern&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Jagged Edge&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Richard Marquand&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Peter Coyote&#39;, &#39;Robert Loggia&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Blood of the Condor&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Jorge Sanjinés&#39;],  &#39;actors&#39;: [&#39;Marcelino Yanahuaya&#39;, &#39;Vicente Verneros Salinas&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;D.C. Cab&#39;,  &#39;year&#39;: 1983,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Joel Schumacher&#39;],  &#39;actors&#39;: [&#39;Max Gail&#39;, &#39;Adam Baldwin&#39;, &#39;Mr. T&#39;, &#39;Charlie Barnett&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Jesse James&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Henry King&#39;, &#39;Irving Cummings&#39;],  &#39;actors&#39;: [&#39;Tyrone Power&#39;, &#39;Henry Fonda&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;I Accuse&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Abel Gance&#39;],  &#39;actors&#39;: [&#39;Victor Francen&#39;, &#39;Marcel Delaître&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Fat Man and Little Boy&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Roland Joffé&#39;],  &#39;actors&#39;: [&#39;Paul Newman&#39;, &#39;Dwight Schultz&#39;, &#39;John Cusack&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;While the City Sleeps&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Fritz Lang&#39;],  &#39;actors&#39;: [&#39;Dana Andrews&#39;, &#39;George Sanders&#39;, &#39;Howard Duff&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Ox-Bow Incident&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Dana Andrews&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Second Chance&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Rudolph Maté&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Jack Palance&#39;, &#39;Sandro Giglio&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &quot;Marvin&#39;s Room&quot;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Jerry Zaks&#39;],  &#39;actors&#39;: [&#39;Leonardo DiCaprio&#39;, &#39;Robert De Niro&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The First of May&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Paul Sirmons&#39;],  &#39;actors&#39;: [&#39;Dan Byrd&#39;, &#39;Mickey Rooney&#39;, &#39;Charles Nelson Reilly&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;In Search of the Castaways&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Robert Stevenson&#39;],  &#39;actors&#39;: [&#39;Maurice Chevalier&#39;, &#39;George Sanders&#39;, &#39;Wilfrid Hyde-White&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Family&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Johnny Belinda&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Anthony Page&#39;],  &#39;actors&#39;: [&#39;Richard Thomas&#39;, &#39;Dennis Quaid&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Blood and Sweat&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Rakesh Kumar&#39;],  &#39;actors&#39;: [&#39;Amitabh Bachchan&#39;, &#39;Vinod Khanna&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Jungle Book&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Stephen Sommers&#39;],  &#39;actors&#39;: [&#39;Jason Scott Lee&#39;, &#39;Cary Elwes&#39;, &#39;Sam Neill&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Family&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Paradise Alley&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Sylvester Stallone&#39;],  &#39;actors&#39;: [&#39;Sylvester Stallone&#39;,   &#39;Lee Canalito&#39;,   &#39;Armand Assante&#39;,   &#39;Frank McRae&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Superdad&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Vincent McEveety&#39;],  &#39;actors&#39;: [&#39;Bob Crane&#39;, &#39;Kurt Russell&#39;, &#39;Joe Flynn&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Bill&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;Anthony Page&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Dennis Quaid&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &quot;&#39;Gung Ho!&#39;: The Story of Carlson&#39;s Makin Island Raiders&quot;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;,   &#39;Alan Curtis&#39;,   &#39;Noah Beery Jr.&#39;,   &#39;J. Carrol Naish&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Smokey and the Bandit II&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Hal Needham&#39;],  &#39;actors&#39;: [&#39;Burt Reynolds&#39;, &#39;Jackie Gleason&#39;, &#39;Jerry Reed&#39;, &#39;Dom DeLuise&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Se7en&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 8.6,  &#39;directors&#39;: [&#39;David Fincher&#39;],  &#39;actors&#39;: [&#39;Morgan Freeman&#39;,   &#39;Brad Pitt&#39;,   &#39;Kevin Spacey&#39;,   &#39;Andrew Kevin Walker&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Ruby Gentry&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;King Vidor&#39;],  &#39;actors&#39;: [&#39;Charlton Heston&#39;, &#39;Karl Malden&#39;, &#39;Tom Tully&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Two for the Seesaw&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Robert Wise&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Edmon Ryan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Right Stuff&#39;,  &#39;year&#39;: 1983,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Philip Kaufman&#39;],  &#39;actors&#39;: [&#39;Sam Shepard&#39;, &#39;Scott Glenn&#39;, &#39;Ed Harris&#39;, &#39;Dennis Quaid&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Visitor&#39;,  &#39;year&#39;: 1979,  &#39;rating&#39;: 4.9,  &#39;directors&#39;: [&#39;Giulio Paradisi&#39;],  &#39;actors&#39;: [&#39;Mel Ferrer&#39;, &#39;Glenn Ford&#39;, &#39;Lance Henriksen&#39;, &#39;John Huston&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Tombstone&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;George P. Cosmatos&#39;, &#39;Kevin Jarre&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Val Kilmer&#39;, &#39;Sam Elliott&#39;, &#39;Bill Paxton&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Fort Apache&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Henry Fonda&#39;, &#39;Pedro Armendáriz&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Fox and the Hound&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Art Stevens&#39;, &#39;Richard Rich&#39;, &#39;Ted Berman&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Kurt Russell&#39;, &#39;Jack Albertson&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Limelight&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;Charles Chaplin&#39;, &#39;Nigel Bruce&#39;, &#39;Buster Keaton&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Big Bad John&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Burt Kennedy&#39;],  &#39;actors&#39;: [&#39;Jimmy Dean&#39;, &#39;Jack Elam&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Git Along Little Dogies&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Joseph Kane&#39;],  &#39;actors&#39;: [&#39;Weldon Heyburn&#39;,   &#39;Gene Autry&#39;,   &#39;Smiley Burnette&#39;,   &#39;Maple City Four&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Last Picture Show&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Peter Bogdanovich&#39;],  &#39;actors&#39;: [&#39;Timothy Bottoms&#39;, &#39;Jeff Bridges&#39;, &#39;Ben Johnson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &quot;Gideon&#39;s Trumpet&quot;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Robert L. Collins&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;José Ferrer&#39;, &#39;John Houseman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Train Robbers&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Burt Kennedy&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Rod Taylor&#39;, &#39;Ben Johnson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Flapper&#39;,  &#39;year&#39;: 1920,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Alan Crosland&#39;],  &#39;actors&#39;: [&#39;Arthur Housman&#39;,   &#39;Theodore Westman Jr.&#39;,   &#39;William P. Carleton&#39;,   &#39;Warren Cook&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;City Beneath the Sea&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Robert Ryan&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Soldier&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Paul W.S. Anderson&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Jason Scott Lee&#39;, &#39;Jason Isaacs&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Rio Bravo&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;Howard Hawks&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Dean Martin&#39;, &#39;Ricky Nelson&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Ride Lonesome&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Pernell Roberts&#39;, &#39;James Best&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Guns for San Sebastian&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Henri Verneuil&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Charles Bronson&#39;, &#39;Sam Jaffe&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Lady in Question&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Charles Vidor&#39;],  &#39;actors&#39;: [&#39;Brian Aherne&#39;, &#39;Glenn Ford&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;In Search of America&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Paul Bogart&#39;],  &#39;actors&#39;: [&#39;Carl Betz&#39;, &#39;Jeff Bridges&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Slaughter Trail&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;Irving Allen&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;Gig Young&#39;, &#39;Andy Devine&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Union City&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Marcus Reichert&#39;],  &#39;actors&#39;: [&#39;Dennis Lipscomb&#39;, &#39;Sam McMurray&#39;, &#39;Terry Walsh&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;A Woman of Paris: A Drama of Fate&#39;,  &#39;year&#39;: 1923,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;Clarence Geldart&#39;,   &#39;Carl Miller&#39;,   &#39;Charles K. French&#39;,   &#39;Adolphe Menjou&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Mr. North&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Danny Huston&#39;],  &#39;actors&#39;: [&#39;Anthony Edwards&#39;, &#39;Robert Mitchum&#39;, &#39;Harry Dean Stanton&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Moving&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Alan Metter&#39;],  &#39;actors&#39;: [&#39;Richard Pryor&#39;, &#39;Raphael Harris&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;King Kong&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;John Guillermin&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Charles Grodin&#39;, &#39;John Randolph&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Horror&#39;]}, {&#39;title&#39;: &#39;Henry Goes Arizona&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Edwin L. Marin&#39;],  &#39;actors&#39;: [&#39;Frank Morgan&#39;, &#39;Guy Kibbee&#39;, &#39;Slim Summerville&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Happening&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Elliot Silverstein&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;,   &#39;George Maharis&#39;,   &#39;Michael Parks&#39;,   &#39;Robert Walker Jr.&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Boys Town&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Norman Taurog&#39;],  &#39;actors&#39;: [&#39;Spencer Tracy&#39;, &#39;Mickey Rooney&#39;, &#39;Henry Hull&#39;, &#39;Leslie Fenton&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Moonfleet&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Fritz Lang&#39;],  &#39;actors&#39;: [&#39;Stewart Granger&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Mister Roberts&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Joshua Logan&#39;, &#39;John Ford&#39;, &#39;Mervyn LeRoy&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;James Cagney&#39;, &#39;William Powell&#39;, &#39;Jack Lemmon&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Ransom!&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Alex Segal&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Leslie Nielsen&#39;, &#39;Juano Hernandez&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Facade&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 4.7,  &#39;directors&#39;: [&#39;Carl Colpaert&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Angus Macfadyen&#39;, &#39;Brad Garrett&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Escape from New York&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;John Carpenter&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;,   &#39;Lee Van Cleef&#39;,   &#39;Ernest Borgnine&#39;,   &#39;Donald Pleasence&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Cahill U.S. Marshal&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Andrew V. McLaglen&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;George Kennedy&#39;, &#39;Gary Grimes&#39;, &#39;Neville Brand&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;La Cucaracha&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Jack Perez&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;,   &#39;Joaquim de Almeida&#39;,   &#39;Victor Rivers&#39;,   &#39;James McManus&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Last Unicorn&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Arthur Rankin Jr.&#39;, &#39;Jules Bass&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Alan Arkin&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Heat&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Michael Mann&#39;],  &#39;actors&#39;: [&#39;Al Pacino&#39;, &#39;Robert De Niro&#39;, &#39;Val Kilmer&#39;, &#39;Jon Voight&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &quot;Heaven&#39;s Prisoners&quot;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Phil Joanou&#39;],  &#39;actors&#39;: [&#39;Alec Baldwin&#39;, &#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Way Down East&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Henry King&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Slim Summerville&#39;, &#39;Edward Trevor&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Hellfighters&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Andrew V. McLaglen&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Jim Hutton&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Search for the Gods&#39;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Jud Taylor&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Stephen McHattie&#39;, &#39;Raymond St. Jacques&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Trouble Along the Way&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Michael Curtiz&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Charles Coburn&#39;, &#39;Tom Tully&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Lodger&#39;,  &#39;year&#39;: 1944,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;John Brahm&#39;],  &#39;actors&#39;: [&#39;Laird Cregar&#39;, &#39;George Sanders&#39;, &#39;Cedric Hardwicke&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Horror&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Fade to Black&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Vernon Zimmerman&#39;],  &#39;actors&#39;: [&#39;Dennis Christopher&#39;, &#39;Tim Thomerson&#39;, &#39;Norman Burton&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Horror&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Where Pigeons Go to Die&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Michael Landon&#39;],  &#39;actors&#39;: [&#39;Michael Faustino&#39;,   &#39;Richard Bull&#39;,   &#39;Art Carney&#39;,   &#39;Cliff De Young&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Chisum&#39;,  &#39;year&#39;: 1970,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Andrew V. McLaglen&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;,   &#39;Forrest Tucker&#39;,   &#39;Christopher George&#39;,   &#39;Ben Johnson&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Cheyenne Social Club&#39;,  &#39;year&#39;: 1970,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Gene Kelly&#39;],  &#39;actors&#39;: [&#39;James Stewart&#39;, &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Searchers&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Jeffrey Hunter&#39;, &#39;Ward Bond&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Secrets of Life&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;James Algar&#39;],  &#39;actors&#39;: [&#39;Winston Hibler&#39;],  &#39;genres&#39;: [&#39;Family&#39;]}, {&#39;title&#39;: &#39;Gang Related&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Jim Kouf&#39;],  &#39;actors&#39;: [&#39;Jim Belushi&#39;, &#39;Tupac Shakur&#39;, &#39;Dennis Quaid&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Hearst and Davies Affair&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;David Lowell Rich&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Fritz Weaver&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Samurai Wolf II&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Hideo Gosha&#39;],  &#39;actors&#39;: [&#39;Isao Natsuyagi&#39;, &#39;Ichirô Nakatani&#39;, &#39;Bin Amatsu&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Lord Jeff&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Sam Wood&#39;],  &#39;actors&#39;: [&#39;Freddie Bartholomew&#39;,   &#39;Mickey Rooney&#39;,   &#39;Charles Coburn&#39;,   &#39;Herbert Mundin&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Love Is a Headache&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Richard Thorpe&#39;],  &#39;actors&#39;: [&#39;Franchot Tone&#39;, &#39;Ted Healy&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Love Finds Andy Hardy&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Lewis Stone&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Rocky Mountain Mystery&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Charles Barton&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &quot;Charles &#39;Chic&#39; Sale&quot;, &#39;George F. Marion&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Allegheny Uprising&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;George Sanders&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;History&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Quiet Man&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Barry Fitzgerald&#39;, &#39;Ward Bond&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Against All Flags&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;George Sherman&#39;],  &#39;actors&#39;: [&#39;Errol Flynn&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Affair in Trinidad&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Vincent Sherman&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Alexander Scourby&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Cast a Giant Shadow&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Melville Shavelson&#39;],  &#39;actors&#39;: [&#39;Kirk Douglas&#39;, &#39;John Wayne&#39;, &#39;Frank Sinatra&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Summer Solstice&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Ralph Rosenblum&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Stephen Collins&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Lone Ranger and the Lost City of Gold&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Lesley Selander&#39;],  &#39;actors&#39;: [&#39;Clayton Moore&#39;,   &#39;Jay Silverheels&#39;,   &#39;Douglas Kennedy&#39;,   &#39;Charles Watts&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Man of the Forest&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Barton MacLane&#39;, &#39;Randolph Scott&#39;, &#39;Harry Carey&#39;, &#39;Noah Beery&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;DragonHeart&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Rob Cohen&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Sean Connery&#39;, &#39;Pete Postlethwaite&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;The Affair&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Paul Seed&#39;],  &#39;actors&#39;: [&#39;Courtney B. Vance&#39;, &#39;Leland Gantt&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &quot;Now You See Him, Now You Don&#39;t&quot;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Robert Butler&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Cesar Romero&#39;, &#39;Joe Flynn&#39;, &#39;Jim Backus&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;White Lightning&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Joseph Sargent&#39;],  &#39;actors&#39;: [&#39;Burt Reynolds&#39;, &#39;Ned Beatty&#39;, &#39;Bo Hopkins&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Mask of the Avenger&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Phil Karlson&#39;],  &#39;actors&#39;: [&#39;John Derek&#39;, &#39;Anthony Quinn&#39;, &#39;Arnold Moss&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;On Our Merry Way&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;George Stevens&#39;,   &#39;Leslie Fenton&#39;,   &#39;King Vidor&#39;,   &#39;John Huston&#39;],  &#39;actors&#39;: [&#39;Burgess Meredith&#39;, &#39;James Stewart&#39;, &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Music&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Used Cars&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Robert Zemeckis&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Jack Warden&#39;, &#39;Gerrit Graham&#39;, &#39;Frank McRae&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Gammera the Invincible&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Noriaki Yuasa&#39;, &#39;Sandy Howard&#39;],  &#39;actors&#39;: [&#39;Albert Dekker&#39;, &#39;Brian Donlevy&#39;, &#39;John Baragrey&#39;],  &#39;genres&#39;: [&#39;Family&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Song of Scheherazade&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Walter Reisch&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;Jean-Pierre Aumont&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Ride the High Country&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Sam Peckinpah&#39;],  &#39;actors&#39;: [&#39;Joel McCrea&#39;, &#39;Randolph Scott&#39;, &#39;Ron Starr&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &quot;Siren&#39;s Kiss&quot;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Edward Holzman&#39;],  &#39;actors&#39;: [&#39;Bobby Johnston&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Saint Strikes Back&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Jonathan Hale&#39;, &#39;Jerome Cowan&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Saint in London&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;John Paddy Carstairs&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;David Burns&#39;, &#39;Gordon McLeod&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;2001: A Space Odyssey&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Stanley Kubrick&#39;],  &#39;actors&#39;: [&#39;Keir Dullea&#39;,   &#39;Gary Lockwood&#39;,   &#39;William Sylvester&#39;,   &#39;Daniel Richter&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;5 Card Stud&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Dean Martin&#39;, &#39;Robert Mitchum&#39;, &#39;Roddy McDowall&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Nausicaä of the Valley of the Wind&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Hayao Miyazaki&#39;],  &#39;actors&#39;: [&#39;Mahito Tsujimura&#39;, &#39;Gorô Naya&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;I, the Jury&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Richard T. Heffron&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;Alan King&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Great Diamond Robbery&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Robert Z. Leonard&#39;],  &#39;actors&#39;: [&#39;Red Skelton&#39;, &#39;James Whitmore&#39;, &#39;Kurt Kasznar&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;The Pilgrim&#39;,  &#39;year&#39;: 1923,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;Loyal Underwood&#39;,   &#39;Charles Chaplin&#39;,   &#39;Syd Chaplin&#39;,   &#39;Dean Riesner&#39;,   &#39;Charles Reisner&#39;,   &#39;Tom Murray&#39;,   &#39;Mack Swain&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Watch Out for the Automobile&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Eldar Ryazanov&#39;],  &#39;actors&#39;: [&#39;Innokentiy Smoktunovskiy&#39;, &#39;Oleg Efremov&#39;, &#39;Anatoliy Papanov&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;A Big Hand for the Little Lady&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Fielder Cook&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Jason Robards&#39;, &#39;Paul Ford&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Mister Moses&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Ronald Neame&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Ian Bannen&#39;, &#39;Alexander Knox&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;]}, {&#39;title&#39;: &#39;The Immortals&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Brian Grant&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Joe Pantoliano&#39;, &#39;Tony Curtis&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Quicksand&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Irving Pichel&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Peter Lorre&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Halálos tavasz&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;László Kalmár&#39;],  &#39;actors&#39;: [&#39;Pál Jávor&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Green Glove&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Rudolph Maté&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Cedric Hardwicke&#39;, &#39;George Macready&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Trouble with Spies&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Burt Kennedy&#39;],  &#39;actors&#39;: [&#39;Donald Sutherland&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;I Love You, Alice B. Toklas!&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Hy Averback&#39;],  &#39;actors&#39;: [&#39;Peter Sellers&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Misery&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Rob Reiner&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Richard Farnsworth&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Americano&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;William Castle&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Frank Lovejoy&#39;, &#39;Cesar Romero&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Duck, You Sucker&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Sergio Leone&#39;],  &#39;actors&#39;: [&#39;Rod Steiger&#39;, &#39;James Coburn&#39;, &#39;Romolo Valli&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Kansas Raiders&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Tony Curtis&#39;, &#39;Audie Murphy&#39;, &#39;Brian Donlevy&#39;, &#39;Scott Brady&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Guilty by Suspicion&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Irwin Winkler&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;George Wendt&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;To the Last Man&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Noah Beery&#39;,   &#39;Randolph Scott&#39;,   &#39;Jack La Rue&#39;,   &#39;Buster Crabbe&#39;,   &#39;Barton MacLane&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Crimson Ghost&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;William Witney&#39;, &#39;Fred C. Brannon&#39;],  &#39;actors&#39;: [&#39;Charles Quigley&#39;, &#39;Clayton Moore&#39;, &#39;I. Stanford Jolley&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Fatal Instinct&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Carl Reiner&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Sleepers&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Barry Levinson&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Kevin Bacon&#39;, &#39;Brad Pitt&#39;, &#39;Jason Patric&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Mikey and Nicky&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Elaine May&#39;],  &#39;actors&#39;: [&#39;Peter Falk&#39;, &#39;John Cassavetes&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;City Lights&#39;,  &#39;year&#39;: 1931,  &#39;rating&#39;: 8.5,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;Charles Chaplin&#39;, &#39;Harry Myers&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Lonely Guy&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Arthur Hiller&#39;],  &#39;actors&#39;: [&#39;Steve Martin&#39;, &#39;Charles Grodin&#39;, &#39;Steve Lawrence&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;T.R. Baskin&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Herbert Ross&#39;],  &#39;actors&#39;: [&#39;Peter Boyle&#39;, &#39;James Caan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Against Her Will: The Carrie Buck Story&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;John David Coles&#39;],  &#39;actors&#39;: [&#39;Peter Frechette&#39;, &#39;Pat Hingle&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Lillian Russell&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Irving Cummings&#39;],  &#39;actors&#39;: [&#39;Leo Carrillo&#39;,   &#39;Don Ameche&#39;,   &#39;Henry Fonda&#39;,   &#39;Edward Arnold&#39;,   &#39;Warren William&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Lucy &amp; Desi: Before the Laughter&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Charles Jarrott&#39;],  &#39;actors&#39;: [&#39;Maurice Benard&#39;, &#39;John Wheeler&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Blackboard Jungle&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Richard Brooks&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Louis Calhern&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Transatlantic Tunnel&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Maurice Elvey&#39;],  &#39;actors&#39;: [&#39;Richard Dix&#39;, &#39;Leslie Banks&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Dawn Rider&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Dennis Moore&#39;, &#39;Reed Howes&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &quot;Judge Hardy&#39;s Children&quot;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Lewis Stone&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Ash Wednesday&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Larry Peerce&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Helmut Berger&#39;, &#39;Keith Baxter&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Distant Thunder&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Soumitra Chatterjee&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Drums in the Deep South&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;William Cameron Menzies&#39;],  &#39;actors&#39;: [&#39;James Craig&#39;, &#39;Guy Madison&#39;, &#39;Barton MacLane&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Strange Deception&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Curzio Malaparte&#39;],  &#39;actors&#39;: [&#39;Raf Vallone&#39;, &#39;Alain Cuny&#39;, &#39;Gino Cervi&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Man from Colorado&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Henry Levin&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;William Holden&#39;, &#39;Ray Collins&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Flame of Barbary Coast&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Joseph Kane&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Joseph Schildkraut&#39;, &#39;William Frawley&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Last Time I Saw Archie&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Jack Webb&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Jack Webb&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Thief&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Michael Mann&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Willie Nelson&#39;, &#39;Jim Belushi&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Idol of the Crowds&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Arthur Lubin&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Charles Brokaw&#39;, &#39;Bill Burrud&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Ransom&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Ron Howard&#39;],  &#39;actors&#39;: [&#39;Mel Gibson&#39;, &#39;Gary Sinise&#39;, &#39;Brawley Nolte&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Holiday Affair&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Don Hartman&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Wendell Corey&#39;, &#39;Gordon Gebert&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Hoffa&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Danny DeVito&#39;],  &#39;actors&#39;: [&#39;Jack Nicholson&#39;, &#39;Danny DeVito&#39;, &#39;Armand Assante&#39;, &#39;J.T. Walsh&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;High Rollers&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Sergio Corbucci&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Adriano Celentano&#39;, &#39;Ugo Bologna&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;The Great Bank Hoax&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 5.0,  &#39;directors&#39;: [&#39;Joseph Jacoby&#39;],  &#39;actors&#39;: [&#39;Richard Basehart&#39;, &#39;Ned Beatty&#39;, &#39;Burgess Meredith&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;So Ends Our Night&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;John Cromwell&#39;],  &#39;actors&#39;: [&#39;Fredric March&#39;, &#39;Glenn Ford&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Scared Stiff&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 4.9,  &#39;directors&#39;: [&#39;Frank McDonald&#39;],  &#39;actors&#39;: [&#39;Jack Haley&#39;, &#39;Barton MacLane&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Music Room&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Chhabi Biswas&#39;, &#39;Gangapada Basu&#39;, &#39;Bismillah Khan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Sagebrush Trail&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Armand Schaefer&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Lane Chandler&#39;, &#39;Yakima Canutt&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Full Metal Jacket&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Stanley Kubrick&#39;],  &#39;actors&#39;: [&#39;Matthew Modine&#39;,   &#39;R. Lee Ermey&#39;,   &quot;Vincent D&#39;Onofrio&quot;,   &#39;Adam Baldwin&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Madness&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Fernando Di Leo&#39;],  &#39;actors&#39;: [&#39;Joe Dallesandro&#39;, &#39;Gianni Macchia&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Hostage Flight&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Steven Hilliard Stern&#39;],  &#39;actors&#39;: [&#39;Ned Beatty&#39;, &#39;René Enríquez&#39;, &#39;Jack Gilford&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Young Billy Young&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Burt Kennedy&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Robert Walker Jr.&#39;, &#39;David Carradine&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Show-Off&#39;,  &#39;year&#39;: 1926,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Malcolm St. Clair&#39;],  &#39;actors&#39;: [&#39;Gregory Kelly&#39;, &#39;Ford Sterling&#39;, &#39;Charles Goodrich&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Judge Hardy and Son&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Lewis Stone&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Flight of the Intruder&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;John Milius&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Willem Dafoe&#39;, &#39;Brad Johnson&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;A Date with the Falcon&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Irving Reis&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;James Gleason&#39;, &#39;Allen Jenkins&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;My Favorite Wife&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Garson Kanin&#39;],  &#39;actors&#39;: [&#39;Cary Grant&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &quot;You Can&#39;t Escape Forever&quot;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Jo Graham&#39;],  &#39;actors&#39;: [&#39;George Brent&#39;, &#39;Gene Lockhart&#39;, &#39;Roscoe Karns&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Christmas Miracle in Caufield, U.S.A.&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Jud Taylor&#39;],  &#39;actors&#39;: [&#39;Mitchell Ryan&#39;,   &#39;Kurt Russell&#39;,   &#39;Andrew Prine&#39;,   &#39;John Carradine&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Cry in the Night&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Frank Tuttle&#39;],  &#39;actors&#39;: [&quot;Edmond O&#39;Brien&quot;, &#39;Brian Donlevy&#39;, &#39;Raymond Burr&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Freefall&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;John Irvin&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Jeff Fahey&#39;, &#39;Ron Smerczak&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Best of the Best II&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Robert Radler&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Phillip Rhee&#39;, &#39;Chris Penn&#39;, &#39;Edan Gross&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Girl in the Show&#39;,  &#39;year&#39;: 1929,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Edgar Selwyn&#39;],  &#39;actors&#39;: [&#39;Raymond Hackett&#39;, &#39;Edward J. Nugent&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Girl-Getters&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Michael Winner&#39;],  &#39;actors&#39;: [&#39;Oliver Reed&#39;, &#39;Harry Andrews&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Swing Shift&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Jonathan Demme&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Fred Ward&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Raging Bull&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Martin Scorsese&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Joe Pesci&#39;, &#39;Frank Vincent&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;The Lost Capone&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;John Gray&#39;],  &#39;actors&#39;: [&#39;Adrian Pasdar&#39;, &#39;Eric Roberts&#39;, &#39;Titus Welliver&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Child Lost Forever: The Jerry Sherwood Story&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Claudia Weill&#39;],  &#39;actors&#39;: [&#39;Michael McGrady&#39;, &#39;Max Gail&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Blood Vows: The Story of a Mafia Wife&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Paul Wendkos&#39;],  &#39;actors&#39;: [&#39;Joe Penny&#39;, &#39;Anthony Franciosa&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Shattered Dreams&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Robert Iscove&#39;],  &#39;actors&#39;: [&#39;Michael Nouri&#39;, &#39;James Karen&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &quot;Satan&#39;s Black Wedding&quot;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 4.7,  &#39;directors&#39;: [&#39;Nick Millard&#39;],  &#39;actors&#39;: [&#39;Greg Braddock&#39;, &#39;Ray Myles&#39;, &#39;Barrett Cooper&#39;],  &#39;genres&#39;: [&#39;Horror&#39;]}, {&#39;title&#39;: &#39;El Dorado&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Howard Hawks&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Robert Mitchum&#39;, &#39;James Caan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Terror on a Train&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Ted Tetzlaff&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Maurice Denham&#39;, &#39;Harcourt Williams&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Cradle Will Rock&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Tim Robbins&#39;],  &#39;actors&#39;: [&#39;Hank Azaria&#39;, &#39;Rubén Blades&#39;, &#39;John Cusack&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Fail-Safe&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;Sidney Lumet&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Walter Matthau&#39;, &#39;Fritz Weaver&#39;, &quot;Dan O&#39;Herlihy&quot;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;To Sleep with Anger&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Charles Burnett&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Paul Butler&#39;, &#39;DeVaughn Nixon&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Cairo&#39;,  &#39;year&#39;: 1963,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Wolf Rilla&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Richard Johnson&#39;, &#39;John Meillon&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Beau Geste&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;Gary Cooper&#39;, &#39;Ray Milland&#39;, &#39;Robert Preston&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Reason to Live, a Reason to Die&#39;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Tonino Valerii&#39;],  &#39;actors&#39;: [&#39;James Coburn&#39;, &#39;Telly Savalas&#39;, &#39;Bud Spencer&#39;, &#39;Georges Géret&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Crossfire&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Edward Dmytryk&#39;],  &#39;actors&#39;: [&#39;Robert Young&#39;, &#39;Robert Mitchum&#39;, &#39;Robert Ryan&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Saint Takes Over&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Jack Hively&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Jonathan Hale&#39;, &#39;Paul Guilfoyle&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &quot;The Saint&#39;s Double Trouble&quot;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Jack Hively&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Jonathan Hale&#39;, &#39;Bela Lugosi&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Seminole&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Rock Hudson&#39;, &#39;Anthony Quinn&#39;, &#39;Richard Carlson&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Strongest Man in the World&#39;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Vincent McEveety&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Joe Flynn&#39;, &#39;Cesar Romero&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Apache Drums&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Hugo Fregonese&#39;],  &#39;actors&#39;: [&#39;Stephen McNally&#39;, &#39;Willard Parker&#39;, &#39;Arthur Shields&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The 25th Hour&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Henri Verneuil&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Grégoire Aslan&#39;, &#39;Michael Redgrave&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Winston Affair&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Guy Hamilton&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Barry Sullivan&#39;, &#39;Trevor Howard&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Skirts Ahoy!&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Sidney Lanfield&#39;],  &#39;actors&#39;: [&#39;Keefe Brasselle&#39;, &#39;Barry Sullivan&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;A Twist of the Knife&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Jerry London&#39;],  &#39;actors&#39;: [&#39;Dick Van Dyke&#39;, &#39;Stephen Caffrey&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;East of Sumatra&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Jeff Chandler&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Fixer&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 5.0,  &#39;directors&#39;: [&#39;Charles Robert Carner&#39;],  &#39;actors&#39;: [&#39;Jon Voight&#39;, &#39;J.J. Johnston&#39;, &#39;Miguel Sandoval&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Arlington Road&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Mark Pellington&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Tim Robbins&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Go West Young Man&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Warren William&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Little Darlings&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Ron Maxwell&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;Matt Dillon&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &quot;We&#39;re No Angels&quot;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Neil Jordan&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Sean Penn&#39;, &#39;Hoyt Axton&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Thunder Road&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Arthur Ripley&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Gene Barry&#39;, &#39;Jacques Aubuchon&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;When the Daltons Rode&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;George Marshall&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Brian Donlevy&#39;, &#39;George Bancroft&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &quot;Nobody&#39;s Fool&quot;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Evelyn Purcell&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Jim Youngs&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Lost Command&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Mark Robson&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Alain Delon&#39;, &#39;George Segal&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Anzio&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Edward Dmytryk&#39;, &#39;Duilio Coletti&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Peter Falk&#39;, &#39;Robert Ryan&#39;, &#39;Earl Holliman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Glory Guys&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Arnold Laven&#39;],  &#39;actors&#39;: [&#39;Tom Tryon&#39;, &#39;Harve Presnell&#39;, &#39;James Caan&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Pushing Tin&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Mike Newell&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Billy Bob Thornton&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Seniors&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Rod Amateau&#39;],  &#39;actors&#39;: [&#39;Jeffrey Byron&#39;, &#39;Gary Imhoff&#39;, &#39;Dennis Quaid&#39;, &#39;Lou Richards&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Friendly Fire&#39;,  &#39;year&#39;: 1979,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;David Greene&#39;],  &#39;actors&#39;: [&#39;Ned Beatty&#39;, &#39;Sam Waterston&#39;, &#39;Dennis Erdman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Man from Utah&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Edward Peil Sr.&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Crime&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;I Aim at the Stars&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;J. Lee Thompson&#39;],  &#39;actors&#39;: [&#39;Curd Jürgens&#39;, &#39;Herbert Lom&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Eyes of Laura Mars&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Irvin Kershner&#39;],  &#39;actors&#39;: [&#39;Tommy Lee Jones&#39;, &#39;Brad Dourif&#39;, &#39;Rene Auberjonois&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Starman&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;John Carpenter&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Charles Martin Smith&#39;, &#39;Richard Jaeckel&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Home, Sweet Homicide&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Lloyd Bacon&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Dean Stockwell&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &quot;Hangman&#39;s Knot&quot;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Roy Huggins&#39;],  &#39;actors&#39;: [&#39;Richard Denning&#39;,   &#39;Randolph Scott&#39;,   &#39;Claude Jarman Jr.&#39;,   &#39;Frank Faylen&#39;,   &#39;Glenn Langan&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The World in His Arms&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Raoul Walsh&#39;],  &#39;actors&#39;: [&#39;Gregory Peck&#39;, &#39;Anthony Quinn&#39;, &#39;John McIntire&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Lonely Hearts&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Andrew Lane&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Ride Back&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Oscar Rudolph&#39;, &#39;Allen H. Miner&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;William Conrad&#39;, &#39;Victor Millan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Hot Pursuit&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Steven Lisberger&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Robert Loggia&#39;, &#39;Jerry Stiller&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Sidekicks&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 5.0,  &#39;directors&#39;: [&#39;Aaron Norris&#39;],  &#39;actors&#39;: [&#39;Chuck Norris&#39;, &#39;Beau Bridges&#39;, &#39;Jonathan Brandis&#39;, &#39;Mako&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Tall in the Saddle&#39;,  &#39;year&#39;: 1944,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Edwin L. Marin&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ward Bond&#39;, &quot;George &#39;Gabby&#39; Hayes&quot;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Good Times&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;William Friedkin&#39;],  &#39;actors&#39;: [&#39;Sonny Bono&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Doctor and the Girl&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Curtis Bernhardt&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Charles Coburn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Lady and Gent&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Stephen Roberts&#39;],  &#39;actors&#39;: [&#39;Morgan Wallace&#39;,   &#39;George Bancroft&#39;,   &#39;Charles Starrett&#39;,   &#39;James Gleason&#39;,   &#39;John Wayne&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;The Rice People&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Rithy Panh&#39;],  &#39;actors&#39;: [&#39;Mom Soth&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Stagecoach&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Andy Devine&#39;, &#39;John Carradine&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Hamlet Goes Business&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Aki Kaurismäki&#39;],  &#39;actors&#39;: [&#39;Pirkka-Pekka Petelius&#39;, &#39;Esko Salminen&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Batwoman&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;René Cardona&#39;],  &#39;actors&#39;: [&#39;Roberto Cañedo&#39;, &#39;Héctor Godoy&#39;, &#39;David Silva&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Sands of Iwo Jima&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Allan Dwan&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;John Agar&#39;, &#39;Forrest Tucker&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Desert Trail&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Lewis D. Collins&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Paul Fix&#39;, &#39;Eddy Chandler&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;King of the Pecos&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Joseph Kane&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Cy Kendall&#39;, &#39;Jack Rube Clifford&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &quot;Pete&#39;s Dragon&quot;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Don Chaffey&#39;],  &#39;actors&#39;: [&#39;Sean Marshall&#39;, &#39;Jim Dale&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Tall Man Riding&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Lesley Selander&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;William Ching&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Pursued&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Raoul Walsh&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Dean Jagger&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Private Affairs of Bel Ami&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Albert Lewin&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;John Carradine&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Randy Rides Alone&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Harry L. Fraser&#39;],  &#39;actors&#39;: [&#39;Artie Ortego&#39;,   &#39;John Wayne&#39;,   &quot;George &#39;Gabby&#39; Hayes&quot;,   &#39;Yakima Canutt&#39;,   &#39;Earl Dwire&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;A Matter of Resistance&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Jean-Paul Rappeneau&#39;],  &#39;actors&#39;: [&#39;Pierre Brasseur&#39;, &#39;Philippe Noiret&#39;, &#39;Henri Garcin&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Black Gold&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Phil Karlson&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &quot;&#39;Ducky&#39; Louie&quot;, &#39;Raymond Hatton&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Crack-Up&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Malcolm St. Clair&#39;],  &#39;actors&#39;: [&#39;Peter Lorre&#39;, &#39;Brian Donlevy&#39;, &#39;Ralph Morgan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The House of the Seven Gables&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Joe May&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Vincent Price&#39;, &#39;Dick Foran&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &quot;Kiki&#39;s Delivery Service&quot;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Hayao Miyazaki&#39;],  &#39;actors&#39;: [&#39;Kappei Yamaguchi&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Rover&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Terence Young&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Richard Johnson&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;8 Million Ways to Die&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Hal Ashby&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Randy Brooks&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Sensation&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Brian Grant&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Ron Perlman&#39;, &#39;Paul Le Mat&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Why Me?&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Fielder Cook&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;Craig Wasson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Loves of Carmen&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Charles Vidor&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Ron Randell&#39;, &#39;Victor Jory&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Tapeheads&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Bill Fishman&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Tim Robbins&#39;, &#39;Clu Gulager&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;A Question of Love&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Jerry Thorpe&#39;],  &#39;actors&#39;: [&#39;Ned Beatty&#39;, &#39;Clu Gulager&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Hot Spell&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;George Cukor&#39;, &#39;Daniel Mann&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Earl Holliman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;So Red the Rose&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;King Vidor&#39;],  &#39;actors&#39;: [&#39;Walter Connolly&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Man of Passion&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;José Antonio de la Loma&#39;],  &#39;actors&#39;: [&#39;R.J. Williams&#39;, &#39;Anthony Quinn&#39;, &#39;Ramon Estevez&#39;, &#39;Ray Walston&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Violation of Sarah McDavid&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;John Llewellyn Moxey&#39;],  &#39;actors&#39;: [&#39;Ned Beatty&#39;, &#39;James Sloyan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Bandido!&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Richard Fleischer&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Gilbert Roland&#39;, &#39;Zachary Scott&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Undefeated&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Andrew V. McLaglen&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Rock Hudson&#39;, &#39;Antonio Aguilar&#39;, &#39;Roman Gabriel&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Nature of the Beast&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Victor Salva&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Lance Henriksen&#39;, &#39;Brion James&#39;, &#39;Frank Novak&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Horror&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Sunset Boys&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Leidulv Risan&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;,   &#39;Cliff Robertson&#39;,   &#39;Erland Josephson&#39;,   &#39;Espen Skjønberg&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;My Darling Clementine&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Victor Mature&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Toy&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Richard Donner&#39;],  &#39;actors&#39;: [&#39;Richard Pryor&#39;,   &#39;Jackie Gleason&#39;,   &#39;Ned Beatty&#39;,   &#39;Scott Schwartz&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Shadow Men&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 4.2,  &#39;directors&#39;: [&#39;Timothy Bond&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Dean Stockwell&#39;, &#39;Brendon Ryan Barrett&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Sci-Fi&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;How to Stuff a Wild Bikini&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;William Asher&#39;],  &#39;actors&#39;: [&#39;Dwayne Hickman&#39;, &#39;Brian Donlevy&#39;, &#39;Harvey Lembeck&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Cry for Happy&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;George Marshall&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &quot;Donald O&#39;Connor&quot;, &#39;James Shigeta&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Portrait in Black&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Michael Gordon&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Richard Basehart&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Cape Fear&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;J. Lee Thompson&#39;],  &#39;actors&#39;: [&#39;Gregory Peck&#39;, &#39;Robert Mitchum&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;A Colt Is My Passport&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Takashi Nomura&#39;],  &#39;actors&#39;: [&#39;Jô Shishido&#39;, &#39;Jerry Fujio&#39;, &#39;Ryôtarô Sugi&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;She&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Irving Pichel&#39;, &#39;Lansing C. Holden&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Nigel Bruce&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Fantasy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Vengeance is Mine&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Giovanni Fago&#39;],  &#39;actors&#39;: [&#39;Gianni Garko&#39;, &#39;Carlo Gaddi&#39;, &#39;Claudio Camaso&#39;, &#39;Piero Lulli&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Wake Island&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;,   &#39;Robert Preston&#39;,   &#39;Macdonald Carey&#39;,   &#39;William Bendix&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Interrupted Melody&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Curtis Bernhardt&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Roger Moore&#39;, &#39;Cecil Kellaway&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Blowing Wild&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Hugo Fregonese&#39;],  &#39;actors&#39;: [&#39;Gary Cooper&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;D.O.A.&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Annabel Jankel&#39;, &#39;Rocky Morton&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Daniel Stern&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Tears of the Yang-Tse&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Chusheng Cai&#39;, &#39;Junli Zheng&#39;],  &#39;actors&#39;: [&#39;Tao Jin&#39;, &#39;Yang Nai&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Hercules and the Amazon Women&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Bill Norton&#39;],  &#39;actors&#39;: [&#39;Kevin Sorbo&#39;, &#39;Anthony Quinn&#39;, &#39;Michael Hurst&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Gotham&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Lloyd Fonvielle&#39;],  &#39;actors&#39;: [&#39;Tommy Lee Jones&#39;, &#39;Colin Bruce&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Journey to Shiloh&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;William Hale&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Michael Sarrazin&#39;, &#39;Don Stroud&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Gilda&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Charles Vidor&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;George Macready&#39;, &#39;Joseph Calleia&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Scarlet Coat&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;John Sturges&#39;],  &#39;actors&#39;: [&#39;Cornel Wilde&#39;, &#39;Michael Wilding&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Against All Odds&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Taylor Hackford&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;James Woods&#39;, &#39;Alex Karras&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Striptease&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Andrew Bergman&#39;],  &#39;actors&#39;: [&#39;Burt Reynolds&#39;, &#39;Armand Assante&#39;, &#39;Ving Rhames&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Two Years Before the Mast&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;Alan Ladd&#39;,   &#39;Brian Donlevy&#39;,   &#39;William Bendix&#39;,   &#39;Barry Fitzgerald&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Last Challenge&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Richard Thorpe&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Chad Everett&#39;, &#39;Gary Merrill&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Another You&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Maurice Phillips&#39;],  &#39;actors&#39;: [&#39;Richard Pryor&#39;, &#39;Gene Wilder&#39;, &#39;Stephen Lang&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Confessions of a Nazi Spy&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Anatole Litvak&#39;],  &#39;actors&#39;: [&#39;Edward G. Robinson&#39;,   &#39;George Sanders&#39;,   &#39;Francis Lederer&#39;,   &#39;Paul Lukas&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Hangmen Also Die!&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Fritz Lang&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;Walter Brennan&#39;, &#39;Gene Lockhart&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Little Mermaid&#39;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Tomoharu Katsumata&#39;, &#39;Tim Reid&#39;],  &#39;actors&#39;: [&#39;Tarô Shigaki&#39;, &#39;Hideki Shibata&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;A Forgotten Tune for the Flute&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Eldar Ryazanov&#39;],  &#39;actors&#39;: [&#39;Leonid Filatov&#39;, &#39;Valentin Gaft&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Nevadan&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Gordon Douglas&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Forrest Tucker&#39;, &#39;Frank Faylen&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Unfaithfully Yours&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Howard Zieff&#39;],  &#39;actors&#39;: [&#39;Dudley Moore&#39;, &#39;Armand Assante&#39;, &#39;Albert Brooks&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Music&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Lancer Spy&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Gregory Ratoff&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Peter Lorre&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Big Stampede&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Tenny Wright&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Noah Beery&#39;, &#39;Paul Hurst&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Deliverance&#39;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;John Boorman&#39;],  &#39;actors&#39;: [&#39;Jon Voight&#39;, &#39;Burt Reynolds&#39;, &#39;Ned Beatty&#39;, &#39;Ronny Cox&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Moon and Sixpence&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Albert Lewin&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Herbert Marshall&#39;, &#39;Eric Blore&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Bold and the Brave&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Lewis R. Foster&#39;, &#39;Mickey Rooney&#39;],  &#39;actors&#39;: [&#39;Wendell Corey&#39;, &#39;Mickey Rooney&#39;, &#39;Don Taylor&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Comanche Territory&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;George Sherman&#39;],  &#39;actors&#39;: [&#39;Macdonald Carey&#39;, &#39;Will Geer&#39;, &#39;Charles Drake&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Colt .45&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Edwin L. Marin&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Zachary Scott&#39;, &#39;Lloyd Bridges&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Affair in Havana&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Laslo Benedek&#39;],  &#39;actors&#39;: [&#39;John Cassavetes&#39;, &#39;Raymond Burr&#39;],  &#39;genres&#39;: [&#39;Crime&#39;]}, {&#39;title&#39;: &#39;Marco the Magnificent&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Noël Howard&#39;, &#39;Denys de La Patellière&#39;, &#39;Raoul Lévy&#39;],  &#39;actors&#39;: [&#39;Horst Buchholz&#39;, &#39;Anthony Quinn&#39;, &#39;Akim Tamiroff&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;]}, {&#39;title&#39;: &#39;Kidnapped&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 4.9,  &#39;directors&#39;: [&#39;Howard Avedis&#39;],  &#39;actors&#39;: [&#39;David Naughton&#39;, &#39;Lance LeGault&#39;, &#39;Chick Vennera&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Hangover Square&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;John Brahm&#39;],  &#39;actors&#39;: [&#39;Laird Cregar&#39;, &#39;George Sanders&#39;, &#39;Glenn Langan&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Francis in the Haunted House&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Charles Lamont&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;James Flavin&#39;, &#39;Paul Cavanagh&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Fantasy&#39;, &#39;Horror&#39;]}, {&#39;title&#39;: &#39;Jezebel&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;William Wyler&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;George Brent&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Shadow of the Eagle&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;B. Reeves Eason&#39;, &#39;Ford Beebe&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Walter Miller&#39;, &#39;Kenneth Harlan&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Big Jim McLain&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Edward Ludwig&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;James Arness&#39;, &#39;Alan Napier&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Attack of the Crab Monsters&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Roger Corman&#39;],  &#39;actors&#39;: [&#39;Richard Garland&#39;, &#39;Russell Johnson&#39;, &#39;Leslie Bradley&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Texas&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;George Marshall&#39;],  &#39;actors&#39;: [&#39;William Holden&#39;, &#39;Glenn Ford&#39;, &#39;George Bancroft&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Amber Waves&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Joseph Sargent&#39;],  &#39;actors&#39;: [&#39;Dennis Weaver&#39;, &#39;Kurt Russell&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Man Who Shot Liberty Valance&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;James Stewart&#39;, &#39;John Wayne&#39;, &#39;Lee Marvin&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Evil Roy Slade&#39;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Jerry Paris&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Dick Shawn&#39;, &#39;Henry Gibson&#39;, &#39;Dom DeLuise&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Executive Decision&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Stuart Baird&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Steven Seagal&#39;, &#39;John Leguizamo&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Fastest Gun Alive&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Russell Rouse&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Broderick Crawford&#39;, &#39;Russ Tamblyn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Ride Him, Cowboy&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Fred Allen&#39;],  &#39;actors&#39;: [&#39;Otis Harlan&#39;, &#39;John Wayne&#39;, &#39;Duke&#39;, &#39;Henry B. Walthall&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Overboard&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Garry Marshall&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Edward Herrmann&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Brotherhood of the Bell&#39;,  &#39;year&#39;: 1970,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Paul Wendkos&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Dean Jagger&#39;, &#39;Maurice Evans&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Falcon Takes Over&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Irving Reis&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;James Gleason&#39;, &#39;Allen Jenkins&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &quot;The Falcon&#39;s Brother&quot;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Stanley Logan&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Tom Conway&#39;, &#39;Don Barclay&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Four Horsemen of the Apocalypse&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Vincente Minnelli&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Charles Boyer&#39;, &#39;Lee J. Cobb&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &quot;&#39;Neath the Arizona Skies&quot;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Harry L. Fraser&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Jack Rockwell&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Thing&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;John Carpenter&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;,   &#39;Wilford Brimley&#39;,   &#39;Keith David&#39;,   &#39;Richard Masur&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Mystery&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Predator 2&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Stephen Hopkins&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Gary Busey&#39;, &#39;Kevin Peter Hall&#39;, &#39;Rubén Blades&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Restraining Order&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 4.7,  &#39;directors&#39;: [&#39;Lee H. Katzin&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Hannes Jaenicke&#39;, &#39;Dean Stockwell&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;A Cruel Romance&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Eldar Ryazanov&#39;],  &#39;actors&#39;: [&#39;Nikita Mikhalkov&#39;, &#39;Andrey Myagkov&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Silkwood&#39;,  &#39;year&#39;: 1983,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Mike Nichols&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Craig T. Nelson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Last Voyage&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Andrew L. Stone&#39;],  &#39;actors&#39;: [&#39;Joel Marston&#39;,   &#39;Robert Stack&#39;,   &#39;George Sanders&#39;,   &quot;Edmond O&#39;Brien&quot;,   &#39;Woody Strode&#39;,   &#39;Jack Kruschen&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Belizaire the Cajun&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Glen Pitre&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;Michael Schoeffling&#39;, &#39;Stephen McHattie&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Heaven with a Barbed Wire Fence&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Ricardo Cortez&#39;],  &#39;actors&#39;: [&#39;Raymond Walburn&#39;, &#39;Glenn Ford&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Hardys Ride High&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Lewis Stone&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Backdraft&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Ron Howard&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;,   &#39;William Baldwin&#39;,   &#39;Robert De Niro&#39;,   &#39;Donald Sutherland&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Three Musketeers&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Armand Schaefer&#39;, &#39;Colbert Clark&#39;],  &#39;actors&#39;: [&#39;Jack Mulhall&#39;,   &#39;Raymond Hatton&#39;,   &#39;Francis X. Bushman Jr.&#39;,   &#39;John Wayne&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Undercurrent&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Vincente Minnelli&#39;],  &#39;actors&#39;: [&#39;Robert Taylor&#39;, &#39;Robert Mitchum&#39;, &#39;Edmund Gwenn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;An American Romance&#39;,  &#39;year&#39;: 1944,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;King Vidor&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;Walter Abel&#39;, &#39;John Qualen&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Chad Hanna&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Henry King&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Guy Kibbee&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Godfather&#39;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 9.2,  &#39;directors&#39;: [&#39;Francis Ford Coppola&#39;],  &#39;actors&#39;: [&#39;Marlon Brando&#39;, &#39;Al Pacino&#39;, &#39;James Caan&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;True Grit&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Glen Campbell&#39;, &#39;Jeremy Slate&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Rage at Dawn&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Tim Whelan&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Forrest Tucker&#39;, &#39;J. Carrol Naish&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Samson and Delilah&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Cecil B. DeMille&#39;],  &#39;actors&#39;: [&#39;Victor Mature&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Mexico in Flames&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Sergey Bondarchuk&#39;],  &#39;actors&#39;: [&#39;Franco Nero&#39;, &#39;Jorge Luke&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &quot;Bluebeard&#39;s 10 Honeymoons&quot;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;W. Lee Wilder&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Suspect&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Peter Yates&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Liam Neeson&#39;, &#39;John Mahoney&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Grand Canyon&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Lawrence Kasdan&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Kevin Kline&#39;, &#39;Steve Martin&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Rebecca of Sunnybrook Farm&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Allan Dwan&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Jack Haley&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Babe Ruth&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Mark Tinker&#39;],  &#39;actors&#39;: [&#39;Stephen Lang&#39;, &#39;Brian Doyle-Murray&#39;, &#39;Donald Moffat&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Horatio Hornblower: The Duel&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Andrew Grieve&#39;],  &#39;actors&#39;: [&#39;Ioan Gruffudd&#39;,   &#39;Robert Lindsay&#39;,   &#39;Dorian Healy&#39;,   &#39;Michael Byrne&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Dollar for the Dead&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Gene Quintano&#39;],  &#39;actors&#39;: [&#39;Emilio Estevez&#39;,   &#39;William Forsythe&#39;,   &#39;Jordi Mollà&#39;,   &#39;Joaquim de Almeida&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &quot;Rudolph and Frosty&#39;s Christmas in July&quot;,  &#39;year&#39;: 1979,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Jules Bass&#39;, &#39;Arthur Rankin Jr.&#39;],  &#39;actors&#39;: [&#39;Red Buttons&#39;, &#39;Mickey Rooney&#39;, &#39;Alan Sues&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The New Frontier&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Carl Pierson&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Warner Richmond&#39;, &#39;Al Bridge&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Remarkable Andrew&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Stuart Heisler&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;William Holden&#39;, &#39;Montagu Love&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Stranger on the Run&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Don Siegel&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Michael Parks&#39;, &#39;Dan Duryea&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Poodle Springs&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Bob Rafelson&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;David Keith&#39;, &#39;Tom Bower&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Camp Followers&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Valerio Zurlini&#39;],  &#39;actors&#39;: [&#39;Mario Adorf&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &quot;She&#39;s All That&quot;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Robert Iscove&#39;],  &#39;actors&#39;: [&#39;Freddie Prinze Jr.&#39;, &#39;Matthew Lillard&#39;, &#39;Paul Walker&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Victim of Desire&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Jim Wynorski&#39;],  &#39;actors&#39;: [&#39;Marc Singer&#39;, &#39;Johnny Williams&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Trial&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Mark Robson&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Arthur Kennedy&#39;, &#39;John Hodiak&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Brassed Off&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Mark Herman&#39;],  &#39;actors&#39;: [&#39;Pete Postlethwaite&#39;, &#39;Ewan McGregor&#39;, &#39;Stephen Tompkinson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Adventures of Huckleberry Finn&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Richard Thorpe&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;,   &#39;Walter Connolly&#39;,   &#39;William Frawley&#39;,   &#39;Rex Ingram&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;The Pope of Greenwich Village&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Stuart Rosenberg&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Mickey Rourke&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Africa Screams&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Charles Barton&#39;],  &#39;actors&#39;: [&#39;Bud Abbott&#39;, &#39;Lou Costello&#39;, &#39;Clyde Beatty&#39;, &#39;Frank Buck&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Star Trek III: The Search for Spock&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Leonard Nimoy&#39;],  &#39;actors&#39;: [&#39;William Shatner&#39;,   &#39;Leonard Nimoy&#39;,   &#39;DeForest Kelley&#39;,   &#39;James Doohan&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &quot;Spencer&#39;s Mountain&quot;,  &#39;year&#39;: 1963,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Delmer Daves&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;James MacArthur&#39;, &#39;Donald Crisp&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;This World, Then the Fireworks&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Michael Oblowitz&#39;],  &#39;actors&#39;: [&#39;Philip Loch&#39;, &#39;Christian Durango&#39;, &#39;Sloan Cobb&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Night Riders&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;George Sherman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ray Corrigan&#39;, &#39;Max Terhune&#39;],  &#39;genres&#39;: [&#39;History&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &quot;Smilin&#39; Through&quot;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Sidney Franklin&#39;],  &#39;actors&#39;: [&#39;Fredric March&#39;, &#39;Leslie Howard&#39;, &#39;O.P. Heggie&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Secrets of Sweet Sixteen&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 4.2,  &#39;directors&#39;: [&#39;Ernst Hofbauer&#39;],  &#39;actors&#39;: [&#39;Werner Abrolat&#39;, &#39;Ekkehardt Belle&#39;, &#39;Arthur Brauss&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Hex&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Leo Garen&#39;],  &#39;actors&#39;: [&#39;Keith Carradine&#39;, &#39;Scott Glenn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Horror&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &quot;Jacqueline Susann&#39;s Valley of the Dolls&quot;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Walter Grauman&#39;],  &#39;actors&#39;: [&#39;David Birney&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Dog Tags&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;Romano Scavolini&#39;],  &#39;actors&#39;: [&#39;Clive Wood&#39;,   &#39;Baird Stafford&#39;,   &#39;Robert Haufrecht&#39;,   &#39;Peter Elich&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Full Moon&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Fredi M. Murer&#39;],  &#39;actors&#39;: [&#39;Hanspeter Müller&#39;, &#39;Benedict Freitag&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;When Strangers Marry&#39;,  &#39;year&#39;: 1944,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;William Castle&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Dean Jagger&#39;, &#39;Neil Hamilton&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Halls of Anger&#39;,  &#39;year&#39;: 1970,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Paul Bogart&#39;],  &#39;actors&#39;: [&#39;Calvin Lockhart&#39;, &#39;Jeff Bridges&#39;, &#39;James A. Watson Jr.&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Alien Nation&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Graham Baker&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;,   &#39;Mandy Patinkin&#39;,   &#39;Terence Stamp&#39;,   &#39;Kevyn Major Howard&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Warlock&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Edward Dmytryk&#39;],  &#39;actors&#39;: [&#39;Richard Widmark&#39;, &#39;Henry Fonda&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Three Texas Steers&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;George Sherman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ray Corrigan&#39;, &#39;Max Terhune&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Rio Grande&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ben Johnson&#39;, &#39;Claude Jarman Jr.&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Calling All Police Cars&#39;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Mario Caiano&#39;],  &#39;actors&#39;: [&#39;Antonio Sabato&#39;, &#39;Enrico Maria Salerno&#39;, &#39;Gabriele Ferzetti&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Horror&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Teen Kanya&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Anil Chatterjee&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Panic in the Skies&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Paul Ziller&#39;],  &#39;actors&#39;: [&#39;Ed Marinaro&#39;, &#39;Erik Estrada&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Big Operator&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Charles F. Haas&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Steve Cochran&#39;, &#39;Mel Tormé&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Midnight Ride&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Bob Bralver&#39;],  &#39;actors&#39;: [&#39;Michael Dudikoff&#39;, &#39;Mark Hamill&#39;, &#39;Robert Mitchum&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Horror&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Big Trail&#39;,  &#39;year&#39;: 1930,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Raoul Walsh&#39;, &#39;Louis R. Loeffler&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;El Brendel&#39;, &#39;Tully Marshall&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Devil Is a Sissy&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Rowland Brown&#39;, &#39;W.S. Van Dyke&#39;],  &#39;actors&#39;: [&#39;Freddie Bartholomew&#39;,   &#39;Jackie Cooper&#39;,   &#39;Mickey Rooney&#39;,   &#39;Ian Hunter&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Rebecca&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Alfred Hitchcock&#39;],  &#39;actors&#39;: [&#39;Laurence Olivier&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Red Line 7000&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Howard Hawks&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;A Walk in the Spring Rain&#39;,  &#39;year&#39;: 1970,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Guy Green&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Fritz Weaver&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;A Cry in the Wild&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Mark Griffiths&#39;],  &#39;actors&#39;: [&#39;Jared Rushton&#39;, &#39;Ned Beatty&#39;, &#39;Stephen Meadows&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;1492: Conquest of Paradise&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Ridley Scott&#39;],  &#39;actors&#39;: [&#39;Gérard Depardieu&#39;, &#39;Armand Assante&#39;, &#39;Loren Dean&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Twice in a Lifetime&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Bud Yorkin&#39;],  &#39;actors&#39;: [&#39;Gene Hackman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Incident at Deception Ridge&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;John McPherson&#39;],  &#39;actors&#39;: [&quot;Michael O&#39;Keefe&quot;, &#39;Ed Begley Jr.&#39;, &#39;Miguel Ferrer&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Legend of Suram Fortress&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Sergei Parajanov&#39;, &#39;Dodo Abashidze&#39;],  &#39;actors&#39;: [&#39;Dodo Abashidze&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Last of the Cowboys&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;John Leone&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Austin Pendleton&#39;, &#39;Robert Englund&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Past Perfect&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Jonathan Heap&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Nick Mancuso&#39;, &#39;Saul Rubinek&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Come Back Charleston Blue&#39;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Mark Warren&#39;],  &#39;actors&#39;: [&#39;Godfrey Cambridge&#39;,   &#39;Raymond St. Jacques&#39;,   &#39;Peter De Anda&#39;,   &#39;Percy Rodrigues&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Ivan Vasilievich: Back to the Future&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 8.4,  &#39;directors&#39;: [&#39;Leonid Gayday&#39;],  &#39;actors&#39;: [&#39;Yuriy Yakovlev&#39;,   &#39;Leonid Kuravlyov&#39;,   &#39;Aleksandr Demyanenko&#39;,   &#39;Saveliy Kramarov&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Twins&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Ivan Reitman&#39;],  &#39;actors&#39;: [&#39;Arnold Schwarzenegger&#39;, &#39;Danny DeVito&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Woman of Desire&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Robert Ginty&#39;],  &#39;actors&#39;: [&#39;Jeff Fahey&#39;, &#39;Steven Bauer&#39;, &#39;Robert Mitchum&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Without Warning: Terror in the Towers&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Alan J. Levi&#39;],  &#39;actors&#39;: [&#39;James Avery&#39;, &#39;Andre Braugher&#39;, &#39;George Clooney&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Kiss of Death&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Victor Mature&#39;, &#39;Brian Donlevy&#39;, &#39;Richard Widmark&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Journey to Italy&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Roberto Rossellini&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Witness to Murder&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Roy Rowland&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Gary Merrill&#39;, &#39;Jesse White&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Distant Cry from Spring&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Yôji Yamada&#39;],  &#39;actors&#39;: [&#39;Ken Takakura&#39;, &#39;Hidetaka Yoshioka&#39;, &#39;Tetsuya Takeda&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Tonka&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Lewis R. Foster&#39;],  &#39;actors&#39;: [&#39;Sal Mineo&#39;, &#39;Philip Carey&#39;, &#39;Jerome Courtland&#39;, &#39;H.M. Wynant&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Torpedo Run&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Joseph Pevney&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Ernest Borgnine&#39;, &#39;Dean Jones&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Music of the Heart&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Wes Craven&#39;],  &#39;actors&#39;: [&#39;Henry Dinhofer&#39;, &#39;Michael Angarano&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Voices Within: The Lives of Truddi Chase&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Lamont Johnson&#39;],  &#39;actors&#39;: [&#39;Tom Conti&#39;, &#39;Jon Beshara&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;True Confessions&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Ulu Grosbard&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;,   &#39;Robert Duvall&#39;,   &#39;Charles Durning&#39;,   &#39;Kenneth McMillan&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Big Jake&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;George Sherman&#39;, &#39;John Wayne&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Richard Boone&#39;, &#39;Patrick Wayne&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Con Air&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Simon West&#39;],  &#39;actors&#39;: [&#39;Nicolas Cage&#39;, &#39;John Cusack&#39;, &#39;John Malkovich&#39;, &#39;Colm Meaney&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Cop Land&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;James Mangold&#39;],  &#39;actors&#39;: [&#39;Sylvester Stallone&#39;,   &#39;Harvey Keitel&#39;,   &#39;Ray Liotta&#39;,   &#39;Robert De Niro&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;City Hall&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Harold Becker&#39;],  &#39;actors&#39;: [&#39;Al Pacino&#39;, &#39;John Cusack&#39;, &#39;Danny Aiello&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Tales of Manhattan&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Julien Duvivier&#39;],  &#39;actors&#39;: [&#39;Charles Boyer&#39;, &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Slaves in Bondage&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Elmer Clifton&#39;],  &#39;actors&#39;: [&#39;John Merton&#39;, &#39;Donald Reed&#39;, &#39;Wheeler Oakman&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Slim&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Dick Purcell&#39;,   &quot;Pat O&#39;Brien&quot;,   &#39;Henry Fonda&#39;,   &#39;Stuart Erwin&#39;,   &#39;J. Farrell MacDonald&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Slave Ship&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Tay Garnett&#39;],  &#39;actors&#39;: [&#39;Warner Baxter&#39;, &#39;Wallace Beery&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Hoosier Schoolboy&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;William Nigh&#39;],  &#39;actors&#39;: [&#39;William Gould&#39;,   &#39;Mickey Rooney&#39;,   &#39;Frank Shields&#39;,   &#39;Edward Pawley&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Deaf Smith &amp; Johnny Ears&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Paolo Cavara&#39;],  &#39;actors&#39;: [&#39;Franco Nero&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Giving It Up&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 4.2,  &#39;directors&#39;: [&#39;Christopher Kublan&#39;],  &#39;actors&#39;: [&#39;Mark Feuerstein&#39;, &#39;Dabney Coleman&#39;, &#39;Ben Weber&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Physical Evidence&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Michael Crichton&#39;],  &#39;actors&#39;: [&#39;Burt Reynolds&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Mystery&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Guns of Diablo&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Boris Sagal&#39;],  &#39;actors&#39;: [&#39;Charles Bronson&#39;, &#39;Kurt Russell&#39;, &#39;Jan Merlin&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Secret of Convict Lake&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Michael Gordon&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Zachary Scott&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Big Lebowski&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Joel Coen&#39;, &#39;Ethan Coen&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;John Goodman&#39;, &#39;Steve Buscemi&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;The Strip&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;László Kardos&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;William Demarest&#39;, &#39;James Craig&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Sugarfoot&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Edwin L. Marin&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Raymond Massey&#39;, &#39;S.Z. Sakall&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Crime Against Joe&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Lee Sholem&#39;],  &#39;actors&#39;: [&#39;John Bromfield&#39;, &#39;Henry Calvin&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &quot;Ma Barker&#39;s Killer Brood&quot;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Bill Karn&#39;],  &#39;actors&#39;: [&#39;Tristram Coffin&#39;, &#39;Paul Dubov&#39;, &#39;Nelson Leigh&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Jonah Who Will Be 25 in the Year 2000&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Alain Tanner&#39;],  &#39;actors&#39;: [&#39;Jean-Luc Bideau&#39;, &#39;Jacques Denis&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Decision at Sundown&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;John Carroll&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &quot;Mary Shelley&#39;s Frankenstein&quot;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Kenneth Branagh&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Kenneth Branagh&#39;, &#39;Tom Hulce&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Horror&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Hostile Guns&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;R.G. Springsteen&#39;],  &#39;actors&#39;: [&#39;George Montgomery&#39;, &#39;Tab Hunter&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Mad Dog and Glory&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;John McNaughton&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Bill Murray&#39;, &#39;David Caruso&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &quot;Dead Man&#39;s Eyes&quot;,  &#39;year&#39;: 1944,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Reginald Le Borg&#39;],  &#39;actors&#39;: [&#39;Edward Fielding&#39;,   &#39;Lon Chaney Jr.&#39;,   &#39;Paul Kelly&#39;,   &#39;Thomas Gomez&#39;,   &#39;Jonathan Hale&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Touch&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Krzysztof Zanussi&#39;],  &#39;actors&#39;: [&#39;Max von Sydow&#39;, &#39;Lothaire Bluteau&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Love, Honor &amp; Obey: The Last Mafia Marriage&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;John Patterson&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Ben Gazzara&#39;, &#39;Alex Rocco&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Black Horse Canyon&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Jesse Hibbs&#39;],  &#39;actors&#39;: [&#39;Joel McCrea&#39;, &#39;Race Gentry&#39;, &#39;Murvyn Vye&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &quot;The Great Man&#39;s Lady&quot;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;Joel McCrea&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Follow That Bird&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Ken Kwapis&#39;],  &#39;actors&#39;: [&#39;Caroll Spinney&#39;, &#39;Jim Henson&#39;, &#39;Frank Oz&#39;, &#39;Richard Hunt&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;The Best Man&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Malcolm D. Lee&#39;],  &#39;actors&#39;: [&#39;Taye Diggs&#39;, &#39;Morris Chestnut&#39;, &#39;Harold Perrineau&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Visit&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Bernhard Wicki&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Paolo Stoppa&#39;, &#39;Romolo Valli&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Onassis: The Richest Man in the World&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Waris Hussein&#39;],  &#39;actors&#39;: [&#39;Raul Julia&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Castle in the Sky&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Hayao Miyazaki&#39;],  &#39;actors&#39;: [&#39;James Van Der Beek&#39;, &#39;Mark Hamill&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Fearless&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Peter Weir&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Tom Hulce&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Sweet Justice&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Allen Plone&#39;],  &#39;actors&#39;: [&#39;Frank Gorshin&#39;, &#39;Marc Singer&#39;, &#39;Gregg Brazzel&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Flesh and Bone&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Steve Kloves&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;James Caan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;In Old California&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;William C. McGann&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Albert Dekker&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;A Time for Killing&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Roger Corman&#39;, &#39;Phil Karlson&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Paul Petersen&#39;, &#39;Timothy Carey&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Babes on Broadway&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Busby Berkeley&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Corregidor&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;William Nigh&#39;],  &#39;actors&#39;: [&#39;Otto Kruger&#39;, &#39;Donald Woods&#39;, &#39;Frank Jenks&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Thunder Over the Plains&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;André De Toth&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Lex Barker&#39;, &#39;Charles McGraw&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;War&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Fazil&#39;,  &#39;year&#39;: 1928,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Howard Hawks&#39;],  &#39;actors&#39;: [&#39;Charles Farrell&#39;, &#39;John Boles&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Fate Is the Hunter&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Ralph Nelson&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Rod Taylor&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;One Good Turn&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Tony Randel&#39;],  &#39;actors&#39;: [&#39;James Remar&#39;, &#39;Lenny von Dohlen&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Operation Dumbo Drop&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.0,  &#39;directors&#39;: [&#39;Simon Wincer&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Ray Liotta&#39;, &#39;Denis Leary&#39;, &#39;Doug E. Doug&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Fantasia Among the Squares&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;Gérard Pirès&#39;],  &#39;actors&#39;: [&#39;Lino Ventura&#39;, &#39;Jacques Dufilho&#39;, &#39;Jean Yanne&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Countdown&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Robert Altman&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Robert Duvall&#39;],  &#39;genres&#39;: [&#39;Sci-Fi&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Assignment: Paris&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Robert Parrish&#39;, &#39;Phil Karlson&#39;],  &#39;actors&#39;: [&#39;Dana Andrews&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Jacknife&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;David Hugh Jones&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Ed Harris&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Last Summer in the Hamptons&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Henry Jaglom&#39;],  &#39;actors&#39;: [&#39;Jon Robin Baitz&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Star Packer&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;Earl Dwire&#39;,   &#39;John Wayne&#39;,   &quot;George &#39;Gabby&#39; Hayes&quot;,   &#39;Yakima Canutt&#39;,   &#39;Billy Franey&#39;,   &#39;Eddie Parker&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Riki-Oh: The Story of Ricky&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Ngai Choi Lam&#39;],  &#39;actors&#39;: [&#39;Siu-Wong Fan&#39;, &#39;Mei Sheng Fan&#39;, &#39;Ka-Kui Ho&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Long Riders&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Walter Hill&#39;],  &#39;actors&#39;: [&#39;David Carradine&#39;,   &#39;Stacy Keach&#39;,   &#39;Dennis Quaid&#39;,   &#39;Keith Carradine&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Office Romance&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 8.4,  &#39;directors&#39;: [&#39;Eldar Ryazanov&#39;],  &#39;actors&#39;: [&#39;Andrey Myagkov&#39;, &#39;Oleg Basilashvili&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Salamander&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Peter Zinner&#39;],  &#39;actors&#39;: [&#39;Franco Nero&#39;, &#39;Anthony Quinn&#39;, &#39;Martin Balsam&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Errand Boy&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Jerry Lewis&#39;],  &#39;actors&#39;: [&#39;Jerry Lewis&#39;, &#39;Brian Donlevy&#39;, &#39;Howard McNear&#39;, &#39;Dick Wesson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Advise &amp; Consent&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Otto Preminger&#39;],  &#39;actors&#39;: [&#39;Franchot Tone&#39;, &#39;Lew Ayres&#39;, &#39;Henry Fonda&#39;, &#39;Walter Pidgeon&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Shamrock Conspiracy&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;James Frawley&#39;],  &#39;actors&#39;: [&#39;Edward Woodward&#39;, &#39;Jeffrey Nordling&#39;, &#39;Kim Coates&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Village of the Damned&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Wolf Rilla&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Michael Gwynn&#39;, &#39;Laurence Naismith&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;City of the Living Dead&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Lucio Fulci&#39;],  &#39;actors&#39;: [&#39;Christopher George&#39;, &#39;Carlo De Mejo&#39;],  &#39;genres&#39;: [&#39;Horror&#39;]}, {&#39;title&#39;: &#39;The Parent Trap&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Nancy Meyers&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Prime Suspect&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Noel Black&#39;],  &#39;actors&#39;: [&#39;Mike Farrell&#39;, &#39;Lane Smith&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Frontier Marshal&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Allan Dwan&#39;],  &#39;actors&#39;: [&#39;John Carradine&#39;, &#39;Randolph Scott&#39;, &#39;Cesar Romero&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &quot;This Can&#39;t Be Love&quot;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Anthony Harvey&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Jason Bateman&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Devil in Love&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Ettore Scola&#39;],  &#39;actors&#39;: [&#39;Vittorio Gassman&#39;, &#39;Mickey Rooney&#39;, &#39;Ettore Manni&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Trail Street&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Robert Ryan&#39;, &quot;George &#39;Gabby&#39; Hayes&quot;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Bat*21&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Peter Markle&#39;],  &#39;actors&#39;: [&#39;Gene Hackman&#39;,   &#39;Danny Glover&#39;,   &#39;Jerry Reed&#39;,   &#39;David Marshall Grant&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Rudy&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;David Anspaugh&#39;],  &#39;actors&#39;: [&#39;Sean Astin&#39;, &#39;Jon Favreau&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Murders in the Zoo&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;A. Edward Sutherland&#39;],  &#39;actors&#39;: [&#39;John Lodge&#39;,   &#39;Charles Ruggles&#39;,   &#39;Lionel Atwill&#39;,   &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Horror&#39;]}, {&#39;title&#39;: &#39;White Squall&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Ridley Scott&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;John Savage&#39;, &#39;Scott Wolf&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Eyes Wide Shut&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Stanley Kubrick&#39;],  &#39;actors&#39;: [&#39;Tom Cruise&#39;, &#39;Todd Field&#39;, &#39;Sydney Pollack&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Bang&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Ash Baron-Cohen&#39;],  &#39;actors&#39;: [&#39;Peter Greene&#39;, &#39;Michael Newland&#39;, &#39;Erik Schrody&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Call Me Genius&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Robert Day&#39;],  &#39;actors&#39;: [&#39;Tony Hancock&#39;, &#39;George Sanders&#39;, &#39;Paul Massie&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Fever&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Larry Elikann&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;,   &#39;John Achorn&#39;,   &#39;Joe Spano&#39;,   &#39;John Dennis Johnston&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Spawn of the North&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;George Raft&#39;, &#39;Henry Fonda&#39;, &#39;Akim Tamiroff&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Casino&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Martin Scorsese&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Joe Pesci&#39;, &#39;James Woods&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Little Nemo: Adventures in Slumberland&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Masami Hata&#39;, &#39;William T. Hurtz&#39;],  &#39;actors&#39;: [&#39;Gabriel Damon&#39;,   &#39;Mickey Rooney&#39;,   &#39;Rene Auberjonois&#39;,   &#39;Danny Mann&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Gambling Lady&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Archie Mayo&#39;],  &#39;actors&#39;: [&#39;Joel McCrea&#39;, &quot;Pat O&#39;Brien&quot;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Dark Command&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Raoul Walsh&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Walter Pidgeon&#39;, &#39;Roy Rogers&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Lawless Range&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Frank McGlynn Jr.&#39;, &#39;Jack Curtis&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Say Anything...&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Cameron Crowe&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;John Mahoney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Man with the Gun&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Richard Wilson&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Henry Hull&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Magnificent Matador&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Manuel Rojas&#39;, &#39;Richard Denning&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Across 110th Street&#39;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Barry Shear&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;,   &#39;Yaphet Kotto&#39;,   &#39;Anthony Franciosa&#39;,   &#39;Frank Adu&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Flight from Destiny&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Vincent Sherman&#39;],  &#39;actors&#39;: [&#39;Thomas Mitchell&#39;, &#39;Jeffrey Lynn&#39;, &#39;James Stephenson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Green Berets&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;John Wayne&#39;, &#39;Mervyn LeRoy&#39;, &#39;Ray Kellogg&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;David Janssen&#39;, &#39;Jim Hutton&#39;, &#39;Aldo Ray&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Brave Bulls&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Robert Rossen&#39;],  &#39;actors&#39;: [&#39;Mel Ferrer&#39;, &#39;Anthony Quinn&#39;, &#39;Eugene Iglesias&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;It Started in Naples&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Melville Shavelson&#39;],  &#39;actors&#39;: [&#39;Clark Gable&#39;, &#39;Vittorio De Sica&#39;, &#39;Marietto&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Lust for Life&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Vincente Minnelli&#39;, &#39;George Cukor&#39;],  &#39;actors&#39;: [&#39;Kirk Douglas&#39;, &#39;Anthony Quinn&#39;, &#39;James Donald&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;White Witch Doctor&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Walter Slezak&#39;, &#39;Mashood Ajala&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;]}, {&#39;title&#39;: &#39;The Quest&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Lee H. Katzin&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Tim Matheson&#39;, &#39;Brian Keith&#39;, &#39;Keenan Wynn&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Nightwatch&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Ole Bornedal&#39;],  &#39;actors&#39;: [&#39;Ewan McGregor&#39;, &#39;Nick Nolte&#39;, &#39;Erich Anderson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Horror&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The High and the Mighty&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Robert Stack&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Toy Story 2&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Ash Brannon&#39;, &#39;Lee Unkrich&#39;, &#39;John Lasseter&#39;],  &#39;actors&#39;: [&#39;Tom Hanks&#39;, &#39;Tim Allen&#39;, &#39;Kelsey Grammer&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Carnival in Moscow&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Eldar Ryazanov&#39;],  &#39;actors&#39;: [&#39;Igor Ilyinsky&#39;, &#39;Yuri Belov&#39;, &#39;Georgiy Kulikov&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Our Town&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;George Schaefer&#39;],  &#39;actors&#39;: [&#39;Hal Holbrook&#39;, &#39;Ned Beatty&#39;, &#39;Robby Benson&#39;, &#39;Ronny Cox&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Love Songs&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Andre Braugher&#39;, &#39;Louis Gossett Jr.&#39;, &#39;Robert Townsend&#39;],  &#39;actors&#39;: [&#39;Robert Townsend&#39;, &#39;Carl Gordon&#39;],  &#39;genres&#39;: [&#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Hunters&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Dick Powell&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Robert Wagner&#39;, &#39;Richard Egan&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;I Want to Live!&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Robert Wise&#39;],  &#39;actors&#39;: [&#39;Simon Oakland&#39;, &#39;Theodore Bikel&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;High Risk&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Stewart Raffill&#39;],  &#39;actors&#39;: [&#39;James Brolin&#39;, &#39;Anthony Quinn&#39;, &#39;James Coburn&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Winter People&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Ted Kotcheff&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Lloyd Bridges&#39;, &#39;Mitchell Ryan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Purple Noon&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;René Clément&#39;],  &#39;actors&#39;: [&#39;Alain Delon&#39;, &#39;Maurice Ronet&#39;, &#39;Erno Crisa&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;A Clockwork Orange&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Stanley Kubrick&#39;],  &#39;actors&#39;: [&#39;Malcolm McDowell&#39;,   &#39;Patrick Magee&#39;,   &#39;Michael Bates&#39;,   &#39;Warren Clarke&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Madigan&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Don Siegel&#39;],  &#39;actors&#39;: [&#39;Richard Widmark&#39;, &#39;Henry Fonda&#39;, &#39;Harry Guardino&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Batman&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Tim Burton&#39;],  &#39;actors&#39;: [&#39;Michael Keaton&#39;, &#39;Jack Nicholson&#39;, &#39;Robert Wuhl&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;]}, {&#39;title&#39;: &#39;Sex and the Single Girl&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Richard Quine&#39;],  &#39;actors&#39;: [&#39;Tony Curtis&#39;, &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Blue Steel&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &quot;George &#39;Gabby&#39; Hayes&quot;, &#39;Edward Peil Sr.&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Good, the Bad and the Ugly&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 8.9,  &#39;directors&#39;: [&#39;Sergio Leone&#39;],  &#39;actors&#39;: [&#39;Clint Eastwood&#39;, &#39;Eli Wallach&#39;, &#39;Lee Van Cleef&#39;, &#39;Aldo Giuffrè&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;I Dream Too Much&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;John Cromwell&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Eric Blore&#39;, &#39;Osgood Perkins&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Appointment in Honduras&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Jacques Tourneur&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Zachary Scott&#39;, &#39;Rodolfo Acosta&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &quot;America&#39;s Dream&quot;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Paris Barclay&#39;, &#39;Bill Duke&#39;, &#39;Kevin Rodney Sullivan&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Wesley Snipes&#39;, &#39;Tate Donovan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Secret Agents&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Christian-Jaque&#39;,   &#39;Werner Klingler&#39;,   &#39;Carlo Lizzani&#39;,   &#39;Terence Young&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Robert Ryan&#39;, &#39;Vittorio Gassman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Bill: On His Own&#39;,  &#39;year&#39;: 1983,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Anthony Page&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Tracey Walter&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Rain People&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Francis Ford Coppola&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Robert Duvall&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Eraser&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Chuck Russell&#39;],  &#39;actors&#39;: [&#39;Arnold Schwarzenegger&#39;, &#39;James Caan&#39;, &#39;James Coburn&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Judge Dredd&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Danny Cannon&#39;],  &#39;actors&#39;: [&#39;Sylvester Stallone&#39;,   &#39;Armand Assante&#39;,   &#39;Rob Schneider&#39;,   &#39;Jürgen Prochnow&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Sea Chase&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;David Farrar&#39;, &#39;Lyle Bettger&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Monsieur Verdoux&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;Charles Chaplin&#39;, &#39;Allison Roddan&#39;, &#39;Robert Lewis&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Fast Workers&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Tod Browning&#39;],  &#39;actors&#39;: [&#39;John Gilbert&#39;, &#39;Robert Armstrong&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Conquest of the Planet of the Apes&#39;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;J. Lee Thompson&#39;],  &#39;actors&#39;: [&#39;Roddy McDowall&#39;, &#39;Don Murray&#39;, &#39;Ricardo Montalban&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;See You in the Morning&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Alan J. Pakula&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, ...]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bucket_counts</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> bucketize<span class="token punctuation">(</span>data<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>len<span class="token punctuation">(</span>bucketize<span class="token punctuation">(</span>data<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q29 how many movies are there of each genre, prior to 2000? (plot your answer)</span>plot_dict<span class="token punctuation">(</span>bucket_counts<span class="token punctuation">(</span>filter_year<span class="token punctuation">(</span>movies<span class="token punctuation">,</span> None<span class="token punctuation">,</span> <span class="token number">1999</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"genres"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Movie Count"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="output_43_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q30  how many movies are there of each genre, in or after 2000? (plot your answer)</span>plot_dict<span class="token punctuation">(</span>bucket_counts<span class="token punctuation">(</span>filter_year<span class="token punctuation">(</span>movies<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"genres"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Movie Count"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="output_44_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q31 how many movies have there been per year, since (and including) 2000? (plot your answer)</span>plot_dict<span class="token punctuation">(</span>bucket_counts<span class="token punctuation">(</span>filter_year<span class="token punctuation">(</span>movies<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"year"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Movie Count"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="output_45_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q32  what are the directing career spans of the directors who have directed for at least 30 years?</span><span class="token keyword">def</span> <span class="token function">career_span</span><span class="token punctuation">(</span>col<span class="token punctuation">,</span> years<span class="token punctuation">)</span><span class="token punctuation">:</span>    get_col <span class="token operator">=</span> bucketize<span class="token punctuation">(</span>movies<span class="token punctuation">,</span>col<span class="token punctuation">)</span>    res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>values <span class="token keyword">in</span> get_col<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>values<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    new_re <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>values <span class="token keyword">in</span> res<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        values<span class="token operator">=</span>sorted<span class="token punctuation">(</span>values<span class="token punctuation">)</span>        new_re<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> values    re <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> new_re<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            re<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            re<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> re<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> value <span class="token operator">>=</span> years<span class="token punctuation">:</span>            result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">return</span> resultcareer_span<span class="token punctuation">(</span><span class="token string">'directors'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>{&#39;Howard Hawks&#39;: 42, &#39;Charles Chaplin&#39;: 34, &#39;Henry Hathaway&#39;: 36, &#39;Stanley Kubrick&#39;: 46, &#39;Taylor Hackford&#39;: 32, &#39;Cecil B. DeMille&#39;: 30, &#39;Lee H. Katzin&#39;: 30, &#39;Richard Fleischer&#39;: 32, &#39;Sidney Lumet&#39;: 33, &#39;George Sherman&#39;: 33, &#39;John Huston&#39;: 30, &#39;Robert Siodmak&#39;: 30, &#39;Eldar Ryazanov&#39;: 31, &#39;Martin Ritt&#39;: 32}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q33 what are the acting career spans of the actors who have acted for at least 50 years?</span>career_span<span class="token punctuation">(</span><span class="token string">'actors'</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>{&#39;Kurt Russell&#39;: 50, &#39;Mickey Rooney&#39;: 75, &#39;Robert Mitchum&#39;: 51, &#39;Glenn Ford&#39;: 52, &#39;James Caan&#39;: 52, &#39;Anthony Quinn&#39;: 61, &#39;George Burns&#39;: 60, &#39;Dean Stockwell&#39;: 53}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q34 who are the 10 directors with the longest careers?</span><span class="token keyword">def</span> <span class="token function">row_ranking</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> row<span class="token punctuation">[</span><span class="token string">"span"</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">top_n_span</span><span class="token punctuation">(</span>buckets<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># TODO: spans should be a dictionary mapping name to career span</span>    spans <span class="token operator">=</span> career_span<span class="token punctuation">(</span>buckets<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    rows <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> spans<span class="token punctuation">:</span>        span <span class="token operator">=</span> spans<span class="token punctuation">[</span>name<span class="token punctuation">]</span>        rows<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span> <span class="token string">"span"</span><span class="token punctuation">:</span> span<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># we want to sort the rows so that those with the biggest spans</span>    <span class="token comment" spellcheck="true"># are first.  Notice that we aren't calling row_ranking, but rather</span>    <span class="token comment" spellcheck="true"># passing a reference to this function to the sort method.  The sort</span>    <span class="token comment" spellcheck="true"># method uses this function to determine how to rank the rows.</span>    <span class="token comment" spellcheck="true"># </span>    <span class="token comment" spellcheck="true"># we do a reverse sort because we want the biggest spans first,</span>    <span class="token comment" spellcheck="true"># not last</span>    rows<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span>row_ranking<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># TODO: return a slice of the rows</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">return</span> resulttop_n_span<span class="token punctuation">(</span><span class="token string">'directors'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[{&#39;name&#39;: &#39;Stanley Kubrick&#39;, &#39;span&#39;: 46}, {&#39;name&#39;: &#39;Howard Hawks&#39;, &#39;span&#39;: 42}, {&#39;name&#39;: &#39;Henry Hathaway&#39;, &#39;span&#39;: 36}, {&#39;name&#39;: &#39;Charles Chaplin&#39;, &#39;span&#39;: 34}, {&#39;name&#39;: &#39;Sidney Lumet&#39;, &#39;span&#39;: 33}, {&#39;name&#39;: &#39;George Sherman&#39;, &#39;span&#39;: 33}, {&#39;name&#39;: &#39;Taylor Hackford&#39;, &#39;span&#39;: 32}, {&#39;name&#39;: &#39;Richard Fleischer&#39;, &#39;span&#39;: 32}, {&#39;name&#39;: &#39;Martin Ritt&#39;, &#39;span&#39;: 32}, {&#39;name&#39;: &#39;Eldar Ryazanov&#39;, &#39;span&#39;: 31}]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q35 who are the 10 actors with the longest careers?</span>top_n_span<span class="token punctuation">(</span><span class="token string">'actors'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[{&#39;name&#39;: &#39;Mickey Rooney&#39;, &#39;span&#39;: 75}, {&#39;name&#39;: &#39;Anthony Quinn&#39;, &#39;span&#39;: 61}, {&#39;name&#39;: &#39;George Burns&#39;, &#39;span&#39;: 60}, {&#39;name&#39;: &#39;Dean Stockwell&#39;, &#39;span&#39;: 53}, {&#39;name&#39;: &#39;Glenn Ford&#39;, &#39;span&#39;: 52}, {&#39;name&#39;: &#39;James Caan&#39;, &#39;span&#39;: 52}, {&#39;name&#39;: &#39;Robert Mitchum&#39;, &#39;span&#39;: 51}, {&#39;name&#39;: &#39;Kurt Russell&#39;, &#39;span&#39;: 50}, {&#39;name&#39;: &#39;Robert De Niro&#39;, &#39;span&#39;: 49}, {&#39;name&#39;: &#39;Marlon Brando&#39;, &#39;span&#39;: 49}]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q36 what are the three genres in which movies receive the highest median rating?</span><span class="token keyword">def</span> <span class="token function">row_rank</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> row<span class="token punctuation">[</span><span class="token string">"rating"</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">get_best</span><span class="token punctuation">(</span>category<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    col <span class="token operator">=</span> bucketize<span class="token punctuation">(</span>movies<span class="token punctuation">,</span>category<span class="token punctuation">)</span>    temp<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>values <span class="token keyword">in</span> col<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>values<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'rating'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    temp_2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>values <span class="token keyword">in</span> temp<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        values<span class="token operator">=</span>sorted<span class="token punctuation">(</span>values<span class="token punctuation">)</span>        temp_2<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> values    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>values <span class="token keyword">in</span> temp_2<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'category'</span><span class="token punctuation">:</span>key<span class="token punctuation">,</span><span class="token string">'rating'</span><span class="token punctuation">:</span>median<span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'count'</span><span class="token punctuation">:</span>len<span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span>row_rank<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> <span class="token number">0</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">return</span> resultget_best<span class="token punctuation">(</span><span class="token string">'genres'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[{&#39;category&#39;: &#39;Animation&#39;, &#39;rating&#39;: 7.3, &#39;count&#39;: 45}, {&#39;category&#39;: &#39;History&#39;, &#39;rating&#39;: 6.7, &#39;count&#39;: 73}, {&#39;category&#39;: &#39;War&#39;, &#39;rating&#39;: 6.7, &#39;count&#39;: 99}]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q37 what were the 10 best years for movies?</span>get_best<span class="token punctuation">(</span><span class="token string">'year'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#the movies who have the highest median rating is not a good metric</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[{&#39;category&#39;: 1921, &#39;rating&#39;: 8.3, &#39;count&#39;: 1}, {&#39;category&#39;: 1925, &#39;rating&#39;: 8.2, &#39;count&#39;: 1}, {&#39;category&#39;: 1919, &#39;rating&#39;: 7.5, &#39;count&#39;: 1}, {&#39;category&#39;: 1923, &#39;rating&#39;: 7.3, &#39;count&#39;: 2}, {&#39;category&#39;: 1962, &#39;rating&#39;: 7.2, &#39;count&#39;: 17}, {&#39;category&#39;: 1964, &#39;rating&#39;: 7.1, &#39;count&#39;: 19}, {&#39;category&#39;: 1957, &#39;rating&#39;: 7.0, &#39;count&#39;: 24}, {&#39;category&#39;: 1985, &#39;rating&#39;: 7.0, &#39;count&#39;: 17}, {&#39;category&#39;: 1976, &#39;rating&#39;: 7.0, &#39;count&#39;: 17}, {&#39;category&#39;: 1963, &#39;rating&#39;: 6.95, &#39;count&#39;: 10}]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q38 what were the 5 best years for movies, if we only consider years with at least 10 movies?</span><span class="token keyword">def</span> <span class="token function">get_best_temp</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">:</span>    col <span class="token operator">=</span> bucketize<span class="token punctuation">(</span>movies<span class="token punctuation">,</span>category<span class="token punctuation">)</span>    temp<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>values <span class="token keyword">in</span> col<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>values<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'rating'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    temp_2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>values <span class="token keyword">in</span> temp<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        values<span class="token operator">=</span>sorted<span class="token punctuation">(</span>values<span class="token punctuation">)</span>        temp_2<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> values    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>values <span class="token keyword">in</span> temp_2<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'category'</span><span class="token punctuation">:</span>key<span class="token punctuation">,</span><span class="token string">'rating'</span><span class="token punctuation">:</span>median<span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'count'</span><span class="token punctuation">:</span>len<span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span>row_rank<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token keyword">def</span> <span class="token function">get_best_constrain</span><span class="token punctuation">(</span>category<span class="token punctuation">,</span>n<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> get_best_temp<span class="token punctuation">(</span>category<span class="token punctuation">)</span>    re <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span> <span class="token operator">>=</span> num<span class="token punctuation">:</span>            re<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    j <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>re<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> resultget_best_constrain<span class="token punctuation">(</span><span class="token string">'year'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[{&#39;category&#39;: 1962, &#39;rating&#39;: 7.2, &#39;count&#39;: 17}, {&#39;category&#39;: 1964, &#39;rating&#39;: 7.1, &#39;count&#39;: 19}, {&#39;category&#39;: 1957, &#39;rating&#39;: 7.0, &#39;count&#39;: 24}, {&#39;category&#39;: 1985, &#39;rating&#39;: 7.0, &#39;count&#39;: 17}, {&#39;category&#39;: 1976, &#39;rating&#39;: 7.0, &#39;count&#39;: 17}]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q39 who are the best 4 directors, if we only count directors having at least 3 movies?</span>get_best_constrain<span class="token punctuation">(</span><span class="token string">'directors'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[{&#39;category&#39;: &#39;Christopher Nolan&#39;, &#39;rating&#39;: 8.5, &#39;count&#39;: 9}, {&#39;category&#39;: &#39;Leonid Gayday&#39;, &#39;rating&#39;: 8.4, &#39;count&#39;: 5}, {&#39;category&#39;: &#39;Stanley Kubrick&#39;, &#39;rating&#39;: 8.3, &#39;count&#39;: 11}, {&#39;category&#39;: &#39;Sergio Leone&#39;, &#39;rating&#39;: 8.3, &#39;count&#39;: 7}]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q40 who are the 3 best actors, if we only count actors having at least 5 movies?</span>get_best_constrain<span class="token punctuation">(</span><span class="token string">'actors'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[{&#39;category&#39;: &#39;Henry Bergman&#39;, &#39;rating&#39;: 8.2, &#39;count&#39;: 5}, {&#39;category&#39;: &#39;Ioan Gruffudd&#39;, &#39;rating&#39;: 8.2, &#39;count&#39;: 6}, {&#39;category&#39;: &#39;Robert Lindsay&#39;, &#39;rating&#39;: 8.2, &#39;count&#39;: 6}]</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>KPI dashboard</title>
      <link href="/2020/01/02/demo/"/>
      <url>/2020/01/02/demo/</url>
      
        <content type="html"><![CDATA[<p>This is my kPI dashboard making by Excel. I learned it from Udemy <a href="https://www.udemy.com/course/excel-dashboards-reports/" target="_blank" rel="noopener">https://www.udemy.com/course/excel-dashboards-reports/</a></p><p><img src="db.gif" alt="png"></p>]]></content>
      
      
      <categories>
          
          <category> EXCEL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DashBoard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AB Test summary</title>
      <link href="/2019/12/22/ab-test-summary/"/>
      <url>/2019/12/22/ab-test-summary/</url>
      
        <content type="html"><![CDATA[<h1 id="Main-script-to-perform-an-A-B-experiment-using-simulated-data"><a href="#Main-script-to-perform-an-A-B-experiment-using-simulated-data" class="headerlink" title="Main script to perform an A/B experiment using simulated data"></a>Main script to perform an A/B experiment using simulated data</h1><p>Modules: N/A <br>Author: Cornelia Ilin <br>Email: <a href="mailto:cilin@wisc.edu" target="_blank" rel="noopener">cilin@wisc.edu</a> <br>Date created: Oct 13, 2019 <br></p><p>Citations (online sources):</p><ul><li>[1] info on Bernoulli and Binomial Random Variables, as well as Sampling Distribution of Sample Proportions <br><a href="https://www.khanacademy.org/math/ap-statistics/sampling-distribution-ap/sampling-distribution-proportion/v/sampling-distribution-of-sample-proportion-part-1" target="_blank" rel="noopener">https://www.khanacademy.org/math/ap-statistics/sampling-distribution-ap/sampling-distribution-proportion/v/sampling-distribution-of-sample-proportion-part-1</a></li><li>[2] info on hypothesis test for sample proportions <br><a href="https://www.khanacademy.org/math/ap-statistics/two-sample-inference/two-sample-z-test-proportions/v/hypothesis-test-for-difference-in-proportions-example" target="_blank" rel="noopener">https://www.khanacademy.org/math/ap-statistics/two-sample-inference/two-sample-z-test-proportions/v/hypothesis-test-for-difference-in-proportions-example</a></li><li>[3] Intro to power in significance tests <br><a href="https://www.khanacademy.org/math/ap-statistics/tests-significance-ap/error-probabilities-power/v/introduction-to-power-in-significance-tests" target="_blank" rel="noopener">https://www.khanacademy.org/math/ap-statistics/tests-significance-ap/error-probabilities-power/v/introduction-to-power-in-significance-tests</a></li><li>[4] The math behind A/B testing with example code <br><a href="https://towardsdatascience.com/the-math-behind-a-b-testing-with-example-code-part-1-of-2-7be752e1d06f" target="_blank" rel="noopener">https://towardsdatascience.com/the-math-behind-a-b-testing-with-example-code-part-1-of-2-7be752e1d06f</a></li><li>[5] Udacity/Google course on A/B testing <br><a href="https://classroom.udacity.com/courses/ud257/lessons/4028708543/concepts/39546791500923" target="_blank" rel="noopener">https://classroom.udacity.com/courses/ud257/lessons/4028708543/concepts/39546791500923</a></li></ul><p>Citations (persons): n/a</p><h3 id="Step-1-Define-functions"><a href="#Step-1-Define-functions" class="headerlink" title="Step 1: Define functions"></a>Step 1: Define functions</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">z_val</span><span class="token punctuation">(</span>sig_level<span class="token punctuation">,</span> power <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" A function that returns the z-value for given significance or power level    param sig_level: indicates the significance level, i.e. the probability to commit a type I error    return: z_onetail, z_twotail_minus, z_twotail_plus, z_power    """</span>    <span class="token comment" spellcheck="true"># draw normal distribution with mean = 0 and se = 1 (standardized random variable)</span>    z_dist <span class="token operator">=</span> scs<span class="token punctuation">.</span>norm<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># define alpha</span>    alpha <span class="token operator">=</span> sig_level    <span class="token comment" spellcheck="true"># find the value of z for which the cdf = 1 - alpha</span>    z_onetail <span class="token operator">=</span> z_dist<span class="token punctuation">.</span>ppf<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>alpha<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># find the value of z for which the cdf = alpha/2, and the cdf = 1-alpha/2</span>    z_twotail_left <span class="token operator">=</span> z_dist<span class="token punctuation">.</span>ppf<span class="token punctuation">(</span>alpha<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>    z_twotail_right <span class="token operator">=</span> z_dist<span class="token punctuation">.</span>ppf<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> alpha<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># find the value of z for which the cdf = power</span>    <span class="token keyword">if</span> power<span class="token punctuation">:</span>        power_val <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"Introduce the desired level of power: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        z_power <span class="token operator">=</span> round<span class="token punctuation">(</span>z_dist<span class="token punctuation">.</span>ppf<span class="token punctuation">(</span>power_val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        z_power <span class="token operator">=</span> <span class="token string">"n/a"</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>z_onetail<span class="token punctuation">,</span> z_twotail_left<span class="token punctuation">,</span> z_twotail_right<span class="token punctuation">,</span> z_power<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">z_distribution</span><span class="token punctuation">(</span>sig_level<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" A function that plots the distribution of the standardized random variable z    param sig_level: indicates the significance level, i.e. the probability to commit a type I error    return: none    """</span>    <span class="token comment" spellcheck="true"># draw normal distribution with mean = 0 and se = 1 (standardized random variable)</span>    z_dist <span class="token operator">=</span> scs<span class="token punctuation">.</span>norm<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># define values for x and y axes</span>    x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>z_dist<span class="token punctuation">.</span>ppf<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">,</span> z_dist<span class="token punctuation">.</span>ppf<span class="token punctuation">(</span><span class="token number">0.99</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> z_dist<span class="token punctuation">.</span>pdf<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># define alpha</span>    alpha <span class="token operator">=</span> sig_level    <span class="token comment" spellcheck="true"># define arrow propoerties (used for annotations in figure)</span>    arrow_properties <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'facecolor'</span><span class="token punctuation">:</span> <span class="token string">'black'</span><span class="token punctuation">,</span>        <span class="token string">'shrink'</span><span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span>        <span class="token string">'headlength'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token string">'width'</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">## plot 1, one-tailed test</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"Distribution of z_statistic with one-tail test"</span><span class="token punctuation">)</span>    lines <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#plt.title('The distribution of the z-statistic')</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"pdf"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># find confidence levels, find the value of z for which the cdf = 1 - alpha</span>    z_onetail <span class="token operator">=</span> z_val<span class="token punctuation">(</span>alpha<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># add fill</span>    plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"green"</span><span class="token punctuation">,</span> where <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> z_onetail<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># add annotation</span>    annotation <span class="token operator">=</span> plt<span class="token punctuation">.</span>annotate<span class="token punctuation">(</span><span class="token string">'\u03B1 = 0.05'</span><span class="token punctuation">,</span>                 xy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1.98</span><span class="token punctuation">,</span> <span class="token number">0.12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 xytext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1.98</span><span class="token punctuation">,</span> <span class="token number">0.20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 arrowprops <span class="token operator">=</span> arrow_properties<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">## plot 2, two-tailed test</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"Distribution of z_statistic with two-tail test"</span><span class="token punctuation">)</span>    lines <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"pdf"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"z value"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># find confidence levels, find the value of z for which the cdf = alpha/2, and the cdf = 1-alpha/2</span>    z_twotail_left <span class="token operator">=</span> z_val<span class="token punctuation">(</span>alpha<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    z_twotail_right <span class="token operator">=</span> z_val<span class="token punctuation">(</span>alpha<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># add fill</span>    plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"green"</span><span class="token punctuation">,</span> where <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> z_twotail_left<span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"green"</span><span class="token punctuation">,</span> where <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> z_twotail_right<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># add annotation</span>    annotation <span class="token operator">=</span> plt<span class="token punctuation">.</span>annotate<span class="token punctuation">(</span><span class="token string">'\u03B1 = 0.025'</span><span class="token punctuation">,</span>                 xy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">0.12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 xytext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">0.20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 arrowprops <span class="token operator">=</span> arrow_properties<span class="token punctuation">)</span>    annotation <span class="token operator">=</span> plt<span class="token punctuation">.</span>annotate<span class="token punctuation">(</span><span class="token string">'\u03B1 = 0.025'</span><span class="token punctuation">,</span>                 xy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">0.12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 xytext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">0.20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 arrowprops <span class="token operator">=</span> arrow_properties<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># adds more space between subplots</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"z value for one-tail test = "</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>z_onetail<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"z value for one-tail test = +-"</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>z_twotail_right<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">d_distribution</span><span class="token punctuation">(</span>alpha <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> beta <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> power <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> onetail <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" A function that plots the d_distribution    param alfa: colors the alpha region(s) when True, i.e. P(reject H0 | H0 is true)     param beta: computes and colors the beta region when True, i.e. P(accept H0 | H0 is false)    param power: computes and color the power region when True, i.e. P(reject H0 | H0 is false)    param onetail: sets test to one-tail when True    return: none    Note that under H0: d = 0, under Ha: d = d_hat     """</span>    <span class="token comment" spellcheck="true"># define values for the x axis</span>    <span class="token comment" spellcheck="true">#x = np.linspace(-0.08, 0.08, 100)</span>    x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">12</span> <span class="token operator">*</span> se_pool_hat<span class="token punctuation">,</span> <span class="token number">12</span> <span class="token operator">*</span> se_pool_hat<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># generate distribution under H0; d ~ N(0, SE_pool)</span>    d_dist_0 <span class="token operator">=</span> scs<span class="token punctuation">.</span>norm<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> se_pool_hat<span class="token punctuation">)</span><span class="token punctuation">.</span>pdf<span class="token punctuation">(</span>x<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># generate distribution under Ha: d ~ N(d_hat, SE_pool)</span>    d_dist_a <span class="token operator">=</span> scs<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>d_hat<span class="token punctuation">,</span> se_pool_hat<span class="token punctuation">)</span><span class="token punctuation">.</span>pdf<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># plot d_dist_0, d_dist_a</span>    plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    lines <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> d_dist_0<span class="token punctuation">,</span> label <span class="token operator">=</span> <span class="token string">"d_dist under H0"</span><span class="token punctuation">)</span>    lines <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> d_dist_a<span class="token punctuation">,</span> label <span class="token operator">=</span> <span class="token string">"d_dist under Ha"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># add title, axis labels, and legend</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Distribution of d under H0 and Ha"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'d value'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'pdf'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># draw confidence intervals under H0</span>    <span class="token comment" spellcheck="true"># remeber ci = d +- z*se_pool, under H0: d = 0</span>    <span class="token comment" spellcheck="true"># for alpha = 0.05, z_onetail = 1.65, z_twotail_left = -1.96, z_twotail_right = 1.96 (see output z_dist() function)</span>    <span class="token keyword">if</span> onetail<span class="token punctuation">:</span>        ci_right <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token number">1.65</span> <span class="token operator">*</span> se_pool_hat        plt<span class="token punctuation">.</span>axvline<span class="token punctuation">(</span>x <span class="token operator">=</span> ci_right<span class="token punctuation">,</span> linestyle <span class="token operator">=</span> <span class="token string">"--"</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"grey"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        ci_right <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token number">1.96</span> <span class="token operator">*</span> se_pool_hat        ci_left <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> <span class="token number">1.96</span> <span class="token operator">*</span> se_pool_hat        plt<span class="token punctuation">.</span>axvline<span class="token punctuation">(</span>x <span class="token operator">=</span> ci_left<span class="token punctuation">,</span> linestyle <span class="token operator">=</span> <span class="token string">"--"</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"grey"</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>axvline<span class="token punctuation">(</span>x <span class="token operator">=</span> ci_right<span class="token punctuation">,</span> linestyle <span class="token operator">=</span> <span class="token string">"--"</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"grey"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># compute alpha</span>    <span class="token comment" spellcheck="true"># alpha = the area under H0, to the left of ci_left and to the right of ci_right</span>    <span class="token keyword">if</span> alpha<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Green shaded area: H0 is false"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> onetail<span class="token punctuation">:</span>            plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> d_dist_0<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"olivedrab"</span><span class="token punctuation">,</span> where <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">></span> ci_right<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> d_dist_0<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"olivedrab"</span><span class="token punctuation">,</span> where <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> ci_left<span class="token punctuation">)</span><span class="token punctuation">)</span>            plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> d_dist_0<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"olivedrab"</span><span class="token punctuation">,</span> where <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">></span> ci_right<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># compute beta</span>    <span class="token comment" spellcheck="true"># beta = the area under Ha, to the left of ci_right</span>    <span class="token keyword">if</span> beta<span class="token punctuation">:</span>        beta_val <span class="token operator">=</span> scs<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>d_hat<span class="token punctuation">,</span> se_pool_hat<span class="token punctuation">)</span><span class="token punctuation">.</span>cdf<span class="token punctuation">(</span>ci_right<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#finds the P(d &lt; ci_right) under Ha</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Beta ="</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>beta_val<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Yelolw shaded area: Type II error area: P(accept H0|H0 is false)"</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> d_dist_a<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"goldenrod"</span><span class="token punctuation">,</span> where <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> ci_right<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># compute power</span>    <span class="token comment" spellcheck="true"># power = 1 - beta = the area under Ha, to the right of ci_right</span>    <span class="token keyword">if</span> power<span class="token punctuation">:</span>        power <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> scs<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>d_hat<span class="token punctuation">,</span> se_pool_hat<span class="token punctuation">)</span><span class="token punctuation">.</span>cdf<span class="token punctuation">(</span>ci_right<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#finds the P(d >= ci_right) = 1 - P (d &lt; ci_right) under Ha</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Power ="</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>power<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Blue shaded area: Power = 1- Beta, P(reject H0|H0 is false)"</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> d_dist_a<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"steelblue"</span><span class="token punctuation">,</span> where <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">></span> ci_right<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Step-2-Import-required-packages"><a href="#Step-2-Import-required-packages" class="headerlink" title="Step 2: Import required packages"></a>Step 2: Import required packages</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> scipy<span class="token punctuation">.</span>stats <span class="token keyword">as</span> scs<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> random<span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Step-3-Define-the-A-B-experiment"><a href="#Step-3-Define-the-A-B-experiment" class="headerlink" title="Step 3: Define the A/B experiment"></a>Step 3: Define the A/B experiment</h3><p>Assume that <strong>facebook.com/business</strong> runs an A/B test to see if changing the color of the “create an ad” button, increases the click-thorugh probability.</p><p>Let’s assume that the structure of the facebook.com/business website is as follows: [1] a homepage that includes the “create an ad” button; if create an ad is chosen, then [2] a webpage to “create new account”, and if new account is created, then [3] a webpage to buy adds.</p><p>To run the A/B experiement, the engineers at <strong>facebook.com/business</strong> create two versions of the homepage. One where the “create an ad” button is orange (existing version), and one where it is blue (experimental version). The former is served to the control users, and the later to the users in the treatment group.</p><p>Unfortunately, we don’t have this data available, so we will first need to generate it.</p><p>We assume that the total number of users that participate in the A/B experiement is 2000, equally devided between the control and treated groups. This means that the probability to be assigned to either the treatment or control group is 0.5.</p><h3 id="Step-4-Generate-toy-data"><a href="#Step-4-Generate-toy-data" class="headerlink" title="Step 4: Generate toy data"></a>Step 4: Generate toy data</h3><p>Notations:</p><ul><li>group A = control patients</li><li>group B = treated patients </li><li>p_c = click-though probability for the control group</li><li>p_t = click-thorugh probability for the treated group</li></ul><h4 id="Step-4-1-Set-seed"><a href="#Step-4-1-Set-seed" class="headerlink" title="Step 4.1: Set seed"></a>Step 4.1: Set seed</h4><pre class="line-numbers language-python"><code class="language-python">random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Step-4-2-Create-user-group-column"><a href="#Step-4-2-Create-user-group-column" class="headerlink" title="Step 4.2: Create user_group column"></a>Step 4.2: Create user_group column</h4><p>(with values A and B)</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># draw from Bernoulli distribution</span>user_group <span class="token operator">=</span> scs<span class="token punctuation">.</span>bernoulli<span class="token punctuation">.</span>rvs<span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token number">0.4</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># rename values, such that 0 = A and 1 = B; keep track of the length of group A and B</span>len_A <span class="token operator">=</span> <span class="token number">0</span>len_B <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> val <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>user_group<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">if</span> val <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        user_group<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"A"</span>        len_A <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        user_group<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"B"</span>        len_B <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Step-4-3-Create-user-click-column"><a href="#Step-4-3-Create-user-click-column" class="headerlink" title="Step 4.3: Create user_click column"></a>Step 4.3: Create user_click column</h4><p>(= 1 if a unique user clicked “create an ad” at least once)</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># first define the desired p_c and p_t, assuming p_t > p_c</span>p_c <span class="token operator">=</span> <span class="token number">0.10</span>p_t <span class="token operator">=</span> <span class="token number">0.12</span><span class="token comment" spellcheck="true"># draw user_click column from Bernoulli distribution for both group A and B</span>user_click_A <span class="token operator">=</span> scs<span class="token punctuation">.</span>bernoulli<span class="token punctuation">.</span>rvs<span class="token punctuation">(</span>p_c<span class="token punctuation">,</span> size <span class="token operator">=</span> len_A<span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>user_click_B <span class="token operator">=</span> scs<span class="token punctuation">.</span>bernoulli<span class="token punctuation">.</span>rvs<span class="token punctuation">(</span>p_t<span class="token punctuation">,</span> size <span class="token operator">=</span> len_B<span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Step-4-4-Combine-user-group-and-user-click-columns"><a href="#Step-4-4-Combine-user-group-and-user-click-columns" class="headerlink" title="Step 4.4 Combine user_group and user_click columns"></a>Step 4.4 Combine user_group and user_click columns</h4><p>create a dataframe</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># merge the two columns</span>user_click <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>index_A <span class="token operator">=</span> <span class="token number">0</span>index_B <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> val <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>user_group<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> val <span class="token operator">==</span> <span class="token string">"A"</span><span class="token punctuation">:</span>        user_click<span class="token punctuation">.</span>append<span class="token punctuation">(</span>user_click_A<span class="token punctuation">[</span>index_A<span class="token punctuation">]</span><span class="token punctuation">)</span>        index_A <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        user_click<span class="token punctuation">.</span>append<span class="token punctuation">(</span>user_click_B<span class="token punctuation">[</span>index_B<span class="token punctuation">]</span><span class="token punctuation">)</span>        index_B <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># create dataframe        </span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"user_group"</span><span class="token punctuation">:</span> user_group<span class="token punctuation">,</span> <span class="token string">"user_click"</span><span class="token punctuation">:</span> user_click<span class="token punctuation">}</span><span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># print the first five rows:</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_group</th>      <th>user_click</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>B</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>B</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>B</td>      <td>1</td>    </tr>    <tr>      <th>3</th>      <td>A</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>A</td>      <td>0</td>    </tr>  </tbody></table></div><h3 id="Step-5-Summary-statistics"><a href="#Step-5-Summary-statistics" class="headerlink" title="Step 5: Summary statistics"></a>Step 5: Summary statistics</h3><p>We assume our toy data is the real data of <strong>facebook.com/business</strong>‘ experiment</p><p>Notation:</p><ul><li>n_c = sample size control group</li><li>n_t = sample size treated group</li><li>x_c = number of users in the control group who click “create an ad”</li><li>x_t = number of users in the treated group who click “create an ad”</li><li>p_c_hat = estimated click-thorugh propbability of control group</li><li>p_t_hat = estimated click-thorugh probability of treated group</li></ul><h4 id="Step-5-1-Sample-sizes"><a href="#Step-5-1-Sample-sizes" class="headerlink" title="Step 5.1: Sample sizes"></a>Step 5.1: Sample sizes</h4><pre class="line-numbers language-python"><code class="language-python">n_c <span class="token operator">=</span> len_An_t <span class="token operator">=</span> len_B<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"n_c ="</span><span class="token punctuation">,</span> n_c<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"n_t ="</span><span class="token punctuation">,</span> n_t<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>n_c = 6038n_t = 3962</code></pre><h4 id="Step-5-2-Sum-of-user-click-by-group"><a href="#Step-5-2-Sum-of-user-click-by-group" class="headerlink" title="Step 5.2: Sum of user_click by group"></a>Step 5.2: Sum of user_click by group</h4><pre class="line-numbers language-python"><code class="language-python">x_c <span class="token operator">=</span> <span class="token number">0</span>x_t <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> ind <span class="token keyword">in</span> data<span class="token punctuation">.</span>index<span class="token punctuation">:</span>    <span class="token keyword">if</span> data<span class="token punctuation">[</span><span class="token string">"user_group"</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ind<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"A"</span> <span class="token operator">and</span> data<span class="token punctuation">[</span><span class="token string">"user_click"</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ind<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>         x_c <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">if</span> data<span class="token punctuation">[</span><span class="token string">"user_group"</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ind<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"B"</span> <span class="token operator">and</span> data<span class="token punctuation">[</span><span class="token string">"user_click"</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ind<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>         x_t <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x_c = "</span><span class="token punctuation">,</span> x_c<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x_t = "</span><span class="token punctuation">,</span> x_t<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>x_c =  605x_t =  471</code></pre><h4 id="Step-5-3-Click-thourgh-probability-by-group"><a href="#Step-5-3-Click-thourgh-probability-by-group" class="headerlink" title="Step 5.3: Click-thourgh probability by group"></a>Step 5.3: Click-thourgh probability by group</h4><p>Def: click-thorugh probability = unique users who click / unique total users <br>We can think of the click-through probability as being the sample proportion</p><pre class="line-numbers language-python"><code class="language-python">p_c_hat <span class="token operator">=</span> x_c<span class="token operator">/</span>n_cp_t_hat <span class="token operator">=</span> x_t<span class="token operator">/</span>n_t<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p_c_hat = "</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>p_c_hat<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p_t_hat = "</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>p_t_hat<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>p_c_hat =  0.1p_t_hat =  0.12</code></pre><h3 id="Step-6-Hypothesis-testing"><a href="#Step-6-Hypothesis-testing" class="headerlink" title="Step 6: Hypothesis testing"></a>Step 6: Hypothesis testing</h3><p>We want to see if chaging the color of the “create an ad” has any statistically significant effects on the click-through probability. <br>Remember that “create an ad” button is orange for the control gorup, and blue for the the treated group. <br></p><p>Our hypothesis is as follows: <br>H0: p_c = p_t, in other words p_c - p_t = 0 <br>Ha: p_t - p_c != 0 (try both one tail and two tail test)</p><p><strong>Let</strong>: <br>d = p_c - p_t <br>alpha = P(reject H0 | H0 is true) <br>beta = P(accept H0 | H0 is false) <br>power = 1 - beta = P(reject H0 | H0 is false)</p><p>To test the hypthesis we construct the z_statistic ~ N(0, 1)</p><h4 id="Step-6-1-Compute-the-z-statistic"><a href="#Step-6-1-Compute-the-z-statistic" class="headerlink" title="Step 6.1 Compute the z_statistic"></a>Step 6.1 Compute the z_statistic</h4><p>We assume the followings:</p><ul><li>H0 is true</li><li>random variables</li><li>iid</li></ul><p>Then, <br>z = (p_t_hat - p_c_hat) - 0/ SE(p_t_hat - p_c_hat) <br></p><p>Note:</p><ul><li>For a Bernoulli random variable: mean = p; variance = p(1-p); se = sqrt(p(1-p))</li><li>For Binomial random variable: mean = n <em> p; variance = n </em> p(1-p) = sqrt(n * (p(1-p))</li><li>Under the Central Limit Theorem, as the number of samples increases, the distribution of the sample proportion means (p_hat), will be ~ N(p, sqrt(p(1-p)/n))</li></ul><p>Thus,<br>se(p_t_hat - p_c_hat) = sqrt(p_t_hat(1-p_t_hat)/n_t) + sqrt(p_c_hat(1-p_c_hat)/n_c)</p><p>Note:</p><ul><li>cov(p_t_hat, p_c_hat) = 0 due to iid assumption.</li><li>because we assume that H0 is true (p_t = p_c), then we can compute SE_pool</li></ul><p>Thus, <br>se_pool = sqrt(p_pool_hat(1-p_pool_hat) * (1/n_t + 1/n_c) <br>where,<br>p_pool_hat = (x_c + x_t)/(n_c + n_t)</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># compute d = p_t_hat - p_c_hat</span>d_hat <span class="token operator">=</span> p_t_hat <span class="token operator">-</span> p_c_hat<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"d_hat ="</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>d_hat<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>d_hat = 0.02</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># compute p_pool_hat</span>p_pool_hat <span class="token operator">=</span> <span class="token punctuation">(</span>x_c <span class="token operator">+</span> x_t<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>n_c <span class="token operator">+</span> n_t<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p_pool_hat = "</span><span class="token punctuation">,</span> p_pool_hat<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>p_pool_hat =  0.1076</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># compute se_pool_hat</span>se_pool_hat <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>p_pool_hat <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>p_pool_hat<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span>n_c <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">/</span>n_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"se_pool_hat = "</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>se_pool_hat<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>se_pool_hat =  0.01</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># compute the z-statistic</span>z_statistic <span class="token operator">=</span> d_hat<span class="token operator">/</span>se_pool_hat<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"z_statistic ="</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>z_statistic<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Remeber that the z-statistic is ~ N(0, 1)"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>z_statistic = 2.95Remeber that the z-statistic is ~ N(0, 1)</code></pre><h4 id="Step-6-2-Find-p-val-Test-if-H0-is-true"><a href="#Step-6-2-Find-p-val-Test-if-H0-is-true" class="headerlink" title="Step 6.2: Find p_val. Test if H0 is true"></a>Step 6.2: Find p_val. Test if H0 is true</h4><p>Define p_val:</p><ul><li>if one-tailed test: p_val = P(Z &gt;= z) = 1 - P(Z &lt; z)</li><li>if two-tailed test: p_val = P(Z &lt;= -z or Z &gt;= z) = 1 - P(-z &lt; Z &lt; z) = 1- [P(Z &lt; z) - P (Z &lt; -z)]</li></ul><p>For a one-tailed test:</p><ul><li>if p_val &gt; alpha, accept H0 <br></li><li>if p_val &lt; alpha, reject H0 </li></ul><p>For a two-tailed test:</p><ul><li>if p_val &gt; alpha/2, accept H0 <br></li><li>if p_val &lt; alpha/2, reject H0 </li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># print message</span>accept <span class="token operator">=</span> <span class="token string">"Accept H0. p_val > alpha\n"</span>reject <span class="token operator">=</span> <span class="token string">"Reject H0. p_val &lt; alpha\n"</span><span class="token comment" spellcheck="true"># z_distribution</span>z_dist <span class="token operator">=</span> scs<span class="token punctuation">.</span>norm<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># alpha level</span>alpha <span class="token operator">=</span> <span class="token number">0.05</span><span class="token comment" spellcheck="true">## one-tailed test, find P(Z &lt; z_statistic) and then compute p_val</span>cdf_onetail <span class="token operator">=</span> z_dist<span class="token punctuation">.</span>cdf<span class="token punctuation">(</span>z_statistic<span class="token punctuation">)</span>p_val_onetail <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> cdf_onetail<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"one-tail test: p_val = "</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>p_val_onetail<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">if</span> p_val_onetail <span class="token operator">&lt;</span> alpha<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>reject<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>accept<span class="token punctuation">)</span><span class="token comment" spellcheck="true">## two_tailed test, find P (Z &lt; z) - P (Z &lt; -z), then compute p_val</span>cdf_twotail <span class="token operator">=</span> z_dist<span class="token punctuation">.</span>cdf<span class="token punctuation">(</span>z_statistic<span class="token punctuation">)</span> <span class="token operator">-</span> z_dist<span class="token punctuation">.</span>cdf<span class="token punctuation">(</span><span class="token operator">-</span>z_statistic<span class="token punctuation">)</span>p_val_twotail <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> cdf_twotail<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"two-tailed test: p_val = "</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>p_val_twotail<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">if</span> p_val_twotail <span class="token operator">&lt;</span> alpha<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>reject<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>accept<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>one-tail test: p_val =  0.0016Reject H0. p_val &lt; alphatwo-tailed test: p_val =  0.0032Reject H0. p_val &lt; alpha</code></pre><p>​    </p><h4 id="Step-6-3-Plot-the-distribution-of-d-under-H0-and-Ha"><a href="#Step-6-3-Plot-the-distribution-of-d-under-H0-and-Ha" class="headerlink" title="Step 6.3: Plot the distribution of d under H0 and Ha"></a>Step 6.3: Plot the distribution of d under H0 and Ha</h4><pre class="line-numbers language-python"><code class="language-python">d_distribution<span class="token punctuation">(</span>alpha <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Green shaded area: H0 is false</code></pre><p><img src="1_34_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">d_distribution<span class="token punctuation">(</span>beta <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Beta = 0.097Yelolw shaded area: Type II error area: P(accept H0|H0 is false)</code></pre><p><img src="1_35_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">d_distribution<span class="token punctuation">(</span>power <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Power = 0.903Blue shaded area: Power = 1- Beta, P(reject H0|H0 is false)</code></pre><p><img src="1_36_1.png" alt="png"></p><h3 id="Step-7-Find-appropiate-sample-size-for-A-B-test"><a href="#Step-7-Find-appropiate-sample-size-for-A-B-test" class="headerlink" title="Step 7: Find appropiate sample size for A/B test"></a>Step 7: Find appropiate sample size for A/B test</h3><p>Note: user introduces desired beta, power, alpha, one-tail or two-tail test parameters</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># define beta, power, and alpha</span>beta <span class="token operator">=</span> <span class="token number">0.2</span>power <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> betaalpha <span class="token operator">=</span> <span class="token number">0.05</span>one_tail <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># find the value of z that corresponds to the value of the power level (user input required)</span>z_power <span class="token operator">=</span> z_val<span class="token punctuation">(</span>alpha<span class="token punctuation">,</span> power <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The value of the z statistics for this level of power is"</span><span class="token punctuation">,</span> z_power<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># find the value of z that corresponds to the value of alpha</span><span class="token keyword">if</span> one_tail<span class="token punctuation">:</span>    z_alpha <span class="token operator">=</span> z_val<span class="token punctuation">(</span>alpha<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">else</span><span class="token punctuation">:</span>    z_alpha <span class="token operator">=</span> z_val<span class="token punctuation">(</span>alpha<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># find sample size</span>n <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> p_pool_hat <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span> p_pool_hat<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>z_power <span class="token operator">+</span> z_alpha<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span>p_t_hat <span class="token operator">-</span> p_c_hat<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The sample size needed for the parameters listed above ="</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Introduce the desired level of power: 0.8The value of the z statistics for this level of power is 0.842The sample size needed for the parameters listed above = 4320.61</code></pre>]]></content>
      
      
      <categories>
          
          <category> A_B Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> A_B Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS301_Proj10</title>
      <link href="/2019/12/15/cs301-proj10/"/>
      <url>/2019/12/15/cs301-proj10/</url>
      
        <content type="html"><![CDATA[<h1 id="CS301-Proj10"><a href="#CS301-Proj10" class="headerlink" title="CS301_Proj10"></a>CS301_Proj10</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>For your final CS 301 project, you’re going to analyze the wholeworld!</p><p>Specifically, you’re going to study various statistics for 174countries, answering questions such as: <em>what is the correlationbetween a country’s literacy rate and GDP?</em></p><p>To start, download <code>test.py</code> and <code>expected.html</code>.  You’ll also need todownload <code>lint.py</code> (see linter documentation under “Testing” below).Do not download any data files manually (you must write Python code todownload these automatically).  You’ll do all your work in a<code>main.ipynb</code>.</p><h1 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h1><p>For this project, you’ll be using one large JSON file with statisticsabout 174 countries adapted from<a href="https://www.kaggle.com/fernandol/countries-of-the-world" target="_blank" rel="noopener">here</a>.and you will also extract data from a snapshot of<a href="http://techslides.com/list-of-countries-and-capitals" target="_blank" rel="noopener">this page</a>.</p><p>First check these resources:</p><ul><li><a href="https://raw.githubusercontent.com/tylerharter/caraza-harter-com/master/tyler/cs301/fall19/data/countries.json" target="_blank" rel="noopener">https://raw.githubusercontent.com/tylerharter/caraza-harter-com/master/tyler/cs301/fall19/data/countries.json</a></li><li><a href="http://techslides.com/list-of-countries-and-capitals" target="_blank" rel="noopener">http://techslides.com/list-of-countries-and-capitals</a></li></ul><p>Some of the columns require a little extra explanation:</p><ul><li>area: measured in square miles</li><li>coastline: ratio of coast to area</li><li>birth-rate: births per 1000 people per year</li><li>death-rate: deaths per 1000 people per year</li><li>infant-mortality: per 1000 births</li><li>literacy: (out of 100%)</li><li>phones: number of phone per 1000 people</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#project: p10</span><span class="token comment" spellcheck="true">#submitter: naixinzhang</span><span class="token comment" spellcheck="true">#partner: none</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> requests<span class="token punctuation">,</span>json<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> os<span class="token keyword">from</span> pandas <span class="token keyword">import</span> DataFrame<span class="token punctuation">,</span> Series<span class="token keyword">from</span> math <span class="token keyword">import</span> radians<span class="token punctuation">,</span> cos<span class="token punctuation">,</span> sin<span class="token punctuation">,</span> asin<span class="token punctuation">,</span> sqrt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># We do not download again if the file already exists</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>str<span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" already exists!"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        r<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> r<span class="token punctuation">.</span>text        f <span class="token operator">=</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>str<span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" created!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">download<span class="token punctuation">(</span><span class="token string">"countries.json"</span><span class="token punctuation">,</span><span class="token string">"https://raw.githubusercontent.com/tylerharter/caraza-harter-com/master/tyler/cs301/fall19/data/countries.json"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;countries.json already exists!&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python">countries <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_json<span class="token punctuation">(</span><span class="token string">'countries.json'</span><span class="token punctuation">)</span>countries<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>area</th>      <th>birth-rate</th>      <th>coastline</th>      <th>continent</th>      <th>country</th>      <th>death-rate</th>      <th>gdp-per-capita</th>      <th>infant-mortality</th>      <th>literacy</th>      <th>net-migration</th>      <th>phones</th>      <th>population</th>      <th>region</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>756950</td>      <td>15.23</td>      <td>0.85</td>      <td>South America</td>      <td>Chile</td>      <td>5.81</td>      <td>9900</td>      <td>8.80</td>      <td>96,2</td>      <td>0.00</td>      <td>213,0</td>      <td>16134219</td>      <td>LATIN AMER. &amp; CARIB</td>    </tr>    <tr>      <th>1</th>      <td>665</td>      <td>17.80</td>      <td>24.21</td>      <td>Asia</td>      <td>Bahrain</td>      <td>4.14</td>      <td>16900</td>      <td>17.27</td>      <td>89,1</td>      <td>1.05</td>      <td>281,3</td>      <td>698585</td>      <td>NEAR EAST</td>    </tr>    <tr>      <th>2</th>      <td>22966</td>      <td>28.84</td>      <td>1.68</td>      <td>North America</td>      <td>Belize</td>      <td>5.72</td>      <td>4900</td>      <td>25.69</td>      <td>94,1</td>      <td>0.00</td>      <td>115,7</td>      <td>287730</td>      <td>LATIN AMER. &amp; CARIB</td>    </tr>    <tr>      <th>3</th>      <td>582650</td>      <td>39.72</td>      <td>0.09</td>      <td>Africa</td>      <td>Kenya</td>      <td>14.02</td>      <td>1000</td>      <td>61.47</td>      <td>85,1</td>      <td>-0.10</td>      <td>8,1</td>      <td>34707817</td>      <td>SUB-SAHARAN AFRICA</td>    </tr>    <tr>      <th>4</th>      <td>11854</td>      <td>33.05</td>      <td>3.12</td>      <td>Australia</td>      <td>Marshall Islands</td>      <td>4.78</td>      <td>1600</td>      <td>29.45</td>      <td>93,7</td>      <td>-6.04</td>      <td>91,2</td>      <td>60422</td>      <td>OCEANIA</td>    </tr>    <tr>      <th>5</th>      <td>111370</td>      <td>44.77</td>      <td>0.52</td>      <td>Africa</td>      <td>Liberia</td>      <td>23.10</td>      <td>1000</td>      <td>128.87</td>      <td>57,5</td>      <td>0.00</td>      <td>2,3</td>      <td>3042004</td>      <td>SUB-SAHARAN AFRICA</td>    </tr>    <tr>      <th>6</th>      <td>504782</td>      <td>10.06</td>      <td>0.98</td>      <td>Europe</td>      <td>Spain</td>      <td>9.72</td>      <td>22000</td>      <td>4.42</td>      <td>97,9</td>      <td>0.99</td>      <td>453,5</td>      <td>40397842</td>      <td>WESTERN EUROPE</td>    </tr>    <tr>      <th>7</th>      <td>65610</td>      <td>15.51</td>      <td>2.04</td>      <td>Asia</td>      <td>Sri Lanka</td>      <td>6.52</td>      <td>3700</td>      <td>14.35</td>      <td>92,3</td>      <td>-1.31</td>      <td>61,5</td>      <td>20222240</td>      <td>ASIA (EX. NEAR EAST)</td>    </tr>    <tr>      <th>8</th>      <td>212460</td>      <td>36.24</td>      <td>0.98</td>      <td>Asia</td>      <td>Oman</td>      <td>3.81</td>      <td>13100</td>      <td>19.51</td>      <td>75,8</td>      <td>0.28</td>      <td>85,5</td>      <td>3102229</td>      <td>NEAR EAST</td>    </tr>    <tr>      <th>9</th>      <td>316</td>      <td>10.22</td>      <td>62.28</td>      <td>Europe</td>      <td>Malta</td>      <td>8.10</td>      <td>17700</td>      <td>3.89</td>      <td>92,8</td>      <td>2.07</td>      <td>505,0</td>      <td>400214</td>      <td>WESTERN EUROPE</td>    </tr>    <tr>      <th>10</th>      <td>185180</td>      <td>27.76</td>      <td>0.10</td>      <td>Asia</td>      <td>Syria</td>      <td>4.81</td>      <td>3300</td>      <td>29.53</td>      <td>76,9</td>      <td>0.00</td>      <td>153,8</td>      <td>18881361</td>      <td>NEAR EAST</td>    </tr>    <tr>      <th>11</th>      <td>1759540</td>      <td>26.49</td>      <td>0.10</td>      <td>Africa</td>      <td>Libya</td>      <td>3.48</td>      <td>6400</td>      <td>24.60</td>      <td>82,6</td>      <td>0.00</td>      <td>127,1</td>      <td>5900754</td>      <td>NORTHERN AFRICA</td>    </tr>    <tr>      <th>12</th>      <td>752614</td>      <td>41.00</td>      <td>0.00</td>      <td>Africa</td>      <td>Zambia</td>      <td>19.93</td>      <td>800</td>      <td>88.29</td>      <td>80,6</td>      <td>0.00</td>      <td>8,2</td>      <td>11502010</td>      <td>SUB-SAHARAN AFRICA</td>    </tr>    <tr>      <th>13</th>      <td>10991</td>      <td>20.82</td>      <td>9.30</td>      <td>North America</td>      <td>Jamaica</td>      <td>6.52</td>      <td>3900</td>      <td>12.36</td>      <td>87,9</td>      <td>-4.92</td>      <td>124,0</td>      <td>2758124</td>      <td>LATIN AMER. &amp; CARIB</td>    </tr>    <tr>      <th>14</th>      <td>447400</td>      <td>26.36</td>      <td>0.00</td>      <td>Asia</td>      <td>Uzbekistan</td>      <td>7.84</td>      <td>1700</td>      <td>71.10</td>      <td>99,3</td>      <td>-1.72</td>      <td>62,9</td>      <td>27307134</td>      <td>C.W. OF IND. STATES</td>    </tr>    <tr>      <th>15</th>      <td>61</td>      <td>10.02</td>      <td>0.00</td>      <td>Europe</td>      <td>San Marino</td>      <td>8.17</td>      <td>34600</td>      <td>5.73</td>      <td>96,0</td>      <td>10.98</td>      <td>704,3</td>      <td>29251</td>      <td>WESTERN EUROPE</td>    </tr>    <tr>      <th>16</th>      <td>488100</td>      <td>27.61</td>      <td>0.00</td>      <td>Asia</td>      <td>Turkmenistan</td>      <td>8.60</td>      <td>5800</td>      <td>73.08</td>      <td>98,0</td>      <td>-0.86</td>      <td>74,6</td>      <td>5042920</td>      <td>C.W. OF IND. STATES</td>    </tr>    <tr>      <th>17</th>      <td>33843</td>      <td>15.70</td>      <td>0.00</td>      <td>Europe</td>      <td>Moldova</td>      <td>12.64</td>      <td>1800</td>      <td>40.42</td>      <td>99,1</td>      <td>-0.26</td>      <td>208,1</td>      <td>4466706</td>      <td>C.W. OF IND. STATES</td>    </tr>    <tr>      <th>18</th>      <td>28748</td>      <td>15.11</td>      <td>1.26</td>      <td>Europe</td>      <td>Albania</td>      <td>5.22</td>      <td>4500</td>      <td>21.52</td>      <td>86,5</td>      <td>-4.93</td>      <td>71,2</td>      <td>3581655</td>      <td>EASTERN EUROPE</td>    </tr>    <tr>      <th>19</th>      <td>53</td>      <td>11.40</td>      <td>194.34</td>      <td>North America</td>      <td>Bermuda</td>      <td>7.74</td>      <td>36000</td>      <td>8.53</td>      <td>98,0</td>      <td>2.49</td>      <td>851,4</td>      <td>65773</td>      <td>NORTHERN AMERICA</td>    </tr>    <tr>      <th>20</th>      <td>803940</td>      <td>29.74</td>      <td>0.13</td>      <td>Asia</td>      <td>Pakistan</td>      <td>8.23</td>      <td>2100</td>      <td>72.44</td>      <td>45,7</td>      <td>-2.77</td>      <td>31,8</td>      <td>165803560</td>      <td>ASIA (EX. NEAR EAST)</td>    </tr>    <tr>      <th>21</th>      <td>30528</td>      <td>10.38</td>      <td>0.22</td>      <td>Europe</td>      <td>Belgium</td>      <td>10.27</td>      <td>29100</td>      <td>4.68</td>      <td>98,0</td>      <td>1.23</td>      <td>462,6</td>      <td>10379067</td>      <td>WESTERN EUROPE</td>    </tr>    <tr>      <th>22</th>      <td>47000</td>      <td>33.65</td>      <td>0.00</td>      <td>Asia</td>      <td>Bhutan</td>      <td>12.70</td>      <td>1300</td>      <td>100.44</td>      <td>42,2</td>      <td>0.00</td>      <td>14,3</td>      <td>2279723</td>      <td>ASIA (EX. NEAR EAST)</td>    </tr>    <tr>      <th>23</th>      <td>587040</td>      <td>41.41</td>      <td>0.82</td>      <td>Africa</td>      <td>Madagascar</td>      <td>11.11</td>      <td>800</td>      <td>76.83</td>      <td>68,9</td>      <td>0.00</td>      <td>3,6</td>      <td>18595469</td>      <td>SUB-SAHARAN AFRICA</td>    </tr>    <tr>      <th>24</th>      <td>17363</td>      <td>27.41</td>      <td>0.00</td>      <td>Africa</td>      <td>Swaziland</td>      <td>29.74</td>      <td>4900</td>      <td>69.27</td>      <td>81,6</td>      <td>0.00</td>      <td>30,8</td>      <td>1136334</td>      <td>SUB-SAHARAN AFRICA</td>    </tr>    <tr>      <th>25</th>      <td>4167</td>      <td>16.68</td>      <td>60.60</td>      <td>Australia</td>      <td>French Polynesia</td>      <td>4.69</td>      <td>17500</td>      <td>8.44</td>      <td>98,0</td>      <td>2.94</td>      <td>194,5</td>      <td>274578</td>      <td>OCEANIA</td>    </tr>    <tr>      <th>26</th>      <td>64589</td>      <td>9.24</td>      <td>0.82</td>      <td>Europe</td>      <td>Latvia</td>      <td>13.66</td>      <td>10200</td>      <td>9.55</td>      <td>99,8</td>      <td>-2.23</td>      <td>321,4</td>      <td>2274735</td>      <td>BALTICS</td>    </tr>    <tr>      <th>27</th>      <td>93030</td>      <td>9.72</td>      <td>0.00</td>      <td>Europe</td>      <td>Hungary</td>      <td>13.11</td>      <td>13900</td>      <td>8.57</td>      <td>99,4</td>      <td>0.86</td>      <td>336,2</td>      <td>9981334</td>      <td>EASTERN EUROPE</td>    </tr>    <tr>      <th>28</th>      <td>693</td>      <td>9.34</td>      <td>27.85</td>      <td>Asia</td>      <td>Singapore</td>      <td>4.28</td>      <td>23700</td>      <td>2.29</td>      <td>92,5</td>      <td>11.53</td>      <td>411,4</td>      <td>4492150</td>      <td>ASIA (EX. NEAR EAST)</td>    </tr>    <tr>      <th>29</th>      <td>160</td>      <td>10.21</td>      <td>0.00</td>      <td>Europe</td>      <td>Liechtenstein</td>      <td>7.18</td>      <td>25000</td>      <td>4.70</td>      <td>100,0</td>      <td>4.85</td>      <td>585,5</td>      <td>33987</td>      <td>WESTERN EUROPE</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>144</th>      <td>267667</td>      <td>36.16</td>      <td>0.33</td>      <td>Africa</td>      <td>Gabon</td>      <td>12.25</td>      <td>5500</td>      <td>53.64</td>      <td>63,2</td>      <td>0.00</td>      <td>27,4</td>      <td>1424906</td>      <td>SUB-SAHARAN AFRICA</td>    </tr>    <tr>      <th>145</th>      <td>13790</td>      <td>12.77</td>      <td>3.63</td>      <td>North America</td>      <td>Puerto Rico</td>      <td>7.65</td>      <td>16800</td>      <td>8.24</td>      <td>94,1</td>      <td>-1.46</td>      <td>283,1</td>      <td>3927188</td>      <td>LATIN AMER. &amp; CARIB</td>    </tr>    <tr>      <th>146</th>      <td>338145</td>      <td>10.45</td>      <td>0.37</td>      <td>Europe</td>      <td>Finland</td>      <td>9.86</td>      <td>27400</td>      <td>3.57</td>      <td>100,0</td>      <td>0.95</td>      <td>405,3</td>      <td>5231372</td>      <td>WESTERN EUROPE</td>    </tr>    <tr>      <th>147</th>      <td>1240000</td>      <td>49.82</td>      <td>0.00</td>      <td>Africa</td>      <td>Mali</td>      <td>16.89</td>      <td>900</td>      <td>116.79</td>      <td>46,4</td>      <td>-0.33</td>      <td>6,4</td>      <td>11716829</td>      <td>SUB-SAHARAN AFRICA</td>    </tr>    <tr>      <th>148</th>      <td>2170</td>      <td>36.93</td>      <td>15.67</td>      <td>Africa</td>      <td>Comoros</td>      <td>8.20</td>      <td>700</td>      <td>74.93</td>      <td>56,5</td>      <td>0.00</td>      <td>24,5</td>      <td>690948</td>      <td>SUB-SAHARAN AFRICA</td>    </tr>    <tr>      <th>149</th>      <td>7686850</td>      <td>12.14</td>      <td>0.34</td>      <td>Australia</td>      <td>Australia</td>      <td>7.51</td>      <td>29000</td>      <td>4.69</td>      <td>100,0</td>      <td>3.98</td>      <td>565,5</td>      <td>20264082</td>      <td>OCEANIA</td>    </tr>    <tr>      <th>150</th>      <td>825418</td>      <td>24.32</td>      <td>0.19</td>      <td>Africa</td>      <td>Namibia</td>      <td>18.86</td>      <td>7200</td>      <td>48.98</td>      <td>84,0</td>      <td>0.00</td>      <td>62,6</td>      <td>2044147</td>      <td>SUB-SAHARAN AFRICA</td>    </tr>    <tr>      <th>151</th>      <td>181040</td>      <td>26.90</td>      <td>0.24</td>      <td>Asia</td>      <td>Cambodia</td>      <td>9.06</td>      <td>1900</td>      <td>71.48</td>      <td>69,4</td>      <td>0.00</td>      <td>2,6</td>      <td>13881427</td>      <td>ASIA (EX. NEAR EAST)</td>    </tr>    <tr>      <th>152</th>      <td>236040</td>      <td>47.35</td>      <td>0.00</td>      <td>Africa</td>      <td>Uganda</td>      <td>12.24</td>      <td>1400</td>      <td>67.83</td>      <td>69,9</td>      <td>0.00</td>      <td>3,6</td>      <td>28195754</td>      <td>SUB-SAHARAN AFRICA</td>    </tr>    <tr>      <th>153</th>      <td>945087</td>      <td>37.71</td>      <td>0.15</td>      <td>Africa</td>      <td>Tanzania</td>      <td>16.39</td>      <td>600</td>      <td>98.54</td>      <td>78,2</td>      <td>-2.06</td>      <td>4,0</td>      <td>37445392</td>      <td>SUB-SAHARAN AFRICA</td>    </tr>    <tr>      <th>154</th>      <td>27830</td>      <td>42.22</td>      <td>0.00</td>      <td>Africa</td>      <td>Burundi</td>      <td>13.46</td>      <td>600</td>      <td>69.29</td>      <td>51,6</td>      <td>-0.06</td>      <td>3,4</td>      <td>8090068</td>      <td>SUB-SAHARAN AFRICA</td>    </tr>    <tr>      <th>155</th>      <td>82880</td>      <td>18.96</td>      <td>1.59</td>      <td>Asia</td>      <td>United Arab Emirates</td>      <td>4.40</td>      <td>23200</td>      <td>14.51</td>      <td>77,9</td>      <td>1.03</td>      <td>475,3</td>      <td>2602713</td>      <td>NEAR EAST</td>    </tr>    <tr>      <th>156</th>      <td>329750</td>      <td>22.86</td>      <td>1.42</td>      <td>Asia</td>      <td>Malaysia</td>      <td>5.05</td>      <td>9000</td>      <td>17.70</td>      <td>88,7</td>      <td>0.00</td>      <td>179,0</td>      <td>24385858</td>      <td>ASIA (EX. NEAR EAST)</td>    </tr>    <tr>      <th>157</th>      <td>78866</td>      <td>9.02</td>      <td>0.00</td>      <td>Europe</td>      <td>Czech Republic</td>      <td>10.59</td>      <td>15700</td>      <td>3.93</td>      <td>99,9</td>      <td>0.97</td>      <td>314,3</td>      <td>10235455</td>      <td>EASTERN EUROPE</td>    </tr>    <tr>      <th>158</th>      <td>514000</td>      <td>13.87</td>      <td>0.63</td>      <td>Asia</td>      <td>Thailand</td>      <td>7.04</td>      <td>7400</td>      <td>20.48</td>      <td>92,6</td>      <td>0.00</td>      <td>108,9</td>      <td>64631595</td>      <td>ASIA (EX. NEAR EAST)</td>    </tr>    <tr>      <th>159</th>      <td>70280</td>      <td>14.45</td>      <td>2.06</td>      <td>Europe</td>      <td>Ireland</td>      <td>7.82</td>      <td>29600</td>      <td>5.39</td>      <td>98,0</td>      <td>4.99</td>      <td>500,5</td>      <td>4062235</td>      <td>WESTERN EUROPE</td>    </tr>    <tr>      <th>160</th>      <td>18270</td>      <td>22.55</td>      <td>6.18</td>      <td>Australia</td>      <td>Fiji</td>      <td>5.65</td>      <td>5800</td>      <td>12.62</td>      <td>93,7</td>      <td>-3.14</td>      <td>112,6</td>      <td>905949</td>      <td>OCEANIA</td>    </tr>    <tr>      <th>161</th>      <td>2717300</td>      <td>16.00</td>      <td>0.00</td>      <td>Asia</td>      <td>Kazakhstan</td>      <td>9.42</td>      <td>6300</td>      <td>29.21</td>      <td>98,4</td>      <td>-3.35</td>      <td>164,1</td>      <td>15233244</td>      <td>C.W. OF IND. STATES</td>    </tr>    <tr>      <th>162</th>      <td>1564116</td>      <td>21.59</td>      <td>0.00</td>      <td>Asia</td>      <td>Mongolia</td>      <td>6.95</td>      <td>1800</td>      <td>53.79</td>      <td>97,8</td>      <td>0.00</td>      <td>55,1</td>      <td>2832224</td>      <td>ASIA (EX. NEAR EAST)</td>    </tr>    <tr>      <th>163</th>      <td>198500</td>      <td>22.80</td>      <td>0.00</td>      <td>Asia</td>      <td>Kyrgyzstan</td>      <td>7.08</td>      <td>1600</td>      <td>35.64</td>      <td>97,0</td>      <td>-2.45</td>      <td>84,0</td>      <td>5213898</td>      <td>C.W. OF IND. STATES</td>    </tr>    <tr>      <th>164</th>      <td>527970</td>      <td>42.89</td>      <td>0.36</td>      <td>Asia</td>      <td>Yemen</td>      <td>8.30</td>      <td>800</td>      <td>61.50</td>      <td>50,2</td>      <td>0.00</td>      <td>37,2</td>      <td>21456188</td>      <td>NEAR EAST</td>    </tr>    <tr>      <th>165</th>      <td>9984670</td>      <td>10.78</td>      <td>2.02</td>      <td>North America</td>      <td>Canada</td>      <td>7.80</td>      <td>29800</td>      <td>4.75</td>      <td>97,0</td>      <td>5.96</td>      <td>552,2</td>      <td>33098932</td>      <td>NORTHERN AMERICA</td>    </tr>    <tr>      <th>166</th>      <td>262</td>      <td>12.74</td>      <td>61.07</td>      <td>North America</td>      <td>Cayman Islands</td>      <td>4.89</td>      <td>35000</td>      <td>8.19</td>      <td>98,0</td>      <td>18.75</td>      <td>836,3</td>      <td>45436</td>      <td>LATIN AMER. &amp; CARIB</td>    </tr>    <tr>      <th>167</th>      <td>118480</td>      <td>43.13</td>      <td>0.00</td>      <td>Africa</td>      <td>Malawi</td>      <td>19.33</td>      <td>600</td>      <td>103.32</td>      <td>62,7</td>      <td>0.00</td>      <td>7,9</td>      <td>13013926</td>      <td>SUB-SAHARAN AFRICA</td>    </tr>    <tr>      <th>168</th>      <td>86600</td>      <td>20.74</td>      <td>0.00</td>      <td>Europe</td>      <td>Azerbaijan</td>      <td>9.75</td>      <td>3400</td>      <td>81.74</td>      <td>97,0</td>      <td>-4.90</td>      <td>137,1</td>      <td>7961619</td>      <td>C.W. OF IND. STATES</td>    </tr>    <tr>      <th>169</th>      <td>2381740</td>      <td>17.14</td>      <td>0.04</td>      <td>Africa</td>      <td>Algeria</td>      <td>4.61</td>      <td>6000</td>      <td>31.00</td>      <td>70,0</td>      <td>-0.39</td>      <td>78,1</td>      <td>32930091</td>      <td>NORTHERN AFRICA</td>    </tr>    <tr>      <th>170</th>      <td>103000</td>      <td>13.64</td>      <td>4.83</td>      <td>Europe</td>      <td>Iceland</td>      <td>6.72</td>      <td>30900</td>      <td>3.31</td>      <td>99,9</td>      <td>2.38</td>      <td>647,7</td>      <td>299388</td>      <td>WESTERN EUROPE</td>    </tr>    <tr>      <th>171</th>      <td>748</td>      <td>25.37</td>      <td>56.02</td>      <td>Australia</td>      <td>Tonga</td>      <td>5.28</td>      <td>2200</td>      <td>12.62</td>      <td>98,5</td>      <td>0.00</td>      <td>97,7</td>      <td>114689</td>      <td>OCEANIA</td>    </tr>    <tr>      <th>172</th>      <td>27750</td>      <td>36.44</td>      <td>6.38</td>      <td>North America</td>      <td>Haiti</td>      <td>12.17</td>      <td>1600</td>      <td>73.45</td>      <td>52,9</td>      <td>-3.40</td>      <td>16,9</td>      <td>8308504</td>      <td>LATIN AMER. &amp; CARIB</td>    </tr>    <tr>      <th>173</th>      <td>1284000</td>      <td>45.73</td>      <td>0.00</td>      <td>Africa</td>      <td>Chad</td>      <td>16.38</td>      <td>1200</td>      <td>93.82</td>      <td>47,5</td>      <td>-0.11</td>      <td>1,3</td>      <td>9944201</td>      <td>SUB-SAHARAN AFRICA</td>    </tr>  </tbody></table><p>174 rows × 13 columns</p></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q1 How many countries do we have in our dataset?</span><span class="token keyword">def</span> <span class="token function">get_num_countries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> countries<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nunique<span class="token punctuation">(</span><span class="token punctuation">)</span>get_num_countries<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>174</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q2 what is the total area across all the countries in our dataset?</span><span class="token keyword">def</span> <span class="token function">get_total_area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> countries<span class="token punctuation">[</span><span class="token string">'area'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span>get_total_area<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>127170843</code></pre><pre class="line-numbers language-python"><code class="language-python">download<span class="token punctuation">(</span><span class="token string">'capitals.html'</span><span class="token punctuation">,</span> <span class="token string">'https://raw.githubusercontent.com/tylerharter/cs301-projects/master/fall19/p10/techslides-snapshot.html'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>&#39;capitals.html already exists!&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">state_stats</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    stats <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    html_string <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    doc <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_string<span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>    trs <span class="token operator">=</span> doc<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"tr"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> tr <span class="token keyword">in</span> trs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        cells <span class="token operator">=</span> tr<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"td"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>        j <span class="token operator">=</span> cells<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span>        stats<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">"country"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span>        j <span class="token operator">=</span> cells<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span>        stats<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">"capital"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span>         j <span class="token operator">=</span> cells<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span>        stats<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">"latitude"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>float<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>         j <span class="token operator">=</span> cells<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span>        stats<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">"longitude"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>float<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> statswi_stats <span class="token operator">=</span> state_stats<span class="token punctuation">(</span><span class="token string">"capitals.html"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"country"</span><span class="token punctuation">:</span>wi_stats<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token string">"capital"</span><span class="token punctuation">:</span>wi_stats<span class="token punctuation">[</span><span class="token string">'capital'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token string">"latitude"</span><span class="token punctuation">:</span>wi_stats<span class="token punctuation">[</span><span class="token string">'latitude'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token string">"longitude"</span><span class="token punctuation">:</span>wi_stats<span class="token punctuation">[</span><span class="token string">'longitude'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">}</span><span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">full <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>data<span class="token punctuation">,</span> countries<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'inner'</span><span class="token punctuation">)</span>capitals <span class="token operator">=</span> full<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">,</span><span class="token string">'capital'</span><span class="token punctuation">,</span><span class="token string">'latitude'</span><span class="token punctuation">,</span><span class="token string">'longitude'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>capitals<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>country</th>      <th>capital</th>      <th>latitude</th>      <th>longitude</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Afghanistan</td>      <td>Kabul</td>      <td>34.516667</td>      <td>69.183333</td>    </tr>    <tr>      <th>1</th>      <td>Albania</td>      <td>Tirana</td>      <td>41.316667</td>      <td>19.816667</td>    </tr>    <tr>      <th>2</th>      <td>Algeria</td>      <td>Algiers</td>      <td>36.750000</td>      <td>3.050000</td>    </tr>    <tr>      <th>3</th>      <td>Anguilla</td>      <td>The Valley</td>      <td>18.216667</td>      <td>-63.050000</td>    </tr>    <tr>      <th>4</th>      <td>Argentina</td>      <td>Buenos Aires</td>      <td>-34.583333</td>      <td>-58.666667</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q3 What are the country names in capitals.json?</span><span class="token keyword">def</span> <span class="token function">get_country</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> capitals<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> sorted<span class="token punctuation">(</span>res<span class="token punctuation">)</span>get_country<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;Afghanistan&#39;, &#39;Albania&#39;, &#39;Algeria&#39;, &#39;Anguilla&#39;, &#39;Argentina&#39;, &#39;Armenia&#39;, &#39;Aruba&#39;, &#39;Australia&#39;, &#39;Austria&#39;, &#39;Azerbaijan&#39;, &#39;Bahrain&#39;, &#39;Bangladesh&#39;, &#39;Barbados&#39;, &#39;Belarus&#39;, &#39;Belgium&#39;, &#39;Belize&#39;, &#39;Benin&#39;, &#39;Bermuda&#39;, &#39;Bhutan&#39;, &#39;Bolivia&#39;, &#39;Botswana&#39;, &#39;Brazil&#39;, &#39;Bulgaria&#39;, &#39;Burkina Faso&#39;, &#39;Burundi&#39;, &#39;Cambodia&#39;, &#39;Cameroon&#39;, &#39;Canada&#39;, &#39;Cape Verde&#39;, &#39;Cayman Islands&#39;, &#39;Chad&#39;, &#39;Chile&#39;, &#39;China&#39;, &#39;Colombia&#39;, &#39;Comoros&#39;, &#39;Costa Rica&#39;, &#39;Croatia&#39;, &#39;Cuba&#39;, &#39;Czech Republic&#39;, &#39;Denmark&#39;, &#39;Djibouti&#39;, &#39;Dominica&#39;, &#39;Dominican Republic&#39;, &#39;Ecuador&#39;, &#39;Egypt&#39;, &#39;El Salvador&#39;, &#39;Equatorial Guinea&#39;, &#39;Eritrea&#39;, &#39;Estonia&#39;, &#39;Ethiopia&#39;, &#39;Fiji&#39;, &#39;Finland&#39;, &#39;France&#39;, &#39;French Polynesia&#39;, &#39;Gabon&#39;, &#39;Georgia&#39;, &#39;Germany&#39;, &#39;Ghana&#39;, &#39;Greece&#39;, &#39;Grenada&#39;, &#39;Guam&#39;, &#39;Guatemala&#39;, &#39;Guinea&#39;, &#39;Guinea-Bissau&#39;, &#39;Guyana&#39;, &#39;Haiti&#39;, &#39;Honduras&#39;, &#39;Hungary&#39;, &#39;Iceland&#39;, &#39;India&#39;, &#39;Indonesia&#39;, &#39;Iran&#39;, &#39;Iraq&#39;, &#39;Ireland&#39;, &#39;Israel&#39;, &#39;Italy&#39;, &#39;Jamaica&#39;, &#39;Japan&#39;, &#39;Jordan&#39;, &#39;Kazakhstan&#39;, &#39;Kenya&#39;, &#39;Kuwait&#39;, &#39;Kyrgyzstan&#39;, &#39;Laos&#39;, &#39;Latvia&#39;, &#39;Lebanon&#39;, &#39;Lesotho&#39;, &#39;Liberia&#39;, &#39;Libya&#39;, &#39;Liechtenstein&#39;, &#39;Lithuania&#39;, &#39;Luxembourg&#39;, &#39;Madagascar&#39;, &#39;Malawi&#39;, &#39;Malaysia&#39;, &#39;Maldives&#39;, &#39;Mali&#39;, &#39;Malta&#39;, &#39;Marshall Islands&#39;, &#39;Mauritania&#39;, &#39;Mauritius&#39;, &#39;Mexico&#39;, &#39;Moldova&#39;, &#39;Monaco&#39;, &#39;Mongolia&#39;, &#39;Morocco&#39;, &#39;Mozambique&#39;, &#39;Namibia&#39;, &#39;Nepal&#39;, &#39;Netherlands&#39;, &#39;New Caledonia&#39;, &#39;New Zealand&#39;, &#39;Nicaragua&#39;, &#39;Niger&#39;, &#39;Nigeria&#39;, &#39;Norway&#39;, &#39;Oman&#39;, &#39;Pakistan&#39;, &#39;Palau&#39;, &#39;Panama&#39;, &#39;Papua New Guinea&#39;, &#39;Paraguay&#39;, &#39;Peru&#39;, &#39;Philippines&#39;, &#39;Poland&#39;, &#39;Portugal&#39;, &#39;Puerto Rico&#39;, &#39;Qatar&#39;, &#39;Romania&#39;, &#39;Russia&#39;, &#39;Rwanda&#39;, &#39;Saint Helena&#39;, &#39;Saint Lucia&#39;, &#39;Saint Vincent and the Grenadines&#39;, &#39;Samoa&#39;, &#39;San Marino&#39;, &#39;Saudi Arabia&#39;, &#39;Senegal&#39;, &#39;Seychelles&#39;, &#39;Sierra Leone&#39;, &#39;Singapore&#39;, &#39;Slovenia&#39;, &#39;Somalia&#39;, &#39;South Africa&#39;, &#39;Spain&#39;, &#39;Sri Lanka&#39;, &#39;Sudan&#39;, &#39;Suriname&#39;, &#39;Swaziland&#39;, &#39;Sweden&#39;, &#39;Switzerland&#39;, &#39;Syria&#39;, &#39;Taiwan&#39;, &#39;Tajikistan&#39;, &#39;Tanzania&#39;, &#39;Thailand&#39;, &#39;Togo&#39;, &#39;Tonga&#39;, &#39;Tunisia&#39;, &#39;Turkey&#39;, &#39;Turkmenistan&#39;, &#39;Uganda&#39;, &#39;Ukraine&#39;, &#39;United Arab Emirates&#39;, &#39;United Kingdom&#39;, &#39;United States&#39;, &#39;Uruguay&#39;, &#39;Uzbekistan&#39;, &#39;Vanuatu&#39;, &#39;Venezuela&#39;, &#39;Vietnam&#39;, &#39;Yemen&#39;, &#39;Zambia&#39;, &#39;Zimbabwe&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q4 What is the capital of Cuba?</span><span class="token keyword">def</span> <span class="token function">get_capital</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    capitals_country <span class="token operator">=</span> capitals<span class="token punctuation">[</span>capitals<span class="token punctuation">.</span>country <span class="token operator">==</span> <span class="token string">'Cuba'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> next<span class="token punctuation">(</span>iter<span class="token punctuation">(</span>capitals_country<span class="token punctuation">[</span><span class="token string">'capital'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>get_capital<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;Havana&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q5 Which country's capital is Tbilisi?</span><span class="token keyword">def</span> <span class="token function">get_countries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    capital <span class="token operator">=</span> capitals<span class="token punctuation">[</span>capitals<span class="token punctuation">.</span>capital <span class="token operator">==</span> <span class="token string">'Tbilisi'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> next<span class="token punctuation">(</span>iter<span class="token punctuation">(</span>capital<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>get_countries<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;Georgia&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q6 Which 7 countries have the southern-most capitals?</span><span class="token keyword">def</span> <span class="token function">get_southern_most</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> capitals<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'latitude'</span><span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> resget_southern_most<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;New Zealand&#39;, &#39;Australia&#39;, &#39;Uruguay&#39;, &#39;Argentina&#39;, &#39;Chile&#39;, &#39;Lesotho&#39;, &#39;Swaziland&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q7 Which 5 countries have the northern-most capitals?</span><span class="token keyword">def</span> <span class="token function">get_northern_most</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> capitals<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'latitude'</span><span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> resget_northern_most<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;Iceland&#39;, &#39;Finland&#39;, &#39;Norway&#39;, &#39;Estonia&#39;, &#39;Sweden&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q8 For birth-rate and death-rate, what are various summary statistics (e.g., mean, max, standard deviation, etc)?</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'birth-rate'</span><span class="token punctuation">:</span>countries<span class="token punctuation">[</span><span class="token string">'birth-rate'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                         <span class="token string">'death-rate'</span><span class="token punctuation">:</span>countries<span class="token punctuation">[</span><span class="token string">'death-rate'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>birth-rate</th>      <th>death-rate</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>174.000000</td>      <td>174.000000</td>    </tr>    <tr>      <th>mean</th>      <td>22.463851</td>      <td>9.625172</td>    </tr>    <tr>      <th>std</th>      <td>11.278992</td>      <td>5.187143</td>    </tr>    <tr>      <th>min</th>      <td>8.250000</td>      <td>2.410000</td>    </tr>    <tr>      <th>25%</th>      <td>12.597500</td>      <td>6.027500</td>    </tr>    <tr>      <th>50%</th>      <td>20.010000</td>      <td>8.230000</td>    </tr>    <tr>      <th>75%</th>      <td>29.860000</td>      <td>11.715000</td>    </tr>    <tr>      <th>max</th>      <td>50.730000</td>      <td>29.740000</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q9 For columns literacy and phones, what are various summary statistics?</span>countries<span class="token punctuation">[</span><span class="token string">'literacy'</span><span class="token punctuation">]</span> <span class="token operator">=</span> countries<span class="token punctuation">[</span><span class="token string">'literacy'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> regex<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>countries<span class="token punctuation">[</span><span class="token string">'literacy'</span><span class="token punctuation">]</span> <span class="token operator">=</span> countries<span class="token punctuation">[</span><span class="token string">'literacy'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float'</span><span class="token punctuation">)</span>countries<span class="token punctuation">[</span><span class="token string">'phones'</span><span class="token punctuation">]</span> <span class="token operator">=</span> countries<span class="token punctuation">[</span><span class="token string">'phones'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> regex<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>countries<span class="token punctuation">[</span><span class="token string">'phones'</span><span class="token punctuation">]</span> <span class="token operator">=</span> countries<span class="token punctuation">[</span><span class="token string">'phones'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float'</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'literacy'</span><span class="token punctuation">:</span>countries<span class="token punctuation">[</span><span class="token string">'literacy'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                         <span class="token string">'phones'</span><span class="token punctuation">:</span>countries<span class="token punctuation">[</span><span class="token string">'phones'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>literacy</th>      <th>phones</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>174.000000</td>      <td>174.000000</td>    </tr>    <tr>      <th>mean</th>      <td>82.362069</td>      <td>215.770690</td>    </tr>    <tr>      <th>std</th>      <td>20.003166</td>      <td>218.713811</td>    </tr>    <tr>      <th>min</th>      <td>17.600000</td>      <td>1.300000</td>    </tr>    <tr>      <th>25%</th>      <td>70.100000</td>      <td>32.000000</td>    </tr>    <tr>      <th>50%</th>      <td>92.100000</td>      <td>140.350000</td>    </tr>    <tr>      <th>75%</th>      <td>98.000000</td>      <td>331.750000</td>    </tr>    <tr>      <th>max</th>      <td>100.000000</td>      <td>1035.600000</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q10 What is the largest land-locked country in Europe?</span><span class="token keyword">def</span> <span class="token function">get_EU_largest_land_country</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    countries_EU_land <span class="token operator">=</span> countries<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>countries<span class="token punctuation">[</span><span class="token string">'continent'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Europe'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>countries<span class="token punctuation">[</span><span class="token string">'coastline'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    countries_EU_land_largest <span class="token operator">=</span> countries_EU_land<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'area'</span><span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> countries_EU_land_largestget_EU_largest_land_country<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;Belarus&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q11 What is the largest land-locked country in Asia?</span><span class="token keyword">def</span> <span class="token function">get_AS_largest_land_country</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    countries_AS_land <span class="token operator">=</span> countries<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>countries<span class="token punctuation">[</span><span class="token string">'continent'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Asia'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>countries<span class="token punctuation">[</span><span class="token string">'coastline'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    countries_AS_land_largest <span class="token operator">=</span> countries_AS_land<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'area'</span><span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> countries_AS_land_largestget_AS_largest_land_country<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;Kazakhstan&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q12 What is the most populous land-locked country in Asia?</span><span class="token keyword">def</span> <span class="token function">get_AS_most_pop_land_country</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    countries_AS_land <span class="token operator">=</span> countries<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>countries<span class="token punctuation">[</span><span class="token string">'continent'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Asia'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>countries<span class="token punctuation">[</span><span class="token string">'coastline'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    countries_AS_land_most_pop <span class="token operator">=</span> countries_AS_land<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'population'</span><span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> countries_AS_land_most_popget_AS_most_pop_land_country<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;Afghanistan&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Haversine Formula (https://stackoverflow.com/questions/4913349/haversine-formula-in-python-bearing-and-distance-between-two-gps-points)</span><span class="token keyword">def</span> <span class="token function">haversine</span><span class="token punctuation">(</span>lon1<span class="token punctuation">,</span> lat1<span class="token punctuation">,</span> lon2<span class="token punctuation">,</span> lat2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Calculate the great circle distance between two points     on the earth (specified in decimal degrees)    """</span>    <span class="token comment" spellcheck="true"># convert decimal degrees to radians </span>    lon1<span class="token punctuation">,</span> lat1<span class="token punctuation">,</span> lon2<span class="token punctuation">,</span> lat2 <span class="token operator">=</span> map<span class="token punctuation">(</span>radians<span class="token punctuation">,</span> <span class="token punctuation">[</span>lon1<span class="token punctuation">,</span> lat1<span class="token punctuation">,</span> lon2<span class="token punctuation">,</span> lat2<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># haversine formula </span>    dlon <span class="token operator">=</span> lon2 <span class="token operator">-</span> lon1     dlat <span class="token operator">=</span> lat2 <span class="token operator">-</span> lat1     a <span class="token operator">=</span> sin<span class="token punctuation">(</span>dlat<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> cos<span class="token punctuation">(</span>lat1<span class="token punctuation">)</span> <span class="token operator">*</span> cos<span class="token punctuation">(</span>lat2<span class="token punctuation">)</span> <span class="token operator">*</span> sin<span class="token punctuation">(</span>dlon<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span>    c <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> asin<span class="token punctuation">(</span>sqrt<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>     r <span class="token operator">=</span> <span class="token number">3956</span> <span class="token comment" spellcheck="true"># Radius of earth in kilometers. Use 3956 for miles</span>    <span class="token keyword">return</span> c <span class="token operator">*</span> r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q13 What is the distance between Camp Randall Stadium and the Wisconsin State Capital?</span>Randall_lon <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">89.411893</span>Randall_lat <span class="token operator">=</span> <span class="token number">43.070231</span>Wisconsin_lon <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">89.384113</span>Wisconsin_lat <span class="token operator">=</span> <span class="token number">43.074645</span>haversine<span class="token punctuation">(</span>Randall_lon<span class="token punctuation">,</span> Randall_lat<span class="token punctuation">,</span> Wisconsin_lon<span class="token punctuation">,</span> Wisconsin_lat<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1.433899492072933</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q14 What is the distance between France and Japan?</span><span class="token keyword">def</span> <span class="token function">get_distance</span><span class="token punctuation">(</span>country1<span class="token punctuation">,</span> country2<span class="token punctuation">)</span><span class="token punctuation">:</span>    country1_lon <span class="token operator">=</span> capitals<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>capitals<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span> <span class="token operator">==</span> country1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'longitude'</span><span class="token punctuation">]</span>    country1_lat <span class="token operator">=</span> capitals<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>capitals<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span> <span class="token operator">==</span> country1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'latitude'</span><span class="token punctuation">]</span>    country2_lon <span class="token operator">=</span> capitals<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>capitals<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span> <span class="token operator">==</span> country2<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'longitude'</span><span class="token punctuation">]</span>    country2_lat <span class="token operator">=</span> capitals<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>capitals<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span> <span class="token operator">==</span> country2<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'latitude'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> haversine<span class="token punctuation">(</span>country1_lon<span class="token punctuation">,</span> country1_lat<span class="token punctuation">,</span> country2_lon<span class="token punctuation">,</span> country2_lat<span class="token punctuation">)</span>get_distance<span class="token punctuation">(</span><span class="token string">'France'</span><span class="token punctuation">,</span> <span class="token string">'Japan'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>6032.330932363535</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q15 What are the distances between Guam, New Zealand, and Australia?</span>country_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Guam"</span><span class="token punctuation">,</span> <span class="token string">"New Zealand"</span><span class="token punctuation">,</span> <span class="token string">"Australia"</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">get_distances</span><span class="token punctuation">(</span>country_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> country1 <span class="token keyword">in</span> country_list<span class="token punctuation">:</span>        tmp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> country2 <span class="token keyword">in</span> country_list<span class="token punctuation">:</span>            <span class="token keyword">if</span> country1 <span class="token operator">==</span> country2<span class="token punctuation">:</span>                tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>get_distance<span class="token punctuation">(</span>country1<span class="token punctuation">,</span> country2<span class="token punctuation">)</span><span class="token punctuation">)</span>        data<span class="token punctuation">[</span>country1<span class="token punctuation">]</span> <span class="token operator">=</span> tmp    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index <span class="token operator">=</span> country_list<span class="token punctuation">)</span>    <span class="token keyword">return</span> dfget_distances<span class="token punctuation">(</span>country_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Guam</th>      <th>New Zealand</th>      <th>Australia</th>    </tr>  </thead>  <tbody>    <tr>      <th>Guam</th>      <td>NaN</td>      <td>4239.314912</td>      <td>3377.103870</td>    </tr>    <tr>      <th>New Zealand</th>      <td>4239.314912</td>      <td>NaN</td>      <td>1445.147895</td>    </tr>    <tr>      <th>Australia</th>      <td>3377.103870</td>      <td>1445.147895</td>      <td>NaN</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q16 What is the distance between every pair of countries in the Australian continent?</span><span class="token keyword">def</span> <span class="token function">get_distance_Australian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    country_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    country_AU <span class="token operator">=</span> countries<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>countries<span class="token punctuation">[</span><span class="token string">'continent'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Australia'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> country_AU<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        country_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> get_distances<span class="token punctuation">(</span>country_list<span class="token punctuation">)</span>get_distance_Australian<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Marshall Islands</th>      <th>French Polynesia</th>      <th>New Zealand</th>      <th>Vanuatu</th>      <th>Palau</th>      <th>Papua New Guinea</th>      <th>Guam</th>      <th>Samoa</th>      <th>New Caledonia</th>      <th>Australia</th>      <th>Fiji</th>      <th>Tonga</th>    </tr>  </thead>  <tbody>    <tr>      <th>Marshall Islands</th>      <td>NaN</td>      <td>3159.856137</td>      <td>3348.725378</td>      <td>1727.328621</td>      <td>2516.301728</td>      <td>2019.144119</td>      <td>1861.584428</td>      <td>1849.150692</td>      <td>2054.905160</td>      <td>3263.901948</td>      <td>1806.972599</td>      <td>2151.129410</td>    </tr>    <tr>      <th>French Polynesia</th>      <td>3159.856137</td>      <td>NaN</td>      <td>2668.807328</td>      <td>2765.339382</td>      <td>5447.018761</td>      <td>4265.757856</td>      <td>4961.131713</td>      <td>1496.953816</td>      <td>2864.497308</td>      <td>3920.570216</td>      <td>2102.135722</td>      <td>1686.539411</td>    </tr>    <tr>      <th>New Zealand</th>      <td>3348.725378</td>      <td>2668.807328</td>      <td>NaN</td>      <td>1671.641167</td>      <td>4218.188412</td>      <td>2767.607095</td>      <td>4239.314912</td>      <td>2062.548020</td>      <td>1400.483623</td>      <td>1445.147895</td>      <td>1613.916992</td>      <td>1510.219450</td>    </tr>    <tr>      <th>Vanuatu</th>      <td>1727.328621</td>      <td>2765.339382</td>      <td>1671.641167</td>      <td>NaN</td>      <td>2882.041892</td>      <td>1527.495923</td>      <td>2687.395771</td>      <td>1349.904435</td>      <td>335.602971</td>      <td>1687.810709</td>      <td>663.967196</td>      <td>1098.016273</td>    </tr>    <tr>      <th>Palau</th>      <td>2516.301728</td>      <td>5447.018761</td>      <td>4218.188412</td>      <td>2882.041892</td>      <td>NaN</td>      <td>1453.306058</td>      <td>800.243081</td>      <td>3956.305436</td>      <td>2974.892838</td>      <td>3099.023227</td>      <td>3468.037102</td>      <td>3931.843110</td>    </tr>    <tr>      <th>Papua New Guinea</th>      <td>2019.144119</td>      <td>4265.757856</td>      <td>2767.607095</td>      <td>1527.495923</td>      <td>1453.306058</td>      <td>NaN</td>      <td>1591.171595</td>      <td>2789.123270</td>      <td>1552.708901</td>      <td>1786.749660</td>      <td>2174.712829</td>      <td>2623.742354</td>    </tr>    <tr>      <th>Guam</th>      <td>1861.584428</td>      <td>4961.131713</td>      <td>4239.314912</td>      <td>2687.395771</td>      <td>800.243081</td>      <td>1591.171595</td>      <td>NaN</td>      <td>3520.883355</td>      <td>2871.868601</td>      <td>3377.103870</td>      <td>3165.570014</td>      <td>3617.512808</td>    </tr>    <tr>      <th>Samoa</th>      <td>1849.150692</td>      <td>1496.953816</td>      <td>2062.548020</td>      <td>1349.904435</td>      <td>3956.305436</td>      <td>2789.123270</td>      <td>3520.883355</td>      <td>NaN</td>      <td>1542.152644</td>      <td>2840.091065</td>      <td>716.316054</td>      <td>553.393188</td>    </tr>    <tr>      <th>New Caledonia</th>      <td>2054.905160</td>      <td>2864.497308</td>      <td>1400.483623</td>      <td>335.602971</td>      <td>2974.892838</td>      <td>1552.708901</td>      <td>2871.868601</td>      <td>1542.152644</td>      <td>NaN</td>      <td>1375.924712</td>      <td>825.890876</td>      <td>1179.069567</td>    </tr>    <tr>      <th>Australia</th>      <td>3263.901948</td>      <td>3920.570216</td>      <td>1445.147895</td>      <td>1687.810709</td>      <td>3099.023227</td>      <td>1786.749660</td>      <td>3377.103870</td>      <td>2840.091065</td>      <td>1375.924712</td>      <td>NaN</td>      <td>2145.768971</td>      <td>2362.766922</td>    </tr>    <tr>      <th>Fiji</th>      <td>1806.972599</td>      <td>2102.135722</td>      <td>1613.916992</td>      <td>663.967196</td>      <td>3468.037102</td>      <td>2174.712829</td>      <td>3165.570014</td>      <td>716.316054</td>      <td>825.890876</td>      <td>2145.768971</td>      <td>NaN</td>      <td>463.843872</td>    </tr>    <tr>      <th>Tonga</th>      <td>2151.129410</td>      <td>1686.539411</td>      <td>1510.219450</td>      <td>1098.016273</td>      <td>3931.843110</td>      <td>2623.742354</td>      <td>3617.512808</td>      <td>553.393188</td>      <td>1179.069567</td>      <td>2362.766922</td>      <td>463.843872</td>      <td>NaN</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q17 What is the most central country in the Australian continent?</span><span class="token keyword">def</span> <span class="token function">get_most_central_AU</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    df_AU <span class="token operator">=</span> get_distance_Australian<span class="token punctuation">(</span><span class="token punctuation">)</span>    df_AU_mean <span class="token operator">=</span> df_AU<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> numeric_only <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>    df_AU_mean <span class="token operator">=</span> df_AU_mean<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> df_AU_mean<span class="token punctuation">.</span>index<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>get_most_central_AU<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;Vanuatu&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q18 What is the least central country in Australia?</span><span class="token keyword">def</span> <span class="token function">get_least_central_AU</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    df_AU <span class="token operator">=</span> get_distance_Australian<span class="token punctuation">(</span><span class="token punctuation">)</span>    df_AU_mean <span class="token operator">=</span> df_AU<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> numeric_only <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>    df_AU_mean <span class="token operator">=</span> df_AU_mean<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> df_AU_mean<span class="token punctuation">.</span>index<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>get_least_central_AU<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;French Polynesia&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q19 How close is each country in Australia to it's nearest neighbor?</span><span class="token keyword">def</span> <span class="token function">AU_nearest_neighbor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    df_AU <span class="token operator">=</span> get_distance_Australian<span class="token punctuation">(</span><span class="token punctuation">)</span>    df_AU_idxmin <span class="token operator">=</span> df_AU<span class="token punctuation">.</span>idxmin<span class="token punctuation">(</span><span class="token punctuation">)</span>    df_AU_min <span class="token operator">=</span> df_AU<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span>    country_list <span class="token operator">=</span> df_AU_min<span class="token punctuation">.</span>index    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'nearest'</span><span class="token punctuation">:</span>df_AU_idxmin<span class="token punctuation">.</span>values<span class="token punctuation">,</span> <span class="token string">'distance'</span><span class="token punctuation">:</span>df_AU_min<span class="token punctuation">.</span>values<span class="token punctuation">}</span>    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index <span class="token operator">=</span> country_list<span class="token punctuation">)</span>    <span class="token keyword">return</span> dfAU_nearest_neighbor<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>nearest</th>      <th>distance</th>    </tr>  </thead>  <tbody>    <tr>      <th>Marshall Islands</th>      <td>Vanuatu</td>      <td>1727.328621</td>    </tr>    <tr>      <th>French Polynesia</th>      <td>Samoa</td>      <td>1496.953816</td>    </tr>    <tr>      <th>New Zealand</th>      <td>New Caledonia</td>      <td>1400.483623</td>    </tr>    <tr>      <th>Vanuatu</th>      <td>New Caledonia</td>      <td>335.602971</td>    </tr>    <tr>      <th>Palau</th>      <td>Guam</td>      <td>800.243081</td>    </tr>    <tr>      <th>Papua New Guinea</th>      <td>Palau</td>      <td>1453.306058</td>    </tr>    <tr>      <th>Guam</th>      <td>Palau</td>      <td>800.243081</td>    </tr>    <tr>      <th>Samoa</th>      <td>Tonga</td>      <td>553.393188</td>    </tr>    <tr>      <th>New Caledonia</th>      <td>Vanuatu</td>      <td>335.602971</td>    </tr>    <tr>      <th>Australia</th>      <td>New Caledonia</td>      <td>1375.924712</td>    </tr>    <tr>      <th>Fiji</th>      <td>Tonga</td>      <td>463.843872</td>    </tr>    <tr>      <th>Tonga</th>      <td>Fiji</td>      <td>463.843872</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q20 How far is each country in Australia to it's furthest neighbor?</span><span class="token keyword">def</span> <span class="token function">AU_furthest_neighbor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    df_AU <span class="token operator">=</span> get_distance_Australian<span class="token punctuation">(</span><span class="token punctuation">)</span>    df_AU_idxmax <span class="token operator">=</span> df_AU<span class="token punctuation">.</span>idxmax<span class="token punctuation">(</span><span class="token punctuation">)</span>    df_AU_max <span class="token operator">=</span> df_AU<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span>    country_list <span class="token operator">=</span> df_AU_max<span class="token punctuation">.</span>index    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'furthest'</span><span class="token punctuation">:</span>df_AU_idxmax<span class="token punctuation">.</span>values<span class="token punctuation">,</span> <span class="token string">'distance'</span><span class="token punctuation">:</span>df_AU_max<span class="token punctuation">.</span>values<span class="token punctuation">}</span>    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index <span class="token operator">=</span> country_list<span class="token punctuation">)</span>    <span class="token keyword">return</span> dfAU_furthest_neighbor<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>furthest</th>      <th>distance</th>    </tr>  </thead>  <tbody>    <tr>      <th>Marshall Islands</th>      <td>New Zealand</td>      <td>3348.725378</td>    </tr>    <tr>      <th>French Polynesia</th>      <td>Palau</td>      <td>5447.018761</td>    </tr>    <tr>      <th>New Zealand</th>      <td>Guam</td>      <td>4239.314912</td>    </tr>    <tr>      <th>Vanuatu</th>      <td>Palau</td>      <td>2882.041892</td>    </tr>    <tr>      <th>Palau</th>      <td>French Polynesia</td>      <td>5447.018761</td>    </tr>    <tr>      <th>Papua New Guinea</th>      <td>French Polynesia</td>      <td>4265.757856</td>    </tr>    <tr>      <th>Guam</th>      <td>French Polynesia</td>      <td>4961.131713</td>    </tr>    <tr>      <th>Samoa</th>      <td>Palau</td>      <td>3956.305436</td>    </tr>    <tr>      <th>New Caledonia</th>      <td>Palau</td>      <td>2974.892838</td>    </tr>    <tr>      <th>Australia</th>      <td>French Polynesia</td>      <td>3920.570216</td>    </tr>    <tr>      <th>Fiji</th>      <td>Palau</td>      <td>3468.037102</td>    </tr>    <tr>      <th>Tonga</th>      <td>Palau</td>      <td>3931.843110</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sqlite3conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'countries.db'</span><span class="token punctuation">)</span>countries<span class="token punctuation">.</span>to_sql<span class="token punctuation">(</span><span class="token string">"countries"</span><span class="token punctuation">,</span> conn<span class="token punctuation">,</span> if_exists<span class="token operator">=</span><span class="token string">"replace"</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>capitals<span class="token punctuation">.</span>to_sql<span class="token punctuation">(</span><span class="token string">"capitals"</span><span class="token punctuation">,</span> conn<span class="token punctuation">,</span> if_exists<span class="token operator">=</span><span class="token string">"replace"</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q21 In our dataset, how many countries are in each continent?</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_sql<span class="token punctuation">(</span><span class="token string">'select continent, count(country) AS `number of countries` from countries group by continent order by `number of countries`'</span><span class="token punctuation">,</span>conn<span class="token punctuation">)</span>df<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>continent</th>      <th>number of countries</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Australia</td>      <td>12</td>    </tr>    <tr>      <th>1</th>      <td>South America</td>      <td>12</td>    </tr>    <tr>      <th>2</th>      <td>North America</td>      <td>24</td>    </tr>    <tr>      <th>3</th>      <td>Asia</td>      <td>38</td>    </tr>    <tr>      <th>4</th>      <td>Europe</td>      <td>41</td>    </tr>    <tr>      <th>5</th>      <td>Africa</td>      <td>47</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q22 How many countries are in each continent? (answer with a plot)</span><span class="token comment" spellcheck="true">#plt.figure(figsize = (10,3)) </span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'continent'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>df<span class="token punctuation">[</span><span class="token string">'number of countries'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>fc <span class="token operator">=</span> <span class="token string">'black'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'continent'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'number of countries'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>rotation<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>([0, 1, 2, 3, 4, 5], &lt;a list of 6 Text xticklabel objects&gt;)</code></pre><p><img src="output_32_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q23 What is the total population of each continent?</span>df_pop <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_sql<span class="token punctuation">(</span><span class="token string">'select continent,sum(population) AS `total population` from countries group by continent order by `total population` DESC'</span><span class="token punctuation">,</span>conn<span class="token punctuation">)</span>bl <span class="token operator">=</span> df_pop<span class="token punctuation">[</span><span class="token string">'total population'</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">1000000</span>df_pop<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token string">'total population (million)'</span><span class="token punctuation">]</span> <span class="token operator">=</span> bldf_pop<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>columns <span class="token operator">=</span> <span class="token string">'total population'</span><span class="token punctuation">,</span>inplace <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>df_pop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>continent</th>      <th>total population (million)</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Asia</td>      <td>3739.902863</td>    </tr>    <tr>      <th>1</th>      <td>Africa</td>      <td>807.299195</td>    </tr>    <tr>      <th>2</th>      <td>Europe</td>      <td>792.053486</td>    </tr>    <tr>      <th>3</th>      <td>North America</td>      <td>515.041558</td>    </tr>    <tr>      <th>4</th>      <td>South America</td>      <td>375.441666</td>    </tr>    <tr>      <th>5</th>      <td>Australia</td>      <td>32.163025</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q24 What is the total population of each continent? (answer with a plot)</span><span class="token comment" spellcheck="true">#plt.figure(figsize = (10,3)) </span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>df_pop<span class="token punctuation">[</span><span class="token string">'continent'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>df_pop<span class="token punctuation">[</span><span class="token string">'total population (million)'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>fc <span class="token operator">=</span> <span class="token string">'black'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'continent'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'total population (million)'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>rotation<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>([0, 1, 2, 3, 4, 5], &lt;a list of 6 Text xticklabel objects&gt;)</code></pre><p><img src="output_34_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q25 What is the population of each country in South America?</span>df_sou <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_sql<span class="token punctuation">(</span><span class="token string">"select country,sum(population) AS population from countries where continent = 'South America' group by country order by population DESC "</span><span class="token punctuation">,</span>conn<span class="token punctuation">)</span>df_sou<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>country</th>      <th>population</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Brazil</td>      <td>188078227</td>    </tr>    <tr>      <th>1</th>      <td>Colombia</td>      <td>43593035</td>    </tr>    <tr>      <th>2</th>      <td>Argentina</td>      <td>39921833</td>    </tr>    <tr>      <th>3</th>      <td>Peru</td>      <td>28302603</td>    </tr>    <tr>      <th>4</th>      <td>Venezuela</td>      <td>25730435</td>    </tr>    <tr>      <th>5</th>      <td>Chile</td>      <td>16134219</td>    </tr>    <tr>      <th>6</th>      <td>Ecuador</td>      <td>13547510</td>    </tr>    <tr>      <th>7</th>      <td>Bolivia</td>      <td>8989046</td>    </tr>    <tr>      <th>8</th>      <td>Paraguay</td>      <td>6506464</td>    </tr>    <tr>      <th>9</th>      <td>Uruguay</td>      <td>3431932</td>    </tr>    <tr>      <th>10</th>      <td>Guyana</td>      <td>767245</td>    </tr>    <tr>      <th>11</th>      <td>Suriname</td>      <td>439117</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q26 What are the top 10 countries that have the largest real GDP?</span>df_top <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_sql<span class="token punctuation">(</span><span class="token string">"select country,population * `gdp-per-capita` AS `real GDP` from countries order by `real GDP` DESC "</span><span class="token punctuation">,</span>conn<span class="token punctuation">)</span>df_top_10 <span class="token operator">=</span> df_top<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>bl <span class="token operator">=</span> df_top_10<span class="token punctuation">[</span><span class="token string">'real GDP'</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">1000000000</span> df_top_10<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token string">'real GDP (billion)'</span><span class="token punctuation">]</span> <span class="token operator">=</span> bldf_top_10<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>columns <span class="token operator">=</span> <span class="token string">'real GDP'</span><span class="token punctuation">,</span>inplace <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>df_top_10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>country</th>      <th>real GDP (billion)</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>United States</td>      <td>11281.191327</td>    </tr>    <tr>      <th>1</th>      <td>China</td>      <td>6569.868565</td>    </tr>    <tr>      <th>2</th>      <td>Japan</td>      <td>3594.473830</td>    </tr>    <tr>      <th>3</th>      <td>India</td>      <td>3176.520785</td>    </tr>    <tr>      <th>4</th>      <td>Germany</td>      <td>2274.855452</td>    </tr>    <tr>      <th>5</th>      <td>France</td>      <td>1680.181354</td>    </tr>    <tr>      <th>6</th>      <td>United Kingdom</td>      <td>1678.873538</td>    </tr>    <tr>      <th>7</th>      <td>Italy</td>      <td>1552.164690</td>    </tr>    <tr>      <th>8</th>      <td>Brazil</td>      <td>1429.394525</td>    </tr>    <tr>      <th>9</th>      <td>Russia</td>      <td>1271.752506</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q27 What are the top 10 countries that have the largest real GDP? (answer with a plot)</span>ot <span class="token operator">=</span> sum<span class="token punctuation">(</span>df_top<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'real GDP'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000000000</span>df_top_10<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'new'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Other'</span><span class="token punctuation">,</span>ot<span class="token punctuation">]</span>df_top_10 <span class="token operator">=</span> df_top_10<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#plt.figure(figsize = (10,3))</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>df_top_10<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>df_top_10<span class="token punctuation">[</span><span class="token string">'real GDP (billion)'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>fc <span class="token operator">=</span> <span class="token string">'black'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'contry'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'GDP (billions)'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>my_y_ticks <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20000</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span>my_y_ticks<span class="token punctuation">)</span> plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>rotation<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], &lt;a list of 11 Text xticklabel objects&gt;)</code></pre><p><img src="output_37_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q28 What are the top 15 countries that have the largest gap between birth rate and death rate?</span>df_gap <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_sql<span class="token punctuation">(</span><span class="token string">"select country,`birth-rate`,`death-rate` from countries order by (`birth-rate`-`death-rate`) DESC  "</span><span class="token punctuation">,</span>conn<span class="token punctuation">)</span>df_gap<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>country</th>      <th>birth-rate</th>      <th>death-rate</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Uganda</td>      <td>47.35</td>      <td>12.24</td>    </tr>    <tr>      <th>1</th>      <td>Yemen</td>      <td>42.89</td>      <td>8.30</td>    </tr>    <tr>      <th>2</th>      <td>Mali</td>      <td>49.82</td>      <td>16.89</td>    </tr>    <tr>      <th>3</th>      <td>Oman</td>      <td>36.24</td>      <td>3.81</td>    </tr>    <tr>      <th>4</th>      <td>Madagascar</td>      <td>41.41</td>      <td>11.11</td>    </tr>    <tr>      <th>5</th>      <td>Burkina Faso</td>      <td>45.62</td>      <td>15.60</td>    </tr>    <tr>      <th>6</th>      <td>Niger</td>      <td>50.73</td>      <td>20.91</td>    </tr>    <tr>      <th>7</th>      <td>Chad</td>      <td>45.73</td>      <td>16.38</td>    </tr>    <tr>      <th>8</th>      <td>Mauritania</td>      <td>40.99</td>      <td>12.16</td>    </tr>    <tr>      <th>9</th>      <td>Burundi</td>      <td>42.22</td>      <td>13.46</td>    </tr>    <tr>      <th>10</th>      <td>Comoros</td>      <td>36.93</td>      <td>8.20</td>    </tr>    <tr>      <th>11</th>      <td>Somalia</td>      <td>45.13</td>      <td>16.63</td>    </tr>    <tr>      <th>12</th>      <td>Marshall Islands</td>      <td>33.05</td>      <td>4.78</td>    </tr>    <tr>      <th>13</th>      <td>Maldives</td>      <td>34.81</td>      <td>7.06</td>    </tr>    <tr>      <th>14</th>      <td>Togo</td>      <td>37.01</td>      <td>9.83</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q29 What are the top 15 countries that have the largest gap between birth rate and death rate? (answer with a plot)</span>df_gap<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>ax <span class="token operator">=</span> df_gap<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">.</span>plot<span class="token punctuation">.</span>barh<span class="token punctuation">(</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">"rate"</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_yticklabels<span class="token punctuation">(</span>df_gap<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">.</span>country<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[Text(0, 0, &#39;Uganda&#39;), Text(0, 0, &#39;Yemen&#39;), Text(0, 0, &#39;Mali&#39;), Text(0, 0, &#39;Oman&#39;), Text(0, 0, &#39;Madagascar&#39;), Text(0, 0, &#39;Burkina Faso&#39;), Text(0, 0, &#39;Niger&#39;), Text(0, 0, &#39;Chad&#39;), Text(0, 0, &#39;Mauritania&#39;), Text(0, 0, &#39;Burundi&#39;), Text(0, 0, &#39;Comoros&#39;), Text(0, 0, &#39;Somalia&#39;), Text(0, 0, &#39;Marshall Islands&#39;), Text(0, 0, &#39;Maldives&#39;), Text(0, 0, &#39;Togo&#39;)]</code></pre><p><img src="output_39_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q30 What is the relationship between death rates and birth rates? (answer with a plot)</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">"font.size"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>ax <span class="token operator">=</span> df_gap<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'death-rate'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'birth-rate'</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'death-rate'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Text(0.5, 0, &#39;death-rate&#39;)</code></pre><p><img src="output_40_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q31 Did you notice the six outliers? Which countries are they?</span>df_part <span class="token operator">=</span> df_gap<span class="token punctuation">[</span>df_gap<span class="token punctuation">[</span><span class="token string">'death-rate'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">16</span><span class="token punctuation">]</span>df_part <span class="token operator">=</span> df_part<span class="token punctuation">[</span>df_part<span class="token punctuation">[</span><span class="token string">'birth-rate'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">]</span>df_1 <span class="token operator">=</span> df_part<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">,</span><span class="token string">'death-rate'</span><span class="token punctuation">,</span><span class="token string">'birth-rate'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>df_1<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'death-rate'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>country</th>      <th>death-rate</th>      <th>birth-rate</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Namibia</td>      <td>18.86</td>      <td>24.32</td>    </tr>    <tr>      <th>1</th>      <td>Zimbabwe</td>      <td>21.84</td>      <td>28.01</td>    </tr>    <tr>      <th>2</th>      <td>South Africa</td>      <td>22.00</td>      <td>18.20</td>    </tr>    <tr>      <th>3</th>      <td>Lesotho</td>      <td>28.71</td>      <td>24.75</td>    </tr>    <tr>      <th>4</th>      <td>Botswana</td>      <td>29.50</td>      <td>23.08</td>    </tr>    <tr>      <th>5</th>      <td>Swaziland</td>      <td>29.74</td>      <td>27.41</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q32 What is the correlation between death rates and birth rates?</span>countries<span class="token punctuation">.</span>corr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'death-rate'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"birth-rate"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>0.3965086117752512</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q33 What is the relationship between GDP per capita and the number of phones per capita?</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">"font.size"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>ax <span class="token operator">=</span> countries<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'gdp-per-capita'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'phones'</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="output_43_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q34 What is the correlation between GDP per capita and number of phones per capita?</span>countries<span class="token punctuation">.</span>corr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'phones'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'gdp-per-capita'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>0.8786946640591311</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q35 What is the relationship between literacy and GDP per capita?</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">"font.size"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>ax <span class="token operator">=</span> countries<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'literacy'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'gdp-per-capita'</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="output_45_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q36 What is the relationship between GDP per capita and death rates?:</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">"font.size"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>ax <span class="token operator">=</span> countries<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'gdp-per-capita'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'death-rate'</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="output_46_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q37 What is the relationship between GDP per capita and birth rates?</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">"font.size"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>ax <span class="token operator">=</span> countries<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'gdp-per-capita'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'birth-rate'</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="output_47_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q38 What is the relationship between GDP per capita and the inverse of birth rates?</span>countries<span class="token punctuation">[</span><span class="token string">'inverse'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span>countries<span class="token punctuation">[</span><span class="token string">'birth-rate'</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">"font.size"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>ax <span class="token operator">=</span> countries<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'gdp-per-capita'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'inverse'</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_48_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q39 fit a y = m * x + n line to the scatter plot in question 38 using the least-squares method; what are the coefficients m and n?</span>countries<span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>res <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>lstsq<span class="token punctuation">(</span>countries<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"gdp-per-capita"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> countries<span class="token punctuation">[</span><span class="token string">"inverse"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rcond<span class="token operator">=</span>None<span class="token punctuation">)</span>coefficients <span class="token operator">=</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># coefficients is (m,n:</span>m <span class="token operator">=</span> coefficients<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># slope</span>n <span class="token operator">=</span> coefficients<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># intercept</span>coef_tuple <span class="token operator">=</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span>coef_tuple<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>(1.8365703926233426e-06, 0.03916624252079354)</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q40 plot the regression line to the scatter plot</span>ax <span class="token operator">=</span> countries<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'gdp-per-capita'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'inverse'</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token string">'gray'</span><span class="token punctuation">)</span>countries<span class="token punctuation">[</span><span class="token string">"fit"</span><span class="token punctuation">]</span> <span class="token operator">=</span> countries<span class="token punctuation">[</span><span class="token string">"gdp-per-capita"</span><span class="token punctuation">]</span> <span class="token operator">*</span> m <span class="token operator">+</span> ncountries<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>line<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'gdp-per-capita'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'fit'</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1a6a75308d0&gt;</code></pre><p><img src="output_50_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CS301Proj </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS301 Data Programming I </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS301_Proj9</title>
      <link href="/2019/11/30/cs301-proj9/"/>
      <url>/2019/11/30/cs301-proj9/</url>
      
        <content type="html"><![CDATA[<h1 id="CS301-Proj9"><a href="#CS301-Proj9" class="headerlink" title="CS301_Proj9"></a>CS301_Proj9</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In this project, you’ll be analyzing a collection of reviews of Amazon products (adapted from <a href="https://www.kaggle.com/datafiniti/consumer-reviews-of-amazon-products/data" target="_blank" rel="noopener">https://www.kaggle.com/datafiniti/consumer-reviews-of-amazon-products/data</a>).This data is messy!  You’ll face the following challenges:</p><ul><li>data is spread across multiple files</li><li>some files will be CSVs, others JSONs</li><li>the files may be missing values or be too corrupt to parse</li></ul><p>In stage 1, you’ll write code to cleanup the data, representingeverything as Review objects (you’ll create a new type for these).  Instage 2, you’ll analyze your clean data.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#project: p9</span><span class="token comment" spellcheck="true">#submitter: naixinzhang</span><span class="token comment" spellcheck="true">#partner: none</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span> json<span class="token punctuation">,</span> csv<span class="token keyword">from</span> collections <span class="token keyword">import</span> namedtuple<span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict<span class="token keyword">import</span> operator<span class="token keyword">import</span> statistics<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy<span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q1 What are the names of the files present in the data directory?</span><span class="token keyword">def</span> <span class="token function">get_names</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> name<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">)</span>     <span class="token keyword">return</span> sorted<span class="token punctuation">(</span>res<span class="token punctuation">,</span> reverse <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>get_names<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;sample_reviews.json&#39;, &#39;sample_reviews.csv&#39;, &#39;review5.json&#39;, &#39;review5.csv&#39;, &#39;review4.json&#39;, &#39;review4.csv&#39;, &#39;review3.json&#39;, &#39;review3.csv&#39;, &#39;review2.json&#39;, &#39;review2.csv&#39;, &#39;review1.json&#39;, &#39;review1.csv&#39;, &#39;products.json&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q2 What are the paths of all the files in the data directory?</span><span class="token keyword">def</span> <span class="token function">get_path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">return</span> sorted<span class="token punctuation">(</span>res<span class="token punctuation">,</span> reverse <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>get_path<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;data\\sample_reviews.json&#39;, &#39;data\\sample_reviews.csv&#39;, &#39;data\\review5.json&#39;, &#39;data\\review5.csv&#39;, &#39;data\\review4.json&#39;, &#39;data\\review4.csv&#39;, &#39;data\\review3.json&#39;, &#39;data\\review3.csv&#39;, &#39;data\\review2.json&#39;, &#39;data\\review2.csv&#39;, &#39;data\\review1.json&#39;, &#39;data\\review1.csv&#39;, &#39;data\\products.json&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q3 What are the paths of all the CSV files present in data directory?</span><span class="token keyword">def</span> <span class="token function">get_path_end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> name<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.csv'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span>     <span class="token keyword">return</span> sorted<span class="token punctuation">(</span>res<span class="token punctuation">,</span> reverse <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>get_path_end<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;data\\sample_reviews.csv&#39;, &#39;data\\review5.csv&#39;, &#39;data\\review4.csv&#39;, &#39;data\\review3.csv&#39;, &#39;data\\review2.csv&#39;, &#39;data\\review1.csv&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q4 What are the paths of all the files present in data directory, that begin with the phrase 'review'?</span><span class="token keyword">def</span> <span class="token function">get_path_re</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> name<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'review'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">return</span> sorted<span class="token punctuation">(</span>res<span class="token punctuation">,</span> reverse <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>get_path_re<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;data\\review5.json&#39;, &#39;data\\review5.csv&#39;, &#39;data\\review4.json&#39;, &#39;data\\review4.csv&#39;, &#39;data\\review3.json&#39;, &#39;data\\review3.csv&#39;, &#39;data\\review2.json&#39;, &#39;data\\review2.csv&#39;, &#39;data\\review1.json&#39;, &#39;data\\review1.csv&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">read_json</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    json_str <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>json_str<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q5 What are the products in products.json?</span>read_json<span class="token punctuation">(</span><span class="token string">'products.json'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>{&#39;B00QFQRELG&#39;: &#39;Amazon 9W PowerFast Official OEM USB Charger and Power Adapter for Fire Tablets and Kindle eReaders&#39;, &#39;B01BH83OOM&#39;: &#39;Amazon Tap Smart Assistant Alexa enabled (black) Brand New&#39;, &#39;B00ZV9PXP2&#39;: &#39;All-New Kindle E-reader - Black, 6&quot; Glare-Free Touchscreen Display, Wi-Fi - Includes Special Offers&#39;, &#39;B0751RGYJV&#39;: &#39;Amazon Echo (2nd Generation) Smart Assistant Oak Finish Priority Shipping&#39;, &#39;B00IOY8XWQ&#39;: &#39;Kindle Voyage E-reader, 6 High-Resolution Display (300 ppi) with Adaptive Built-in Light, PagePress Sensors, Wi-Fi - Includes Special Offers&#39;, &#39;B0752151W6&#39;: &#39;All-new Echo (2nd Generation) with improved sound, powered by Dolby, and a new design Walnut Finish&#39;, &#39;B018Y226XO&#39;: &#39;Fire Kids Edition Tablet, 7 Display, Wi-Fi, 16 GB, Pink Kid-Proof Case&#39;, &#39;B01ACEKAJY&#39;: &#39;All-New Fire HD 8 Tablet, 8 HD Display, Wi-Fi, 32 GB - Includes Special Offers, Black&#39;, &#39;B01AHB9CYG&#39;: &#39;All-New Fire HD 8 Tablet, 8 HD Display, Wi-Fi, 32 GB - Includes Special Offers, Magenta&#39;, &#39;B01AHB9CN2&#39;: &#39;All-New Fire HD 8 Tablet, 8 HD Display, Wi-Fi, 16 GB - Includes Special Offers, Magenta&#39;, &#39;B00VINDBJK&#39;: &#39;Kindle Oasis E-reader with Leather Charging Cover - Merlot, 6 High-Resolution Display (300 ppi), Wi-Fi - Includes Special Offers&#39;, &#39;B01AHB9C1E&#39;: &#39;Fire HD 8 Tablet with Alexa, 8 HD Display, 32 GB, Tangerine - with Special Offers&#39;, &#39;B018Y229OU&#39;: &#39;Fire Tablet, 7 Display, Wi-Fi, 8 GB - Includes Special Offers, Magenta&#39;}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">read_csv</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>DictReader<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">return</span> reader<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_review</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    reader <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> reader<span class="token punctuation">:</span>        <span class="token keyword">if</span> row<span class="token punctuation">[</span><span class="token string">'review id'</span><span class="token punctuation">]</span> <span class="token operator">==</span> id<span class="token punctuation">:</span>            <span class="token keyword">return</span> row<span class="token punctuation">[</span><span class="token string">'review text'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q6 What is the review text of review with id 1410?</span>get_review<span class="token punctuation">(</span><span class="token string">'1410'</span><span class="token punctuation">,</span><span class="token string">'review1.csv'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>&#39;It does what it is suppose to. No problems with it...&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q7 What is the review text of review with id 69899?</span><span class="token keyword">def</span> <span class="token function">get_revi</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> name<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'review'</span><span class="token punctuation">)</span> <span class="token operator">and</span> name<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.csv'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">)</span>     re <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> res<span class="token punctuation">:</span>        reader <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> reader<span class="token punctuation">:</span>            <span class="token keyword">if</span> row<span class="token punctuation">[</span><span class="token string">'review id'</span><span class="token punctuation">]</span> <span class="token operator">==</span> id<span class="token punctuation">:</span>                <span class="token keyword">return</span> row<span class="token punctuation">[</span>col<span class="token punctuation">]</span>get_revi<span class="token punctuation">(</span><span class="token string">'69899'</span><span class="token punctuation">,</span><span class="token string">'review text'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;I hate amazon app store. Nothing good in there. The tablet is too slow for what I do... it is good for reading only....&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q8 What is the review title of review id 28013?</span>get_revi<span class="token punctuation">(</span><span class="token string">'28013'</span><span class="token punctuation">,</span><span class="token string">'review title'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>&#39;Perfection&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q9 What file contained the review with that id?</span><span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> name<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'review'</span><span class="token punctuation">)</span> <span class="token operator">and</span> name<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.csv'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">)</span>     re <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> res<span class="token punctuation">:</span>        reader <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> reader<span class="token punctuation">:</span>            <span class="token keyword">if</span> row<span class="token punctuation">[</span><span class="token string">'review id'</span><span class="token punctuation">]</span> <span class="token operator">==</span> id<span class="token punctuation">:</span>                <span class="token keyword">return</span> dataget_data<span class="token punctuation">(</span><span class="token string">'28013'</span><span class="token punctuation">,</span><span class="token string">'review title'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;review3.csv&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q10 What is the data stored in sample_reviews.json?</span>read_json<span class="token punctuation">(</span><span class="token string">'sample_reviews.json'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>{&#39;10101&#39;: [&#39;Mikey123456789&#39;, &#39;B00QFQRELG&#39;], &#39;99904&#39;: [&#39;diamond&#39;, &#39;B00QFQRELG&#39;], &#39;89604&#39;: [&#39;Pat91&#39;, &#39;B00QFQRELG&#39;], &#39;58704&#39;: [&#39;Frank&#39;, &#39;B00QFQRELG&#39;], &#39;38104&#39;: [&#39;LADYD92&#39;, &#39;B00QFQRELG&#39;]}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_reviews</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span>jsonfile<span class="token punctuation">)</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span>    re <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    Review <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span><span class="token string">'Review'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'asin'</span><span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">,</span><span class="token string">'text'</span><span class="token punctuation">,</span><span class="token string">'rating'</span><span class="token punctuation">,</span><span class="token string">'do_recommend'</span><span class="token punctuation">,</span><span class="token string">'num_helpful'</span><span class="token punctuation">,</span><span class="token string">'date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> c<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> row<span class="token punctuation">[</span><span class="token string">'review id'</span><span class="token punctuation">]</span><span class="token operator">!=</span> None <span class="token operator">and</span> row<span class="token punctuation">[</span><span class="token string">'review title'</span><span class="token punctuation">]</span><span class="token operator">!=</span>None <span class="token operator">and</span> row<span class="token punctuation">[</span><span class="token string">'review text'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> None <span class="token operator">and</span> row<span class="token punctuation">[</span><span class="token string">'review rating'</span><span class="token punctuation">]</span> <span class="token operator">!=</span>None <span class="token operator">and</span> row<span class="token punctuation">[</span><span class="token string">'review do_recommend'</span><span class="token punctuation">]</span><span class="token operator">!=</span>None <span class="token operator">and</span> row<span class="token punctuation">[</span><span class="token string">'review num_helpful'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> None <span class="token operator">and</span> row<span class="token punctuation">[</span><span class="token string">'review date'</span><span class="token punctuation">]</span><span class="token operator">!=</span>None<span class="token punctuation">:</span>                review <span class="token operator">=</span> Review<span class="token punctuation">(</span>id <span class="token operator">=</span> int<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'review id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>username<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>asin<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>title<span class="token operator">=</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'review title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>text<span class="token operator">=</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'review text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rating<span class="token operator">=</span>int<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'review rating'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>do_recommend<span class="token operator">=</span>eval<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'review do_recommend'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>num_helpful <span class="token operator">=</span> int<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'review num_helpful'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>date<span class="token operator">=</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'review date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                re<span class="token punctuation">.</span>append<span class="token punctuation">(</span>review<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                 <span class="token keyword">continue</span>        <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>            <span class="token keyword">continue</span>     j <span class="token operator">=</span> read_json<span class="token punctuation">(</span>jsonfile<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> j<span class="token punctuation">:</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> re<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">==</span> int<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                     <span class="token keyword">if</span> j<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span>None <span class="token operator">and</span> j<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span> None<span class="token punctuation">:</span>                        re<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> re<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>_replace<span class="token punctuation">(</span>username <span class="token operator">=</span> str<span class="token punctuation">(</span>j<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>asin<span class="token operator">=</span>str<span class="token punctuation">(</span>j<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">continue</span>                <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>                    <span class="token keyword">continue</span>     <span class="token keyword">return</span> re<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q11 What is produced by your function get_reviews('sample_reviews.csv', 'sample_reviews.json')?</span>get_reviews<span class="token punctuation">(</span><span class="token string">'sample_reviews.csv'</span><span class="token punctuation">,</span> <span class="token string">'sample_reviews.json'</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[Review(id=10101, username=&#39;Mikey123456789&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;A charger&#39;, text=&#39;It seems to work just like any other usb plug in charger.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2017-01-02&#39;), Review(id=99904, username=&#39;diamond&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;amazon power fast usb charger&#39;, text=&#39;got this for my kindle 7 tablet . Does an excellent job charging the kindle fire 7 a lot faster than the one it came with the kindle fire&#39;, rating=5, do_recommend=True, num_helpful=2, date=&#39;2016-06-03&#39;), Review(id=89604, username=&#39;Pat91&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;Amazon powerfast wall charger&#39;, text=&#39;Best kindle charger ever. Took 30 minutes to being my kindle back to life.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-11-21&#39;), Review(id=58704, username=&#39;Frank&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;correct plug for kindle&#39;, text=&#39;Quickly charges kindle so son can use it. Worked great right out of the package&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-10-14&#39;), Review(id=38104, username=&#39;LADYD92&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;Fast Charger&#39;, text=&#39;Bought this charger for the Kindle voyage and its great.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-09-30&#39;)]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q12 What are the first ten Review objects in the list produced by get_reviews('review1.csv', 'review1.json')?</span><span class="token keyword">def</span> <span class="token function">get_first_ten_rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    data <span class="token operator">=</span> get_reviews<span class="token punctuation">(</span><span class="token string">'review1.csv'</span><span class="token punctuation">,</span> <span class="token string">'review1.json'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> resget_first_ten_rows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[Review(id=10101, username=&#39;Mikey123456789&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;A charger&#39;, text=&#39;It seems to work just like any other usb plug in charger.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2017-01-02&#39;), Review(id=99904, username=&#39;diamond&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;amazon power fast usb charger&#39;, text=&#39;got this for my kindle 7 tablet . Does an excellent job charging the kindle fire 7 a lot faster than the one it came with the kindle fire&#39;, rating=5, do_recommend=True, num_helpful=2, date=&#39;2016-06-03&#39;), Review(id=89604, username=&#39;Pat91&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;Amazon powerfast wall charger&#39;, text=&#39;Best kindle charger ever. Took 30 minutes to being my kindle back to life.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-11-21&#39;), Review(id=58704, username=&#39;Frank&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;correct plug for kindle&#39;, text=&#39;Quickly charges kindle so son can use it. Worked great right out of the package&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-10-14&#39;), Review(id=38104, username=&#39;LADYD92&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;Fast Charger&#39;, text=&#39;Bought this charger for the Kindle voyage and its great.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-09-30&#39;), Review(id=76407, username=&#39;RobT&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;Good charger&#39;, text=&#39;This wall charger works exactly as described for the Kindle Paperwhite.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-07-22&#39;), Review(id=83810, username=&#39;Iodine&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;Great item&#39;, text=&#39;Have been using this item and it seems to be working quite well.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2017-03-15&#39;), Review(id=32310, username=&#39;Akki&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;Nice one&#39;, text=&#39;Good one and working without any issues. Slim and portable&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-06-24&#39;), Review(id=22010, username=&#39;STRIPYGOOSE&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;not any faster&#39;, text=&#39;it does not charge any faster than regular charger.&#39;, rating=3, do_recommend=False, num_helpful=0, date=&#39;2016-08-18&#39;), Review(id=1410, username=&#39;Jk60&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;Satisfied&#39;, text=&#39;It does what it is suppose to. No problems with it...&#39;, rating=4, do_recommend=True, num_helpful=0, date=&#39;2016-12-07&#39;)]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q13 What are the last ten Review objects in the list produced by get_reviews('review2.csv', 'review2.json')?</span>get_reviews<span class="token punctuation">(</span><span class="token string">'review2.csv'</span><span class="token punctuation">,</span> <span class="token string">'review2.json'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[Review(id=25136, username=&#39;Angrydagg&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;Nice features for the price.&#39;, text=&#39;For the price this tables does everything I need. so far.&#39;, rating=4, do_recommend=True, num_helpful=0, date=&#39;2015-12-30&#39;), Review(id=84039, username=&#39;Appman2015&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;Great for xmas&#39;, text=&#39;So far I have bought three of these of tablets and they love it&#39;, rating=4, do_recommend=True, num_helpful=1, date=&#39;2015-12-30&#39;), Review(id=22239, username=&#39;SuzieQ&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;great for pre teens&#39;, text=&#39;i am glad i got them for my grand children they r enjoying them&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2015-12-31&#39;), Review(id=70842, username=&#39;Gracie&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;Great kindle&#39;, text=&#39;Purchase was good. Very easy to set up and use. Clear screen. Easy to charge. Would like more storage.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2015-12-31&#39;), Review(id=60542, username=&#39;Jeremyjeepster&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;Good entry level tablet reader.&#39;, text=&#39;His is a very economical entry level tablet. Great for kids or for first time users.&#39;, rating=4, do_recommend=True, num_helpful=0, date=&#39;2015-12-31&#39;), Review(id=9042, username=&#39;kinglowe78&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;Good Deal&#39;, text=&#39;Real good deal. Nice present for those who want a tablet&#39;, rating=4, do_recommend=True, num_helpful=1, date=&#39;2016-01-01&#39;), Review(id=98845, username=&#39;jamal&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;good basic&#39;, text=&#39;Good gift for basic Internet use browsing emails .&#39;, rating=3, do_recommend=True, num_helpful=1, date=&#39;2016-01-01&#39;), Review(id=37045, username=&#39;CaOk&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;decent budget tablet that does what it suppose to&#39;, text=&#39;Nothing fancy. A good budget tablet that does what It suppose to do&#39;, rating=4, do_recommend=True, num_helpful=0, date=&#39;2016-01-01&#39;), Review(id=26745, username=&#39;Tablet2&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;Affordable tablet&#39;, text=&#39;Bought tablet for my five year old nephew. Is affordable and has good specs. Easy to use. Camera and video are good. My nephew has no problem using it&#39;, rating=4, do_recommend=True, num_helpful=0, date=&#39;2016-01-01&#39;), Review(id=3248, username=&#39;Tims54913&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;Great tablet&#39;, text=&#39;If your connected to amazon the tablet is great to use.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-01-02&#39;)]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q14 What is the Review object with review id 84713?</span><span class="token keyword">def</span> <span class="token function">get_object</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> get_reviews<span class="token punctuation">(</span>get_data<span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token string">'review title'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> get_data<span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token string">'review title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'.json'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token punctuation">.</span>id <span class="token operator">==</span> int<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> iget_object<span class="token punctuation">(</span><span class="token string">'84713'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Review(id=84713, username=&#39;mmolly1&#39;, asin=&#39;B01AHB9CN2&#39;, title=&#39;Great product&#39;, text=&#39;This product is very user friendly and it is very lightweight&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2017-01-08&#39;)</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q15 What is the Review object with review id 42931?</span>get_object<span class="token punctuation">(</span><span class="token string">'42931'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>Review(id=42931, username=&#39;tbistone&#39;, asin=&#39;B01BH83OOM&#39;, title=&#39;Amazing&#39;, text=&#39;I literally use this thing every single day. Love it.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-12-20&#39;)</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q16  List the first ten Review objects in the entire dataset, sorted by increasing order of their review ids.</span><span class="token keyword">def</span> <span class="token function">get_entire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        csv_file <span class="token operator">=</span> <span class="token string">'review'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.csv'</span>        json_file <span class="token operator">=</span> <span class="token string">'review'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.json'</span>                  <span class="token keyword">try</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> data <span class="token operator">+</span> get_reviews<span class="token punctuation">(</span>csv_file<span class="token punctuation">,</span>json_file<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>    <span class="token keyword">return</span> sorted<span class="token punctuation">(</span>data<span class="token punctuation">)</span>entire <span class="token operator">=</span> get_entire<span class="token punctuation">(</span><span class="token punctuation">)</span>entire<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[Review(id=74, username=&#39;Wayne&#39;, asin=&#39;B01AHB9CN2&#39;, title=&#39;Kindle upgrade&#39;, text=&#39;Gave this to my wife for Christmas. Upgraded from the original Kindle. She thoroughly enjoys it.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-12-31&#39;), Review(id=82, username=&#39;KKLORRAINE&#39;, asin=&#39;B01AHB9CN2&#39;, title=&#39;Good&#39;, text=&#39;Great for reading and Netflix. Fits nice in purse. Good price.&#39;, rating=4, do_recommend=True, num_helpful=0, date=&#39;2017-04-07&#39;), Review(id=110, username=&#39;nell&#39;, asin=&#39;B00IOY8XWQ&#39;, title=&#39;I love it&#39;, text=&#39;Prefect for all reading conditions and environments. I take it everywhere.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-07-09&#39;), Review(id=122, username=&#39;apple21man&#39;, asin=&#39;B01BH83OOM&#39;, title=&#39;A great assistant&#39;, text=&#39;It works well it takes time for it to know your vocabulary&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2017-01-23&#39;), Review(id=247, username=&#39;rockydon1&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;great&#39;, text=&#39;The Kindle fire is a great product. Will do so many things. Would recommend to anyone.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2015-12-29&#39;), Review(id=251, username=&#39;Cheechu821&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;Great product for its price&#39;, text=&#39;I purchased the tablet as a screen for my drink and it worked just fine&#39;, rating=3, do_recommend=True, num_helpful=0, date=&#39;2016-02-19&#39;), Review(id=263, username=&#39;aram58&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;love the tablet&#39;, text=&#39;I would recommend this tablet to anyone that is interested in one. It is just as good as a Samsung one and half the price.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-07-08&#39;), Review(id=271, username=&#39;NMGPRO&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;Good little tablet&#39;, text=&#39;I purchased this to have a smaller footprint tablet. Could use more popular apps but still great for keeping the library at the tip of the fingers and a camera to boot.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-01-21&#39;), Review(id=275, username=&#39;MikeGA&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;Great for Amazon&#39;, text=&#39;This product is a great entry level tablet. It is limited in both memory and function.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-01-05&#39;), Review(id=327, username=&#39;ritter6281&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;Awesome tablet.&#39;, text=&#39;This tablet is better than any other tablet of the same cost range. My son saved up to buy his own tablet and had similar priced tablets break or have software issues. This tablet has a nice quality screen and it is nice to be able to not be forced to do everything through Amazon despite it being an Amazon tablet. The option of a Best Buy replacement plan is handy when getting the tablet for kids.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-04-09&#39;)]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q17 Output the number of review objects for the product, "Amazon Tap Smart Assistant Alexa enabled (black) Brand New".</span><span class="token keyword">def</span> <span class="token function">get_num</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>    product <span class="token operator">=</span> read_json<span class="token punctuation">(</span><span class="token string">'products.json'</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> entire<span class="token punctuation">:</span>        <span class="token keyword">if</span> product<span class="token punctuation">[</span>i<span class="token punctuation">.</span>asin<span class="token punctuation">]</span> <span class="token operator">==</span> sentence<span class="token punctuation">:</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> len<span class="token punctuation">(</span>res<span class="token punctuation">)</span>get_num<span class="token punctuation">(</span><span class="token string">'Amazon Tap Smart Assistant Alexa enabled (black) Brand New'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>165</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q18 Output the number of review objects for the product, "All-New Fire HD 8 Tablet, 8 HD Display, Wi-Fi, 32 GB - Includes Special Offers, Black".</span>get_num<span class="token punctuation">(</span><span class="token string">'All-New Fire HD 8 Tablet, 8 HD Display, Wi-Fi, 32 GB - Includes Special Offers, Black'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>12</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q19  Find the name of the product with most reviews.</span><span class="token keyword">def</span> <span class="token function">get_most_reviews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    product<span class="token operator">=</span>read_json<span class="token punctuation">(</span><span class="token string">'products.json'</span><span class="token punctuation">)</span>    pro <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> product<span class="token punctuation">:</span>        pro<span class="token punctuation">.</span>append<span class="token punctuation">(</span>product<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    max_num <span class="token operator">=</span> <span class="token number">0</span>    idx <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> get_num<span class="token punctuation">(</span>pro<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> max_num<span class="token punctuation">:</span>            max_num <span class="token operator">=</span> get_num<span class="token punctuation">(</span>pro<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            idx <span class="token operator">=</span> i    <span class="token keyword">return</span> pro<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>get_most_reviews<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;Fire Tablet, 7 Display, Wi-Fi, 8 GB - Includes Special Offers, Magenta&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_asin</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>    product<span class="token operator">=</span>read_json<span class="token punctuation">(</span><span class="token string">'products.json'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> product<span class="token punctuation">:</span>        <span class="token keyword">if</span> product<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> sentence<span class="token punctuation">:</span>            <span class="token keyword">return</span> i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q20 Find the most helpful review(s) of this product.</span><span class="token keyword">def</span> <span class="token function">get_help_review</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    most_help <span class="token operator">=</span> <span class="token number">0</span>    asin <span class="token operator">=</span> get_asin<span class="token punctuation">(</span>get_most_reviews<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> entire<span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token punctuation">.</span>asin <span class="token operator">==</span> asin <span class="token operator">and</span> i<span class="token punctuation">.</span>num_helpful <span class="token operator">></span> most_help<span class="token punctuation">:</span>            most_help <span class="token operator">=</span> i<span class="token punctuation">.</span>num_helpful    <span class="token keyword">for</span> i <span class="token keyword">in</span> entire<span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token punctuation">.</span>asin <span class="token operator">==</span> asin <span class="token operator">and</span> i<span class="token punctuation">.</span>num_helpful <span class="token operator">==</span> most_help<span class="token punctuation">:</span>            <span class="token keyword">return</span> iget_help_review<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Review(id=85969, username=&#39;Beninkc&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;5 star device crippled by amazon&#39;, text=&#39;This device would be the best possible tablet for the money if it had Google Play. However Amazon chose to block access to it. This took their well made tablet with a beautiful screen and great performance from an amazing value to a waste of money. This is my last amazon branded product.If you use a lot of apps or want specific apps shop for another device.&#39;, rating=1, do_recommend=False, num_helpful=20, date=&#39;2016-02-14&#39;)</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q21 How many unique usernames appear in the dataset?</span><span class="token keyword">def</span> <span class="token function">get_unique_username</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> entire    name <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>username <span class="token operator">not</span> <span class="token keyword">in</span> name<span class="token punctuation">:</span>            name<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>username<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>    <span class="token keyword">return</span> len<span class="token punctuation">(</span>name<span class="token punctuation">)</span>get_unique_username<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>3798</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q22 Who are the top 30 prolific users in this dataset?</span><span class="token keyword">def</span> <span class="token function">get_top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name_reviews <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    data <span class="token operator">=</span> entire    reviews <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        reviews<span class="token punctuation">[</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>username<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    reviews <span class="token operator">=</span> dict<span class="token punctuation">(</span>reviews<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> reviews<span class="token punctuation">:</span>        name_reviews<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> len<span class="token punctuation">(</span>reviews<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    sorted_d <span class="token operator">=</span> sorted<span class="token punctuation">(</span>name_reviews<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span>operator<span class="token punctuation">.</span>itemgetter<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>reverse <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>    test_dict <span class="token operator">=</span> dict<span class="token punctuation">(</span>sorted_d<span class="token punctuation">)</span>    <span class="token keyword">return</span> dict<span class="token punctuation">(</span>list<span class="token punctuation">(</span>test_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  get_top<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>{&#39;Dave&#39;: 5, &#39;Steve&#39;: 4, &#39;Mike&#39;: 4, &#39;1234&#39;: 4, &#39;Susan&#39;: 4, &#39;Angie&#39;: 4, &#39;Chris&#39;: 4, &#39;Missy&#39;: 4, &#39;Pete&#39;: 3, &#39;Anonymous&#39;: 3, &#39;Josh&#39;: 3, &#39;Charles&#39;: 3, &#39;Rick&#39;: 3, &#39;Dani&#39;: 3, &#39;mike&#39;: 3, &#39;Bill&#39;: 3, &#39;John&#39;: 3, &#39;Jojo&#39;: 3, &#39;Kindle&#39;: 3, &#39;Bubba&#39;: 3, &#39;kcladyz&#39;: 3, &#39;Frank&#39;: 3, &#39;Grandma&#39;: 3, &#39;Mimi&#39;: 3, &#39;Richard&#39;: 3, &#39;Manny&#39;: 3, &#39;Susie&#39;: 3, &#39;Charlie&#39;: 3, &#39;Michael&#39;: 3, &#39;David&#39;: 3}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q23 Who are the users whose comments have been found helpful at least five times?</span><span class="token keyword">def</span> <span class="token function">get_help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> entire    name_help <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>username <span class="token keyword">in</span> name_help<span class="token punctuation">:</span>            name_help<span class="token punctuation">[</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>username<span class="token punctuation">]</span> <span class="token operator">+=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num_helpful        <span class="token keyword">else</span><span class="token punctuation">:</span>            name_help<span class="token punctuation">[</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>username<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num_helpful    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> name_help<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> value <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">:</span>            res<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">=</span>value    <span class="token keyword">return</span> resget_help<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>{&#39;Ellen&#39;: 10, &#39;Earthdog&#39;: 27, &#39;fenton&#39;: 6, &#39;Dick&#39;: 5, &#39;Junior&#39;: 7, &#39;AshT&#39;: 5, &#39;Stuartc&#39;: 8, &#39;safissad&#39;: 8, &#39;iMax&#39;: 5, &#39;trouble&#39;: 5, &#39;Roberto002007&#39;: 7, &#39;EricO&#39;: 7, &#39;stephfasc22&#39;: 5, &#39;LadyEsco702&#39;: 8, &#39;Karch&#39;: 5, &#39;TerrieT&#39;: 5, &#39;mysixpack&#39;: 6, &#39;Mark&#39;: 5, &#39;Rodge&#39;: 6, &#39;Deejay&#39;: 8, &#39;FrankW&#39;: 5, &#39;Beninkc&#39;: 20, &#39;CarlosEA&#39;: 10, &#39;1Briansapp&#39;: 5, &#39;Quasimodo&#39;: 5, &#39;Kime&#39;: 5}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q24 Find the average rating of each product.</span><span class="token keyword">def</span> <span class="token function">rating</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> entire    temp <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        temp<span class="token punctuation">[</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>asin<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rating<span class="token punctuation">)</span>    temp <span class="token operator">=</span> dict<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    temp_a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> temp<span class="token punctuation">:</span>        temp_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> float<span class="token punctuation">(</span>statistics<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    res <span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    product <span class="token operator">=</span>read_json<span class="token punctuation">(</span><span class="token string">'products.json'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> product<span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> temp_a<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> j<span class="token punctuation">:</span>                res<span class="token punctuation">[</span>product<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp_a<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> resrating<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>{&#39;Amazon 9W PowerFast Official OEM USB Charger and Power Adapter for Fire Tablets and Kindle eReaders&#39;: 4.7272727272727275, &#39;Amazon Tap Smart Assistant Alexa enabled (black) Brand New&#39;: 4.6909090909090905, &#39;All-New Kindle E-reader - Black, 6&quot; Glare-Free Touchscreen Display, Wi-Fi - Includes Special Offers&#39;: 4.590163934426229, &#39;Amazon Echo (2nd Generation) Smart Assistant Oak Finish Priority Shipping&#39;: 5.0, &#39;Kindle Voyage E-reader, 6 High-Resolution Display (300 ppi) with Adaptive Built-in Light, PagePress Sensors, Wi-Fi - Includes Special Offers&#39;: 4.666666666666667, &#39;All-new Echo (2nd Generation) with improved sound, powered by Dolby, and a new design Walnut Finish&#39;: 5.0, &#39;Fire Kids Edition Tablet, 7 Display, Wi-Fi, 16 GB, Pink Kid-Proof Case&#39;: 4.603448275862069, &#39;All-New Fire HD 8 Tablet, 8 HD Display, Wi-Fi, 32 GB - Includes Special Offers, Black&#39;: 4.583333333333333, &#39;All-New Fire HD 8 Tablet, 8 HD Display, Wi-Fi, 32 GB - Includes Special Offers, Magenta&#39;: 4.574468085106383, &#39;All-New Fire HD 8 Tablet, 8 HD Display, Wi-Fi, 16 GB - Includes Special Offers, Magenta&#39;: 4.6, &#39;Kindle Oasis E-reader with Leather Charging Cover - Merlot, 6 High-Resolution Display (300 ppi), Wi-Fi - Includes Special Offers&#39;: 4.866666666666666, &#39;Fire HD 8 Tablet with Alexa, 8 HD Display, 32 GB, Tangerine - with Special Offers&#39;: 3.8333333333333335, &#39;Fire Tablet, 7 Display, Wi-Fi, 8 GB - Includes Special Offers, Magenta&#39;: 4.490408673894913}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">scatter</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> xlabel<span class="token operator">=</span><span class="token string">"please label me!"</span><span class="token punctuation">,</span> ylabel<span class="token operator">=</span><span class="token string">"please label me!"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"x"</span><span class="token punctuation">:</span>x<span class="token punctuation">,</span> <span class="token string">"y"</span><span class="token punctuation">:</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span>    ax <span class="token operator">=</span> df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">"x"</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">"y"</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">"black"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> xlim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> ylim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span>xlabel<span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span>ylabel<span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>get_xaxis<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_major_formatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_scientific<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>get_yaxis<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_major_formatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_scientific<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q25 What is the relationship between the number of reviews and the average rating of a product?</span><span class="token keyword">def</span> <span class="token function">get_rating</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> entire    temp <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        temp<span class="token punctuation">[</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>asin<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rating<span class="token punctuation">)</span>    temp <span class="token operator">=</span> dict<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    temp_rating <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> temp<span class="token punctuation">:</span>        temp_rating<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> float<span class="token punctuation">(</span>statistics<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> temp_rating<span class="token keyword">def</span> <span class="token function">get_num_reviews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> entire    temp_num_reviews <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>asin <span class="token operator">not</span> <span class="token keyword">in</span> temp_num_reviews<span class="token punctuation">:</span>            temp_num_reviews<span class="token punctuation">[</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>asin<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            temp_num_reviews<span class="token punctuation">[</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>asin<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> temp_num_reviewsx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>temp_rating <span class="token operator">=</span> get_rating<span class="token punctuation">(</span><span class="token punctuation">)</span>temp_num_reviews <span class="token operator">=</span> get_num_reviews<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> temp_rating<span class="token punctuation">:</span>    x<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp_rating<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> j <span class="token keyword">in</span> temp_num_reviews<span class="token punctuation">:</span>    y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp_num_reviews<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>scatter<span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>xlabel<span class="token operator">=</span><span class="token string">"Number of reviews"</span><span class="token punctuation">,</span> ylabel<span class="token operator">=</span><span class="token string">"Average rating"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_32_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q26 Remove the outliers from the last plot.</span>temp_rating <span class="token operator">=</span> get_rating<span class="token punctuation">(</span><span class="token punctuation">)</span>temp_num_reviews <span class="token operator">=</span> get_num_reviews<span class="token punctuation">(</span><span class="token punctuation">)</span>res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> temp_rating<span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> temp_num_reviews<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> j<span class="token punctuation">:</span>            res<span class="token punctuation">[</span>temp_rating<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp_num_reviews<span class="token punctuation">[</span>j<span class="token punctuation">]</span>elements <span class="token operator">=</span> numpy<span class="token punctuation">.</span>array<span class="token punctuation">(</span>y<span class="token punctuation">)</span>mean <span class="token operator">=</span> numpy<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>elements<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>sd <span class="token operator">=</span> numpy<span class="token punctuation">.</span>std<span class="token punctuation">(</span>elements<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>final_list <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> y <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> mean <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> sd<span class="token punctuation">)</span><span class="token punctuation">]</span>final_list <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> final_list <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">]</span>re <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> j <span class="token keyword">in</span> final_list<span class="token punctuation">:</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> res<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> value <span class="token operator">==</span> j<span class="token punctuation">:</span>            re<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> valuex_new <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> re<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x_new<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>y_new <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> j <span class="token keyword">in</span> re<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    y_new<span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span>scatter<span class="token punctuation">(</span>y_new<span class="token punctuation">,</span>x_new<span class="token punctuation">,</span>xlabel<span class="token operator">=</span><span class="token string">"Number of reviews"</span><span class="token punctuation">,</span> ylabel<span class="token operator">=</span><span class="token string">"Average rating"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_33_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bucketize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    data <span class="token operator">=</span> entire    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rating <span class="token keyword">in</span> res<span class="token punctuation">:</span>            res<span class="token punctuation">[</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rating<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            res<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rating<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q27 What is the relationship between the rating and the average text length?</span>bucket<span class="token operator">=</span>bucketize<span class="token punctuation">(</span><span class="token punctuation">)</span>text_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> obj <span class="token keyword">in</span> bucket<span class="token punctuation">:</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> bucket<span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> obj <span class="token keyword">in</span> text_dict<span class="token punctuation">:</span>            text_dict<span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>len<span class="token punctuation">(</span>item<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            text_dict<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>len<span class="token punctuation">(</span>item<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>text_dictres <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> rate <span class="token keyword">in</span> text_dict<span class="token punctuation">:</span>    res<span class="token punctuation">[</span>rate<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">(</span>text_dict<span class="token punctuation">[</span>rate<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>len<span class="token punctuation">(</span>text_dict<span class="token punctuation">[</span>rate<span class="token punctuation">]</span><span class="token punctuation">)</span>resx<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> item <span class="token keyword">in</span> res<span class="token punctuation">:</span>    x<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>res<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>xlabel<span class="token operator">=</span><span class="token string">"Rating"</span><span class="token punctuation">,</span> ylabel<span class="token operator">=</span><span class="token string">"Average text length"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_35_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q28 What is the relationship between the rating and the likelihood of the review being helpful?</span>bucket<span class="token operator">=</span>bucketize<span class="token punctuation">(</span><span class="token punctuation">)</span>review <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> obj <span class="token keyword">in</span> bucket<span class="token punctuation">:</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> bucket<span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> obj <span class="token keyword">in</span> review<span class="token punctuation">:</span>            review<span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">.</span>num_helpful<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            review<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">.</span>num_helpful<span class="token punctuation">)</span>te <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> review<span class="token punctuation">:</span>    te<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> len<span class="token punctuation">(</span>review<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>temp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> review<span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> review<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token keyword">in</span> temp<span class="token punctuation">:</span>                temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                temp<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span>t <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> temp<span class="token punctuation">:</span>    t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> len<span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> a <span class="token keyword">in</span> te<span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> t<span class="token punctuation">:</span>        <span class="token keyword">if</span> a <span class="token operator">==</span> j<span class="token punctuation">:</span>            res<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">/</span>te<span class="token punctuation">[</span>j<span class="token punctuation">]</span>x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> item <span class="token keyword">in</span> res<span class="token punctuation">:</span>    x<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>res<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>xlabel<span class="token operator">=</span><span class="token string">"Rating"</span><span class="token punctuation">,</span> ylabel<span class="token operator">=</span><span class="token string">"Percentage of helpful reviews"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_36_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q29 What is the average rating of all reviews which recommend the corresponding products?</span><span class="token keyword">def</span> <span class="token function">get_avg_rating</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    bucket<span class="token operator">=</span>bucketize<span class="token punctuation">(</span><span class="token punctuation">)</span>    recommend <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> obj <span class="token keyword">in</span> bucket<span class="token punctuation">:</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> bucket<span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> item<span class="token punctuation">.</span>do_recommend <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> obj <span class="token keyword">in</span> recommend<span class="token punctuation">:</span>                    recommend<span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">.</span>do_recommend<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    recommend<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">.</span>do_recommend<span class="token punctuation">)</span>    temp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> recommend<span class="token punctuation">:</span>        temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> len<span class="token punctuation">(</span>recommend<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    denominator <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> temp<span class="token punctuation">:</span>        denominator <span class="token operator">+=</span> temp<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    numerator <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> temp<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        numerator <span class="token operator">+=</span> key <span class="token operator">*</span> value    <span class="token keyword">return</span> numerator<span class="token operator">/</span>denominatorget_avg_rating<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>4.607549120992761</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q30 What is the relationship between the rating and the likelihood of the product being recommended?</span>bucket<span class="token operator">=</span>bucketize<span class="token punctuation">(</span><span class="token punctuation">)</span>recommend <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> obj <span class="token keyword">in</span> bucket<span class="token punctuation">:</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> bucket<span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> item<span class="token punctuation">.</span>do_recommend <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> obj <span class="token keyword">in</span> recommend<span class="token punctuation">:</span>                recommend<span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">.</span>do_recommend<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                recommend<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">.</span>do_recommend<span class="token punctuation">)</span>temp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> recommend<span class="token punctuation">:</span>    temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> len<span class="token punctuation">(</span>recommend<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>all <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> obj <span class="token keyword">in</span> bucket<span class="token punctuation">:</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> bucket<span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> obj <span class="token keyword">in</span> all<span class="token punctuation">:</span>            all<span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">.</span>do_recommend<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            all<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">.</span>do_recommend<span class="token punctuation">)</span>tem <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> all<span class="token punctuation">:</span>    tem<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> len<span class="token punctuation">(</span>all<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>temres<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> a <span class="token keyword">in</span> temp<span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> tem<span class="token punctuation">:</span>        <span class="token keyword">if</span> a <span class="token operator">==</span> j<span class="token punctuation">:</span>            res<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">/</span>tem<span class="token punctuation">[</span>j<span class="token punctuation">]</span>x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> item <span class="token keyword">in</span> res<span class="token punctuation">:</span>    x<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>res<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>xlabel<span class="token operator">=</span><span class="token string">"Rating"</span><span class="token punctuation">,</span> ylabel<span class="token operator">=</span><span class="token string">"Percentage of helpful reviews"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_38_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q31 Which words appear most commonly in the text of reviews with rating 5. List only the words that appear more than 1000 times.</span><span class="token keyword">def</span> <span class="token function">get_commonly_text</span><span class="token punctuation">(</span>rate<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    bucket <span class="token operator">=</span> bucketize<span class="token punctuation">(</span><span class="token punctuation">)</span>    tex <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> bucket<span class="token punctuation">[</span>rate<span class="token punctuation">]</span><span class="token punctuation">:</span>        tex<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    res <span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> tex<span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> item<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> j <span class="token keyword">in</span> res<span class="token punctuation">:</span>                res<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                res<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    out <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> res<span class="token punctuation">:</span>        <span class="token keyword">if</span> res<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token operator">></span>num<span class="token punctuation">:</span>            out<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>word<span class="token punctuation">]</span>    <span class="token keyword">return</span> outget_commonly_text<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>{&#39;this&#39;: 1016, &#39;to&#39;: 1442, &#39;my&#39;: 1146, &#39;for&#39;: 1800, &#39;the&#39;: 1740, &#39;and&#39;: 1818, &#39;i&#39;: 1317, &#39;it&#39;: 1286, &#39;a&#39;: 1134}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q32 Which words appear most commonly in the title of reviews with rating 5. List only the words that appear more than 100 times.</span><span class="token keyword">def</span> <span class="token function">get_commonly_title</span><span class="token punctuation">(</span>rate<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    bucket <span class="token operator">=</span> bucketize<span class="token punctuation">(</span><span class="token punctuation">)</span>    tex <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> bucket<span class="token punctuation">[</span>rate<span class="token punctuation">]</span><span class="token punctuation">:</span>        tex<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">.</span>title<span class="token punctuation">)</span>    res <span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> tex<span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> item<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> j <span class="token keyword">in</span> res<span class="token punctuation">:</span>                res<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                res<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    out <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> res<span class="token punctuation">:</span>        <span class="token keyword">if</span> res<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token operator">></span>num<span class="token punctuation">:</span>            out<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>word<span class="token punctuation">]</span>    <span class="token keyword">return</span> outget_commonly_title<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>{&#39;kindle&#39;: 142, &#39;love&#39;: 158, &#39;it&#39;: 137, &#39;a&#39;: 143, &#39;great&#39;: 1093, &#39;the&#39;: 231, &#39;tablet&#39;: 681, &#39;good&#39;: 212, &#39;for&#39;: 617, &#39;awesome&#39;: 108, &#39;kids&#39;: 132, &#39;gift&#39;: 105, &#39;fire&#39;: 104, &#39;price&#39;: 149, &#39;product&#39;: 179, &#39;my&#39;: 138, &#39;to&#39;: 106}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q33 Which words appear most commonly in the title of reviews with rating 1. List only the words that appear more than once.</span>get_commonly_title<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>{&#39;poor&#39;: 2, &#39;tablet&#39;: 4, &#39;a&#39;: 5, &#39;great&#39;: 2, &#39;very&#39;: 3, &#39;disappointed&#39;: 2, &#39;use&#39;: 2, &#39;amazon&#39;: 5, &#39;not&#39;: 8, &#39;good&#39;: 2, &#39;5&#39;: 2, &#39;for&#39;: 2, &#39;with&#39;: 2, &#39;work&#39;: 2, &#39;really&#39;: 2, &#39;to&#39;: 2, &#39;and&#39;: 2, &#39;kindle&#39;: 2, &#39;does&#39;: 2}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q34 Which words appear most commonly in the title of reviews with rating 3 List only the words that appear more than 10 times.</span>get_commonly_title<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>{&#39;great&#39;: 37, &#39;for&#39;: 60, &#39;price&#39;: 18, &#39;ok&#39;: 18, &#39;tablet&#39;: 51, &#39;the&#39;: 18, &#39;good&#39;: 42, &#39;not&#39;: 13, &#39;a&#39;: 17}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_path</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    file_path_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> root<span class="token punctuation">,</span>dirs<span class="token punctuation">,</span>files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> files<span class="token punctuation">:</span>            <span class="token keyword">for</span> file <span class="token keyword">in</span> files<span class="token punctuation">:</span>                    file_path_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> sorted<span class="token punctuation">(</span>file_path_list<span class="token punctuation">,</span>reverse <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q35 List the paths in the helpful directory of rating5 of broken_file.</span>path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'broken_file'</span><span class="token punctuation">,</span><span class="token string">'rating5'</span><span class="token punctuation">,</span><span class="token string">'helpful'</span><span class="token punctuation">)</span>get_path<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;broken_file\\rating5\\helpful\\helpful.json&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q36 List the paths of all the files in the rating4 directory of broken_file.</span>path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'broken_file'</span><span class="token punctuation">,</span><span class="token string">'rating4'</span><span class="token punctuation">)</span>get_path<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;broken_file\\rating4\\very_helpful\\very_helpful.json&#39;, &#39;broken_file\\rating4\\others\\short\\short.json&#39;, &#39;broken_file\\rating4\\others\\others\\others.json&#39;, &#39;broken_file\\rating4\\not_helpful.json&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q37  List the paths of all the files in the broken_file directory.</span>path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'broken_file'</span><span class="token punctuation">)</span>get_path<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;broken_file\\rating5\\others.json&#39;, &#39;broken_file\\rating5\\helpful\\helpful.json&#39;, &#39;broken_file\\rating4\\very_helpful\\very_helpful.json&#39;, &#39;broken_file\\rating4\\others\\short\\short.json&#39;, &#39;broken_file\\rating4\\others\\others\\others.json&#39;, &#39;broken_file\\rating4\\not_helpful.json&#39;, &#39;broken_file\\rating3\\others\\others.json&#39;, &#39;broken_file\\rating3\\long\\long.json&#39;, &#39;broken_file\\others.json&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q38  Combine all the files in broken_file and find the number of unique products being reviewed in these files.</span><span class="token keyword">def</span> <span class="token function">read_broken_json</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span>    reader <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> reader<span class="token keyword">def</span> <span class="token function">get_product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    all_path<span class="token operator">=</span>get_path<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    broken_files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>     <span class="token keyword">for</span> file <span class="token keyword">in</span> all_path<span class="token punctuation">:</span>        broken_files<span class="token punctuation">.</span>append<span class="token punctuation">(</span>read_broken_json<span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span>    complete_list_broken_file <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> files <span class="token keyword">in</span> broken_files<span class="token punctuation">:</span>        <span class="token keyword">for</span> file <span class="token keyword">in</span> files<span class="token punctuation">:</span>            complete_list_broken_file<span class="token punctuation">[</span>file<span class="token punctuation">]</span> <span class="token operator">=</span> files<span class="token punctuation">[</span>file<span class="token punctuation">]</span>    complete_list_broken_file    list_broken_csv <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    review4 <span class="token operator">=</span> read_csv<span class="token punctuation">(</span><span class="token string">'review4.csv'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> review4<span class="token punctuation">:</span>        list_broken_csv<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dict<span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">)</span>    list_broken_csv     list_broken_review_object <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    Review <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span><span class="token string">"Review"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"asin"</span><span class="token punctuation">,</span> <span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"text"</span><span class="token punctuation">,</span> <span class="token string">"rating"</span><span class="token punctuation">,</span> <span class="token string">"do_recommend"</span><span class="token punctuation">,</span> <span class="token string">"num_helpful"</span><span class="token punctuation">,</span> <span class="token string">"date"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>list_broken_csv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         boolean <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> list_broken_csv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"review do_recommend"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"True"</span><span class="token punctuation">:</span>            boolean <span class="token operator">=</span> <span class="token boolean">True</span>        broken_review <span class="token operator">=</span> Review<span class="token punctuation">(</span>int<span class="token punctuation">(</span>list_broken_csv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"review id"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                           complete_list_broken_file<span class="token punctuation">[</span>list_broken_csv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"review id"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                            complete_list_broken_file<span class="token punctuation">[</span>list_broken_csv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"review id"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                           list_broken_csv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"review title"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                            list_broken_csv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"review text"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                            int<span class="token punctuation">(</span>list_broken_csv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"review rating"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                           boolean<span class="token punctuation">,</span>                           int<span class="token punctuation">(</span>list_broken_csv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"review num_helpful"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                           list_broken_csv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"review date"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        list_broken_review_object<span class="token punctuation">.</span>append<span class="token punctuation">(</span>broken_review<span class="token punctuation">)</span>      <span class="token keyword">return</span> list_broken_review_object<span class="token keyword">def</span> <span class="token function">get_num_product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    list_unique_products <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    list_broken_review_object <span class="token operator">=</span> get_product<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> review <span class="token keyword">in</span> list_broken_review_object<span class="token punctuation">:</span>        list_unique_products<span class="token punctuation">.</span>append<span class="token punctuation">(</span>review<span class="token punctuation">.</span>asin<span class="token punctuation">)</span>    <span class="token keyword">return</span> len<span class="token punctuation">(</span>set<span class="token punctuation">(</span>list_unique_products<span class="token punctuation">)</span><span class="token punctuation">)</span>get_num_product<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q39 Combine all the files in the directories data and broken_file, and find the total number of reviews.</span><span class="token keyword">def</span> <span class="token function">get_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    stage1_data <span class="token operator">=</span> entire    stage2_data<span class="token operator">=</span> get_product<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> len<span class="token punctuation">(</span>stage1_data<span class="token punctuation">)</span> <span class="token operator">+</span> len<span class="token punctuation">(</span>stage2_data<span class="token punctuation">)</span>get_num<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>4992</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q40 What is the percentage of change in the average rating changed for the product 'Fire Tablet, 7 Display, Wi-Fi, 8 GB - Includes Special Offers, Magenta', because of the addition of the new data?</span><span class="token keyword">def</span> <span class="token function">get_origin_avg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    products <span class="token operator">=</span> read_json<span class="token punctuation">(</span><span class="token string">"products.json"</span><span class="token punctuation">)</span>    total_grades <span class="token operator">=</span> <span class="token number">0</span>    n <span class="token operator">=</span> <span class="token number">0</span>    entire <span class="token operator">=</span> get_entire<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> review <span class="token keyword">in</span> entire<span class="token punctuation">:</span>        <span class="token keyword">if</span> products<span class="token punctuation">[</span>review<span class="token punctuation">.</span>asin<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Fire Tablet, 7 Display, Wi-Fi, 8 GB - Includes Special Offers, Magenta'</span><span class="token punctuation">:</span>            total_grades <span class="token operator">+=</span> review<span class="token punctuation">.</span>rating            n <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> total_grades <span class="token operator">/</span> n<span class="token keyword">def</span> <span class="token function">get_after_avg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    products <span class="token operator">=</span> read_json<span class="token punctuation">(</span><span class="token string">"products.json"</span><span class="token punctuation">)</span>    total_grades <span class="token operator">=</span> <span class="token number">0</span>    n <span class="token operator">=</span> <span class="token number">0</span>    entire <span class="token operator">=</span> get_entire<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> review <span class="token keyword">in</span> entire<span class="token punctuation">:</span>        <span class="token keyword">if</span> products<span class="token punctuation">[</span>review<span class="token punctuation">.</span>asin<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Fire Tablet, 7 Display, Wi-Fi, 8 GB - Includes Special Offers, Magenta'</span><span class="token punctuation">:</span>            total_grades <span class="token operator">+=</span> review<span class="token punctuation">.</span>rating            n <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true">#add broken files</span>    broken <span class="token operator">=</span> get_product<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">for</span> review <span class="token keyword">in</span> broken<span class="token punctuation">:</span>        <span class="token keyword">if</span> products<span class="token punctuation">[</span>review<span class="token punctuation">.</span>asin<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Fire Tablet, 7 Display, Wi-Fi, 8 GB - Includes Special Offers, Magenta'</span><span class="token punctuation">:</span>            total_grades <span class="token operator">+=</span> review<span class="token punctuation">.</span>rating            n <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> total_grades <span class="token operator">/</span> n<span class="token punctuation">(</span><span class="token punctuation">(</span>get_after_avg<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> get_origin_avg<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> get_origin_avg<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0.31190229022053717</code></pre>]]></content>
      
      
      <categories>
          
          <category> CS301Proj </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS301 Data Programming I </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Free Trail Screen</title>
      <link href="/2019/11/22/free-trial-screener/"/>
      <url>/2019/11/22/free-trial-screener/</url>
      
        <content type="html"><![CDATA[<h1 id="📘-Experiment-design"><a href="#📘-Experiment-design" class="headerlink" title="📘  Experiment design"></a>📘  Experiment design</h1><h2 id="📖-Experiment-Overview-Free-Trial-Screener"><a href="#📖-Experiment-Overview-Free-Trial-Screener" class="headerlink" title="📖 Experiment Overview: Free Trial Screener"></a>📖 Experiment Overview: Free Trial Screener</h2><p><font color="blue">At the time of this experiment, Udacity courses currently have two options on the home page: “start free trial”, and “access course materials”. If the student clicks “start free trial”, they will be asked to enter their credit card information, and then they will be enrolled in a free trial for the paid version of the course. After 14 days, they will automatically be charged unless they cancel first. If the student clicks “access course materials”, they will be able to view the videos and take the quizzes for free, but they will not receive coaching support or a verified certificate, and they will not submit their final project for feedback.</font></p><p>In the experiment, Udacity tested a change where if the student clicked “start free trial”, they were asked how much time they had available to devote to the course. If the student indicated 5 or more hours per week, they would be taken through the checkout process as usual. If they indicated fewer than 5 hours per week, a message would appear indicating that Udacity courses usually require a greater time commitment for successful completion, and suggesting that the student might like to access the course materials for free. At this point, the student would have the option to continue enrolling in the free trial, or access the course materials for free instead. The screenshot below shows what the experiment looks like.</p><p>The hypothesis was that this might set clearer expectations for students upfront, thus reducing the number of frustrated students who left the free trial because they didn’t have enough time—without significantly reducing the number of students to continue past the free trial and eventually complete the course. If this hypothesis held true, Udacity could improve the overall student experience and improve coaches’ capacity to support students who are likely to complete the course.</p><p>The unit of diversion is a cookie, although if the student enrolls in the free trial, they are tracked by user-id from that point forward. The same user-id cannot enroll in the free trial twice. For users that do not enroll, their user-id is not tracked in the experiment, even if they were signed in when they visited the course overview page.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> IPython<span class="token punctuation">.</span>display <span class="token keyword">import</span> ImageImage<span class="token punctuation">(</span><span class="token string">'download.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="1_3_0.png" alt="png"></p><h1 id="📖-Metric-Choice"><a href="#📖-Metric-Choice" class="headerlink" title="📖 Metric Choice"></a>📖 Metric Choice</h1><p><font color="blue">Which of the following metrics would you choose to measure for this experiment and why? For each metric you choose, indicate whether you would use it as an invariant metric or an evaluation metric. The practical significance boundary for each metric, that is, the difference that would have to be observed before that was a meaningful change for the business, is given in parentheses. All practical significance boundaries are given as absolute changes.</font></p><p>Any place “unique cookies” are mentioned, the uniqueness is determined by day. (That is, the same cookie visiting on different days would be counted twice.) User-ids are automatically unique since the site does not allow the same user-id to enroll twice.</p><ul><li>Number of cookies: That is, number of unique cookies to view the course overview page. (dmin=3000)</li><li>Number of user-ids: That is, number of users who enroll in the free trial. (dmin=50)</li><li>Number of clicks: That is, number of unique cookies to click the “Start free trial” button (which happens before the free trial screener is trigger). (dmin=240)</li><li>Click-through-probability: That is, number of unique cookies to click the “Start free trial” button divided by number of unique cookies to view the course overview page. (dmin=0.01)</li><li>Gross conversion: That is, number of user-ids to complete checkout and enroll in the free trial divided by number of unique cookies to click the “Start free trial” button. (dmin= 0.01)</li><li>Retention: That is, number of user-ids to remain enrolled past the 14-day boundary (and thus make at least one payment) divided by number of user-ids to complete checkout. (dmin=0.01)</li><li>Net conversion: That is, number of user-ids to remain enrolled past the 14-day boundary (and thus make at least one payment) divided by the number of unique cookies to click the “Start free trial” button. (dmin= 0.0075)</li></ul><h2 id="🔵-Invariant-metrics"><a href="#🔵-Invariant-metrics" class="headerlink" title="🔵 Invariant metrics"></a>🔵 Invariant metrics</h2><p><br>expected to be unchanged in the control and experimental groups:</p><ul><li><p>number of cookies <br>this metric cannot be affected by the experiment: users made a decision to visit the page before they were asked the question;</p></li><li><p>number of clicks <br>this metric cannot be affected by the experiment: users clicked the button before they were asked the question;</p></li><li><p>click-through probability <br>this metric cannot be affected by the experiment: it equals to the number of clicks divided by the number of cookies.</p><h2 id="🔵-Evaluation-metrics"><a href="#🔵-Evaluation-metrics" class="headerlink" title="🔵 Evaluation metrics"></a>🔵 Evaluation metrics</h2><p><br> expected to be different in the control and experimental groups:</p></li><li><p>gross conversion <br> this metric may decrease: users could make a decision to enroll in the free trial in the experimental group less than in the control group because they did not plan to learn 5+ hours per week;</p></li><li><p>retention <br>this metriccan may increase: enrolled users could less be disappointed in the learning process and make more payments in the experimental group than in the control group because they paid attention to studying 5+ hours per week;</p></li><li><p>net conversion<br>this metric may decrease: users could enroll in the free trial less in the experimental group than in the control group, thus could decrease the number of people who paid.</p></li></ul><h3 id="The-goals-of-the-experiment-in-the-practical-meaning"><a href="#The-goals-of-the-experiment-in-the-practical-meaning" class="headerlink" title="The goals of the experiment in the practical meaning:"></a>The goals of the experiment in the practical meaning:</h3><ul><li>the number of payments should not be decreased;</li><li>the number of students who were disappointed and had not paid because they could not study enough time should be reduced.</li></ul><h3 id="The-goals-of-the-experiment-in-terms-of-our-metrics"><a href="#The-goals-of-the-experiment-in-terms-of-our-metrics" class="headerlink" title="The goals of the experiment in terms of our metrics:"></a>The goals of the experiment in terms of our metrics:</h3><ul><li>the gross conversion should significantly decrease;</li><li>the retention should significantly increase;</li><li>the net conversion should not decrease.</li></ul><p><br>An important remark: the number of user-ids is neither a good invariant metric nor a good evaluation metric.<br>From one side, the new pop-up message is likely to decrease the total number of user-ids who enrolled in the free trial, so it is not invariant; from the other side it is not normalized, the number of visitors may be different between the experiment and control groups, so it is not good for evaluation.</p><h2 id="📖-Measuring-Variability"><a href="#📖-Measuring-Variability" class="headerlink" title="📖   Measuring Variability"></a>📖   Measuring Variability</h2><p><font color="blue">This list contains rough estimates of the baseline values for these metrics (again, these numbers have been changed from Udacity’s true numbers).</font></p><pre class="line-numbers language-python"><code class="language-python">baseline <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"Final Project Baseline Values - Sheet1.csv"</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>header <span class="token operator">=</span> None<span class="token punctuation">,</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'metric'</span><span class="token punctuation">,</span><span class="token string">'baseline_value'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>baseline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>metric</th>      <th>baseline_value</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Unique cookies to view course overview page pe...</td>      <td>40000.000000</td>    </tr>    <tr>      <th>1</th>      <td>Unique cookies to click "Start free trial" per...</td>      <td>3200.000000</td>    </tr>    <tr>      <th>2</th>      <td>Enrollments per day:</td>      <td>660.000000</td>    </tr>    <tr>      <th>3</th>      <td>Click-through-probability on "Start free trial":</td>      <td>0.080000</td>    </tr>    <tr>      <th>4</th>      <td>Probability of enrolling, given click:</td>      <td>0.206250</td>    </tr>    <tr>      <th>5</th>      <td>Probability of payment, given enroll:</td>      <td>0.530000</td>    </tr>    <tr>      <th>6</th>      <td>Probability of payment, given click</td>      <td>0.109313</td>    </tr>  </tbody></table></div><h3 id="For-each-metric-I-selected-as-an-evaluation-metric-estimate-standard-deviation-analytically"><a href="#For-each-metric-I-selected-as-an-evaluation-metric-estimate-standard-deviation-analytically" class="headerlink" title="For each metric I selected as an evaluation metric, estimate standard deviation analytically:"></a>For each metric I selected as an evaluation metric, estimate standard deviation analytically:</h3><p>The number of clicks and enrollments follows a binomial distribution, and by the central limit theorem, the distribution of the three rates (gross conversion, retention, and net conversion) is Gaussian.</p><p>Given the daily sample of 5000 cookies, the number of clicks and enrollments can be calculated using the baseline values<br>Number of cookies = 5000<br>Number of clicks on “Start free trial” = 5000 × 0.08 = 400<br>Number of enrollments = 5000 × 0.08 × 0.20625 = 82.5</p><p>$$ SD \; Gross\; conversion = \sqrt{\frac{p <em> (1 - p)} {n}} = \sqrt{\frac{0.20625 </em> (1 - 0.20625)} {400} }= 0.0202 $$$$ SD \; Retention = \sqrt{\frac{p <em> (1 - p)} {n}} = \sqrt{\frac{0.53 </em> (1 - 0.53)} { 82.5}} = 0.0549 $$$$ SD \; Net\; conversion = \sqrt{\frac{p <em> (1 - p)} {n}} = \sqrt{\frac{0.1093125 </em> (1 - 0.1093125)} {400}} = 0.0156 $$</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Supporting calculation for the standard deviation</span><span class="token keyword">import</span> math<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"5000 × 0.08 × 0.20625 = "</span><span class="token punctuation">,</span> <span class="token number">5000</span> <span class="token operator">*</span> <span class="token number">0.08</span> <span class="token operator">*</span> <span class="token number">0.20625</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"SD Gross conversion = "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">0.20625</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.20625</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"SD Retention = "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">0.53</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.53</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">82.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"SD Net conversion = "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">0.1093125</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.1093125</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>5000 × 0.08 × 0.20625 =  82.5SD Gross conversion =  0.020230604137049392SD Retention =  0.05494901217850908SD Net conversion =  0.01560154458248846</code></pre><p>I would like to expect the analytical variance is close to the empirical variance for the gross conversion and for the net conversion: the denominator for these two indicators is the number of clicks, which is also the unit of diversion.</p><p>And it would be useful to collect an empirical estimate of the variability for the retention: the unit of diversion was not used in this case, the empirical variance of the retention is more likely to be higher than the analytical variance.</p><h2 id="📖-Sizing"><a href="#📖-Sizing" class="headerlink" title="📖 Sizing"></a>📖 Sizing</h2><h2 id="Number-of-Samples-given-Power"><a href="#Number-of-Samples-given-Power" class="headerlink" title="Number of Samples given Power"></a>Number of Samples given Power</h2><p>Using the analytic estimates of variance to calculate how many pageviews total (across both groups) would I need to collect to adequately power the experiment. Use an alpha of 0.05 and a beta of 0.2.</p><p>I have used the online calculator (References, N5) for calculating the sample sizes and have chosen the largest.</p><pre class="line-numbers language-python"><code class="language-python">Image<span class="token punctuation">(</span><span class="token string">'sample_size.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="1_27_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">Image<span class="token punctuation">(</span><span class="token string">'Sample_Retention_Screenshot.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="1_28_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">Image<span class="token punctuation">(</span><span class="token string">'Sample_Net_conversion_Screenshot.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="1_29_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Supporting calculation for the control and experimental groups</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Gross conversion: 2 × 25835 × 40000 ÷ 3200 = "</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">25835</span> <span class="token operator">*</span> <span class="token number">40000</span> <span class="token operator">/</span> <span class="token number">3200.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Retention:  2 × 39115 × 40000 ÷ 660 = "</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">39115</span> <span class="token operator">*</span> <span class="token number">40000</span> <span class="token operator">/</span> <span class="token number">660.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Net conversion:  2 × 27413 × 40000 ÷ 3200 = "</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">27413</span> <span class="token operator">*</span> <span class="token number">40000</span> <span class="token operator">/</span> <span class="token number">3200.0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Gross conversion: 2 × 25835 × 40000 ÷ 3200 =  645875.0Retention:  2 × 39115 × 40000 ÷ 660 =  4741212.121212121Net conversion:  2 × 27413 × 40000 ÷ 3200 =  685325.0</code></pre><h2 id="Duration-vs-Exposure"><a href="#Duration-vs-Exposure" class="headerlink" title="Duration vs. Exposure"></a>Duration vs. Exposure</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Supporting calculation for the number of days</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Number of pageviews: 4741212"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"(for the experiment with the gross conversion, the retention, and the net conversion)"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Days (100% of the traffic) = 4741212 ÷ 40000 = "</span><span class="token punctuation">,</span> <span class="token number">4741212</span> <span class="token operator">/</span> <span class="token number">40000.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Number of pageviews: 685325"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"(for the experiment with the gross conversion and the net conversion)"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Days (100% of the traffic) = 685325 ÷ 40000 = "</span><span class="token punctuation">,</span> <span class="token number">685325</span> <span class="token operator">/</span> <span class="token number">40000.0</span> <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Days (60% of the traffic) = 685325 ÷ 40000 ÷ 0.6 = "</span><span class="token punctuation">,</span> <span class="token number">685325</span> <span class="token operator">/</span> <span class="token number">40000.0</span> <span class="token operator">/</span> <span class="token number">0.6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Number of pageviews: 4741212(for the experiment with the gross conversion, the retention, and the net conversion)Days (100% of the traffic) = 4741212 ÷ 40000 =  118.5303Number of pageviews: 685325(for the experiment with the gross conversion and the net conversion)Days (100% of the traffic) = 685325 ÷ 40000 =  17.133125Days (60% of the traffic) = 685325 ÷ 40000 ÷ 0.6 =  28.555208333333333</code></pre><p> Even the use of 100 percent of the traffic does not allow testing in full for all three metrics (the gross conversion, the retention, and the net conversion). It turns out that we need to experiment 118 days. Of course, it is too long for tasks staged in the project. Percent reduction in traffic will increase this interval. Hence, it is necessary to reduce the number of test metrics and choose only two of them: the gross conversion and the net conversion.</p><p>I should reconsider an earlier decision about 4741212 needed pageviews and setup the number of pageviews equal to 685325. For the experiment with the gross conversion and the net conversion, we can use the period 17 days with the 100% traffic level. This interval is much better, but it gives us the result too quickly. The behavior of people in the field of education is quite difficult to analyze and trends in this area could be rarely detected in a short time period for 2-3 weeks. To slightly increase the time interval, we will set the percentage of used traffic at 60 (fraction = 0.6) and it gives us the number: 29 days.</p><p>It is also possible to take into consideration that the commercial risk is low: the site offers students to better plan and to evaluate their training time. The assumption of a sharp decrease in payments as a result of the pilot warning is devoid of practical foundation. For investments, the decisive factor is the first free period as a way to assess their own abilities, and it does not change during the experiment. The number of payments theoretically may slightly decrease due to the lower number of subscriptions, but this is only an assumption. Students who spend less than 5 hours a week are hardly able to complete the program successfully. In most cases, we are talking about reducing the waste of time for students and mentors.</p><p>And there is no risk in terms of privacy violation at all. Users do not enter any additional information about themselves in the process of the experiment except a little piece of information about planning.</p><p>It should be noted that the use of the fraction 0.6 does not affect the commercial interests seriously. From one side, the time interval and therefore the risk will increase. From another side, we keep the certain number of pageviews, therefore the experimental audience and the risk will not increase. It means our experiment could not practically be risky for the business.</p><p>Removing one indicator in the main part of the project, I want to analyze the experimental data in the last section on my own initiative a little bit wider and to determine what happens to the metrics “Retention” as the most interesting in terms of the psychological effect and the most unpredictable.</p><p>🔵   Number of pageviews: 685325. 🔵   Fraction of traffic exposed: 0.6. 🔵   Length of experiment: 29.</p><h2 id="📘-Experiment-Analysis"><a href="#📘-Experiment-Analysis" class="headerlink" title="📘 Experiment Analysis"></a>📘 Experiment Analysis</h2><font color="blue">This data contains the raw information needed to compute the above metrics, broken down day by day. Note that there are two sheets within the spreadsheet - one for the experiment group, and one for the control group.<p>The meaning of each column is:</p><ul><li>Pageviews: Number of unique cookies to view the course overview page that day.</li><li>Clicks: Number of unique cookies to click the course overview page that day.</li><li>Enrollments: Number of user-ids to enroll in the free trial that day.</li><li>Payments: Number of user-ids who who enrolled on that day to remain enrolled for 14 days and thus make a payment.<br>(Note that the date for this column is the start date, that is, the date of enrollment, rather than the date of the payment. The payment happened 14 days later. Because of this, the enrollments and payments are tracked for 14 fewer days than the other columns.)</li></ul></font><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Read the data for the control and experimental groups</span>control_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'Final Project Results - Control.csv'</span><span class="token punctuation">)</span>experiment_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'Final Project Results - Experiment.csv'</span><span class="token punctuation">)</span>control_data2 <span class="token operator">=</span> control_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">]</span>experiment_data2 <span class="token operator">=</span> experiment_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Control data"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>control_data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Experimental data"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>experiment_data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Control data          Date  Pageviews  Clicks  Enrollments  Payments0  Sat, Oct 11       7723     687        134.0      70.01  Sun, Oct 12       9102     779        147.0      70.02  Mon, Oct 13      10511     909        167.0      95.0Experimental data          Date  Pageviews  Clicks  Enrollments  Payments0  Sat, Oct 11       7716     686        105.0      34.01  Sun, Oct 12       9288     785        116.0      91.02  Mon, Oct 13      10480     884        145.0      79.0</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Plot the metrics</span>plt<span class="token punctuation">.</span>style<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">'ggplot'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'figure.figsize'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>csfont <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'fontname'</span><span class="token punctuation">:</span><span class="token string">'Arial'</span><span class="token punctuation">}</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Click-through-probability on "Start free trial"'</span><span class="token punctuation">,</span> <span class="token operator">**</span>csfont<span class="token punctuation">)</span>line1<span class="token punctuation">,</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>control_data<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data<span class="token punctuation">[</span><span class="token string">'Pageviews'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'control'</span><span class="token punctuation">)</span>line2<span class="token punctuation">,</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>experiment_data<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data<span class="token punctuation">[</span><span class="token string">'Pageviews'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'experiment'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>handles<span class="token operator">=</span><span class="token punctuation">[</span>line1<span class="token punctuation">,</span> line2<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.legend.Legend at 0x1a16a3a46d8&gt;</code></pre><p><img src="1_40_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Gross conversion'</span><span class="token punctuation">,</span> <span class="token operator">**</span>csfont<span class="token punctuation">)</span>line3<span class="token punctuation">,</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>control_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'control'</span><span class="token punctuation">)</span>line4<span class="token punctuation">,</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'experiment'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>handles<span class="token operator">=</span><span class="token punctuation">[</span>line3<span class="token punctuation">,</span> line4<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.legend.Legend at 0x1a16a5ae9e8&gt;</code></pre><p><img src="1_41_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Net conversion'</span><span class="token punctuation">,</span> <span class="token operator">**</span>csfont<span class="token punctuation">)</span>line7<span class="token punctuation">,</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>control_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'control'</span><span class="token punctuation">)</span>line8<span class="token punctuation">,</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'experiment'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>handles<span class="token operator">=</span><span class="token punctuation">[</span>line7<span class="token punctuation">,</span> line8<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.legend.Legend at 0x1a16a3f4a20&gt;</code></pre><p><img src="1_42_1.png" alt="png"></p><h2 id="📖-Sanity-Checks"><a href="#📖-Sanity-Checks" class="headerlink" title="📖   Sanity Checks"></a>📖   Sanity Checks</h2><font color="blue"><br>Start by checking whether your invariant metrics are equivalent between the two groups. <br>   - If the invariant metric is a simple count that should be randomly split between the 2 groups, you can use a binomial test. <br>   - Otherwise, you will need to construct a confidence interval for a difference in proportions using a similar strategy then check whether the difference between group values falls within that confidence level. </font><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Control group:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Clicks = "</span><span class="token punctuation">,</span> control_data<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"   "</span><span class="token punctuation">,</span> \      <span class="token string">"Pageviews = "</span><span class="token punctuation">,</span> control_data<span class="token punctuation">[</span><span class="token string">'Pageviews'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Experimental group:"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Clicks = "</span><span class="token punctuation">,</span> experiment_data<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"   "</span><span class="token punctuation">,</span> \      <span class="token string">"Pageviews = "</span><span class="token punctuation">,</span> experiment_data<span class="token punctuation">[</span><span class="token string">'Pageviews'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Control group:Clicks =  28378     Pageviews =  345543Experimental group:Clicks =  28325     Pageviews =  344660</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Supporting calculation for checking invariant metrics</span>p <span class="token operator">=</span> <span class="token number">0.5</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Number of cookies:"</span><span class="token punctuation">)</span>SE_cookies <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>p <span class="token operator">*</span> p <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">345543</span> <span class="token operator">+</span> <span class="token number">344660</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Standard error SE = "</span><span class="token punctuation">,</span> SE_cookies<span class="token punctuation">)</span>ME_cookies <span class="token operator">=</span> SE_cookies <span class="token operator">*</span> <span class="token number">1.96</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Margin of error ME = "</span><span class="token punctuation">,</span> ME_cookies<span class="token punctuation">)</span><span class="token punctuation">(</span>LB_cookies<span class="token punctuation">,</span> UB_cookies<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> ME_cookies<span class="token punctuation">,</span> p <span class="token operator">+</span> ME_cookies<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Confidential interval CI = "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_cookies<span class="token punctuation">,</span> UB_cookies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> u<span class="token string">'p\u0302'</span><span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">,</span> <span class="token number">345543.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">345543</span> <span class="token operator">+</span> <span class="token number">344660</span><span class="token punctuation">)</span><span class="token punctuation">,</span> u<span class="token string">'\u2208'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_cookies<span class="token punctuation">,</span> UB_cookies<span class="token punctuation">)</span><span class="token punctuation">,</span> u<span class="token string">'\u2713'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'Number of clicks on “Start free trial":'</span><span class="token punctuation">)</span>SE_clicks <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">0.5</span> <span class="token operator">*</span> <span class="token number">0.5</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">28378</span> <span class="token operator">+</span> <span class="token number">28325</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Standard error SE = "</span><span class="token punctuation">,</span> SE_clicks<span class="token punctuation">)</span>ME_clicks <span class="token operator">=</span> SE_clicks <span class="token operator">*</span> <span class="token number">1.96</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Margin of error ME = "</span><span class="token punctuation">,</span> ME_clicks<span class="token punctuation">)</span><span class="token punctuation">(</span>LB_clicks<span class="token punctuation">,</span> UB_clicks<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> ME_clicks<span class="token punctuation">,</span> p <span class="token operator">+</span> ME_clicks<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Confidential interval CI = "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_clicks<span class="token punctuation">,</span> UB_clicks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> u<span class="token string">'p\u0302'</span><span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">,</span> <span class="token number">28378.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">28378</span> <span class="token operator">+</span> <span class="token number">28325</span><span class="token punctuation">)</span><span class="token punctuation">,</span> u<span class="token string">'\u2208'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_clicks<span class="token punctuation">,</span> UB_clicks<span class="token punctuation">)</span><span class="token punctuation">,</span> u<span class="token string">'\u2713'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">'Click-through-probability on "Start free trial":'</span><span class="token punctuation">)</span>p_pool <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">28378</span> <span class="token operator">+</span> <span class="token number">28325</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">345543</span> <span class="token operator">+</span> <span class="token number">344660</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Pooled probability p_pool = "</span><span class="token punctuation">,</span> p_pool<span class="token punctuation">)</span>SE_pool <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>p_pool <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> p_pool<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">345543</span> <span class="token operator">+</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">344660</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Standard error SE = "</span><span class="token punctuation">,</span> SE_pool<span class="token punctuation">)</span>ME_pool <span class="token operator">=</span> SE_pool <span class="token operator">*</span> <span class="token number">1.96</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Margin of error ME = "</span><span class="token punctuation">,</span> ME_pool<span class="token punctuation">)</span>d_hat <span class="token operator">=</span> <span class="token number">28325.0</span> <span class="token operator">/</span> <span class="token number">344660</span> <span class="token operator">-</span> <span class="token number">28378.0</span> <span class="token operator">/</span> <span class="token number">345543</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Difference"</span><span class="token punctuation">,</span> u<span class="token string">'d\u0302'</span><span class="token punctuation">,</span> <span class="token string">"= "</span><span class="token punctuation">,</span> d_hat<span class="token punctuation">)</span><span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">-</span> ME_pool<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token operator">+</span> ME_pool<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Confidential interval CI = "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>u<span class="token string">'d\u0302'</span><span class="token punctuation">,</span> u<span class="token string">'\u2208'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">,</span> u<span class="token string">'\u2713'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Number of cookies:Standard error SE =  0.0006018407402943247Margin of error ME =  0.0011796078509768765Confidential interval CI =  (0.49882039214902313, 0.5011796078509769)p̂ = 0.5006396668806133 ∈ (0.49882039214902313, 0.5011796078509769) ✓Number of clicks on “Start free trial&quot;:Standard error SE =  0.002099747079699252Margin of error ME =  0.0041155042762105335Confidential interval CI =  (0.49588449572378945, 0.5041155042762105)p̂ = 0.5004673474066628 ∈ (0.49588449572378945, 0.5041155042762105) ✓Click-through-probability on &quot;Start free trial&quot;:Pooled probability p_pool =  0.08215409089789526Standard error SE =  0.0006610608156387222Margin of error ME =  0.0012956791986518956Difference d̂ =  5.662709158693602e-05Confidential interval CI =  (-0.0012956791986518956, 0.0012956791986518956)d̂ ∈ (-0.0012956791986518956, 0.0012956791986518956) ✓</code></pre><p>🔵   Number of cookiesLower bound = 0.4988; Upper bound = 0.5012; Observed = 0.5006; Passes = ✅</p><p>🔵   Number of clicks on “Start free trial”Lower bound = 0.4959; Upper bound = 0.5041; Observed = 0.5005; Passes = ✅</p><p>🔵   Click-through-probability on “Start free trial” (Difference between the control and experimental groups)Lower bound = -0.0013; Upper bound = 0.0013; Observed = 0.0001; Passes = ✅</p><h2 id="📖-Result-Analysis"><a href="#📖-Result-Analysis" class="headerlink" title="📖   Result Analysis"></a>📖   Result Analysis</h2><h3 id="Check-for-Practical-and-Statistical-Significance"><a href="#Check-for-Practical-and-Statistical-Significance" class="headerlink" title="Check for Practical and Statistical Significance"></a>Check for Practical and Statistical Significance</h3><p>Next, for my evaluation metrics, calculate a confidence interval for the difference between the experiment and control groups, and check whether each metric is statistically and/or practically significance. <br></p><ul><li>A metric is statistically significant if the confidence interval does not include 0 (that is, you can be confident there was a change)<br></li><li>it is practically significant if the confidence interval does not include the practical significance boundary (that is, you can be confident there is a change that matters to the business.)</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Control group:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Clicks = "</span><span class="token punctuation">,</span> control_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"   "</span><span class="token punctuation">,</span> \<span class="token string">"Enrollments = "</span><span class="token punctuation">,</span> control_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"   "</span><span class="token punctuation">,</span> \<span class="token string">"Payments = "</span><span class="token punctuation">,</span> control_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Experimental group:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Clicks = "</span><span class="token punctuation">,</span> experiment_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"   "</span><span class="token punctuation">,</span> \<span class="token string">"Enrollments = "</span><span class="token punctuation">,</span> experiment_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"   "</span><span class="token punctuation">,</span> \<span class="token string">"Payments = "</span><span class="token punctuation">,</span> experiment_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Control group:Clicks =  17293     Enrollments =  3785.0     Payments =  2033.0Experimental group:Clicks =  17260     Enrollments =  3423.0     Payments =  1945.0</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Supporting calculation for checking evaluation metrics</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Gross conversion"</span><span class="token punctuation">)</span>p_pool <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">3785.0</span> <span class="token operator">+</span> <span class="token number">3423.0</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">17293</span> <span class="token operator">+</span> <span class="token number">17260</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Pooled probability p_pool = "</span><span class="token punctuation">,</span> p_pool<span class="token punctuation">)</span>SE_pool <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>p_pool <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> p_pool<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">17293</span> <span class="token operator">+</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">17260</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Standard error SE = "</span><span class="token punctuation">,</span> SE_pool<span class="token punctuation">)</span>ME_pool <span class="token operator">=</span> SE_pool <span class="token operator">*</span> <span class="token number">1.96</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Margin of error ME = "</span><span class="token punctuation">,</span> ME_pool<span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token number">3423.0</span> <span class="token operator">/</span> <span class="token number">17260</span> <span class="token operator">-</span> <span class="token number">3785.0</span> <span class="token operator">/</span> <span class="token number">17293</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Difference d"</span><span class="token punctuation">,</span> <span class="token string">"= "</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>d <span class="token operator">-</span> ME_pool<span class="token punctuation">,</span> d <span class="token operator">+</span> ME_pool<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Confidential interval CI = "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">,</span> u<span class="token string">'\u2209'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Statistical significance"</span><span class="token punctuation">,</span> u<span class="token string">'\u2713'</span><span class="token punctuation">,</span> <span class="token string">"  Practical significance "</span><span class="token punctuation">,</span> u<span class="token string">'\u2713'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Net conversion"</span><span class="token punctuation">)</span>p_pool <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2033.0</span> <span class="token operator">+</span> <span class="token number">1945.0</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">17293</span> <span class="token operator">+</span> <span class="token number">17260</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Pooled probability p_pool = "</span><span class="token punctuation">,</span> p_pool<span class="token punctuation">)</span>SE_pool <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>p_pool <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> p_pool<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">17293</span> <span class="token operator">+</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">17260</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Standard error SE = "</span><span class="token punctuation">,</span> SE_pool<span class="token punctuation">)</span>ME_pool <span class="token operator">=</span> SE_pool <span class="token operator">*</span> <span class="token number">1.96</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Margin of error ME = "</span><span class="token punctuation">,</span> ME_pool<span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token number">1945.0</span> <span class="token operator">/</span> <span class="token number">17260</span> <span class="token operator">-</span> <span class="token number">2033.0</span> <span class="token operator">/</span> <span class="token number">17293</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Difference d = "</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>d <span class="token operator">-</span> ME_pool<span class="token punctuation">,</span> d <span class="token operator">+</span> ME_pool<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Confidential interval CI = "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token number">0</span><span class="token punctuation">,</span> u<span class="token string">'\u2208'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token string">";  dmin = -0.0075"</span><span class="token punctuation">,</span> u<span class="token string">'\u2208'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Statistical significance"</span><span class="token punctuation">,</span> u<span class="token string">'\u2718'</span><span class="token punctuation">,</span> <span class="token string">"  Practical significance "</span><span class="token punctuation">,</span> u<span class="token string">'\u2718'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Gross conversionPooled probability p_pool =  0.20860706740369866Standard error SE =  0.004371675385225936Margin of error ME =  0.008568483755042836Difference d =  -0.020554874580361565Confidential interval CI =  (-0.0291233583354044, -0.01198639082531873)(-0.01, 0, 0.01) ∉ (-0.0291233583354044, -0.01198639082531873)Statistical significance ✓   Practical significance  ✓Net conversionPooled probability p_pool =  0.1151274853124186Standard error SE =  0.0034341335129324238Margin of error ME =  0.0067309016853475505Difference d =  -0.0048737226745441675Confidential interval CI =  (-0.011604624359891718, 0.001857179010803383)0 ∈ (-0.011604624359891718, 0.001857179010803383) ;  dmin = -0.0075 ∈ (-0.011604624359891718, 0.001857179010803383)Statistical significance ✘   Practical significance  ✘</code></pre><font color="blue">If you have chosen multiple evaluation metrics, you will need to decide whether to use the Bonferroni correction. When deciding, keep in mind the results you are looking for in order to launch the experiment. Will the fact that you have multiple metrics make those results more likely to occur by chance than the alpha level of 0.05?</font><p>We have measured two metrics in one experiment. Applying the Bonferroni correction means that the a-level for each hypothesis will be 2.5 % instead of 5% and confidential intervals will be significantly wider. It is too conservative for some reasons.</p><p>The use of the Bonferroni correction would really be needed if we test several metrics in one experiment and expect that at least one metrics will demonstrate the statistically significant change. In the set of metrics, this matching only for one indicator can be an absolutely random event, therefore the experiment will have a false positive result. It means we should increase the confidential intervals to avoid this situation and apply the Bonferroni correction.</p><p>But in the case of our experiment, we expect two metrics will have matched our criteria at the same time to proceed with the launch. It’s a very strong condition without any correction. The positive results will be more likely to occur not by chance. Therefore, the Bonferroni correction could be the cause to approve the wrong null hypothesis and we should not use it this time.</p><p>Also, our metrics have a strong relationship between each other. If we know the outcome of one test of a difference between the control and experimental groups on one metrics, it would be easy to predict and to find the outcome of the other tests on the other metrics. It’s absolutely natural to expect their behavior will be similar simultaneously.</p><h3 id="Effect-Size-Tests"><a href="#Effect-Size-Tests" class="headerlink" title="Effect Size Tests"></a>Effect Size Tests</h3><p><br>🔴   I did not use the Bonferroni correction.</p><p><br>🔵   Gross conversion (Difference between the control and experimental groups)<br>Lower bound = -0.0291; Upper bound = -0.0120; Statistical significance = ✅; Practical significance = ✅</p><p><br>🔵   Net conversion (Difference between the control and experimental groups)<br>Lower bound = -0.0116; Upper bound = 0.0019; Statistical significance = ❎; Practical significance = ❎</p><h3 id="Sign-Tests-Double-check"><a href="#Sign-Tests-Double-check" class="headerlink" title="Sign Tests(Double check)"></a>Sign Tests(Double check)</h3><p>To further test each of the evaluation metrics, a binomial sign test can be conducted to evaluate Each day of the experiment to see if there is a positive or negative difference across groups (experimental-control). Each positive difference is counted as a success, and each negative difference as a failure. Then comparing the resulting p-values for each metric to determine significance.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Supporting calculation of successful events for the evaluation metrics</span>Gross_conversion_success <span class="token operator">=</span> experiment_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span> \<span class="token operator">></span>control_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Gross conversion: success ="</span><span class="token punctuation">,</span> Gross_conversion_success<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"  total ="</span><span class="token punctuation">,</span> Gross_conversion_success<span class="token punctuation">.</span>size<span class="token punctuation">)</span>Net_conversion_success <span class="token operator">=</span> experiment_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span> \<span class="token operator">></span>control_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Net conversion: success ="</span><span class="token punctuation">,</span> Net_conversion_success<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"  total ="</span><span class="token punctuation">,</span> Net_conversion_success<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Gross conversion: success = 4   total = 23Net conversion: success = 10   total = 23</code></pre><pre class="line-numbers language-python"><code class="language-python">Image<span class="token punctuation">(</span><span class="token string">'Sign_Gross_conversion_Screenshot.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="1_60_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">Image<span class="token punctuation">(</span><span class="token string">'Sign_Net_conversion_Screenshot.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="1_61_0.png" alt="png"></p><p>🔵   Gross conversion: p-value = 0.0026; statistical significance = ✅🔵   Net conversion: p-value = 0.6776; statistical significance = ❎</p><p>Eventually, the effective size and sign tests show that the site change would statistically significantly reduce the gross conversion, but would not affect the net conversion in a statistically significant way. The effect size test states this in the practical meaning also.</p><p>I did not use the Bonferroni correction for any calculations because it will be too conservative in the case of highly related metrics which should give the expected result simultaneously.</p><h2 id="📖-Recommendation"><a href="#📖-Recommendation" class="headerlink" title="📖   Recommendation"></a>📖   Recommendation</h2><p><br> The recommendation is not to launch the experiment change because the negative results have outweighed the positive ones.</p><p><br>🔴 Positive results of the experiment.</p><ul><li>The difference for the gross conversion is practically significant and negative. This is a good sign: the Udacity team can lower costs by a number of trial signups.</li><li>The difference for the net conversion is not statistically significant. It means the absence of serious financial losses.</li></ul><p><br>🔵 Negative results of the experiment:</p><ul><li>The interval for the difference in the case of the net conversion includes negative numbers. Therefore, the team has a risk to decrease incomes.</li><li>We have not gathered enough data to draw conclusions about the retention and because of this we can not evaluate correctly the difference between the control and experimental groups for a number of students who were disappointed in studying during the free period. Consequently, we do not know enrolled users would be disappointed in the learning process less and make more payments or would not.</li></ul><h2 id="📘-Follow-Up-Experiment"><a href="#📘-Follow-Up-Experiment" class="headerlink" title="📘 Follow-Up Experiment"></a>📘 Follow-Up Experiment</h2><p>Before scheduling the follow-up experiment, I would like to analyze the available data for the evaluation metrics “Retention”.</p><pre class="line-numbers language-python"><code class="language-python">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Retention'</span><span class="token punctuation">,</span> <span class="token operator">**</span>csfont<span class="token punctuation">)</span>line5<span class="token punctuation">,</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>control_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'control'</span><span class="token punctuation">)</span>line6<span class="token punctuation">,</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'experiment'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>handles<span class="token operator">=</span><span class="token punctuation">[</span>line5<span class="token punctuation">,</span> line6<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.legend.Legend at 0x1a16a413b38&gt;</code></pre><p><img src="1_68_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Retention"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Effect Size Tests"</span><span class="token punctuation">)</span>p_pool <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2033.0</span> <span class="token operator">+</span> <span class="token number">1945.0</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">3785.0</span> <span class="token operator">+</span> <span class="token number">3423.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Pooled probability p_pool = "</span><span class="token punctuation">,</span> p_pool<span class="token punctuation">)</span>SE_pool <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>p_pool <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> p_pool<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">3785.0</span> <span class="token operator">+</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">3423.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Standard error SE = "</span><span class="token punctuation">,</span> SE_pool<span class="token punctuation">)</span>ME_pool <span class="token operator">=</span> SE_pool <span class="token operator">*</span> <span class="token number">1.96</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Margin of error ME = "</span><span class="token punctuation">,</span> ME_pool<span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token number">1945.0</span> <span class="token operator">/</span> <span class="token number">3423.0</span> <span class="token operator">-</span> <span class="token number">2033.0</span> <span class="token operator">/</span> <span class="token number">3785.0</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Difference d = "</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>d <span class="token operator">-</span> ME_pool<span class="token punctuation">,</span> d <span class="token operator">+</span> ME_pool<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Confidential interval CI = "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span>  <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> u<span class="token string">'\u2209'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">";  dmin = 0.01"</span><span class="token punctuation">,</span> u<span class="token string">'\u2208'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Statistical significance"</span><span class="token punctuation">,</span> u<span class="token string">'\u2713'</span><span class="token punctuation">,</span> <span class="token string">"  Practical significance "</span><span class="token punctuation">,</span> u<span class="token string">'\u2718'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Sign test"</span><span class="token punctuation">)</span>Retention_success <span class="token operator">=</span> experiment_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span> \<span class="token operator">></span>control_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"success ="</span><span class="token punctuation">,</span> Retention_success<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"  total ="</span><span class="token punctuation">,</span> Retention_success<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>RetentionEffect Size TestsPooled probability p_pool =  0.5518867924528302Standard error SE =  0.011729780091389183Margin of error ME =  0.022990368979122797Difference d =  0.031094804707142765Confidential interval CI =  (0.008104435728019967, 0.05408517368626556)0 ∉ (0.008104435728019967, 0.05408517368626556) ;  dmin = 0.01 ∈ (0.008104435728019967, 0.05408517368626556)Statistical significance ✓   Practical significance  ✘Sign testsuccess = 13   total = 23</code></pre><pre class="line-numbers language-python"><code class="language-python">Image<span class="token punctuation">(</span><span class="token string">'download (2).png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="1_70_0.png" alt="png"></p><h3 id="Retention-Difference-between-the-control-and-experimental-groups"><a href="#Retention-Difference-between-the-control-and-experimental-groups" class="headerlink" title="Retention (Difference between the control and experimental groups)"></a>Retention (Difference between the control and experimental groups)</h3><p><br>🔵   Effect size test<br>Lower bound = 0.0081; Upper bound = 0.0541; Statistical significance = ✅; Practical significance = ❎</p><p><br>🔵   Sign test: p-value = 0.6776; statistical significance = ❎</p><p>the sign test does not agree with the confidence interval for the difference, see if you can figure out why.</p><pre class="line-numbers language-python"><code class="language-python">Gross_conversion_diff <span class="token operator">=</span> experiment_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span> <span class="token operator">-</span> \control_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Gross conversion difference"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Median: "</span><span class="token punctuation">,</span> Gross_conversion_diff<span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Mean: "</span><span class="token punctuation">,</span> Gross_conversion_diff<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Retention_diff <span class="token operator">=</span> experiment_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span> <span class="token operator">-</span> \control_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Retention difference"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Median: "</span><span class="token punctuation">,</span> Retention_diff<span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Mean: "</span><span class="token punctuation">,</span> Retention_diff<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Net_conversion_diff <span class="token operator">=</span> experiment_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span> <span class="token operator">-</span> \control_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Net conversion difference"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Median: "</span><span class="token punctuation">,</span> Net_conversion_diff<span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Mean: "</span><span class="token punctuation">,</span> Net_conversion_diff<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Gross conversion differenceMedian:  -0.02475834310525149Mean:  -0.02078458202926592Retention differenceMedian:  0.023210831721469982Mean:  0.033342507466384695Net conversion differenceMedian:  -0.009027852539948616Mean:  -0.004896856989809377</code></pre><p> Statistical significance of the difference between the control and experimental groups was checked by using the values of the mean (effect size tests) and the median (sign tests). As we can see, these values vary considerably for the retention and it causes that the test results also differ.</p><p>Even a cursory analysis of insufficient data in a certain way confirms our intuitive assumptions about the behavior of this metric. The ratio of payments to enrollments tends to increase in the presence of the experimental warning. However, it is not possible to confirm this with sufficient certainty in the borders of this experiment and it is necessary to redesign the research.</p><font color="blue">If you wanted to reduce the number of frustrated students who cancel early in the course, what experiment would you try? Give a brief description of the change you would make, what your hypothesis would be about the effect of the change, what metrics you would want to measure, and what unit of diversion you would use. Include an explanation of each of your choices.</font><p>I would suggest these possible changes to the proposed experiment.</p><ul><li>Extend the duration of the experiment up to 2 months with constant monitoring of incomes for avoiding financial risks. If the decline in revenues becomes out of the certain limits, the study should be stopped immediately.</li><li>Measure all three evaluation metrics (the gross conversion, the retention, and the net conversion) for the 100% level of traffic because the audience of this site is very different in education, age, nationality, and other characteristics. Any reduction in the percentage of participants can significantly distort the results.</li><li>Replace the visualization message by the video with an explanation of successful learning strategies based on statistics of the particular site or by the input test for the course level recommendations exactly for this user.</li><li>In order to avoid the negative psychological effect or cut the extremely talented part of the audience which is able to pass the course without spending a lot of time to study, all changes should be only informative and recommendatory.</li><li>Recommendations in the videos or leveled tests should have the most practical character that is suitable for this course.</li><li>The length of free trial period is unchanged.</li></ul><p>I think the effect will be more detectable.</p><p>Now we can begin to define the technical details of the experiment. Selecting the unit of diversion, and invariant and evaluation metrics was quite reasonable. It is easy to obtain measurement results for decision making without the high level of costs or risks. Accordingly, I propose to leave them unchanged.</p><p>Unit of diversion: the cookie.Invariant metrics: the number of cookies, the number of clicks, and the click-through-probability.Evaluation metrics: the gross conversion, the retention, and the net conversion.The hypothesizes about the behavior of our metrics are also stayed the same:</p><p>the gross conversion should significantly decrease;the retention should significantly increase;the net conversion should not decrease.I expect the overcoming the negative results of the previous experiment and detecting the tendencies for all evaluation metrics.</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li>The final project: <a href="https://classroom.udacity.com/courses/ud257/lessons/4126079196/concepts/42072285530923" target="_blank" rel="noopener">https://classroom.udacity.com/courses/ud257/lessons/4126079196/concepts/42072285530923</a></li><li>The project instructions: <a href="https://docs.google.com/document/u/1/d/1aCquhIqsUApgsxQ8-SQBAigFDcfWVVohLEXcV6jWbdI/pub?embedded=True" target="_blank" rel="noopener">https://docs.google.com/document/u/1/d/1aCquhIqsUApgsxQ8-SQBAigFDcfWVVohLEXcV6jWbdI/pub?embedded=True</a></li><li>The template format: <a href="https://docs.google.com/document/d/16OX2KDSHI9mSCriyGIATpRGscIW2JmByMd0ITqKYvNg/edit" target="_blank" rel="noopener">https://docs.google.com/document/d/16OX2KDSHI9mSCriyGIATpRGscIW2JmByMd0ITqKYvNg/edit</a></li><li>The final project results: <a href="https://docs.google.com/spreadsheets/d/1Mu5u9GrybDdska-ljPXyBjTpdZIUev_6i7t4LRDfXM8/edit#gid=0" target="_blank" rel="noopener">https://docs.google.com/spreadsheets/d/1Mu5u9GrybDdska-ljPXyBjTpdZIUev_6i7t4LRDfXM8/edit#gid=0</a></li><li>The online calculator “Sample size”: <a href="http://www.evanmiller.org/ab-testing/sample-size.html" target="_blank" rel="noopener">http://www.evanmiller.org/ab-testing/sample-size.html</a></li></ul><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> A_B Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> A_B Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS301_Proj7</title>
      <link href="/2019/11/14/cs301-proj7/"/>
      <url>/2019/11/14/cs301-proj7/</url>
      
        <content type="html"><![CDATA[<h1 id="CS301-Proj7"><a href="#CS301-Proj7" class="headerlink" title="CS301_Proj7"></a>CS301_Proj7</h1><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>Let’s Play Fifa19, Python style!  In this project, you will get morepractice with lists and start using dictionaries.  Start bydownloading <code>test.py</code> and <code>Fifa19.csv</code> (which was adapted from <a href="https://www.kaggle.com/karangadiya/fifa19" target="_blank" rel="noopener">this dataset</a>).  This dataset is too large topreview on GitHub (&gt;17K rows), but you can view the<a href="https://github.com/tylerharter/cs301-projects/raw/master/fall19/p7/Fifa19.csv" target="_blank" rel="noopener">raw version</a>or using a program such as <a href="https://github.com/tylerharter/cs301-projects/blob/master/fall19/p7/excel.md" target="_blank" rel="noopener">Excel</a>.You can also preview an example with 100 rows <a href="https://github.com/tylerharter/cs301-projects/blob/master/fall19/p7/preview.csv" target="_blank" rel="noopener">here</a>.For this project, you’ll create a new <code>main.ipynb</code> and answerquestions in the usual format.</p><h2 id="The-Data"><a href="#The-Data" class="headerlink" title="The Data"></a>The Data</h2><p>Try to familarize yourself with the data before starting theanalysis. We have players belonging to a wide range of nationalitiesand clubs in Fifa19. As you can see the data includes theirweekly wages, in Euros (yes, wages are per week!), net worth of theplayer (in Euros) and the performace rating (score out of 100). Forinstance, the player named “Neymar” is associated with Brazil, issigned up by club “Paris Saint-Germain”, and is paid a weekly wage of ‘€290K’(290000 Euros).</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#project: p7</span><span class="token comment" spellcheck="true">#submitter: naixinzhang</span><span class="token comment" spellcheck="true">#partner: none</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> csv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">fifa_file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'Fifa19.csv'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>file_reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>fifa_file<span class="token punctuation">)</span>player_data <span class="token operator">=</span> list<span class="token punctuation">(</span>file_reader<span class="token punctuation">)</span>fifa_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>header <span class="token operator">=</span> player_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>player_data <span class="token operator">=</span> player_data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">for</span> row <span class="token keyword">in</span> player_data<span class="token punctuation">:</span>    <span class="token keyword">for</span> idx <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        row<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> float<span class="token punctuation">(</span>row<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># q1: what is the name of the oldest player?</span><span class="token keyword">def</span> <span class="token function">find_oldest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Name_index <span class="token operator">=</span> header<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'Name'</span><span class="token punctuation">)</span>    Age_index <span class="token operator">=</span> header<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'Age'</span><span class="token punctuation">)</span>    curr_max_age <span class="token operator">=</span> None    curr_oldest <span class="token operator">=</span> None    <span class="token keyword">for</span> row <span class="token keyword">in</span> player_data<span class="token punctuation">:</span>        <span class="token keyword">if</span> curr_max_age <span class="token operator">==</span> None <span class="token operator">or</span> row<span class="token punctuation">[</span>Age_index<span class="token punctuation">]</span> <span class="token operator">></span> curr_max_age<span class="token punctuation">:</span>            curr_max_age <span class="token operator">=</span> row<span class="token punctuation">[</span>Age_index<span class="token punctuation">]</span>            curr_oldest <span class="token operator">=</span> row<span class="token punctuation">[</span>Name_index<span class="token punctuation">]</span>    <span class="token keyword">return</span> curr_oldestfind_oldest<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;O. Pérez&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">str_to_num</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">:</span>    str <span class="token operator">=</span> str<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'€'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    num <span class="token operator">=</span> None    <span class="token keyword">if</span> str<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'K'</span><span class="token punctuation">:</span>        num <span class="token operator">=</span> float<span class="token punctuation">(</span>str<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'K'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span>    <span class="token keyword">elif</span> str<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'M'</span><span class="token punctuation">:</span>        num <span class="token operator">=</span> float<span class="token punctuation">(</span>str<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'M'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000000</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        num <span class="token operator">=</span> float<span class="token punctuation">(</span>str<span class="token punctuation">)</span>    <span class="token keyword">return</span> num<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># q2: what is the name of the highest-paid player?</span><span class="token keyword">def</span> <span class="token function">find_highest_paid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Name_index <span class="token operator">=</span> header<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'Name'</span><span class="token punctuation">)</span>    Wage_index <span class="token operator">=</span> header<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'Wage'</span><span class="token punctuation">)</span>    curr_max_wage <span class="token operator">=</span> None    curr_richest <span class="token operator">=</span> None    <span class="token keyword">for</span> row <span class="token keyword">in</span> player_data<span class="token punctuation">:</span>        curr_wage <span class="token operator">=</span> str_to_num<span class="token punctuation">(</span>row<span class="token punctuation">[</span>Wage_index<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> curr_max_wage <span class="token operator">==</span> None <span class="token operator">or</span> curr_wage <span class="token operator">></span> curr_max_wage<span class="token punctuation">:</span>            curr_max_wage <span class="token operator">=</span> curr_wage            curr_richest <span class="token operator">=</span> row<span class="token punctuation">[</span>Name_index<span class="token punctuation">]</span>    <span class="token keyword">return</span> curr_richestfind_highest_paid<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;L. Messi&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># q3: what is the name of the highest value player?</span><span class="token keyword">def</span> <span class="token function">find_highest_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Name_index <span class="token operator">=</span> header<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'Name'</span><span class="token punctuation">)</span>    Value_index <span class="token operator">=</span> header<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'Value'</span><span class="token punctuation">)</span>    curr_max_value <span class="token operator">=</span> None    curr_highest_value <span class="token operator">=</span> None    <span class="token keyword">for</span> row <span class="token keyword">in</span> player_data<span class="token punctuation">:</span>        curr_value <span class="token operator">=</span> str_to_num<span class="token punctuation">(</span>row<span class="token punctuation">[</span>Value_index<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> curr_max_value <span class="token operator">==</span> None <span class="token operator">or</span> curr_value <span class="token operator">></span> curr_max_value<span class="token punctuation">:</span>            curr_max_value <span class="token operator">=</span> curr_value            curr_highest_value <span class="token operator">=</span> row<span class="token punctuation">[</span>Name_index<span class="token punctuation">]</span>    <span class="token keyword">return</span> curr_highest_valuefind_highest_value<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;Neymar Jr&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># q4: what club is that player(in above q3) in?</span><span class="token keyword">def</span> <span class="token function">find_club</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span><span class="token punctuation">:</span>    Name_index <span class="token operator">=</span> header<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'Name'</span><span class="token punctuation">)</span>    Club_index <span class="token operator">=</span> header<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'Club'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> player_data<span class="token punctuation">:</span>        <span class="token keyword">if</span> row<span class="token punctuation">[</span>Name_index<span class="token punctuation">]</span> <span class="token operator">==</span> player<span class="token punctuation">:</span>            <span class="token keyword">return</span> row<span class="token punctuation">[</span>Club_index<span class="token punctuation">]</span>    <span class="token keyword">return</span> Nonefind_club<span class="token punctuation">(</span>find_highest_value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;Paris Saint-Germain&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_column</span><span class="token punctuation">(</span>col_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    index <span class="token operator">=</span> header<span class="token punctuation">.</span>index<span class="token punctuation">(</span>col_name<span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> player_data<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># q5: what are the first five nationalities listed in the dataset?</span><span class="token keyword">def</span> <span class="token function">get_first_five_nationalities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> get_column<span class="token punctuation">(</span><span class="token string">'Nationality'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>get_first_five_nationalities<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;Argentina&#39;, &#39;Portugal&#39;, &#39;Brazil&#39;, &#39;Spain&#39;, &#39;Belgium&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># q6: which five names are alphabetically first in the dataset?</span><span class="token keyword">def</span> <span class="token function">find_five_names</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name_list <span class="token operator">=</span> get_column<span class="token punctuation">(</span><span class="token string">'Name'</span><span class="token punctuation">)</span>    name_list<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> name_list<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>find_five_names<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;A. Abang&#39;, &#39;A. Abdellaoui&#39;, &#39;A. Abdennour&#39;, &#39;A. Abdi&#39;, &#39;A. Abdu Jaber&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># q7: what is the average value?</span><span class="token keyword">def</span> <span class="token function">average_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    value_list <span class="token operator">=</span> get_column<span class="token punctuation">(</span><span class="token string">'Value'</span><span class="token punctuation">)</span>    length <span class="token operator">=</span> len<span class="token punctuation">(</span>value_list<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>        value_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> str_to_num<span class="token punctuation">(</span>value_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> sum<span class="token punctuation">(</span>value_list<span class="token punctuation">)</span><span class="token operator">/</span>lengthaverage_value<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2410695.8861976163</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># q8: what is the average age?</span><span class="token keyword">def</span> <span class="token function">average_age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    age_list <span class="token operator">=</span> get_column<span class="token punctuation">(</span><span class="token string">'Age'</span><span class="token punctuation">)</span>    length <span class="token operator">=</span> len<span class="token punctuation">(</span>age_list<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>        age_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> float<span class="token punctuation">(</span>age_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> sum<span class="token punctuation">(</span>age_list<span class="token punctuation">)</span><span class="token operator">/</span>lengthaverage_age<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>25.122205745043114</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">player_count</span><span class="token punctuation">(</span>country<span class="token punctuation">)</span><span class="token punctuation">:</span>    country_index <span class="token operator">=</span> header<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'Nationality'</span><span class="token punctuation">)</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> player_data<span class="token punctuation">:</span>        <span class="token keyword">if</span> row<span class="token punctuation">[</span>country_index<span class="token punctuation">]</span> <span class="token operator">==</span> country<span class="token punctuation">:</span>            count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> count<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># q9: how many players have Portugal as their nationality?</span>player_count<span class="token punctuation">(</span><span class="token string">'Portugal'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>322</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># q10: how many players have Brazil as their nationality?</span>player_count<span class="token punctuation">(</span><span class="token string">'Brazil'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>827</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># q11: which country has the most players participating in FIFA19?</span><span class="token keyword">def</span> <span class="token function">country_number_players</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    country_num <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    country_index <span class="token operator">=</span> header<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'Nationality'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> player_data<span class="token punctuation">:</span>        country <span class="token operator">=</span> row<span class="token punctuation">[</span>country_index<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token operator">not</span> country <span class="token keyword">in</span> country_num<span class="token punctuation">:</span>            country_num<span class="token punctuation">[</span>country<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            country_num<span class="token punctuation">[</span>country<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> country_numcountry_num <span class="token operator">=</span> country_number_players<span class="token punctuation">(</span><span class="token punctuation">)</span>max<span class="token punctuation">(</span>country_num<span class="token punctuation">,</span> key<span class="token operator">=</span>country_num<span class="token punctuation">.</span>get<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;England&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">player_to_dict</span><span class="token punctuation">(</span>player_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    id_index <span class="token operator">=</span> header<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'Id'</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    length <span class="token operator">=</span> len<span class="token punctuation">(</span>header<span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> player_data<span class="token punctuation">:</span>        <span class="token keyword">if</span> int<span class="token punctuation">(</span>row<span class="token punctuation">[</span>id_index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> player_id<span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>                result<span class="token punctuation">[</span>header<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> row<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># q12: what are the stats for the player with Id equal to 20801?</span>player_to_dict<span class="token punctuation">(</span><span class="token number">20801</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>{&#39;Id&#39;: &#39;20801&#39;, &#39;Name&#39;: &#39;Cristiano Ronaldo&#39;, &#39;Age&#39;: 33.0, &#39;Nationality&#39;: &#39;Portugal&#39;, &#39;Overall&#39;: 94.0, &#39;Club&#39;: &#39;Juventus&#39;, &#39;Value&#39;: &#39;€77M&#39;, &#39;Wage&#39;: &#39;€405K&#39;, &#39;Preferred Foot&#39;: &#39;Right&#39;, &#39;Jersey Number&#39;: &#39;7&#39;, &#39;Height&#39;: &quot;6&#39;2&quot;, &#39;Weight&#39;: &#39;183lbs&#39;}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># q13: what are the stats for the player with Id equal to 190871?</span>player_to_dict<span class="token punctuation">(</span><span class="token number">190871</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>{&#39;Id&#39;: &#39;190871&#39;, &#39;Name&#39;: &#39;Neymar Jr&#39;, &#39;Age&#39;: 26.0, &#39;Nationality&#39;: &#39;Brazil&#39;, &#39;Overall&#39;: 92.0, &#39;Club&#39;: &#39;Paris Saint-Germain&#39;, &#39;Value&#39;: &#39;€118.5M&#39;, &#39;Wage&#39;: &#39;€290K&#39;, &#39;Preferred Foot&#39;: &#39;Right&#39;, &#39;Jersey Number&#39;: &#39;10&#39;, &#39;Height&#39;: &quot;5&#39;9&quot;, &#39;Weight&#39;: &#39;150lbs&#39;}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># q14: what are the stats for the player with Id equal to 158023?</span>player_to_dict<span class="token punctuation">(</span><span class="token number">158023</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>{&#39;Id&#39;: &#39;158023&#39;, &#39;Name&#39;: &#39;L. Messi&#39;, &#39;Age&#39;: 31.0, &#39;Nationality&#39;: &#39;Argentina&#39;, &#39;Overall&#39;: 94.0, &#39;Club&#39;: &#39;FC Barcelona&#39;, &#39;Value&#39;: &#39;€110.5M&#39;, &#39;Wage&#39;: &#39;€565K&#39;, &#39;Preferred Foot&#39;: &#39;Left&#39;, &#39;Jersey Number&#39;: &#39;10&#39;, &#39;Height&#39;: &quot;5&#39;7&quot;, &#39;Weight&#39;: &#39;159lbs&#39;}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># q15: what are the stats for the player with Id equal to 192985?</span>player_to_dict<span class="token punctuation">(</span><span class="token number">192985</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>{&#39;Id&#39;: &#39;192985&#39;, &#39;Name&#39;: &#39;K. De Bruyne&#39;, &#39;Age&#39;: 27.0, &#39;Nationality&#39;: &#39;Belgium&#39;, &#39;Overall&#39;: 91.0, &#39;Club&#39;: &#39;Manchester City&#39;, &#39;Value&#39;: &#39;€102M&#39;, &#39;Wage&#39;: &#39;€355K&#39;, &#39;Preferred Foot&#39;: &#39;Right&#39;, &#39;Jersey Number&#39;: &#39;7&#39;, &#39;Height&#39;: &quot;5&#39;11&quot;, &#39;Weight&#39;: &#39;154lbs&#39;}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># q16: how many players are there per nationality?</span>country_number_players<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>{&#39;Argentina&#39;: 937, &#39;Portugal&#39;: 322, &#39;Brazil&#39;: 827, &#39;Spain&#39;: 1072, &#39;Belgium&#39;: 260, &#39;Croatia&#39;: 126, &#39;Uruguay&#39;: 149, &#39;Slovenia&#39;: 55, &#39;Poland&#39;: 350, &#39;Germany&#39;: 1198, &#39;France&#39;: 914, &#39;England&#39;: 1662, &#39;Italy&#39;: 702, &#39;Egypt&#39;: 31, &#39;Colombia&#39;: 618, &#39;Denmark&#39;: 336, &#39;Gabon&#39;: 15, &#39;Wales&#39;: 129, &#39;Senegal&#39;: 130, &#39;Costa Rica&#39;: 30, &#39;Slovakia&#39;: 54, &#39;Netherlands&#39;: 453, &#39;Bosnia Herzegovina&#39;: 61, &#39;Morocco&#39;: 85, &#39;Serbia&#39;: 126, &#39;Algeria&#39;: 60, &#39;Austria&#39;: 298, &#39;Greece&#39;: 102, &#39;Chile&#39;: 391, &#39;Sweden&#39;: 397, &#39;Korea Republic&#39;: 335, &#39;Finland&#39;: 67, &#39;Guinea&#39;: 31, &#39;Montenegro&#39;: 23, &#39;Armenia&#39;: 10, &#39;Switzerland&#39;: 220, &#39;Norway&#39;: 341, &#39;Czech Republic&#39;: 100, &#39;Scotland&#39;: 286, &#39;Ghana&#39;: 114, &#39;Central African Rep.&#39;: 3, &#39;DR Congo&#39;: 52, &#39;Ivory Coast&#39;: 100, &#39;Russia&#39;: 79, &#39;Ukraine&#39;: 73, &#39;Iceland&#39;: 47, &#39;Mexico&#39;: 366, &#39;Jamaica&#39;: 32, &#39;Albania&#39;: 40, &#39;Venezuela&#39;: 67, &#39;Japan&#39;: 478, &#39;Turkey&#39;: 303, &#39;Ecuador&#39;: 43, &#39;Paraguay&#39;: 85, &#39;Mali&#39;: 43, &#39;Nigeria&#39;: 121, &#39;Cameroon&#39;: 90, &#39;Dominican Republic&#39;: 2, &#39;Israel&#39;: 14, &#39;Kenya&#39;: 10, &#39;Hungary&#39;: 38, &#39;Republic of Ireland&#39;: 368, &#39;Romania&#39;: 54, &#39;United States&#39;: 353, &#39;Cape Verde&#39;: 19, &#39;Australia&#39;: 236, &#39;Peru&#39;: 37, &#39;Togo&#39;: 12, &#39;Syria&#39;: 9, &#39;Zimbabwe&#39;: 13, &#39;Angola&#39;: 15, &#39;Burkina Faso&#39;: 16, &#39;Iran&#39;: 17, &#39;Estonia&#39;: 13, &#39;Tunisia&#39;: 32, &#39;Equatorial Guinea&#39;: 5, &#39;New Zealand&#39;: 44, &#39;FYR Macedonia&#39;: 20, &#39;United Arab Emirates&#39;: 1, &#39;China PR&#39;: 392, &#39;Guinea Bissau&#39;: 15, &#39;Bulgaria&#39;: 32, &#39;Kosovo&#39;: 33, &#39;South Africa&#39;: 71, &#39;Madagascar&#39;: 12, &#39;Georgia&#39;: 26, &#39;Tanzania&#39;: 3, &#39;Gambia&#39;: 15, &#39;Cuba&#39;: 4, &#39;Belarus&#39;: 4, &#39;Uzbekistan&#39;: 2, &#39;Benin&#39;: 15, &#39;Congo&#39;: 25, &#39;Mozambique&#39;: 4, &#39;Honduras&#39;: 16, &#39;Canada&#39;: 64, &#39;Northern Ireland&#39;: 80, &#39;Cyprus&#39;: 8, &#39;Saudi Arabia&#39;: 340, &#39;Curacao&#39;: 14, &#39;Moldova&#39;: 5, &#39;Bolivia&#39;: 30, &#39;Trinidad &amp; Tobago&#39;: 4, &#39;Sierra Leone&#39;: 6, &#39;Zambia&#39;: 9, &#39;Chad&#39;: 2, &#39;Philippines&#39;: 2, &#39;Haiti&#39;: 10, &#39;Comoros&#39;: 6, &#39;Libya&#39;: 4, &#39;Panama&#39;: 15, &#39;São Tomé &amp; Príncipe&#39;: 1, &#39;Eritrea&#39;: 2, &#39;Oman&#39;: 1, &#39;Iraq&#39;: 7, &#39;Burundi&#39;: 3, &#39;Fiji&#39;: 1, &#39;New Caledonia&#39;: 1, &#39;Lithuania&#39;: 8, &#39;Luxembourg&#39;: 8, &#39;Korea DPR&#39;: 4, &#39;Liechtenstein&#39;: 3, &#39;St Kitts Nevis&#39;: 3, &#39;Latvia&#39;: 6, &#39;Suriname&#39;: 4, &#39;Uganda&#39;: 6, &#39;El Salvador&#39;: 5, &#39;Bermuda&#39;: 2, &#39;Kuwait&#39;: 1, &#39;Antigua &amp; Barbuda&#39;: 4, &#39;Thailand&#39;: 5, &#39;Mauritius&#39;: 1, &#39;Guatemala&#39;: 3, &#39;Liberia&#39;: 1, &#39;Kazakhstan&#39;: 4, &#39;Niger&#39;: 3, &#39;Mauritania&#39;: 4, &#39;Montserrat&#39;: 4, &#39;Namibia&#39;: 3, &#39;Azerbaijan&#39;: 5, &#39;Guam&#39;: 1, &#39;Faroe Islands&#39;: 6, &#39;India&#39;: 30, &#39;Nicaragua&#39;: 2, &#39;Barbados&#39;: 3, &#39;Lebanon&#39;: 1, &#39;Palestine&#39;: 1, &#39;Guyana&#39;: 3, &#39;Sudan&#39;: 3, &#39;St Lucia&#39;: 1, &#39;Ethiopia&#39;: 1, &#39;Puerto Rico&#39;: 1, &#39;Grenada&#39;: 1, &#39;Jordan&#39;: 1, &#39;Rwanda&#39;: 1, &#39;Qatar&#39;: 1, &#39;Afghanistan&#39;: 4, &#39;Hong Kong&#39;: 2, &#39;Andorra&#39;: 1, &#39;Malta&#39;: 1, &#39;Belize&#39;: 1, &#39;South Sudan&#39;: 1, &#39;Indonesia&#39;: 1, &#39;Botswana&#39;: 1}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># q17: how many players for each Jersey Number?</span><span class="token keyword">def</span> <span class="token function">jersey_number_players</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    jersey_num <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    jersey_index <span class="token operator">=</span> header<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'Jersey Number'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> player_data<span class="token punctuation">:</span>        jersey <span class="token operator">=</span> row<span class="token punctuation">[</span>jersey_index<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token operator">not</span> jersey <span class="token keyword">in</span> jersey_num<span class="token punctuation">:</span>            jersey_num<span class="token punctuation">[</span>jersey<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            jersey_num<span class="token punctuation">[</span>jersey<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> jersey_numjersey_number_players<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>{&#39;10&#39;: 593, &#39;7&#39;: 604, &#39;1&#39;: 566, &#39;9&#39;: 577, &#39;15&#39;: 501, &#39;8&#39;: 612, &#39;21&#39;: 536, &#39;13&#39;: 419, &#39;22&#39;: 531, &#39;5&#39;: 579, &#39;3&#39;: 547, &#39;14&#39;: 542, &#39;12&#39;: 390, &#39;11&#39;: 590, &#39;2&#39;: 519, &#39;23&#39;: 546, &#39;26&#39;: 390, &#39;6&#39;: 586, &#39;17&#39;: 554, &#39;18&#39;: 545, &#39;4&#39;: 573, &#39;19&#39;: 545, &#39;31&#39;: 280, &#39;25&#39;: 409, &#39;37&#39;: 135, &#39;30&#39;: 371, &#39;44&#39;: 74, &#39;29&#39;: 358, &#39;24&#39;: 425, &#39;20&#39;: 568, &#39;16&#39;: 517, &#39;33&#39;: 287, &#39;28&#39;: 357, &#39;27&#39;: 423, &#39;77&#39;: 77, &#39;47&#39;: 28, &#39;38&#39;: 102, &#39;40&#39;: 114, &#39;92&#39;: 10, &#39;36&#39;: 145, &#39;87&#39;: 14, &#39;34&#39;: 207, &#39;32&#39;: 250, &#39;83&#39;: 6, &#39;70&#39;: 29, &#39;35&#39;: 183, &#39;89&#39;: 15, &#39;56&#39;: 17, &#39;99&#39;: 70, &#39;57&#39;: 8, &#39;91&#39;: 21, &#39;86&#39;: 4, &#39;45&#39;: 47, &#39;63&#39;: 4, &#39;39&#39;: 107, &#39;43&#39;: 41, &#39;42&#39;: 54, &#39;93&#39;: 14, &#39;72&#39;: 7, &#39;71&#39;: 10, &#39;88&#39;: 44, &#39;55&#39;: 35, &#39;80&#39;: 16, &#39;50&#39;: 42, &#39;66&#39;: 27, &#39;60&#39;: 10, &#39;73&#39;: 6, &#39;67&#39;: 5, &#39;74&#39;: 2, &#39;69&#39;: 6, &#39;76&#39;: 4, &#39;41&#39;: 53, &#39;90&#39;: 26, &#39;46&#39;: 29, &#39;75&#39;: 6, &#39;79&#39;: 2, &#39;62&#39;: 6, &#39;81&#39;: 5, &#39;61&#39;: 7, &#39;49&#39;: 19, &#39;95&#39;: 12, &#39;53&#39;: 11, &#39;96&#39;: 13, &#39;97&#39;: 16, &#39;68&#39;: 4, &#39;98&#39;: 21, &#39;94&#39;: 11, &#39;58&#39;: 5, &#39;78&#39;: 5, &#39;&#39;: 60, &#39;48&#39;: 17, &#39;52&#39;: 10, &#39;54&#39;: 11, &#39;84&#39;: 4, &#39;82&#39;: 5, &#39;65&#39;: 4, &#39;64&#39;: 2, &#39;51&#39;: 7, &#39;59&#39;: 5, &#39;85&#39;: 1}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># q18: what is the average player score (represented by the overall column) per Jersey Number?</span><span class="token keyword">def</span> <span class="token function">jersey_total_score</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    jersey_tot_score <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    jersey_index <span class="token operator">=</span> header<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'Jersey Number'</span><span class="token punctuation">)</span>    score_index <span class="token operator">=</span> header<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'Overall'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> player_data<span class="token punctuation">:</span>        jersey <span class="token operator">=</span> row<span class="token punctuation">[</span>jersey_index<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token operator">not</span> jersey <span class="token keyword">in</span> jersey_tot_score<span class="token punctuation">:</span>            jersey_tot_score<span class="token punctuation">[</span>jersey<span class="token punctuation">]</span> <span class="token operator">=</span> row<span class="token punctuation">[</span>score_index<span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            jersey_tot_score<span class="token punctuation">[</span>jersey<span class="token punctuation">]</span> <span class="token operator">+=</span> row<span class="token punctuation">[</span>score_index<span class="token punctuation">]</span>    <span class="token keyword">return</span> jersey_tot_score<span class="token keyword">def</span> <span class="token function">jersey_average_score</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    jersey_num <span class="token operator">=</span> jersey_number_players<span class="token punctuation">(</span><span class="token punctuation">)</span>    jersey_tot_score <span class="token operator">=</span> jersey_total_score<span class="token punctuation">(</span><span class="token punctuation">)</span>    jersey_ave_score <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> jersey_num<span class="token punctuation">:</span>        jersey_ave_score<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> jersey_tot_score<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">/</span>jersey_num<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">return</span> jersey_ave_scorejersey_average_score<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>{&#39;10&#39;: 70.38617200674537, &#39;7&#39;: 68.87251655629139, &#39;1&#39;: 68.35689045936395, &#39;9&#39;: 69.28769497400347, &#39;15&#39;: 66.53493013972056, &#39;8&#39;: 68.83006535947712, &#39;21&#39;: 66.2723880597015, &#39;13&#39;: 66.90214797136038, &#39;22&#39;: 66.31638418079096, &#39;5&#39;: 68.49740932642487, &#39;3&#39;: 67.38939670932358, &#39;14&#39;: 66.9870848708487, &#39;12&#39;: 65.43076923076923, &#39;11&#39;: 68.3406779661017, &#39;2&#39;: 67.58766859344894, &#39;23&#39;: 66.46886446886447, &#39;26&#39;: 64.04358974358975, &#39;6&#39;: 68.19283276450511, &#39;17&#39;: 66.9115523465704, &#39;18&#39;: 66.45688073394496, &#39;4&#39;: 67.76614310645724, &#39;19&#39;: 66.63669724770642, &#39;31&#39;: 63.06785714285714, &#39;25&#39;: 64.59413202933985, &#39;37&#39;: 61.785185185185185, &#39;30&#39;: 63.1644204851752, &#39;44&#39;: 64.70270270270271, &#39;29&#39;: 63.92178770949721, &#39;24&#39;: 64.65411764705883, &#39;20&#39;: 66.7306338028169, &#39;16&#39;: 66.08510638297872, &#39;33&#39;: 63.29965156794425, &#39;28&#39;: 63.943977591036415, &#39;27&#39;: 64.36170212765957, &#39;77&#39;: 66.1038961038961, &#39;47&#39;: 63.57142857142857, &#39;38&#39;: 61.77450980392157, &#39;40&#39;: 61.51754385964912, &#39;92&#39;: 68.9, &#39;36&#39;: 60.5448275862069, &#39;87&#39;: 68.35714285714286, &#39;34&#39;: 62.072463768115945, &#39;32&#39;: 62.152, &#39;83&#39;: 67.66666666666667, &#39;70&#39;: 64.72413793103448, &#39;35&#39;: 60.92896174863388, &#39;89&#39;: 65.4, &#39;56&#39;: 65.11764705882354, &#39;99&#39;: 64.35714285714286, &#39;57&#39;: 68.125, &#39;91&#39;: 66.76190476190476, &#39;86&#39;: 64.0, &#39;45&#39;: 62.0, &#39;63&#39;: 69.0, &#39;39&#39;: 62.52336448598131, &#39;43&#39;: 60.048780487804876, &#39;42&#39;: 62.5, &#39;93&#39;: 67.28571428571429, &#39;72&#39;: 65.0, &#39;71&#39;: 64.5, &#39;88&#39;: 66.5, &#39;55&#39;: 63.0, &#39;80&#39;: 63.4375, &#39;50&#39;: 62.30952380952381, &#39;66&#39;: 63.77777777777778, &#39;60&#39;: 64.1, &#39;73&#39;: 64.33333333333333, &#39;67&#39;: 64.6, &#39;74&#39;: 67.5, &#39;69&#39;: 68.66666666666667, &#39;76&#39;: 68.0, &#39;41&#39;: 61.37735849056604, &#39;90&#39;: 65.61538461538461, &#39;46&#39;: 60.206896551724135, &#39;75&#39;: 66.5, &#39;79&#39;: 71.5, &#39;62&#39;: 62.0, &#39;81&#39;: 65.0, &#39;61&#39;: 61.57142857142857, &#39;49&#39;: 59.68421052631579, &#39;95&#39;: 65.25, &#39;53&#39;: 62.45454545454545, &#39;96&#39;: 64.53846153846153, &#39;97&#39;: 62.4375, &#39;68&#39;: 67.0, &#39;98&#39;: 60.904761904761905, &#39;94&#39;: 66.72727272727273, &#39;58&#39;: 62.8, &#39;78&#39;: 65.6, &#39;&#39;: 61.63333333333333, &#39;48&#39;: 61.470588235294116, &#39;52&#39;: 61.8, &#39;54&#39;: 61.0, &#39;84&#39;: 63.75, &#39;82&#39;: 59.8, &#39;65&#39;: 58.5, &#39;64&#39;: 62.5, &#39;51&#39;: 58.0, &#39;59&#39;: 57.2, &#39;85&#39;: 57.0}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q19: which Jersey Number has highest average overall?</span>jersey_ave_score <span class="token operator">=</span> jersey_average_score<span class="token punctuation">(</span><span class="token punctuation">)</span>max<span class="token punctuation">(</span>jersey_ave_score<span class="token punctuation">,</span> key<span class="token operator">=</span>jersey_ave_score<span class="token punctuation">.</span>get<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>&#39;79&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q20: which club has highest average wage?</span><span class="token keyword">def</span> <span class="token function">club_number_players</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    club_num <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    club_index <span class="token operator">=</span> header<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'Club'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> player_data<span class="token punctuation">:</span>        club <span class="token operator">=</span> row<span class="token punctuation">[</span>club_index<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token operator">not</span> club <span class="token keyword">in</span> club_num<span class="token punctuation">:</span>            club_num<span class="token punctuation">[</span>club<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            club_num<span class="token punctuation">[</span>club<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> club_num<span class="token keyword">def</span> <span class="token function">club_total_wage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    club_tot_wage <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    club_index <span class="token operator">=</span> header<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'Club'</span><span class="token punctuation">)</span>    wage_index <span class="token operator">=</span> header<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'Wage'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> player_data<span class="token punctuation">:</span>        club <span class="token operator">=</span> row<span class="token punctuation">[</span>club_index<span class="token punctuation">]</span>        wage <span class="token operator">=</span> str_to_num<span class="token punctuation">(</span>row<span class="token punctuation">[</span>wage_index<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> club <span class="token keyword">in</span> club_tot_wage<span class="token punctuation">:</span>            club_tot_wage<span class="token punctuation">[</span>club<span class="token punctuation">]</span> <span class="token operator">=</span> wage        <span class="token keyword">else</span><span class="token punctuation">:</span>            club_tot_wage<span class="token punctuation">[</span>club<span class="token punctuation">]</span> <span class="token operator">+=</span> wage    <span class="token keyword">return</span> club_tot_wage<span class="token keyword">def</span> <span class="token function">club_average_wage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    club_num <span class="token operator">=</span> club_number_players<span class="token punctuation">(</span><span class="token punctuation">)</span>    club_tot_wage <span class="token operator">=</span> club_total_wage<span class="token punctuation">(</span><span class="token punctuation">)</span>    club_ave_wage <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> club_num<span class="token punctuation">:</span>        club_ave_wage<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> club_tot_wage<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">/</span>club_num<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">return</span> club_ave_wageclub_ave_wage <span class="token operator">=</span> club_average_wage<span class="token punctuation">(</span><span class="token punctuation">)</span>max<span class="token punctuation">(</span>club_ave_wage<span class="token punctuation">,</span> key<span class="token operator">=</span>club_ave_wage<span class="token punctuation">.</span>get<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;Real Madrid&#39;</code></pre>]]></content>
      
      
      <categories>
          
          <category> CS301Proj </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS301 Data Programming I </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS301_Proj6</title>
      <link href="/2019/10/31/cs301-proj6/"/>
      <url>/2019/10/31/cs301-proj6/</url>
      
        <content type="html"><![CDATA[<h1 id="CS301-Proj6"><a href="#CS301-Proj6" class="headerlink" title="CS301_Proj6"></a>CS301_Proj6</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This project is a wine connoisseurs’ delight!  Data Science can help us understand people’s drinking habits around the world.  For example, take a look at Mona Chalabi’s analysis here: <a href="https://fivethirtyeight.com/features/dear-mona-followup-where-do-people-drink-the-most-beer-wine-and-spirits/" target="_blank" rel="noopener">Where Do People Drink The Most Beer, Wine And Spirits?</a></p><p>For our part, we will be exploring a modified subset (the first 1501 rows) of the Kaggle<a href="https://www.kaggle.com/zynicide/wine-reviews" target="_blank" rel="noopener">wine reviews dataset</a>;you will be using various string manipulation functions that come withPython as well as rolling some of your own to solve the problemsposed. Happy coding, and remember the <a href="https://xkcd.com/323/" target="_blank" rel="noopener">BallmerPeak</a> is nothing but a myth!</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># project: p6</span><span class="token comment" spellcheck="true"># submitter: naixinzhang</span><span class="token comment" spellcheck="true"># partner: none</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> csv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># copied from https://automatetheboringstuff.com/chapter14/</span><span class="token keyword">def</span> <span class="token function">process_csv</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    exampleFile <span class="token operator">=</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    exampleReader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>exampleFile<span class="token punctuation">)</span>    exampleData <span class="token operator">=</span> list<span class="token punctuation">(</span>exampleReader<span class="token punctuation">)</span>    exampleFile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> exampleData<span class="token comment" spellcheck="true"># use process_csv to pull out the header and data rows</span>csv_rows <span class="token operator">=</span> process_csv<span class="token punctuation">(</span><span class="token string">"wine.csv"</span><span class="token punctuation">)</span>csv_header <span class="token operator">=</span> csv_rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>csv_data <span class="token operator">=</span> csv_rows<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cell</span><span class="token punctuation">(</span>row_idx<span class="token punctuation">,</span> col_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    col_idx <span class="token operator">=</span> csv_header<span class="token punctuation">.</span>index<span class="token punctuation">(</span>col_name<span class="token punctuation">)</span>    val <span class="token operator">=</span> csv_data<span class="token punctuation">[</span>row_idx<span class="token punctuation">]</span><span class="token punctuation">[</span>col_idx<span class="token punctuation">]</span>    <span class="token keyword">if</span> val <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> None    <span class="token keyword">elif</span> col_name <span class="token operator">==</span> <span class="token string">'points'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> int<span class="token punctuation">(</span>val<span class="token punctuation">)</span>    <span class="token keyword">elif</span> col_name <span class="token operator">==</span> <span class="token string">'price'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> float<span class="token punctuation">(</span>val<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> val<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q1 which country names are listed in the country column of the dataset?</span><span class="token keyword">def</span> <span class="token function">country_names</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>csv_rows<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        val <span class="token operator">=</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'country'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> val <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            a<span class="token punctuation">.</span>add<span class="token punctuation">(</span>val<span class="token punctuation">)</span>    <span class="token keyword">return</span> list<span class="token punctuation">(</span>a<span class="token punctuation">)</span>country_names<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;South Africa&#39;, &#39;Chile&#39;, &#39;France&#39;, &#39;Slovenia&#39;, &#39;Morocco&#39;, &#39;New Zealand&#39;, &#39;Germany&#39;, &#39;Argentina&#39;, &#39;Bulgaria&#39;, &#39;Canada&#39;, &#39;Austria&#39;, &#39;Romania&#39;, &#39;Spain&#39;, &#39;Israel&#39;, &#39;India&#39;, &#39;Croatia&#39;, &#39;US&#39;, &#39;Moldova&#39;, &#39;Greece&#39;, &#39;Australia&#39;, &#39;Italy&#39;, &#39;Hungary&#39;, &#39;Portugal&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q2 what is the average points (rating) of wine?</span><span class="token keyword">def</span> <span class="token function">ave_points</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sum <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>csv_rows<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        val <span class="token operator">=</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">'points'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> val <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            sum <span class="token operator">=</span> sum<span class="token operator">+</span>val    <span class="token keyword">return</span> sum <span class="token operator">/</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>csv_rows<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>ave_points<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>89.65489673550967</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q3 List all wineries which produce wine in South Africa?</span><span class="token keyword">def</span> <span class="token function">wineries_south_africa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    wineries_south <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>csv_rows<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'country'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'South Africa'</span> <span class="token operator">and</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'winery'</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            wineries_south<span class="token punctuation">.</span>add<span class="token punctuation">(</span>cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'winery'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> list<span class="token punctuation">(</span>wineries_south<span class="token punctuation">)</span>wineries_south_africa<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;Fat Barrel&#39;, &#39;KWV&#39;, &#39;Vergelegen&#39;, &#39;Bouchard Finlayson&#39;, &#39;Graham Beck&#39;, &#39;Noble Hill&#39;, &#39;Long Neck&#39;, &#39;Waterkloof&#39;, &#39;Essay&#39;, &#39;Robertson Winery&#39;, &#39;Neil Ellis&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q4 which wine varieties contain the phrase "caramelized" in the description?</span><span class="token keyword">def</span> <span class="token function">q4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    variety_cara <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>csv_rows<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'caramelized'</span> <span class="token keyword">in</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'description'</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token string">'Caramelized'</span> <span class="token keyword">in</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'description'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            variety_cara<span class="token punctuation">.</span>add<span class="token punctuation">(</span>cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'variety'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> list<span class="token punctuation">(</span>variety_cara<span class="token punctuation">)</span>q4<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;Chardonnay&#39;, &#39;White Blend&#39;, &#39;Rhône-style White Blend&#39;, &#39;Syrah&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q5 which wine varieties contain the phrase "lemon-lime soda" in the description?</span><span class="token keyword">def</span> <span class="token function">q5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    variety_le <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>csv_rows<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'lemon-lime soda'</span> <span class="token keyword">in</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'description'</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token string">'Lemon-lime soda'</span> <span class="token keyword">in</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'description'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            variety_le<span class="token punctuation">.</span>add<span class="token punctuation">(</span>cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'variety'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> list<span class="token punctuation">(</span>variety_le<span class="token punctuation">)</span>q5<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;Chardonnay&#39;, &#39;Pinot Grigio&#39;, &#39;Sparkling Blend&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q6 which wine varieties contain the phrase "cherry-berry" in the description?</span><span class="token keyword">def</span> <span class="token function">q6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    variety_ch <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>csv_rows<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'cherry-berry'</span> <span class="token keyword">in</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'description'</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token string">'Cherry-berry'</span> <span class="token keyword">in</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'description'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            variety_ch<span class="token punctuation">.</span>add<span class="token punctuation">(</span>cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'variety'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> list<span class="token punctuation">(</span>variety_ch<span class="token punctuation">)</span>q6<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;Rosé&#39;, &#39;Nebbiolo&#39;, &#39;Cabernet Sauvignon&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">areAnagram</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># Remove spaces of str1 and str2</span>    str1 <span class="token operator">=</span> str1<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>    str2 <span class="token operator">=</span> str2<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Converts all uppercase characters to lowercase</span>    str1 <span class="token operator">=</span> str1<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    str2 <span class="token operator">=</span> str2<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Get lengths of both strings  </span>    n1 <span class="token operator">=</span> len<span class="token punctuation">(</span>str1<span class="token punctuation">)</span>      n2 <span class="token operator">=</span> len<span class="token punctuation">(</span>str2<span class="token punctuation">)</span>      str1 <span class="token operator">=</span>list<span class="token punctuation">(</span>str1<span class="token punctuation">)</span>    str2 <span class="token operator">=</span> list<span class="token punctuation">(</span>str2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># If lenght of both strings is not same, then  </span>    <span class="token comment" spellcheck="true"># they cannot be anagram  </span>    <span class="token keyword">if</span> n1 <span class="token operator">!=</span> n2<span class="token punctuation">:</span>          <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># Sort both strings  </span>    str1 <span class="token operator">=</span> sorted<span class="token punctuation">(</span>str1<span class="token punctuation">)</span>     str2 <span class="token operator">=</span> sorted<span class="token punctuation">(</span>str2<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># Compare sorted strings  </span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n1<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">if</span> str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>              <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">return</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">:</span>    variety_anagrams <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>csv_rows<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> areAnagram<span class="token punctuation">(</span>cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'variety'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str3<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">:</span>            variety_anagrams<span class="token punctuation">.</span>add<span class="token punctuation">(</span>cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'variety'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> variety_anagrams<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q7 which wine varieties are anagrams of the phrase "antibus governance"?</span><span class="token keyword">def</span> <span class="token function">q7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> list<span class="token punctuation">(</span>check<span class="token punctuation">(</span><span class="token string">'antibus governance'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>q7<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;Cabernet Sauvignon&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q8 which wine varieties are anagrams of the phrase "Banned Petrol Mill".</span><span class="token keyword">def</span> <span class="token function">q8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> list<span class="token punctuation">(</span>check<span class="token punctuation">(</span><span class="token string">'Banned Petrol Mill'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>q8<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;Tempranillo Blend&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">find_highest</span><span class="token punctuation">(</span>col<span class="token punctuation">,</span> target<span class="token punctuation">,</span> place<span class="token punctuation">)</span><span class="token punctuation">:</span>    h_curr <span class="token operator">=</span> <span class="token number">0</span>    result <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>csv_rows<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> place <span class="token operator">==</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">'country'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span> col<span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                <span class="token keyword">if</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span>col<span class="token punctuation">)</span> <span class="token operator">==</span> h_curr<span class="token punctuation">:</span>                    result<span class="token punctuation">.</span>add<span class="token punctuation">(</span>cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span> col<span class="token punctuation">)</span> <span class="token operator">></span> h_curr<span class="token punctuation">:</span>                    h_curr <span class="token operator">=</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span> col<span class="token punctuation">)</span>                    result <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>                    result<span class="token punctuation">.</span>add<span class="token punctuation">(</span>cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q9 which winery produces the highest-priced wine in "US"?</span><span class="token keyword">def</span> <span class="token function">q9</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> list<span class="token punctuation">(</span>find_highest<span class="token punctuation">(</span><span class="token string">'price'</span><span class="token punctuation">,</span> <span class="token string">'winery'</span><span class="token punctuation">,</span> <span class="token string">'US'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>q9<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;Hall&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q10 what is the highest-rated wine variety made in "France"?</span><span class="token keyword">def</span> <span class="token function">q10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> list<span class="token punctuation">(</span>find_highest<span class="token punctuation">(</span><span class="token string">'points'</span><span class="token punctuation">,</span> <span class="token string">'variety'</span><span class="token punctuation">,</span><span class="token string">'France'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>q10<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;Tannat&#39;, &#39;Malbec&#39;, &#39;Provence red blend&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_ratio</span><span class="token punctuation">(</span>winery<span class="token punctuation">)</span><span class="token punctuation">:</span>    sum <span class="token operator">=</span> <span class="token number">0</span>    j <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>csv_rows<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'winery'</span><span class="token punctuation">)</span> <span class="token operator">==</span> winery <span class="token operator">and</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'points'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">""</span> <span class="token operator">and</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'price'</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">""</span><span class="token punctuation">:</span>            sum <span class="token operator">=</span> sum <span class="token operator">+</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'points'</span><span class="token punctuation">)</span> <span class="token operator">/</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'price'</span><span class="token punctuation">)</span>            j <span class="token operator">=</span> j<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">return</span> sum<span class="token operator">/</span>j<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q11 what is the average points-per-dollar (PPD) ratio of the "Ponzi" winery?</span><span class="token keyword">def</span> <span class="token function">q11</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> get_ratio<span class="token punctuation">(</span><span class="token string">'Ponzi'</span><span class="token punctuation">)</span>q11<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1.288074888074888</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q12 what is the average PPD of the "Blue Farm" winery?</span><span class="token keyword">def</span> <span class="token function">q12</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> get_ratio<span class="token punctuation">(</span><span class="token string">'Blue Farm'</span><span class="token punctuation">)</span>q12<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1.3628968253968254</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">find_lowest_average_PPD</span><span class="token punctuation">(</span>place<span class="token punctuation">)</span><span class="token punctuation">:</span>    lowest_curr <span class="token operator">=</span> float<span class="token punctuation">(</span><span class="token string">"inf"</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>csv_rows<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> place <span class="token operator">==</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">'country'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">'points'</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token operator">not</span> None <span class="token operator">and</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                ratio_curr <span class="token operator">=</span> get_ratio<span class="token punctuation">(</span>cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'winery'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> ratio_curr <span class="token operator">==</span> lowest_curr<span class="token punctuation">:</span>                    result<span class="token punctuation">.</span>add<span class="token punctuation">(</span>cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">'winery'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> ratio_curr <span class="token operator">&lt;</span> lowest_curr<span class="token punctuation">:</span>                    lowest_curr <span class="token operator">=</span> ratio_curr                    result <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>                    result<span class="token punctuation">.</span>add<span class="token punctuation">(</span>cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">'winery'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q13 which winery in New Zealand has the lowest average PPD?</span><span class="token keyword">def</span> <span class="token function">q13</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> list<span class="token punctuation">(</span>find_lowest_average_PPD<span class="token punctuation">(</span><span class="token string">'New Zealand'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>q13<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;Kumeu River&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q14: which winery in Australia has the lowest average PPD?</span><span class="token keyword">def</span> <span class="token function">q14</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> list<span class="token punctuation">(</span>find_lowest_average_PPD<span class="token punctuation">(</span><span class="token string">'Australia'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>q14<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;Dalrymple&#39;, &quot;D&#39;Arenberg&quot;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q15 which winery in Canada has the lowest average PPD?</span><span class="token keyword">def</span> <span class="token function">q15</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> list<span class="token punctuation">(</span>find_lowest_average_PPD<span class="token punctuation">(</span><span class="token string">'Canada'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>q15<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;Burrowing Owl&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_varieties</span><span class="token punctuation">(</span>winery<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>csv_rows<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'winery'</span><span class="token punctuation">)</span> <span class="token operator">==</span> winery<span class="token punctuation">:</span>            res<span class="token punctuation">.</span>add<span class="token punctuation">(</span>cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">'variety'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> list<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q16 which wine varieties are produced by the "Global Wines" winery?</span><span class="token keyword">def</span> <span class="token function">q16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> list<span class="token punctuation">(</span>get_varieties<span class="token punctuation">(</span><span class="token string">'Global Wines'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>q16<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;Portuguese Sparkling&#39;, &#39;Portuguese Red&#39;, &#39;Touriga Nacional&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q17 which wine varieties are produced by the "Quinta Nova de Nossa Senhora do Carmo" winery?</span><span class="token keyword">def</span> <span class="token function">q17</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> list<span class="token punctuation">(</span>get_varieties<span class="token punctuation">(</span><span class="token string">'Quinta Nova de Nossa Senhora do Carmo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>q17<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;Portuguese White&#39;, &#39;Portuguese Rosé&#39;, &#39;Portuguese Red&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q18 what percentage of the varieties produced by "Global Wines" are also produced by "Quinta Nova de Nossa Senhora do Carmo"?</span><span class="token keyword">def</span> <span class="token function">q18</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    temp_1 <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>    temp_2 <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> get_varieties<span class="token punctuation">(</span><span class="token string">'Global Wines'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        temp_1<span class="token punctuation">.</span>add<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> get_varieties<span class="token punctuation">(</span><span class="token string">'Quinta Nova de Nossa Senhora do Carmo'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        temp_2<span class="token punctuation">.</span>add<span class="token punctuation">(</span>j<span class="token punctuation">)</span>    <span class="token keyword">return</span> len<span class="token punctuation">(</span>temp_1 <span class="token operator">&amp;</span> temp_2<span class="token punctuation">)</span><span class="token operator">/</span>len<span class="token punctuation">(</span>temp_1<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span>q18<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>33.33333333333333</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">find_cheapest</span><span class="token punctuation">(</span>place<span class="token punctuation">)</span><span class="token punctuation">:</span>    cheapest_curr <span class="token operator">=</span> float<span class="token punctuation">(</span><span class="token string">"inf"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>csv_rows<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> place <span class="token operator">==</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">'country'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                <span class="token keyword">if</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> cheapest_curr<span class="token punctuation">:</span>                    cheapest_curr <span class="token operator">=</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> cheapest_curr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q19 what is the cost of cheapest wine that you could find in US?</span><span class="token keyword">def</span> <span class="token function">q19</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> find_cheapest<span class="token punctuation">(</span><span class="token string">'US'</span><span class="token punctuation">)</span>q19<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>10.0</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">find_costliest</span><span class="token punctuation">(</span>place<span class="token punctuation">)</span><span class="token punctuation">:</span>    costliest_curr <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>csv_rows<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> place <span class="token operator">==</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">'country'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                <span class="token keyword">if</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token punctuation">)</span> <span class="token operator">></span> costliest_curr<span class="token punctuation">:</span>                    costliest_curr <span class="token operator">=</span> cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> costliest_curr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q20 What is the total cost of buying the two bottles?</span><span class="token keyword">def</span> <span class="token function">q20</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> find_cheapest<span class="token punctuation">(</span><span class="token string">'US'</span><span class="token punctuation">)</span> <span class="token operator">+</span> find_costliest<span class="token punctuation">(</span><span class="token string">'US'</span><span class="token punctuation">)</span>q20<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>335.0</code></pre>]]></content>
      
      
      <categories>
          
          <category> CS301Proj </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS301 Data Programming I </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS301_Proj5</title>
      <link href="/2019/10/23/cs301-proj5/"/>
      <url>/2019/10/23/cs301-proj5/</url>
      
        <content type="html"><![CDATA[<h1 id="CS301-Proj5"><a href="#CS301-Proj5" class="headerlink" title="CS301_Proj5"></a>CS301_Proj5</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Hurricanes often count among the worst natural disasters, both in terms ofmonetary costs and, more importantly, human life.  Data Science canhelp us better understand these storms.  For example, take a quicklook at this FiveThirtyEight analysis by Maggie Koerth-Baker:<a href="https://fivethirtyeight.com/features/why-were-stuck-with-an-inadequate-hurricane-rating-system/" target="_blank" rel="noopener">Why We’re Stuck With An Inadequate Hurricane Rating System</a>(you should all read FiveThirtyEight, btw!).</p><p>For this project, you’ll be analyzing data in the <code>hurricanes.csv</code>file.  We generated this data file by writing a Python program toextract stats from this page:<a href="https://en.wikipedia.org/wiki/List_of_United_States_hurricanes" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/List_of_United_States_hurricanes</a>.  Bythe end of this semester, we’ll teach you to extract data fromwebsites like Wikipedia for yourself.</p><p>This project will focus on <strong>loops</strong> and <strong>strings</strong>. To start,download <code>project.py</code>, <code>test.py</code> and <code>hurricanes.csv</code>.  You’ll do yourwork in Jupyter Notebooks this week, producing a <code>main.ipynb</code> file.You’ll test as usual by running <code>python test.py</code> to test a<code>main.ipynb</code> file (or <code>python test.py other.ipynb</code> to test a notebookwith a different name).  You may not use any extra modules that youneed to install with pip (only the standard modules that come withPython, such as <code>math</code>).</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># project: p5</span><span class="token comment" spellcheck="true"># submitter: naixinzhang</span><span class="token comment" spellcheck="true"># partner: none</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> project<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q1 How many records are in the dataset?</span>project<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>132</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q2 What is the name of the hurricane at index 10?</span>project<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>&#39;Carol&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q3 How many deaths were caused by the hurricane at the last index?</span>project<span class="token punctuation">.</span>get_deaths<span class="token punctuation">(</span>project<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>1</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q4 Is there a hurricane named Bob?</span><span class="token keyword">def</span> <span class="token function">if_bob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>project<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> project<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'Bob'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">break</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> project<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>if_bob<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>True</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q5 How many hurricanes named Florence are in the dataset?</span><span class="token keyword">def</span> <span class="token function">count_hurricanes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>project<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>project<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'FLORENCE'</span><span class="token punctuation">:</span>            count <span class="token operator">=</span> count<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">return</span> countcount_hurricanes<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>3</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q6 What is the fastest MPH achieved by a hurricane in the dataset?</span><span class="token keyword">def</span> <span class="token function">fastestMPH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    fast <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>project<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> project<span class="token punctuation">.</span>get_mph<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">></span> fast<span class="token punctuation">:</span>            fast <span class="token operator">=</span> project<span class="token punctuation">.</span>get_mph<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> fastfastestMPH<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>190</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q7 What is the name of that fastest hurricane?</span><span class="token keyword">def</span> <span class="token function">name_of_fatest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>project<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> project<span class="token punctuation">.</span>get_mph<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> fastestMPH<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> project<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span>i<span class="token punctuation">)</span>name_of_fatest<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;Allen&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q8 How much damage (in dollars) was done by the hurricane Dolphin?</span><span class="token keyword">def</span> <span class="token function">count_dolphin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>project<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> project<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'Dolphin'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> project<span class="token punctuation">.</span>get_damage<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'K'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span>float<span class="token punctuation">(</span>project<span class="token punctuation">.</span>get_damage<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> project<span class="token punctuation">.</span>get_damage<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'M'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span>float<span class="token punctuation">(</span>project<span class="token punctuation">.</span>get_damage<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> project<span class="token punctuation">.</span>get_damage<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'B'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span>float<span class="token punctuation">(</span>project<span class="token punctuation">.</span>get_damage<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> count_dolphin<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>13500000</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q9 How many total deaths are represented in the dataset?</span><span class="token keyword">def</span> <span class="token function">total_d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    total_death <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>project<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        total_death <span class="token operator">=</span> total_death <span class="token operator">+</span> project<span class="token punctuation">.</span>get_deaths<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> total_deathtotal_d<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>18959</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q10 What was the deadliest hurricane between 2010 and 2019 (inclusive)?</span><span class="token keyword">def</span> <span class="token function">get_year</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''Returns the year when the date is the in the 'mm/dd/yyyy' format'''</span>    <span class="token keyword">return</span> int<span class="token punctuation">(</span>date<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">deadliest_in_range</span><span class="token punctuation">(</span>year1<span class="token punctuation">,</span> year2<span class="token punctuation">)</span><span class="token punctuation">:</span>    worst_idx <span class="token operator">=</span> None    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>project<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> get_year<span class="token punctuation">(</span>project<span class="token punctuation">.</span>get_formed<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>=</span> year1 <span class="token operator">and</span> get_year<span class="token punctuation">(</span>project<span class="token punctuation">.</span>get_formed<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> year2<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># TODO: check if year is in range</span>            <span class="token keyword">if</span> worst_idx <span class="token operator">==</span> None <span class="token operator">or</span> project<span class="token punctuation">.</span>get_deaths<span class="token punctuation">(</span>worst_idx<span class="token punctuation">)</span> <span class="token operator">&lt;</span> project<span class="token punctuation">.</span>get_deaths<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                worst_idx <span class="token operator">=</span> i    <span class="token keyword">return</span> worst_idxproject<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span>deadliest_in_range<span class="token punctuation">(</span><span class="token number">2010</span><span class="token punctuation">,</span><span class="token number">2019</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;Maria&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q11 What was the deadliest hurricane of the 20th century (1901 to 2000, inclusive)?</span>project<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span>deadliest_in_range<span class="token punctuation">(</span><span class="token number">1901</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>&#39;Inez&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q12 In what year did the most deadly hurricane in the dataset form?</span><span class="token keyword">def</span> <span class="token function">get_most</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dead <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>project<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> project<span class="token punctuation">.</span>get_deaths<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">></span> dead<span class="token punctuation">:</span>            dead <span class="token operator">=</span> project<span class="token punctuation">.</span>get_deaths<span class="token punctuation">(</span>i<span class="token punctuation">)</span>     <span class="token keyword">return</span> dead <span class="token keyword">def</span> <span class="token function">cal_year</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>project<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> project<span class="token punctuation">.</span>get_deaths<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> get_most<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> get_year<span class="token punctuation">(</span>project<span class="token punctuation">.</span>get_formed<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>cal_year<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1899</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q13 How much damage (in dollars) was done by the deadliest hurricane of the 20th century?</span><span class="token keyword">def</span> <span class="token function">num_damage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> project<span class="token punctuation">.</span>get_damage<span class="token punctuation">(</span>deadliest_in_range<span class="token punctuation">(</span><span class="token number">1901</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span><span class="token string">'K'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> int<span class="token punctuation">(</span>float<span class="token punctuation">(</span>project<span class="token punctuation">.</span>get_damage<span class="token punctuation">(</span>deadliest_in_range<span class="token punctuation">(</span><span class="token number">1901</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> project<span class="token punctuation">.</span>get_damage<span class="token punctuation">(</span>deadliest_in_range<span class="token punctuation">(</span><span class="token number">1901</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span><span class="token string">'M'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> int<span class="token punctuation">(</span>float<span class="token punctuation">(</span>project<span class="token punctuation">.</span>get_damage<span class="token punctuation">(</span>deadliest_in_range<span class="token punctuation">(</span><span class="token number">1901</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000000</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> project<span class="token punctuation">.</span>get_damage<span class="token punctuation">(</span>deadliest_in_range<span class="token punctuation">(</span><span class="token number">1901</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span><span class="token string">'B'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> int<span class="token punctuation">(</span>float<span class="token punctuation">(</span>project<span class="token punctuation">.</span>get_damage<span class="token punctuation">(</span>deadliest_in_range<span class="token punctuation">(</span><span class="token number">1901</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000000000</span><span class="token punctuation">)</span>num_damage<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>226500000</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q14 What were the total damages across all hurricanes in the dataset, in dollars?</span><span class="token keyword">def</span> <span class="token function">total_dama</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    total_dem <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>project<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> project<span class="token punctuation">.</span>get_damage<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span><span class="token string">'K'</span><span class="token punctuation">:</span>            total_dem <span class="token operator">=</span> total_dem <span class="token operator">+</span> int<span class="token punctuation">(</span>float<span class="token punctuation">(</span>project<span class="token punctuation">.</span>get_damage<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> project<span class="token punctuation">.</span>get_damage<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span><span class="token string">'M'</span><span class="token punctuation">:</span>            total_dem <span class="token operator">=</span> total_dem <span class="token operator">+</span> int<span class="token punctuation">(</span>float<span class="token punctuation">(</span>project<span class="token punctuation">.</span>get_damage<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000000</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> project<span class="token punctuation">.</span>get_damage<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span><span class="token string">'B'</span><span class="token punctuation">:</span>            total_dem <span class="token operator">=</span> total_dem <span class="token operator">+</span> int<span class="token punctuation">(</span>float<span class="token punctuation">(</span>project<span class="token punctuation">.</span>get_damage<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000000000</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> total_demtotal_dama<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>864230464997</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_month</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''Returns the month when the date is the in the 'mm/dd/yyyy' format'''</span>    <span class="token keyword">return</span> int<span class="token punctuation">(</span>date<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hurricanes_in_month</span><span class="token punctuation">(</span>mm<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_of_hurricanes <span class="token operator">=</span> <span class="token number">0</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>project<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> get_month<span class="token punctuation">(</span>project<span class="token punctuation">.</span>get_formed<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> mm<span class="token punctuation">:</span>            num_of_hurricanes <span class="token operator">=</span> num_of_hurricanes <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> num_of_hurricanes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q15: How many hurricanes were formed in the month of July?</span>hurricanes_in_month<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>17</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q16: How many hurricanes were formed in the month of December?</span>hurricanes_in_month<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>3</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q17: How many hurricanes were formed in the month of January?</span>hurricanes_in_month<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>3</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q18: How many hurricanes were formed in the month of May?</span>hurricanes_in_month<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>2</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q19 Which month experienced the formation of the most number of hurricanes?</span>max_hurricans <span class="token operator">=</span> max<span class="token punctuation">(</span>hurricanes_in_month<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> hurricanes_in_month<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> max_hurricans<span class="token punctuation">:</span>            <span class="token keyword">return</span> igetMonth<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>9</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q20 How many years experienced the formation of at least four hurricanes?</span><span class="token keyword">def</span> <span class="token function">hurricanes_in_year</span><span class="token punctuation">(</span>yr<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_of_hurricanes <span class="token operator">=</span> <span class="token number">0</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>project<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> get_year<span class="token punctuation">(</span>project<span class="token punctuation">.</span>get_formed<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> yr <span class="token punctuation">:</span>            num_of_hurricanes <span class="token operator">=</span> num_of_hurricanes <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> num_of_hurricanes<span class="token keyword">def</span> <span class="token function">min_max_year</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res_min_year <span class="token operator">=</span> <span class="token number">1e4</span>    res_max_year <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>project<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> get_year<span class="token punctuation">(</span>project<span class="token punctuation">.</span>get_formed<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> res_min_year <span class="token punctuation">:</span>            res_min_year <span class="token operator">=</span> get_year<span class="token punctuation">(</span>project<span class="token punctuation">.</span>get_formed<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> get_year<span class="token punctuation">(</span>project<span class="token punctuation">.</span>get_formed<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> res_max_year <span class="token punctuation">:</span>            res_max_year <span class="token operator">=</span> get_year<span class="token punctuation">(</span>project<span class="token punctuation">.</span>get_formed<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> res_min_year<span class="token punctuation">,</span> res_max_year<span class="token keyword">def</span> <span class="token function">get_years</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token number">0</span>    min_year<span class="token punctuation">,</span> max_year <span class="token operator">=</span> min_max_year<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>min_year<span class="token punctuation">,</span> max_year<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> hurricanes_in_year<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">:</span>            num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> numget_years<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>10</code></pre>]]></content>
      
      
      <categories>
          
          <category> CS301Proj </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS301 Data Programming I </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS301_Proj3</title>
      <link href="/2019/09/23/cs301-proj3/"/>
      <url>/2019/09/23/cs301-proj3/</url>
      
        <content type="html"><![CDATA[<h1 id="CS301-Proj3"><a href="#CS301-Proj3" class="headerlink" title="CS301_Proj3"></a>CS301_Proj3</h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>The City of Madison has many <a href="https://www.cityofmadison.com/agencies" target="_blank" rel="noopener">differentagencies</a> providing a varietyof services.  In this project, you’ll analyze real spending data from2015 to 2018 for five of the largest agencies: police, fire, streets,library, and parks.  You’ll get practice calling functions from a<code>project</code> module, which we’ll provide, and practice writing your ownfunctions.</p><p>Start by downloading <code>project.py</code>, <code>test.py</code> and <code>madison.csv</code>.Double check that these files don’t get renamed by your browser (byrunning <code>ls</code> in the terminal from your <code>p3</code> project directory).You’ll do all your work in a new <code>main.ipynb</code> notebook that you’llcreate and hand in when you’re done (please do not write yourfunctions in a separate .py file).  You’ll test as usual by running<code>python test.py</code> (or similar, depending on your laptop setup).  Beforehanding in, please put the project, submitter, and partner info in acomment in the first cell, in the same format you used for previousprojects (please continue doing so for all projects this semester).</p><p>We won’t explain how to use the <code>project</code> module here (the code is in the<code>project.py</code> file).  The lab this week is designed to teach you how itworks, so be sure to do the lab from home (if you missed it) beforestarting the project.</p><p>This project consists of writing code to answer 20 questions.  Ifyou’re answering a particular question in a cell in your notebook, youneed to put a comment in the cell so we know what you’re answering.For example, if you’re answering question 13, the first line of yourcell should contain <code>#q13</code>.</p><h2 id="Dataset"><a href="#Dataset" class="headerlink" title="Dataset"></a>Dataset</h2><p>The data looks like this:</p><table><thead><tr><th>agency_id</th><th>agency</th><th>2015</th><th>2016</th><th>2017</th><th>2018</th></tr></thead><tbody><tr><td>5</td><td>police</td><td>68.06346877</td><td>71.32575615000002</td><td>73.24794765999998</td><td>77.87553504</td></tr><tr><td>6</td><td>fire</td><td>49.73757877</td><td>51.96834048</td><td>53.14405332</td><td>55.215007260000014</td></tr><tr><td>9</td><td>library</td><td>16.96543425</td><td>18.12552139</td><td>19.13634773</td><td>19.845065799999997</td></tr><tr><td>12</td><td>parks</td><td>18.371421039999998</td><td>19.159243279999995</td><td>19.316837019999994</td><td>19.7607100000000</td></tr><tr><td>15</td><td>streets</td><td>25.368879940000006</td><td>28.2286218</td><td>26.655754419999994</td><td>27.798933740000003</td></tr></tbody></table><p>The dataset is in the <code>madison.csv</code> file.  We’ll learn about CSV fileslater in the semester.  For now, you should know this about them:</p><ul><li>it’s easy to create them by exporting from Excel</li><li>it’s easy to use them in Python programs</li><li>we’ll give you a <code>project.py</code> module to help you extract data from CSV files until we teach you to do it directly yourself</li></ul><p>All the numbers in the dataset are in millions of dollars.  Answerquestions in millions of dollars unless we specify otherwise.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># project: p3</span><span class="token comment" spellcheck="true"># submitter: naixinzhang</span><span class="token comment" spellcheck="true"># partner: none</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> project<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">project<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token string">"madison.csv"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">streets_id <span class="token operator">=</span> project<span class="token punctuation">.</span>get_id<span class="token punctuation">(</span><span class="token string">"streets"</span><span class="token punctuation">)</span>police_id <span class="token operator">=</span> project<span class="token punctuation">.</span>get_id<span class="token punctuation">(</span><span class="token string">"police"</span><span class="token punctuation">)</span>fire_id <span class="token operator">=</span> project<span class="token punctuation">.</span>get_id<span class="token punctuation">(</span><span class="token string">"fire"</span><span class="token punctuation">)</span>library_id <span class="token operator">=</span> project<span class="token punctuation">.</span>get_id<span class="token punctuation">(</span><span class="token string">"library"</span><span class="token punctuation">)</span>parks_id <span class="token operator">=</span> project<span class="token punctuation">.</span>get_id<span class="token punctuation">(</span><span class="token string">"parks"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q1 What is the agency ID of the parks agency?</span>parks_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>12</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q2 How much did the agency with ID 6 spend in 2018?</span>project<span class="token punctuation">.</span>get_spending<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2018</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>55.215007260000014</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q3 How much did "streets" spend in 2017?</span>project<span class="token punctuation">.</span>get_spending<span class="token punctuation">(</span>streets_id<span class="token punctuation">,</span> <span class="token number">2017</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>26.655754419999994</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#Function 1: year_max(year)</span><span class="token keyword">def</span> <span class="token function">year_max</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># grab the spending by each agency in the given year</span>    police_spending <span class="token operator">=</span> project<span class="token punctuation">.</span>get_spending<span class="token punctuation">(</span>project<span class="token punctuation">.</span>get_id<span class="token punctuation">(</span><span class="token string">"police"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> year<span class="token punctuation">)</span>    fire_spending <span class="token operator">=</span> project<span class="token punctuation">.</span>get_spending<span class="token punctuation">(</span>project<span class="token punctuation">.</span>get_id<span class="token punctuation">(</span><span class="token string">"fire"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> year<span class="token punctuation">)</span>    library_spending <span class="token operator">=</span> project<span class="token punctuation">.</span>get_spending<span class="token punctuation">(</span>project<span class="token punctuation">.</span>get_id<span class="token punctuation">(</span><span class="token string">"library"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> year<span class="token punctuation">)</span>    parks_spending <span class="token operator">=</span> project<span class="token punctuation">.</span>get_spending<span class="token punctuation">(</span>project<span class="token punctuation">.</span>get_id<span class="token punctuation">(</span><span class="token string">"parks"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> year<span class="token punctuation">)</span>    streets_spending <span class="token operator">=</span> project<span class="token punctuation">.</span>get_spending<span class="token punctuation">(</span>project<span class="token punctuation">.</span>get_id<span class="token punctuation">(</span><span class="token string">"streets"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> year<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># use builtin max function to get the largest of the five values</span>    <span class="token keyword">return</span> max<span class="token punctuation">(</span>police_spending<span class="token punctuation">,</span> fire_spending<span class="token punctuation">,</span> library_spending<span class="token punctuation">,</span> parks_spending<span class="token punctuation">,</span> streets_spending<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q4 What was the most spent by a single agency in 2015?</span>year_max<span class="token punctuation">(</span><span class="token number">2015</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>68.06346877</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q5 What was the most spent by a single agency in 2018?</span>year_max<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>77.87553504</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Function 2: agency_min(agency)</span><span class="token keyword">def</span> <span class="token function">agency_min</span><span class="token punctuation">(</span>agency<span class="token punctuation">)</span><span class="token punctuation">:</span>    agency_id <span class="token operator">=</span> project<span class="token punctuation">.</span>get_id<span class="token punctuation">(</span>agency<span class="token punctuation">)</span>    y15 <span class="token operator">=</span> project<span class="token punctuation">.</span>get_spending<span class="token punctuation">(</span>agency_id<span class="token punctuation">,</span> <span class="token number">2015</span><span class="token punctuation">)</span>    y16 <span class="token operator">=</span> project<span class="token punctuation">.</span>get_spending<span class="token punctuation">(</span>agency_id<span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># grab the other years</span>    y17 <span class="token operator">=</span> project<span class="token punctuation">.</span>get_spending<span class="token punctuation">(</span>agency_id<span class="token punctuation">,</span> <span class="token number">2017</span><span class="token punctuation">)</span>    y18 <span class="token operator">=</span> project<span class="token punctuation">.</span>get_spending<span class="token punctuation">(</span>agency_id<span class="token punctuation">,</span> <span class="token number">2018</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># use the min function (similar to the max function)</span>    <span class="token comment" spellcheck="true"># to get the minimum across the four years, and return</span>    <span class="token comment" spellcheck="true"># that value</span>    <span class="token keyword">return</span> min<span class="token punctuation">(</span>y15<span class="token punctuation">,</span> y16<span class="token punctuation">,</span> y17<span class="token punctuation">,</span> y18<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q6 What was the least the police ever spent in a year?</span>agency_min<span class="token punctuation">(</span>agency <span class="token operator">=</span> <span class="token string">'police'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>68.06346877</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q7 What was the least that library ever spent in a year?</span>agency_min<span class="token punctuation">(</span>agency <span class="token operator">=</span> <span class="token string">'library'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>16.96543425</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q8 What was the least that parks ever spent in a year?</span>agency_min<span class="token punctuation">(</span>agency <span class="token operator">=</span> <span class="token string">'parks'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>18.371421039999998</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#Function 3: agency_avg(agency)</span><span class="token keyword">def</span> <span class="token function">agency_avg</span><span class="token punctuation">(</span>agency<span class="token punctuation">)</span><span class="token punctuation">:</span>    agency_id <span class="token operator">=</span> project<span class="token punctuation">.</span>get_id<span class="token punctuation">(</span>agency<span class="token punctuation">)</span>    y15 <span class="token operator">=</span> project<span class="token punctuation">.</span>get_spending<span class="token punctuation">(</span>agency_id<span class="token punctuation">,</span> <span class="token number">2015</span><span class="token punctuation">)</span>    y16 <span class="token operator">=</span> project<span class="token punctuation">.</span>get_spending<span class="token punctuation">(</span>agency_id<span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span>    y17 <span class="token operator">=</span> project<span class="token punctuation">.</span>get_spending<span class="token punctuation">(</span>agency_id<span class="token punctuation">,</span> <span class="token number">2017</span><span class="token punctuation">)</span>    y18 <span class="token operator">=</span> project<span class="token punctuation">.</span>get_spending<span class="token punctuation">(</span>agency_id<span class="token punctuation">,</span> <span class="token number">2018</span><span class="token punctuation">)</span>    num <span class="token operator">=</span> <span class="token punctuation">[</span>y15<span class="token punctuation">,</span> y16<span class="token punctuation">,</span> y17<span class="token punctuation">,</span> y18<span class="token punctuation">]</span>    <span class="token keyword">return</span> sum<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q9 How much is spent per year on streets, on average?</span>agency_avg<span class="token punctuation">(</span>agency<span class="token operator">=</span><span class="token string">'streets'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>27.013047475</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q10 How much is spent per year on fire, on average?</span>agency_avg<span class="token punctuation">(</span>agency<span class="token operator">=</span><span class="token string">'fire'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>52.5162449575</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q11 How much did the police spend above their average in 2018?</span>y18 <span class="token operator">=</span> project<span class="token punctuation">.</span>get_spending<span class="token punctuation">(</span>police_id<span class="token punctuation">,</span> <span class="token number">2018</span><span class="token punctuation">)</span>average <span class="token operator">=</span> agency_avg<span class="token punctuation">(</span>agency <span class="token operator">=</span> <span class="token string">'police'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>y18 <span class="token operator">-</span>average<span class="token punctuation">)</span> <span class="token operator">/</span> average <span class="token operator">*</span> <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>7.224961934351909</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Function 4: change_per_year(agency, start_year=2015, end_year=2018)</span><span class="token keyword">def</span> <span class="token function">change_per_year</span><span class="token punctuation">(</span>agency<span class="token punctuation">,</span> start_year<span class="token operator">=</span> <span class="token number">2015</span><span class="token punctuation">,</span> end_year <span class="token operator">=</span> <span class="token number">2018</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    agency_id <span class="token operator">=</span> project<span class="token punctuation">.</span>get_id<span class="token punctuation">(</span>agency<span class="token punctuation">)</span>    spending_startyear <span class="token operator">=</span> project<span class="token punctuation">.</span>get_spending<span class="token punctuation">(</span>agency_id<span class="token punctuation">,</span>start_year<span class="token punctuation">)</span>    spending_endyear <span class="token operator">=</span> project<span class="token punctuation">.</span>get_spending<span class="token punctuation">(</span>agency_id<span class="token punctuation">,</span>end_year<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>spending_endyear<span class="token operator">-</span>spending_startyear<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>end_year<span class="token operator">-</span>start_year<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q12 how much has spending increased per year (on average) for police from 2015 to 2018?</span>change_per_year<span class="token punctuation">(</span>agency <span class="token operator">=</span><span class="token string">'police'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>3.2706887566666674</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q13 how much has spending increased per year (on average) for police from 2017 to 2018?</span>change_per_year<span class="token punctuation">(</span>agency <span class="token operator">=</span> <span class="token string">'police'</span><span class="token punctuation">,</span> start_year <span class="token operator">=</span> <span class="token number">2017</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>4.627587380000023</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q14 how much has spending increased per year (on average) for streets from 2016 to 2018?</span>change_per_year<span class="token punctuation">(</span>agency <span class="token operator">=</span> <span class="token string">'streets'</span><span class="token punctuation">,</span> start_year <span class="token operator">=</span> <span class="token number">2016</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>-0.2148440299999983</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#Function 5: extrapolate(agency, year1, year2, year3)</span><span class="token keyword">def</span> <span class="token function">extrapolate</span><span class="token punctuation">(</span>agency<span class="token punctuation">,</span> year1<span class="token punctuation">,</span> year2<span class="token punctuation">,</span> year3<span class="token punctuation">)</span><span class="token punctuation">:</span>    change <span class="token operator">=</span> change_per_year<span class="token punctuation">(</span>agency<span class="token punctuation">,</span> start_year <span class="token operator">=</span> year1<span class="token punctuation">,</span> end_year <span class="token operator">=</span> year2<span class="token punctuation">)</span>    agency_id <span class="token operator">=</span> project<span class="token punctuation">.</span>get_id<span class="token punctuation">(</span>agency<span class="token punctuation">)</span>    spending_year2 <span class="token operator">=</span> project<span class="token punctuation">.</span>get_spending<span class="token punctuation">(</span>agency_id<span class="token punctuation">,</span>year2<span class="token punctuation">)</span>    <span class="token keyword">return</span> spending_year2<span class="token operator">+</span> <span class="token punctuation">(</span>year3 <span class="token operator">-</span> year2<span class="token punctuation">)</span><span class="token operator">*</span>change <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q15 how much will library spend in 2019?</span>extrapolate<span class="token punctuation">(</span>agency <span class="token operator">=</span><span class="token string">'library'</span><span class="token punctuation">,</span>year1 <span class="token operator">=</span> <span class="token number">2015</span><span class="token punctuation">,</span> year2 <span class="token operator">=</span> <span class="token number">2018</span><span class="token punctuation">,</span> year3 <span class="token operator">=</span> <span class="token number">2019</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>20.80494298333333</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q16 how much will library spend in 2100?</span>extrapolate<span class="token punctuation">(</span>agency <span class="token operator">=</span><span class="token string">'library'</span><span class="token punctuation">,</span> year1<span class="token operator">=</span><span class="token number">2015</span><span class="token punctuation">,</span> year2<span class="token operator">=</span><span class="token number">2018</span><span class="token punctuation">,</span> year3<span class="token operator">=</span><span class="token number">2100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>98.55499483333321</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q17 how much will library spend in 2100?</span>extrapolate<span class="token punctuation">(</span>agency <span class="token operator">=</span> <span class="token string">'library'</span><span class="token punctuation">,</span> year1 <span class="token operator">=</span><span class="token number">2017</span><span class="token punctuation">,</span> year2<span class="token operator">=</span><span class="token number">2018</span><span class="token punctuation">,</span> year3<span class="token operator">=</span><span class="token number">2100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>77.95994753999969</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#Function 6: extrapolate_error</span><span class="token keyword">def</span> <span class="token function">extrapolate_error</span><span class="token punctuation">(</span>agency<span class="token punctuation">,</span> year1<span class="token punctuation">,</span> year2<span class="token punctuation">,</span> year3<span class="token punctuation">)</span><span class="token punctuation">:</span>    agency_id <span class="token operator">=</span> project<span class="token punctuation">.</span>get_id<span class="token punctuation">(</span>agency<span class="token punctuation">)</span>    predict <span class="token operator">=</span> extrapolate<span class="token punctuation">(</span>agency<span class="token punctuation">,</span> year1<span class="token punctuation">,</span> year2<span class="token punctuation">,</span> year3<span class="token punctuation">)</span>    actual <span class="token operator">=</span> project<span class="token punctuation">.</span>get_spending<span class="token punctuation">(</span>agency_id<span class="token punctuation">,</span> year3<span class="token punctuation">)</span>    <span class="token keyword">return</span> predict <span class="token operator">-</span> actual<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q18  what is the error if we extrapolate to 2018 from the 2015-to-2017 data for police?</span>extrapolate_error<span class="token punctuation">(</span>agency <span class="token operator">=</span><span class="token string">'police'</span><span class="token punctuation">,</span> year1<span class="token operator">=</span><span class="token number">2015</span><span class="token punctuation">,</span> year2<span class="token operator">=</span><span class="token number">2017</span><span class="token punctuation">,</span> year3<span class="token operator">=</span><span class="token number">2018</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>-2.0353479350000327</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q19  what is the error if we extrapolate to 2018 from the 2015-to-2016 data for streets?</span>extrapolate_error<span class="token punctuation">(</span>agency<span class="token operator">=</span><span class="token string">'streets'</span><span class="token punctuation">,</span> year1<span class="token operator">=</span><span class="token number">2015</span><span class="token punctuation">,</span> year2<span class="token operator">=</span><span class="token number">2016</span><span class="token punctuation">,</span> year3<span class="token operator">=</span><span class="token number">2018</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>6.149171779999982</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q20 what is the standard deviation for library spending over the 4 years?</span><span class="token keyword">def</span> <span class="token function">std_cal</span><span class="token punctuation">(</span>agency<span class="token punctuation">,</span> year1<span class="token punctuation">,</span> year2<span class="token punctuation">,</span> year3<span class="token punctuation">,</span> year4<span class="token punctuation">)</span><span class="token punctuation">:</span>    library_id <span class="token operator">=</span> project<span class="token punctuation">.</span>get_id<span class="token punctuation">(</span>agency<span class="token punctuation">)</span>    library_1<span class="token operator">=</span> project<span class="token punctuation">.</span>get_spending<span class="token punctuation">(</span>library_id<span class="token punctuation">,</span> year1<span class="token punctuation">)</span>    library_2<span class="token operator">=</span> project<span class="token punctuation">.</span>get_spending<span class="token punctuation">(</span>library_id<span class="token punctuation">,</span> year2<span class="token punctuation">)</span>    library_3<span class="token operator">=</span> project<span class="token punctuation">.</span>get_spending<span class="token punctuation">(</span>library_id<span class="token punctuation">,</span> year3<span class="token punctuation">)</span>    library_4<span class="token operator">=</span> project<span class="token punctuation">.</span>get_spending<span class="token punctuation">(</span>library_id<span class="token punctuation">,</span> year4<span class="token punctuation">)</span>    mean <span class="token operator">=</span> <span class="token punctuation">(</span>library_1<span class="token operator">+</span>library_2<span class="token operator">+</span>library_3<span class="token operator">+</span>library_4<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">4</span>    var <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>library_1 <span class="token operator">-</span>mean<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">+</span><span class="token punctuation">(</span>library_2 <span class="token operator">-</span>mean<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">+</span><span class="token punctuation">(</span>library_3 <span class="token operator">-</span>mean<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">+</span><span class="token punctuation">(</span>library_4 <span class="token operator">-</span>mean<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">4</span>    <span class="token keyword">return</span> var <span class="token operator">**</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1.0848913984858986</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q20</span>std_cal<span class="token punctuation">(</span>agency <span class="token operator">=</span> <span class="token string">'library'</span><span class="token punctuation">,</span>year1 <span class="token operator">=</span> <span class="token number">2015</span><span class="token punctuation">,</span>year2<span class="token operator">=</span><span class="token number">2016</span><span class="token punctuation">,</span> year3<span class="token operator">=</span><span class="token number">2017</span><span class="token punctuation">,</span>year4<span class="token operator">=</span><span class="token number">2018</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>1.0848913984858986</code></pre>]]></content>
      
      
      <categories>
          
          <category> CS301Proj </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS301 Data Programming I </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-Marketing Email campaign</title>
      <link href="/2018/02/01/7-marketing-email-campaign/"/>
      <url>/2018/02/01/7-marketing-email-campaign/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> itertools<span class="token keyword">import</span> _pickle <span class="token keyword">as</span> cPickle<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>style<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">"ggplot"</span><span class="token punctuation">)</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_selection <span class="token keyword">import</span> chi2<span class="token punctuation">,</span>f_classif<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoder<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> classification_report<span class="token punctuation">,</span>roc_curve<span class="token punctuation">,</span>precision_score<span class="token punctuation">,</span>recall_score<span class="token punctuation">,</span>auc<span class="token punctuation">,</span>precision_recall_curve<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">import</span> xgboost <span class="token keyword">as</span> xgb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">seed <span class="token operator">=</span> <span class="token number">9999</span>plt<span class="token punctuation">.</span>style<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">'ggplot'</span><span class="token punctuation">)</span><span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h2><ul><li><a href="#Load-emails-information-from-CSV-file">Load emails from CSV</a></li><li><a href="#Answer-question-1">Answer Question 1</a></li><li><a href="#Explore-the-data">Explore the data</a><ul><li><a href="#Chi-square-test-and-F-test">Chi-square test and F-test</a></li><li><a href="#previous-purchase-vs.-response">previous purchase history vs. response</a></li><li><a href="#user's-country-vs.-response">user’s country vs. response</a></li><li><a href="#email's-version-vs.-response">email’s version vs. response</a></li><li><a href="#weekday-vs.-response">weekday vs. reponse</a></li><li><a href="#email-text-vs.-response">email text vs. response</a></li><li><a href="#sending-hour-vs.-response">sending hour vs. response</a></li></ul></li><li><a href="#Answer-question-4">Answer Question 4</a></li><li><a href="#Build-Predictive-Model">Build Predictive Model</a><ul><li><a href="#Prepare-the-data">Prepare the data</a></li><li><a href="#Train-the-model">Train the model</a></li><li><a href="#Plot-ROC-curve-and-choose-better-probability-threshold">Plot ROC curve and choose better probability threshold</a></li></ul></li><li><a href="#Answer-question-2-and-question-3's-first-part">Answer question 2 and question 3’s first part</a></li><li><a href="#Answer-question-3's-second-part">Answer question 3’s second part</a></li><li>Answers summary:<ul><li><a href="#Answer-question-1">Answer Question 1</a></li><li><a href="#Answer-question-2-and-question-3's-first-part">Answer question 2 and question 3’s first part</a></li><li><a href="#Answer-question-3's-second-part">Answer question 3’s second part</a></li><li><a href="#Answer-question-4">Answer Question 4</a></li></ul></li></ul><h2 id="Load-emails-information-from-CSV-file"><a href="#Load-emails-information-from-CSV-file" class="headerlink" title="Load emails information from CSV file"></a>Load emails information from CSV file</h2><pre class="line-numbers language-python"><code class="language-python">emails <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"email_table.csv"</span><span class="token punctuation">,</span>index_col<span class="token operator">=</span><span class="token string">"email_id"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Columns:</p><ul><li>email_id : the Id of the email that was sent. It is unique by email </li><li>email_text : there are two versions of the email: one has “long text” (i.e. has 4 paragraphs) and one has “short text” (just 2 paragraphs) </li><li>email_version : some emails were “personalized” (i.e. they had the name of the user receiving the email in the incipit, such as “Hi John,”), while some emails were “generic” (the incipit was just “Hi,”). </li><li>hour : the user local time when the email was sent. </li><li>weekday : the day when the email was sent. </li><li>user_country : the country where the user receiving the email was based. It comes from the user ip address when she created the account. </li><li>user_past_purchases : how many items in the past were bought by the user receiving the email</li></ul><pre class="line-numbers language-python"><code class="language-python">emails<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># view some data to get a feeling</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>email_text</th>      <th>email_version</th>      <th>hour</th>      <th>weekday</th>      <th>user_country</th>      <th>user_past_purchases</th>    </tr>    <tr>      <th>email_id</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>434924</th>      <td>long_email</td>      <td>personalized</td>      <td>3</td>      <td>Tuesday</td>      <td>US</td>      <td>1</td>    </tr>    <tr>      <th>97442</th>      <td>long_email</td>      <td>personalized</td>      <td>9</td>      <td>Thursday</td>      <td>FR</td>      <td>7</td>    </tr>    <tr>      <th>919106</th>      <td>short_email</td>      <td>generic</td>      <td>16</td>      <td>Friday</td>      <td>US</td>      <td>4</td>    </tr>    <tr>      <th>476265</th>      <td>long_email</td>      <td>generic</td>      <td>13</td>      <td>Saturday</td>      <td>UK</td>      <td>2</td>    </tr>    <tr>      <th>723144</th>      <td>long_email</td>      <td>personalized</td>      <td>12</td>      <td>Monday</td>      <td>US</td>      <td>6</td>    </tr>    <tr>      <th>518804</th>      <td>short_email</td>      <td>generic</td>      <td>7</td>      <td>Wednesday</td>      <td>UK</td>      <td>7</td>    </tr>    <tr>      <th>801247</th>      <td>short_email</td>      <td>personalized</td>      <td>6</td>      <td>Tuesday</td>      <td>US</td>      <td>0</td>    </tr>    <tr>      <th>946474</th>      <td>long_email</td>      <td>generic</td>      <td>9</td>      <td>Friday</td>      <td>US</td>      <td>18</td>    </tr>    <tr>      <th>867238</th>      <td>short_email</td>      <td>generic</td>      <td>3</td>      <td>Friday</td>      <td>UK</td>      <td>7</td>    </tr>    <tr>      <th>750202</th>      <td>short_email</td>      <td>generic</td>      <td>13</td>      <td>Sunday</td>      <td>UK</td>      <td>8</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># email_text : there are two versions of the email: </span><span class="token comment" spellcheck="true"># one has "long text" (i.e. has 4 paragraphs) and one has "short text" (just 2 paragraphs)</span><span class="token comment" spellcheck="true"># since we need to change all features into numbers, so I replace 'email_text' with 'paragraphs'</span>emails<span class="token punctuation">[</span><span class="token string">"paragraphs"</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>emails<span class="token punctuation">.</span>email_text <span class="token operator">==</span> <span class="token string">'short_email'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">del</span> emails<span class="token punctuation">[</span><span class="token string">"email_text"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># email_version : some emails were "personalized" (i.e. they had name of the user in incipit, such as "Hi John,"), </span><span class="token comment" spellcheck="true"># while some emails were "generic" (the incipit was just "Hi,").</span>emails<span class="token punctuation">[</span><span class="token string">"is_personal"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>emails<span class="token punctuation">.</span>email_version <span class="token operator">==</span> <span class="token string">"personalized"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int<span class="token punctuation">)</span><span class="token keyword">del</span> emails<span class="token punctuation">[</span><span class="token string">"email_version"</span><span class="token punctuation">]</span>weekday2index <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Monday"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"Tuesday"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"Wednesday"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"Thursday"</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"Friday"</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"Saturday"</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">"Sunday"</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">}</span>emails<span class="token punctuation">[</span><span class="token string">"weekday"</span><span class="token punctuation">]</span> <span class="token operator">=</span> emails<span class="token punctuation">.</span>weekday<span class="token punctuation">.</span>map<span class="token punctuation">(</span>weekday2index<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># rename long column names to shorter names, make it easier to read</span>emails<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'user_past_purchases'</span><span class="token punctuation">:</span><span class="token string">'purchases'</span><span class="token punctuation">,</span><span class="token string">'user_country'</span><span class="token punctuation">:</span><span class="token string">'country'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>assemble emails’ response together</p><pre class="line-numbers language-python"><code class="language-python">emails<span class="token punctuation">[</span><span class="token string">"response"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"received"</span>open_users <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"email_opened_table.csv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>email_idemails<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>open_users<span class="token punctuation">,</span><span class="token string">"response"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"opened"</span>click_users <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"link_clicked_table.csv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>email_idemails<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>click_users<span class="token punctuation">,</span><span class="token string">"response"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'clicked'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">emails<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># check some data to get a feeling</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>hour</th>      <th>weekday</th>      <th>country</th>      <th>purchases</th>      <th>paragraphs</th>      <th>is_personal</th>      <th>response</th>    </tr>    <tr>      <th>email_id</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>85120</th>      <td>2</td>      <td>7</td>      <td>US</td>      <td>5</td>      <td>2</td>      <td>1</td>      <td>received</td>    </tr>    <tr>      <th>966622</th>      <td>12</td>      <td>7</td>      <td>UK</td>      <td>2</td>      <td>4</td>      <td>1</td>      <td>clicked</td>    </tr>    <tr>      <th>777221</th>      <td>11</td>      <td>3</td>      <td>US</td>      <td>2</td>      <td>4</td>      <td>1</td>      <td>received</td>    </tr>    <tr>      <th>493711</th>      <td>6</td>      <td>1</td>      <td>UK</td>      <td>1</td>      <td>2</td>      <td>0</td>      <td>received</td>    </tr>    <tr>      <th>106887</th>      <td>14</td>      <td>1</td>      <td>US</td>      <td>6</td>      <td>4</td>      <td>0</td>      <td>received</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># output a csv file</span>emails<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">"clean_emails.csv"</span><span class="token punctuation">,</span>index_label<span class="token operator">=</span><span class="token string">"email_id"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Answer-question-1"><a href="#Answer-question-1" class="headerlink" title="Answer question 1"></a>Answer question 1</h2><ul><li><span style="color:blue;font-weight:bold">What percentage of users opened the email?</span></li><li><span style="color:blue;font-weight:bold">what percentage clicked on the link within the email?</span></li></ul><pre class="line-numbers language-python"><code class="language-python">rslt_dist <span class="token operator">=</span> emails<span class="token punctuation">.</span>response<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>rslt_dist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>received    0.89605opened      0.08276clicked     0.02119Name: response, dtype: float64</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span> <span class="token string">"{:.2f}% of users opened the email"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> rslt_dist<span class="token punctuation">.</span>received<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"{:.2f}% of users clicked the link"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>rslt_dist<span class="token punctuation">.</span>clicked <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>10.39% of users opened the email2.12% of users clicked the link</code></pre><h2 id="Explore-the-data"><a href="#Explore-the-data" class="headerlink" title="Explore the data"></a>Explore the data</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">count_result_ratio</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">:</span>    counts <span class="token operator">=</span> df<span class="token punctuation">.</span>response<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    counts<span class="token punctuation">[</span><span class="token string">'total'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> counts<span class="token keyword">def</span> <span class="token function">grp_count_plotbar</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    grpresult <span class="token operator">=</span> emails<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>count_result_ratio<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># grpresult.loc[:,["received","opened",'clicked']].plot(kind='bar')</span>    grpresult<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'clicked'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span>title<span class="token operator">=</span><span class="token string">'click ratio vs. {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'click ratio'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> grpresult<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Chi-square-test-and-F-test"><a href="#Chi-square-test-and-F-test" class="headerlink" title="Chi-square test and F-test"></a>Chi-square test and F-test</h3><pre class="line-numbers language-python"><code class="language-python">resp_lb_encoder <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>cnty_lb_encoder <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>X <span class="token operator">=</span> emails<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>y <span class="token operator">=</span> resp_lb_encoder<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token keyword">del</span> X<span class="token punctuation">[</span><span class="token string">"response"</span><span class="token punctuation">]</span>feat_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hour"</span><span class="token punctuation">,</span><span class="token string">"weekday"</span><span class="token punctuation">,</span><span class="token string">"country"</span><span class="token punctuation">,</span><span class="token string">"purchases"</span><span class="token punctuation">,</span><span class="token string">"paragraphs"</span><span class="token punctuation">,</span><span class="token string">"is_personal"</span> <span class="token punctuation">]</span>X <span class="token operator">=</span> X<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>feat_names<span class="token punctuation">]</span>X<span class="token punctuation">[</span><span class="token string">"country"</span><span class="token punctuation">]</span> <span class="token operator">=</span> cnty_lb_encoder<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X<span class="token punctuation">.</span>country<span class="token punctuation">)</span>chi2scores<span class="token punctuation">,</span>_ <span class="token operator">=</span> chi2<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">)</span>fscores<span class="token punctuation">,</span>_ <span class="token operator">=</span> f_classif<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">)</span>feat_scores <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"chi2scores"</span><span class="token punctuation">:</span>chi2scores<span class="token punctuation">,</span><span class="token string">"fscores"</span><span class="token punctuation">:</span>fscores<span class="token punctuation">}</span><span class="token punctuation">,</span>index<span class="token operator">=</span>feat_names<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">feat_scores<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'chi2scores'</span><span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>chi2scores</th>      <th>fscores</th>    </tr>  </thead>  <tbody>    <tr>      <th>purchases</th>      <td>3448.795660</td>      <td>663.388596</td>    </tr>    <tr>      <th>country</th>      <td>378.554465</td>      <td>435.696911</td>    </tr>    <tr>      <th>is_personal</th>      <td>316.752872</td>      <td>317.427444</td>    </tr>    <tr>      <th>weekday</th>      <td>210.006087</td>      <td>105.002643</td>    </tr>    <tr>      <th>hour</th>      <td>147.815921</td>      <td>33.992047</td>    </tr>    <tr>      <th>paragraphs</th>      <td>53.952439</td>      <td>81.209295</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python">feat_scores<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">"fscores"</span><span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>chi2scores</th>      <th>fscores</th>    </tr>  </thead>  <tbody>    <tr>      <th>purchases</th>      <td>3448.795660</td>      <td>663.388596</td>    </tr>    <tr>      <th>country</th>      <td>378.554465</td>      <td>435.696911</td>    </tr>    <tr>      <th>is_personal</th>      <td>316.752872</td>      <td>317.427444</td>    </tr>    <tr>      <th>weekday</th>      <td>210.006087</td>      <td>105.002643</td>    </tr>    <tr>      <th>paragraphs</th>      <td>53.952439</td>      <td>81.209295</td>    </tr>    <tr>      <th>hour</th>      <td>147.815921</td>      <td>33.992047</td>    </tr>  </tbody></table></div><p>from the test result, we can know that,</p><ul><li>important features: <em><em> previous purchase counts, user’s country, email’s version (personal or general) </em></em></li><li>not so important features <strong>maybe</strong> include: <em><em> weekday, email’s text (short or long), hour to send the email </em></em></li></ul><h3 id="previous-purchase-vs-response"><a href="#previous-purchase-vs-response" class="headerlink" title="previous purchase vs. response"></a>previous purchase vs. response</h3><pre class="line-numbers language-python"><code class="language-python">rslt_grpby_purchase <span class="token operator">=</span> emails<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">"purchases"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>count_result_ratio<span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span>rslt_grpby_purchase<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">plt<span class="token punctuation">.</span>rc<span class="token punctuation">(</span><span class="token string">'figure'</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rslt_grpby_purchase<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"received"</span><span class="token punctuation">,</span><span class="token string">"opened"</span><span class="token punctuation">,</span><span class="token string">'clicked'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">,</span>markersize<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"ratio"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.text.Text at 0x11bb87850&gt;</code></pre><p><img src="7_24_1.png" alt="png"></p><p>from above plot, we can know, <span style="color:orange;font-weight:bold;font-size:1.5em">the more items a certain user purchased previously, the more likely that user will open the email or click the link.</span></p><h3 id="user’s-country-vs-response"><a href="#user’s-country-vs-response" class="headerlink" title="user’s country vs. response"></a>user’s country vs. response</h3><pre class="line-numbers language-python"><code class="language-python">grp_count_plotbar<span class="token punctuation">(</span><span class="token string">'country'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>response</th>      <th>received</th>      <th>opened</th>      <th>clicked</th>      <th>total</th>    </tr>    <tr>      <th>country</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>ES</th>      <td>0.960570</td>      <td>0.031103</td>      <td>0.008327</td>      <td>9967.0</td>    </tr>    <tr>      <th>FR</th>      <td>0.958779</td>      <td>0.033217</td>      <td>0.008004</td>      <td>9995.0</td>    </tr>    <tr>      <th>UK</th>      <td>0.879282</td>      <td>0.096043</td>      <td>0.024675</td>      <td>19939.0</td>    </tr>    <tr>      <th>US</th>      <td>0.880481</td>      <td>0.095160</td>      <td>0.024360</td>      <td>60099.0</td>    </tr>  </tbody></table></div><p><img src="7_27_1.png" alt="png"></p><p>from above plots, we see that, ‘open percentage’ and ‘click percentage’ is much higher (nearly 3 times) in UK and US than in France and Spain. </p><p>this may be the <span style="color:orange;font-weight:bold;font-size:1.5em">translation issue. I guess the emails are written in English, which is unreadable to some non-English-speaking users, which cause the low ‘click ratio’ in non-English-speaking countries.</span></p><h3 id="email’s-version-vs-response"><a href="#email’s-version-vs-response" class="headerlink" title="email’s version vs. response"></a>email’s version vs. response</h3><pre class="line-numbers language-python"><code class="language-python">grp_count_plotbar<span class="token punctuation">(</span><span class="token string">'is_personal'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>response</th>      <th>received</th>      <th>opened</th>      <th>clicked</th>      <th>total</th>    </tr>    <tr>      <th>is_personal</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.920034</td>      <td>0.064829</td>      <td>0.015137</td>      <td>50209.0</td>    </tr>    <tr>      <th>1</th>      <td>0.871864</td>      <td>0.100842</td>      <td>0.027294</td>      <td>49791.0</td>    </tr>  </tbody></table></div><p><img src="7_30_1.png" alt="png"></p><p><span style="color:orange;font-weight:bold;font-size:1.5em">‘personalized email’ has higher ‘click ratio’ than ‘general email’</span>. this is very easy to understand. Having my name in the recipient, at least I am some kind of ‘important’ to the company, other than some ordinary people which the company don’t bother to remember his name.</p><h3 id="weekday-vs-response"><a href="#weekday-vs-response" class="headerlink" title="weekday vs. response"></a>weekday vs. response</h3><pre class="line-numbers language-python"><code class="language-python">grp_count_plotbar<span class="token punctuation">(</span><span class="token string">'weekday'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>response</th>      <th>received</th>      <th>opened</th>      <th>clicked</th>      <th>total</th>    </tr>    <tr>      <th>weekday</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>0.883590</td>      <td>0.093504</td>      <td>0.022906</td>      <td>14363.0</td>    </tr>    <tr>      <th>2</th>      <td>0.879092</td>      <td>0.096019</td>      <td>0.024889</td>      <td>14143.0</td>    </tr>    <tr>      <th>3</th>      <td>0.879296</td>      <td>0.093084</td>      <td>0.027620</td>      <td>14084.0</td>    </tr>    <tr>      <th>4</th>      <td>0.881348</td>      <td>0.094207</td>      <td>0.024445</td>      <td>14277.0</td>    </tr>    <tr>      <th>5</th>      <td>0.925019</td>      <td>0.060944</td>      <td>0.014037</td>      <td>14177.0</td>    </tr>    <tr>      <th>6</th>      <td>0.912005</td>      <td>0.070149</td>      <td>0.017846</td>      <td>14569.0</td>    </tr>    <tr>      <th>7</th>      <td>0.911448</td>      <td>0.071801</td>      <td>0.016751</td>      <td>14387.0</td>    </tr>  </tbody></table></div><p><img src="7_33_1.png" alt="png"></p><p><span style="color:orange;font-weight:bold;font-size:1.5em">Friday, Saturday, Sunday have obviously lower ‘click ratio’ than Monday to Thursday</span>. People normally don’t process emails during weekends.</p><h3 id="email-text-vs-response"><a href="#email-text-vs-response" class="headerlink" title="email text vs. response"></a>email text vs. response</h3><pre class="line-numbers language-python"><code class="language-python">grp_count_plotbar<span class="token punctuation">(</span><span class="token string">'paragraphs'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>response</th>      <th>received</th>      <th>opened</th>      <th>clicked</th>      <th>total</th>    </tr>    <tr>      <th>paragraphs</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2</th>      <td>0.883698</td>      <td>0.092430</td>      <td>0.023872</td>      <td>49724.0</td>    </tr>    <tr>      <th>4</th>      <td>0.908266</td>      <td>0.073196</td>      <td>0.018538</td>      <td>50276.0</td>    </tr>  </tbody></table></div><p><img src="7_36_1.png" alt="png"></p><h3 id="sending-hour-vs-response"><a href="#sending-hour-vs-response" class="headerlink" title="sending hour vs. response"></a>sending hour vs. response</h3><pre class="line-numbers language-python"><code class="language-python">grp_count_plotbar<span class="token punctuation">(</span><span class="token string">'hour'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>response</th>      <th>received</th>      <th>opened</th>      <th>clicked</th>      <th>total</th>    </tr>    <tr>      <th>hour</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>0.910840</td>      <td>0.071032</td>      <td>0.018128</td>      <td>2703.0</td>    </tr>    <tr>      <th>2</th>      <td>0.911589</td>      <td>0.072089</td>      <td>0.016322</td>      <td>3676.0</td>    </tr>    <tr>      <th>3</th>      <td>0.915184</td>      <td>0.065293</td>      <td>0.019523</td>      <td>4610.0</td>    </tr>    <tr>      <th>4</th>      <td>0.911419</td>      <td>0.072394</td>      <td>0.016186</td>      <td>5622.0</td>    </tr>    <tr>      <th>5</th>      <td>0.917417</td>      <td>0.064570</td>      <td>0.018013</td>      <td>6551.0</td>    </tr>    <tr>      <th>6</th>      <td>0.909176</td>      <td>0.073677</td>      <td>0.017147</td>      <td>7465.0</td>    </tr>    <tr>      <th>7</th>      <td>0.909434</td>      <td>0.072282</td>      <td>0.018284</td>      <td>8204.0</td>    </tr>    <tr>      <th>8</th>      <td>0.911407</td>      <td>0.069659</td>      <td>0.018933</td>      <td>8398.0</td>    </tr>    <tr>      <th>9</th>      <td>0.873725</td>      <td>0.100481</td>      <td>0.025794</td>      <td>8529.0</td>    </tr>    <tr>      <th>10</th>      <td>0.866993</td>      <td>0.104768</td>      <td>0.028240</td>      <td>8180.0</td>    </tr>    <tr>      <th>11</th>      <td>0.872645</td>      <td>0.100227</td>      <td>0.027128</td>      <td>7483.0</td>    </tr>    <tr>      <th>12</th>      <td>0.875230</td>      <td>0.099109</td>      <td>0.025661</td>      <td>6508.0</td>    </tr>    <tr>      <th>13</th>      <td>0.890521</td>      <td>0.089590</td>      <td>0.019889</td>      <td>5581.0</td>    </tr>    <tr>      <th>14</th>      <td>0.889520</td>      <td>0.089738</td>      <td>0.020742</td>      <td>4580.0</td>    </tr>    <tr>      <th>15</th>      <td>0.894074</td>      <td>0.081019</td>      <td>0.024907</td>      <td>3493.0</td>    </tr>    <tr>      <th>16</th>      <td>0.894165</td>      <td>0.082639</td>      <td>0.023197</td>      <td>2759.0</td>    </tr>    <tr>      <th>17</th>      <td>0.890650</td>      <td>0.090861</td>      <td>0.018489</td>      <td>1893.0</td>    </tr>    <tr>      <th>18</th>      <td>0.905700</td>      <td>0.078114</td>      <td>0.016186</td>      <td>1421.0</td>    </tr>    <tr>      <th>19</th>      <td>0.924862</td>      <td>0.058564</td>      <td>0.016575</td>      <td>905.0</td>    </tr>    <tr>      <th>20</th>      <td>0.911585</td>      <td>0.076220</td>      <td>0.012195</td>      <td>656.0</td>    </tr>    <tr>      <th>21</th>      <td>0.942466</td>      <td>0.049315</td>      <td>0.008219</td>      <td>365.0</td>    </tr>    <tr>      <th>22</th>      <td>0.931373</td>      <td>0.049020</td>      <td>0.019608</td>      <td>204.0</td>    </tr>    <tr>      <th>23</th>      <td>0.917241</td>      <td>0.041379</td>      <td>0.041379</td>      <td>145.0</td>    </tr>    <tr>      <th>24</th>      <td>0.840580</td>      <td>0.130435</td>      <td>0.028986</td>      <td>69.0</td>    </tr>  </tbody></table></div><p><img src="7_38_1.png" alt="png"></p><p>although from above plot, it seems ‘sending hour’ has some impact on ‘clicked ratio’. however, that may be caused by much fewer examples in late hours. also according to <a href="#Chi-square-test-and-F-test">statistical test</a>‘s result, I don’t think ‘sending hour’ is an important feature, and won’t include it in my model.</p><h2 id="Answer-question-4"><a href="#Answer-question-4" class="headerlink" title="Answer question 4"></a>Answer question 4</h2><p><span style="color:blue;font-weight:bold">Did you ﬁnd any interesting pattern on how the email campaign performed for diﬀerent segments of users? Explain.</span></p><p>from above explorary analysis, I can find some interesting patterns listed below:</p><ul><li><a href="#previous-purchase-vs.-response">The more item a certain user purchased in the past, the more likely that user will click the link</a></li><li><a href="#user's-country-vs.-response">Users from English-speaking coutries are more likely to click the link</a>, which may be caused by some translation issue.</li><li><a href="#email's-version-vs.-response">Personalized email is more likely to be opened and clicked</a></li><li><a href="#weekday-vs.-response">Emails sent at weekends is less likely to be opened and clicked</a></li><li><a href="#Chi-square-test-and-F-test">Sending hour and #Paragraphs are not very important features to affect click rate</a></li></ul><h2 id="Build-Predictive-Model"><a href="#Build-Predictive-Model" class="headerlink" title="Build Predictive Model"></a>Build Predictive Model</h2><p>In this section, I will build a model to predict whether a user will open the email and click the link inside it.</p><h3 id="Prepare-the-data"><a href="#Prepare-the-data" class="headerlink" title="Prepare the data"></a>Prepare the data</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">del</span> XX <span class="token operator">=</span> emails<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>X<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># get a feeling about current data</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>hour</th>      <th>weekday</th>      <th>country</th>      <th>purchases</th>      <th>paragraphs</th>      <th>is_personal</th>      <th>response</th>    </tr>    <tr>      <th>email_id</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>785135</th>      <td>10</td>      <td>4</td>      <td>UK</td>      <td>4</td>      <td>4</td>      <td>0</td>      <td>received</td>    </tr>    <tr>      <th>479664</th>      <td>4</td>      <td>5</td>      <td>UK</td>      <td>0</td>      <td>4</td>      <td>0</td>      <td>received</td>    </tr>    <tr>      <th>233005</th>      <td>19</td>      <td>5</td>      <td>US</td>      <td>10</td>      <td>4</td>      <td>0</td>      <td>received</td>    </tr>    <tr>      <th>285041</th>      <td>15</td>      <td>2</td>      <td>US</td>      <td>7</td>      <td>4</td>      <td>1</td>      <td>received</td>    </tr>    <tr>      <th>10411</th>      <td>2</td>      <td>5</td>      <td>UK</td>      <td>5</td>      <td>4</td>      <td>0</td>      <td>received</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># select original features</span><span class="token comment" spellcheck="true"># 'paragraphs' isn't an important feature, but I will include it, and see how RF say about it</span>X <span class="token operator">=</span> X<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"country"</span><span class="token punctuation">,</span><span class="token string">"purchases"</span><span class="token punctuation">,</span><span class="token string">"paragraphs"</span><span class="token punctuation">,</span><span class="token string">"is_personal"</span><span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token comment" spellcheck="true"># create new feature</span>X<span class="token punctuation">[</span><span class="token string">'is_weekend'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>emails<span class="token punctuation">.</span>weekday<span class="token operator">>=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># One-Hot-Encode 'country' feature</span>X <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>X<span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"country"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>drop_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># prepare the target</span>y <span class="token operator">=</span> <span class="token punctuation">(</span>emails<span class="token punctuation">.</span>response <span class="token operator">==</span> <span class="token string">'clicked'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">X<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># check the data</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>purchases</th>      <th>paragraphs</th>      <th>is_personal</th>      <th>is_weekend</th>      <th>country_FR</th>      <th>country_UK</th>      <th>country_US</th>    </tr>    <tr>      <th>email_id</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>231912</th>      <td>5</td>      <td>2</td>      <td>1</td>      <td>1</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>    </tr>    <tr>      <th>538951</th>      <td>5</td>      <td>2</td>      <td>1</td>      <td>0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>    </tr>    <tr>      <th>716309</th>      <td>5</td>      <td>2</td>      <td>1</td>      <td>0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>    </tr>    <tr>      <th>695780</th>      <td>6</td>      <td>4</td>      <td>1</td>      <td>1</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>    </tr>    <tr>      <th>586318</th>      <td>2</td>      <td>4</td>      <td>1</td>      <td>0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># split for training and testing</span>Xtrain<span class="token punctuation">,</span>Xtest<span class="token punctuation">,</span>ytrain<span class="token punctuation">,</span>ytest <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">,</span>test_size<span class="token operator">=</span><span class="token number">0.33333</span><span class="token punctuation">,</span>random_state <span class="token operator">=</span> seed<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span> <span class="token string">'Train set shape: {}, positive ratio={:.3f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>Xtrain<span class="token punctuation">.</span>shape<span class="token punctuation">,</span>ytrain<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'Test set shape: {}, positive ratio={:.3f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>Xtest<span class="token punctuation">.</span>shape<span class="token punctuation">,</span>ytest<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>Train set shape: (66667, 7), positive ratio=0.021Test set shape: (33333, 7), positive ratio=0.022</code></pre><h3 id="Train-the-model"><a href="#Train-the-model" class="headerlink" title="Train the model"></a>Train the model</h3><p>Due to time limitation, I will just train one GBM model.</p><p><span style="color:red;font-weight:bold;font-size:1.5em">If given sufficient time, I will apply fowllowing strategies to improve the model:</span></p><ul><li><span style="color:red">build multiple models, and ensemble them (average or stacking) to improve the prediction performance.</span></li><li><span style="color:red">try more hyper-parameters to find better ones.</span></li></ul><pre class="line-numbers language-python"><code class="language-python">train_matrix <span class="token operator">=</span> xgb<span class="token punctuation">.</span>DMatrix<span class="token punctuation">(</span>Xtrain<span class="token punctuation">,</span>ytrain<span class="token punctuation">)</span>test_matrix <span class="token operator">=</span> xgb<span class="token punctuation">.</span>DMatrix<span class="token punctuation">(</span>Xtest<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>params<span class="token punctuation">[</span><span class="token string">'objective'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'binary:logistic'</span>  <span class="token comment" spellcheck="true"># output probabilities</span>params<span class="token punctuation">[</span><span class="token string">'eval_metric'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'auc'</span>params<span class="token punctuation">[</span><span class="token string">"num_rounds"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">300</span>params<span class="token punctuation">[</span><span class="token string">"early_stopping_rounds"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token comment" spellcheck="true"># params['min_child_weight'] = 2</span>params<span class="token punctuation">[</span><span class="token string">'max_depth'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span>params<span class="token punctuation">[</span><span class="token string">'eta'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.1</span>params<span class="token punctuation">[</span><span class="token string">"subsample"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.8</span>params<span class="token punctuation">[</span><span class="token string">"colsample_bytree"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.8</span>cv_results <span class="token operator">=</span> xgb<span class="token punctuation">.</span>cv<span class="token punctuation">(</span>params<span class="token punctuation">,</span>train_matrix<span class="token punctuation">,</span>                    num_boost_round <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token string">"num_rounds"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    nfold <span class="token operator">=</span> params<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'nfold'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    metrics <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token string">'eval_metric'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    early_stopping_rounds <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token string">"early_stopping_rounds"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    verbose_eval <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span>                    seed <span class="token operator">=</span> seed<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[0]    train-auc:0.677493+0.00828721    test-auc:0.672627+0.00998874[1]    train-auc:0.697782+0.00882727    test-auc:0.696658+0.0206434[2]    train-auc:0.70463+0.00828662    test-auc:0.702561+0.0208773[3]    train-auc:0.711914+0.00409068    test-auc:0.710696+0.0228788[4]    train-auc:0.714488+0.00278646    test-auc:0.712043+0.0193185[5]    train-auc:0.717649+0.00424529    test-auc:0.714465+0.0207032[6]    train-auc:0.719344+0.00510737    test-auc:0.715544+0.0193956[7]    train-auc:0.724209+0.00365824    test-auc:0.719632+0.0165027[8]    train-auc:0.729045+0.00371847    test-auc:0.72386+0.0148701[9]    train-auc:0.730501+0.00375046    test-auc:0.724429+0.0142755[10]    train-auc:0.732467+0.0026696    test-auc:0.726337+0.0156743[11]    train-auc:0.735537+0.00246068    test-auc:0.729132+0.0162888[12]    train-auc:0.737188+0.00155158    test-auc:0.730848+0.0168706[13]    train-auc:0.738333+0.00183292    test-auc:0.73156+0.016002[14]    train-auc:0.740307+0.00175305    test-auc:0.732328+0.0157333[15]    train-auc:0.741514+0.00256378    test-auc:0.733169+0.0154183[16]    train-auc:0.742537+0.0021792    test-auc:0.733099+0.0151237[17]    train-auc:0.744702+0.00246548    test-auc:0.735111+0.0143654[18]    train-auc:0.744979+0.00216543    test-auc:0.735508+0.0144697[19]    train-auc:0.746026+0.00214697    test-auc:0.736038+0.0145[20]    train-auc:0.747204+0.00234766    test-auc:0.73719+0.0144764[21]    train-auc:0.748409+0.0027355    test-auc:0.737671+0.0133952[22]    train-auc:0.749618+0.00291407    test-auc:0.738383+0.0132849[23]    train-auc:0.750261+0.0030989    test-auc:0.739096+0.0125292[24]    train-auc:0.750758+0.00331821    test-auc:0.739578+0.0117813[25]    train-auc:0.751382+0.00282425    test-auc:0.739345+0.0120623[26]    train-auc:0.752415+0.00346696    test-auc:0.740137+0.010798[27]    train-auc:0.75338+0.00363762    test-auc:0.740929+0.0106986[28]    train-auc:0.754266+0.00323947    test-auc:0.741637+0.0107274[29]    train-auc:0.754915+0.00302772    test-auc:0.741759+0.0112564[30]    train-auc:0.755914+0.0028627    test-auc:0.742037+0.0113041[31]    train-auc:0.756318+0.0033501    test-auc:0.7425+0.0109369[32]    train-auc:0.756882+0.00331093    test-auc:0.74231+0.0109721[33]    train-auc:0.757279+0.00329185    test-auc:0.742169+0.011238[34]    train-auc:0.757727+0.00332192    test-auc:0.74215+0.0115881[35]    train-auc:0.758015+0.00318842    test-auc:0.742415+0.0118561[36]    train-auc:0.75832+0.00301207    test-auc:0.742148+0.0119087[37]    train-auc:0.758837+0.00294787    test-auc:0.742522+0.0116916[38]    train-auc:0.759134+0.00323002    test-auc:0.742998+0.0112852[39]    train-auc:0.759435+0.00314337    test-auc:0.743453+0.0113958[40]    train-auc:0.759625+0.00329416    test-auc:0.743103+0.0111658[41]    train-auc:0.760182+0.00309855    test-auc:0.743537+0.0108819[42]    train-auc:0.760478+0.00316004    test-auc:0.743372+0.011017[43]    train-auc:0.760531+0.00324614    test-auc:0.743372+0.0112937[44]    train-auc:0.760811+0.00309214    test-auc:0.743344+0.0112747[45]    train-auc:0.761199+0.00302771    test-auc:0.743541+0.0114938[46]    train-auc:0.761436+0.00302944    test-auc:0.743817+0.0118088[47]    train-auc:0.761543+0.00314059    test-auc:0.744085+0.0117599[48]    train-auc:0.761755+0.00306749    test-auc:0.744454+0.0118087[49]    train-auc:0.761926+0.00314977    test-auc:0.744501+0.0118104[50]    train-auc:0.762055+0.00309526    test-auc:0.744369+0.0119067[51]    train-auc:0.762271+0.00292601    test-auc:0.744522+0.0120931[52]    train-auc:0.762409+0.00301158    test-auc:0.744722+0.0119359[53]    train-auc:0.762461+0.00298882    test-auc:0.744397+0.0117605[54]    train-auc:0.762592+0.00298153    test-auc:0.744378+0.0119351[55]    train-auc:0.762895+0.00297585    test-auc:0.744472+0.0118786[56]    train-auc:0.762913+0.00296567    test-auc:0.744442+0.0117821[57]    train-auc:0.763132+0.00301844    test-auc:0.744228+0.0117882[58]    train-auc:0.763194+0.0029937    test-auc:0.744274+0.0116317[59]    train-auc:0.763377+0.00302593    test-auc:0.744082+0.011701[60]    train-auc:0.763542+0.00298474    test-auc:0.743952+0.0117522[61]    train-auc:0.763706+0.00296295    test-auc:0.743824+0.0117634[62]    train-auc:0.763734+0.00293909    test-auc:0.743966+0.0115998[63]    train-auc:0.763867+0.00296588    test-auc:0.743936+0.0116863[64]    train-auc:0.763986+0.0029833    test-auc:0.743937+0.0116513[65]    train-auc:0.764118+0.00302993    test-auc:0.743966+0.0117081[66]    train-auc:0.764343+0.00292955    test-auc:0.743819+0.01163[67]    train-auc:0.76442+0.00289046    test-auc:0.743918+0.0116983[68]    train-auc:0.76458+0.00284802    test-auc:0.744038+0.0113129[69]    train-auc:0.764717+0.00293263    test-auc:0.743734+0.0113893[70]    train-auc:0.764937+0.00289321    test-auc:0.743605+0.0114114[71]    train-auc:0.764969+0.00291843    test-auc:0.743335+0.0114451[72]    train-auc:0.765096+0.00293488    test-auc:0.743135+0.0116176[73]    train-auc:0.765168+0.00292989    test-auc:0.743155+0.0116143[74]    train-auc:0.765326+0.00296368    test-auc:0.743008+0.0114881[75]    train-auc:0.765443+0.00296921    test-auc:0.743122+0.0115193[76]    train-auc:0.765457+0.00295559    test-auc:0.743204+0.011375[77]    train-auc:0.765536+0.00298759    test-auc:0.74318+0.0113059[78]    train-auc:0.765807+0.00298637    test-auc:0.74306+0.0113673[79]    train-auc:0.765864+0.00301058    test-auc:0.743087+0.0114866[80]    train-auc:0.765975+0.00306381    test-auc:0.743178+0.011708[81]    train-auc:0.766011+0.00310261    test-auc:0.743395+0.0116618</code></pre><pre class="line-numbers language-python"><code class="language-python">n_best_trees <span class="token operator">=</span> cv_results<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"best number of trees: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>n_best_trees<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>best number of trees: 53</code></pre><pre class="line-numbers language-python"><code class="language-python">watchlist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>train_matrix<span class="token punctuation">,</span> <span class="token string">'train'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>gbt <span class="token operator">=</span> xgb<span class="token punctuation">.</span>train<span class="token punctuation">(</span>params<span class="token punctuation">,</span> train_matrix<span class="token punctuation">,</span> n_best_trees<span class="token punctuation">,</span>watchlist<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[0]    train-auc:0.702188[1]    train-auc:0.704781[2]    train-auc:0.71018[3]    train-auc:0.714805[4]    train-auc:0.715547[5]    train-auc:0.726005[6]    train-auc:0.725821[7]    train-auc:0.725022[8]    train-auc:0.7335[9]    train-auc:0.735223[10]    train-auc:0.736723[11]    train-auc:0.74205[12]    train-auc:0.742289[13]    train-auc:0.742862[14]    train-auc:0.743885[15]    train-auc:0.743699[16]    train-auc:0.742109[17]    train-auc:0.744295[18]    train-auc:0.746087[19]    train-auc:0.74534[20]    train-auc:0.743896[21]    train-auc:0.74842[22]    train-auc:0.7502[23]    train-auc:0.750863[24]    train-auc:0.750096[25]    train-auc:0.752116[26]    train-auc:0.752202[27]    train-auc:0.752974[28]    train-auc:0.752529[29]    train-auc:0.752424[30]    train-auc:0.753932[31]    train-auc:0.753449[32]    train-auc:0.754669[33]    train-auc:0.755053[34]    train-auc:0.755589[35]    train-auc:0.755971[36]    train-auc:0.757188[37]    train-auc:0.757529[38]    train-auc:0.757631[39]    train-auc:0.757584[40]    train-auc:0.757568[41]    train-auc:0.758382[42]    train-auc:0.758155[43]    train-auc:0.758213[44]    train-auc:0.758067[45]    train-auc:0.7586[46]    train-auc:0.758911[47]    train-auc:0.759027[48]    train-auc:0.759092[49]    train-auc:0.759198[50]    train-auc:0.759484[51]    train-auc:0.759869[52]    train-auc:0.760239</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># plot feature importances</span>xgb<span class="token punctuation">.</span>plot_importance<span class="token punctuation">(</span>gbt<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x11ffb4e90&gt;</code></pre><p><img src="7_54_1.png" alt="png"></p><p>above feature importance match the result from <a href="#Explore-the-data">explorary analysis</a>.</p><h3 id="Plot-ROC-curve-and-choose-better-probability-threshold"><a href="#Plot-ROC-curve-and-choose-better-probability-threshold" class="headerlink" title="Plot ROC curve and choose better probability threshold"></a>Plot ROC curve and choose better probability threshold</h3><p><span style="color:orange;font-size:1.5em">since the data is highly imbalanced (positive examples is only 2% of the total examples), if using default probability threshold (0.5), the model just classify every example as negative, so we need to plot the ROC curve and choose a better probability threshold.</span></p><p><span style="color:red;font-weight:bold">But ROC cannot be plot on either training set or test set. </span>so I split the original train set into ‘training’ and ‘validation’ sets, <span style="color:orange;font-weight:bold">re-train on ‘training set’ and plot ROC on ‘validation set’. </span></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span> <span class="token string">"n_best_trees={},xgboost parameters: "</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>n_best_trees<span class="token punctuation">)</span>params<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>n_best_trees=53,xgboost parameters: {&#39;colsample_bytree&#39;: 0.8, &#39;early_stopping_rounds&#39;: 30, &#39;eta&#39;: 0.1, &#39;eval_metric&#39;: &#39;auc&#39;, &#39;max_depth&#39;: 6, &#39;num_rounds&#39;: 300, &#39;objective&#39;: &#39;binary:logistic&#39;, &#39;subsample&#39;: 0.8}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># define a function, avoid pollute the current namespace</span><span class="token keyword">def</span> <span class="token function">validation_roc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Xtrain_only<span class="token punctuation">,</span>Xvalid<span class="token punctuation">,</span>ytrain_only<span class="token punctuation">,</span>yvalid <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>Xtrain<span class="token punctuation">,</span>ytrain<span class="token punctuation">,</span>test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span>random_state<span class="token operator">=</span>seed<span class="token punctuation">)</span>    train_only_matrix <span class="token operator">=</span> xgb<span class="token punctuation">.</span>DMatrix<span class="token punctuation">(</span>Xtrain_only<span class="token punctuation">,</span>ytrain_only<span class="token punctuation">)</span>    valid_matrix <span class="token operator">=</span> xgb<span class="token punctuation">.</span>DMatrix<span class="token punctuation">(</span>Xvalid<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># retrain on training set</span>    gbt_train_only <span class="token operator">=</span> xgb<span class="token punctuation">.</span>train<span class="token punctuation">(</span>params<span class="token punctuation">,</span> train_only_matrix<span class="token punctuation">,</span> n_best_trees<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># predict on validation set</span>    yvalid_probas <span class="token operator">=</span> gbt_train_only<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>valid_matrix<span class="token punctuation">,</span> ntree_limit<span class="token operator">=</span>n_best_trees<span class="token punctuation">)</span>    d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    d<span class="token punctuation">[</span><span class="token string">'FPR'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span><span class="token string">'TPR'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span><span class="token string">'Threshold'</span><span class="token punctuation">]</span> <span class="token operator">=</span> roc_curve<span class="token punctuation">(</span>yvalid<span class="token punctuation">,</span>yvalid_probas<span class="token punctuation">)</span>    <span class="token keyword">return</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">roc_results <span class="token operator">=</span> validation_roc<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">_ <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>roc_results<span class="token punctuation">.</span>FPR<span class="token punctuation">,</span>roc_results<span class="token punctuation">.</span>TPR<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"FPR"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'TPR'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.text.Text at 0x11abea2d0&gt;</code></pre><p><img src="7_60_1.png" alt="png"></p><p>according to above ROC curve and make a compromise between Precision and Recall, <span style="color:orange;font-weight:bold;font-size:1.5em">I decide to choose a threshold which makes TPR at about 0.6, then FPR will be about 0.3, which I think is acceptable.</span></p><pre class="line-numbers language-python"><code class="language-python">roc_results<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>roc_results<span class="token punctuation">.</span>TPR <span class="token operator">></span> <span class="token number">0.6</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>roc_results<span class="token punctuation">.</span>TPR <span class="token operator">&lt;</span> <span class="token number">0.65</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>FPR</th>      <th>TPR</th>      <th>Threshold</th>    </tr>  </thead>  <tbody>    <tr>      <th>192</th>      <td>0.274192</td>      <td>0.613861</td>      <td>0.030303</td>    </tr>    <tr>      <th>193</th>      <td>0.274729</td>      <td>0.613861</td>      <td>0.030261</td>    </tr>    <tr>      <th>194</th>      <td>0.274960</td>      <td>0.613861</td>      <td>0.030247</td>    </tr>    <tr>      <th>195</th>      <td>0.284245</td>      <td>0.617162</td>      <td>0.030224</td>    </tr>    <tr>      <th>196</th>      <td>0.288389</td>      <td>0.620462</td>      <td>0.029755</td>    </tr>    <tr>      <th>197</th>      <td>0.288619</td>      <td>0.620462</td>      <td>0.029587</td>    </tr>    <tr>      <th>198</th>      <td>0.290998</td>      <td>0.623762</td>      <td>0.029482</td>    </tr>    <tr>      <th>199</th>      <td>0.291229</td>      <td>0.623762</td>      <td>0.029463</td>    </tr>    <tr>      <th>200</th>      <td>0.291996</td>      <td>0.630363</td>      <td>0.029195</td>    </tr>    <tr>      <th>201</th>      <td>0.292380</td>      <td>0.630363</td>      <td>0.029118</td>    </tr>    <tr>      <th>202</th>      <td>0.294298</td>      <td>0.630363</td>      <td>0.028849</td>    </tr>    <tr>      <th>203</th>      <td>0.295296</td>      <td>0.630363</td>      <td>0.028624</td>    </tr>    <tr>      <th>204</th>      <td>0.296217</td>      <td>0.630363</td>      <td>0.028613</td>    </tr>    <tr>      <th>205</th>      <td>0.302663</td>      <td>0.630363</td>      <td>0.028445</td>    </tr>    <tr>      <th>206</th>      <td>0.303661</td>      <td>0.630363</td>      <td>0.028363</td>    </tr>    <tr>      <th>207</th>      <td>0.303737</td>      <td>0.630363</td>      <td>0.028344</td>    </tr>    <tr>      <th>208</th>      <td>0.304044</td>      <td>0.630363</td>      <td>0.028225</td>    </tr>    <tr>      <th>209</th>      <td>0.313944</td>      <td>0.643564</td>      <td>0.028042</td>    </tr>    <tr>      <th>210</th>      <td>0.314020</td>      <td>0.646865</td>      <td>0.028016</td>    </tr>    <tr>      <th>211</th>      <td>0.315709</td>      <td>0.646865</td>      <td>0.027908</td>    </tr>    <tr>      <th>212</th>      <td>0.316016</td>      <td>0.646865</td>      <td>0.027625</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># choose a threshold based on ROC</span><span class="token comment" spellcheck="true"># FPR=0.292380, TPR=0.630363, Threshold=0.029118</span>pos_prob_threshold <span class="token operator">=</span> <span class="token number">0.029118</span><span class="token keyword">def</span> <span class="token function">adjust_predict</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">:</span>    y_probas <span class="token operator">=</span> gbt<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> ntree_limit<span class="token operator">=</span>n_best_trees<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>y_probas <span class="token operator">></span> pos_prob_threshold<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">ytrain_pred <span class="token operator">=</span> adjust_predict<span class="token punctuation">(</span>train_matrix<span class="token punctuation">)</span><span class="token keyword">print</span> classification_report<span class="token punctuation">(</span>ytrain<span class="token punctuation">,</span>ytrain_pred<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>             precision    recall  f1-score   support          0       0.99      0.72      0.83     65265          1       0.05      0.65      0.09      1402avg / total       0.97      0.71      0.82     66667</code></pre><p>​    </p><pre class="line-numbers language-python"><code class="language-python">ytest_pred <span class="token operator">=</span> adjust_predict<span class="token punctuation">(</span>test_matrix<span class="token punctuation">)</span><span class="token keyword">print</span> classification_report<span class="token punctuation">(</span>ytest<span class="token punctuation">,</span>ytest_pred<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>             precision    recall  f1-score   support          0       0.99      0.71      0.83     32616          1       0.04      0.60      0.08       717avg / total       0.97      0.71      0.81     33333</code></pre><p>​    </p><p><a id="test-precision-recall"></a><span style="color:orange;font-weight:bold;font-size:1.5em">more accurate Precision and Recall</span></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span> <span class="token string">"test precision: {:.2f}%"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>precision_score<span class="token punctuation">(</span>ytest<span class="token punctuation">,</span>ytest_pred<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"test recall: {:.2f}%"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>recall_score<span class="token punctuation">(</span>ytest<span class="token punctuation">,</span>ytest_pred<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>test precision: 4.35%test recall: 60.11%</code></pre><pre class="line-numbers language-python"><code class="language-python">gbt<span class="token punctuation">.</span>save_model<span class="token punctuation">(</span><span class="token string">'gbt.model'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Answer-question-2-and-question-3’s-first-part"><a href="#Answer-question-2-and-question-3’s-first-part" class="headerlink" title="Answer question 2 and question 3’s first part"></a>Answer question 2 and question 3’s first part</h2><ul><li><span style="color:blue;font-weight:bold">The VP of marketing thinks that it is stupid to send emails to a random subset and in a random way. Based on all the information you have about the emails that were sent, can you build a model to optimize in future email campaigns to maximize the probability of users clicking on the link inside the email?</span></li><li><span style="color:blue;font-weight:bold">By how much do you think your model would improve click through rate ( deﬁned as # of users who click on the link / total users who received the email). How would you test that?</span></li></ul><p>I have build a Gradient Boosting Tree model in previous section which predicts whether a user will click the link or not. Then the new email campaign strategy will be: <span style="color:orange;font-weight:bold;font-size:1.5em">only send email to users which my GBM model predicts positive.</span></p><pre class="line-numbers language-python"><code class="language-python">n_emails_old_sent <span class="token operator">=</span> ytest_pred<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>n_emails_new_sent <span class="token operator">=</span> ytest_pred<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span>saving_percentage <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">-</span> n_emails_new_sent <span class="token operator">*</span> <span class="token number">100.0</span><span class="token operator">/</span>n_emails_old_sentpd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'#emails sent in old way'</span><span class="token punctuation">:</span> n_emails_old_sent<span class="token punctuation">,</span>           <span class="token string">'#emails sent in new way'</span><span class="token punctuation">:</span> n_emails_new_sent<span class="token punctuation">,</span>           <span class="token string">'saving percentage (%)'</span><span class="token punctuation">:</span> saving_percentage<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>#emails sent in new way     9904.000000#emails sent in old way    33333.000000saving percentage (%)         70.287703dtype: float64</code></pre><p>according to its <a href="#test-precision-recall">predictive result on test set</a> </p><ul><li><span style="color:orange;">my model only need to send 30% of the old email amount, saving 70% amount.</span></li><li><span style="color:orange;">my model will cover 60% of valued users which will click the link. </span></li><li><span style="color:orange;">4.35% of the receiver will open email and click the link. </span> compare with <a href="#Answer-question-1">old strategy</a>, whose click rate is <em><em> 2.12% </em></em>, <span style="color:red;">my new strategy can double the click rate</span>.</li></ul><h2 id="Answer-question-3’s-second-part"><a href="#Answer-question-3’s-second-part" class="headerlink" title="Answer question 3’s second part"></a>Answer question 3’s second part</h2><p><span style="color:blue;font-weight:bold">By how much do you think your model would improve click through rate ( deﬁned as # of users who click on the link / total users who received the email). How would you test that?</span></p><p>To test my conclusion, we need to perform a A/B test:</p><ol><li>randomly assign users to two groups, Control group and Experiment group.</li><li>in Control group, still use the old email-campaign strategy, i.e., just send emails to all users in Control group.</li><li>in Experiment group, use my model to predict whether the user will click the link or not. and only send emails to those users whose predictive result is positive.</li><li>then we preform a one-tail unpaired t-test to test whether Experiement group’s population proportion is higher than Control group’s population proportion.</li></ol><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Take home data challenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python_Take home challenge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-Funnel Analysis</title>
      <link href="/2018/01/31/6-price-test/"/>
      <url>/2018/01/31/6-price-test/</url>
      
        <content type="html"><![CDATA[<p>Company XYZ sells a software for 39. Since revenue has been ﬂat for some time, the VP of Product has decided to run a test increasing the price. She hopes that this would increase revenue. In the experiment, 66% of the users have seen the old price (39), while a random sample of 33% users a higher price (59).</p><p>The test has been running for some time and the VP of Product is interested in understanding how it went and whether it would make sense to increase the price for all the users.</p><p>Especially he asked you the following questions:</p><ul><li>Should the company sell its software for 39 or 59?</li><li>The VP of Product is interested in having a holistic view into user behavior, especially focusing on actionable insights that might increase conversion rate. What are your main ﬁndings looking at the data?</li><li><strong>[ Bonus ]</strong> The VP of Product feels that the test has been running for too long and he should have been able to get statistically signiﬁcant results in a shorter time. Do you agree with her intuition? After how many days you would have stopped the test? Please, explain why.</li></ul><h1 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h1><ul><li><a href="#Load-the-data">Load the data</a></li><li><a href="#Check-whether-test-and-control-group-is-randomly-splitted?">Check whether test/control group is randomly splitted?</a></li><li><a href="#Answer-question-1">Answer question 1</a></li><li><a href="#Answer-question-2">Answer question 2</a><ul><li><a href="#Chi-Square-test">Chi-Square test</a></li><li><a href="#How-price-affects-conversion?">How price affects conversion?</a></li><li><a href="#How-OS-affects-conversion?">How OS affects conversion?</a></li><li><a href="#Model-by-Decision-Tree">Model by Decision Tree</a></li><li><a href="#Actionable-Insights"><strong>Actionable-Insights</strong></a></li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> scipy<span class="token punctuation">.</span>stats <span class="token keyword">as</span> ss<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoder<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_selection <span class="token keyword">import</span> chi2<span class="token punctuation">,</span>f_classif<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifier<span class="token punctuation">,</span>export_graphviz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>style<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">'ggplot'</span><span class="token punctuation">)</span><span class="token operator">%</span>matplotlib inlineseed <span class="token operator">=</span> <span class="token number">999</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Load-the-data"><a href="#Load-the-data" class="headerlink" title="Load the data"></a>Load the data</h2><pre class="line-numbers language-python"><code class="language-python">testdata <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"test_results.csv"</span><span class="token punctuation">,</span>index_col<span class="token operator">=</span><span class="token string">"user_id"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># users contains [id,city,country,lat,long]</span><span class="token comment" spellcheck="true"># and all 'country' column is USA</span><span class="token comment" spellcheck="true"># I don't think users can provide useful information to the problems, so just ignore user_table.csv</span><span class="token comment" spellcheck="true"># users = pd.read_csv("user_table.csv")</span><span class="token comment" spellcheck="true"># some time has 60 seconds/minute, which cannot be processed by to_datetime</span><span class="token comment" spellcheck="true"># if given more time, I will fix this incorrect format</span><span class="token comment" spellcheck="true"># testdata["timestamp"] = pd.to_datetime(testdata.timestamp)</span><span class="token comment" spellcheck="true"># rename to short names, make it easier to display</span>testdata<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'operative_system'</span><span class="token punctuation">:</span><span class="token string">'OS'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">testdata<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>timestamp</th>      <th>source</th>      <th>device</th>      <th>OS</th>      <th>test</th>      <th>price</th>      <th>converted</th>    </tr>    <tr>      <th>user_id</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>604839</th>      <td>2015-05-08 03:38:34</td>      <td>ads_facebook</td>      <td>mobile</td>      <td>iOS</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>624057</th>      <td>2015-05-10 21:08:46</td>      <td>seo-google</td>      <td>mobile</td>      <td>android</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>317970</th>      <td>2015-04-04 15:01:23</td>      <td>ads-bing</td>      <td>mobile</td>      <td>android</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>685636</th>      <td>2015-05-07 07:26:01</td>      <td>direct_traffic</td>      <td>mobile</td>      <td>iOS</td>      <td>1</td>      <td>59</td>      <td>0</td>    </tr>    <tr>      <th>820854</th>      <td>2015-05-24 11:04:40</td>      <td>ads_facebook</td>      <td>web</td>      <td>mac</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>  </tbody></table></div><h2 id="Check-whether-test-and-control-group-is-randomly-splitted"><a href="#Check-whether-test-and-control-group-is-randomly-splitted" class="headerlink" title="Check whether test and control group is randomly splitted?"></a>Check whether test and control group is randomly splitted?</h2><pre class="line-numbers language-python"><code class="language-python">X <span class="token operator">=</span> testdata<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">del</span> X<span class="token punctuation">[</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># to use sklearn to check feature importance, we must convert string values to numbers</span>src_label_encoder <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>dev_label_encoder <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>os_label_encoder <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>X<span class="token punctuation">[</span><span class="token string">"source"</span><span class="token punctuation">]</span> <span class="token operator">=</span> src_label_encoder<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>testdata<span class="token punctuation">.</span>source<span class="token punctuation">)</span>X<span class="token punctuation">[</span><span class="token string">"device"</span><span class="token punctuation">]</span> <span class="token operator">=</span> dev_label_encoder<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>testdata<span class="token punctuation">.</span>device<span class="token punctuation">)</span>X<span class="token punctuation">[</span><span class="token string">"OS"</span><span class="token punctuation">]</span> <span class="token operator">=</span> os_label_encoder<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>testdata<span class="token punctuation">.</span>OS<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">X<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>source</th>      <th>device</th>      <th>OS</th>      <th>test</th>      <th>price</th>      <th>converted</th>    </tr>    <tr>      <th>user_id</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>604839</th>      <td>3</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>624057</th>      <td>8</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>317970</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>685636</th>      <td>5</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>59</td>      <td>0</td>    </tr>    <tr>      <th>820854</th>      <td>3</td>      <td>1</td>      <td>3</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>  </tbody></table></div><p>run <em><em> Chi-Square test </em></em> to see which factor impact the splitting between test/control group</p><pre class="line-numbers language-python"><code class="language-python">colnames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"source"</span><span class="token punctuation">,</span><span class="token string">"device"</span><span class="token punctuation">,</span><span class="token string">"OS"</span><span class="token punctuation">]</span>ch2values<span class="token punctuation">,</span>pvalues <span class="token operator">=</span> chi2<span class="token punctuation">(</span>X<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>colnames<span class="token punctuation">]</span><span class="token punctuation">,</span>X<span class="token punctuation">[</span><span class="token string">"test"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'chi2_value'</span><span class="token punctuation">:</span>ch2values<span class="token punctuation">,</span><span class="token string">'pvalue'</span><span class="token punctuation">:</span>pvalues<span class="token punctuation">}</span><span class="token punctuation">,</span>index <span class="token operator">=</span> colnames<span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'pvalue'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>chi2_value</th>      <th>pvalue</th>    </tr>  </thead>  <tbody>    <tr>      <th>OS</th>      <td>83.085986</td>      <td>7.856065e-20</td>    </tr>    <tr>      <th>device</th>      <td>44.366335</td>      <td>2.723301e-11</td>    </tr>    <tr>      <th>source</th>      <td>0.924742</td>      <td>3.362329e-01</td>    </tr>  </tbody></table></div><p>from above result, we know that the splitting between test/control groups aren’t random. OS and device has great impact on the split.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">calc_ratios</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    d <span class="token operator">=</span> s<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    d<span class="token punctuation">[</span><span class="token string">'total'</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> dtest_ctrl_by_os <span class="token operator">=</span> testdata<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'OS'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>calc_ratios<span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span>test_ctrl_by_os<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>total</th>    </tr>    <tr>      <th>OS</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>android</th>      <td>0.643358</td>      <td>0.356642</td>      <td>74935.0</td>    </tr>    <tr>      <th>iOS</th>      <td>0.647934</td>      <td>0.352066</td>      <td>95465.0</td>    </tr>    <tr>      <th>linux</th>      <td>0.533736</td>      <td>0.466264</td>      <td>4135.0</td>    </tr>    <tr>      <th>mac</th>      <td>0.652422</td>      <td>0.347578</td>      <td>25085.0</td>    </tr>    <tr>      <th>other</th>      <td>0.647865</td>      <td>0.352135</td>      <td>16204.0</td>    </tr>    <tr>      <th>windows</th>      <td>0.629764</td>      <td>0.370236</td>      <td>100976.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python">test_ctrl_by_os<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1198e9e10&gt;</code></pre><p><img src="6_14_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">os_by_test_ctrl <span class="token operator">=</span> testdata<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'OS'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span>os_by_test_ctrl <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>windows</th>      <th>iOS</th>      <th>android</th>      <th>mac</th>      <th>other</th>      <th>linux</th>    </tr>    <tr>      <th>test</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.313678</td>      <td>0.305115</td>      <td>0.237807</td>      <td>0.080729</td>      <td>0.051784</td>      <td>0.010887</td>    </tr>    <tr>      <th>1</th>      <td>0.327729</td>      <td>0.294636</td>      <td>0.234280</td>      <td>0.076434</td>      <td>0.050021</td>      <td>0.016901</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python">os_by_test_ctrl<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x119e8f090&gt;</code></pre><p><img src="6_16_1.png" alt="png"></p><p>we can see that <span style="color:red;font-weight:bold">OS distribution in test/control groups are very different</span>.</p><p>the experiment claim that ‘66% of the users have seen the old price (39), while a random sample of 33% users a higher price (59).’, but <a id="linux_imbalance"></a><span style="color:red;font-weight:bold">users from Linux don’t obey such rule, but 53% go to control group, 47% go to test group</span>.</p><h2 id="Answer-question-1"><a href="#Answer-question-1" class="headerlink" title="Answer question 1"></a>Answer question 1</h2><p>Should the company sell its software for 39 or 59?</p><pre class="line-numbers language-python"><code class="language-python">revenues <span class="token operator">=</span> testdata<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> df<span class="token punctuation">:</span> df<span class="token punctuation">.</span>price <span class="token operator">*</span> df<span class="token punctuation">.</span>converted<span class="token punctuation">)</span>ctrl_revenues <span class="token operator">=</span> revenues<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>test_revenues <span class="token operator">=</span> revenues<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">group_statistics</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'n_users'</span><span class="token punctuation">:</span> df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token string">'convert_rate'</span><span class="token punctuation">:</span> df<span class="token punctuation">.</span>converted<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                       <span class="token string">'mean_revenue'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>df<span class="token punctuation">.</span>price <span class="token operator">*</span> df<span class="token punctuation">.</span>converted<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>testdata<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>group_statistics<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>convert_rate</th>      <th>mean_revenue</th>      <th>n_users</th>    </tr>    <tr>      <th>test</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.019904</td>      <td>0.776734</td>      <td>202727.0</td>    </tr>    <tr>      <th>1</th>      <td>0.015543</td>      <td>0.916843</td>      <td>114073.0</td>    </tr>  </tbody></table></div><p>we are going to perform a t-test to test whether the test group’s average revenue is higher than control group’s average revenue</p><ul><li>H0: test group’s average revenue equal to control group’s average revenue</li><li>HA: test group’s average revenue is higher than control group’s average revenue</li></ul><pre class="line-numbers language-python"><code class="language-python">ttest_result <span class="token operator">=</span> ss<span class="token punctuation">.</span>ttest_ind<span class="token punctuation">(</span>test_revenues<span class="token punctuation">,</span>ctrl_revenues<span class="token punctuation">,</span>equal_var<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ttest_ind is a two tailed</span><span class="token comment" spellcheck="true"># since our HA is test_mean > ctrl_mean, so we need to divide by 2</span>ttest_result<span class="token punctuation">.</span>pvalue<span class="token operator">/</span><span class="token number">2</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>7.7037493023391909e-09</code></pre><p>since the p-value is much smaller than 0.05 threshold, so we reject H0, and accept HA, that is, test group’s average revenue is significantly higher than control group’s average revenue.</p><p>but due to <a href="#linux_imbalance">OS distribution aren’t the same between test/control groups</a>, price isn’t the only difference between test/control groups, so we cannot contribute the increase in average revenue to price.</p><p>the experiment design fails, I cannot answer decide whether we can sell software to all users in 59 dollars. I suggest </p><ol><li>find the reason why linux users have different representation ratio than other OS.</li><li>then run the experiment again, make sure price is the only difference between test and control group</li><li>then run t-test again, to see whether the average revenue is significantly improved.</li><li>then I can draw the conclusion.</li></ol><h2 id="Answer-question-2"><a href="#Answer-question-2" class="headerlink" title="Answer question 2"></a>Answer question 2</h2><p>The VP of Product is interested in having a holistic view into user behavior, especially focusing on actionable insights that might increase conversion rate. What are your main ﬁndings looking at the data?</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># X is the data after being transformed by LabelEncoder</span>X<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># glance the data</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>source</th>      <th>device</th>      <th>OS</th>      <th>test</th>      <th>price</th>      <th>converted</th>    </tr>    <tr>      <th>user_id</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>17427</th>      <td>3</td>      <td>1</td>      <td>5</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>687787</th>      <td>5</td>      <td>1</td>      <td>5</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>618863</th>      <td>1</td>      <td>1</td>      <td>3</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>154636</th>      <td>6</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>832372</th>      <td>3</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>59</td>      <td>0</td>    </tr>  </tbody></table></div><h3 id="Chi-Square-test"><a href="#Chi-Square-test" class="headerlink" title="Chi-Square test"></a>Chi-Square test</h3><p>I first run <em><em> Chi-Square test </em></em> to see which feature greatly impact converted or not</p><pre class="line-numbers language-python"><code class="language-python">colnames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"source"</span><span class="token punctuation">,</span><span class="token string">"device"</span><span class="token punctuation">,</span><span class="token string">"OS"</span><span class="token punctuation">,</span><span class="token string">'price'</span><span class="token punctuation">]</span>ch2values<span class="token punctuation">,</span>pvalues <span class="token operator">=</span> chi2<span class="token punctuation">(</span>X<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>colnames<span class="token punctuation">]</span><span class="token punctuation">,</span>X<span class="token punctuation">[</span><span class="token string">"converted"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'chi2_value'</span><span class="token punctuation">:</span>ch2values<span class="token punctuation">,</span><span class="token string">'pvalue'</span><span class="token punctuation">:</span>pvalues<span class="token punctuation">}</span><span class="token punctuation">,</span>index <span class="token operator">=</span> colnames<span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'pvalue'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>chi2_value</th>      <th>pvalue</th>    </tr>  </thead>  <tbody>    <tr>      <th>price</th>      <td>150.992849</td>      <td>1.051844e-34</td>    </tr>    <tr>      <th>OS</th>      <td>7.642955</td>      <td>5.699447e-03</td>    </tr>    <tr>      <th>source</th>      <td>2.373391</td>      <td>1.234187e-01</td>    </tr>    <tr>      <th>device</th>      <td>0.729490</td>      <td>3.930485e-01</td>    </tr>  </tbody></table></div><p>Chi-Square test tells us, </p><ul><li><span style="color:orange;font-weight:bold;font-size:1.2em">Price and OS are two main factor which impact converted or not</span>. </li><li><span style="color:orange;font-weight:bold;font-size:1.2em">Source and Device don’t impact conversion rate that much.</span></li></ul><h3 id="How-price-affects-conversion"><a href="#How-price-affects-conversion" class="headerlink" title="How price affects conversion?"></a>How price affects conversion?</h3><pre class="line-numbers language-python"><code class="language-python">converted_by_price<span class="token operator">=</span> testdata<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'converted'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span>converted_by_price<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>    </tr>    <tr>      <th>price</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>39</th>      <td>0.980111</td>      <td>0.019889</td>    </tr>    <tr>      <th>59</th>      <td>0.984430</td>      <td>0.015570</td>    </tr>  </tbody></table></div><p><span style="color:orange;font-weight:bold;font-size:1.2em">Users see 59 dollar has lower conversion rate than users see 39 dollars.</span></p><h3 id="How-OS-affects-conversion"><a href="#How-OS-affects-conversion" class="headerlink" title="How OS affects conversion?"></a>How OS affects conversion?</h3><pre class="line-numbers language-python"><code class="language-python">converted_by_os <span class="token operator">=</span> testdata<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">"OS"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'converted'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span>converted_by_os<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>    </tr>    <tr>      <th>OS</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>mac</th>      <td>0.976002</td>      <td>0.023998</td>    </tr>    <tr>      <th>iOS</th>      <td>0.977678</td>      <td>0.022322</td>    </tr>    <tr>      <th>windows</th>      <td>0.983045</td>      <td>0.016955</td>    </tr>    <tr>      <th>android</th>      <td>0.985067</td>      <td>0.014933</td>    </tr>    <tr>      <th>other</th>      <td>0.987040</td>      <td>0.012960</td>    </tr>    <tr>      <th>linux</th>      <td>0.991778</td>      <td>0.008222</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python">os_by_converted <span class="token operator">=</span> testdata<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">"converted"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'OS'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span>os_by_converted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>android</th>      <th>iOS</th>      <th>linux</th>      <th>mac</th>      <th>other</th>      <th>windows</th>    </tr>    <tr>      <th>converted</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.237357</td>      <td>0.300117</td>      <td>0.013187</td>      <td>0.078725</td>      <td>0.051429</td>      <td>0.319185</td>    </tr>    <tr>      <th>1</th>      <td>0.192665</td>      <td>0.366908</td>      <td>0.005854</td>      <td>0.103650</td>      <td>0.036157</td>      <td>0.294766</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python">os_by_converted<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x11b253f10&gt;</code></pre><p><img src="6_files/6_33_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">os_by_converted<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1250d40d0&gt;</code></pre><p><img src="6_34_1.png" alt="png"></p><p>from above result, we can see</p><ul><li><span style="color:orange;font-size:1.5em">Mac and iOS users have higher conversion rate than users from other OS.</span></li><li><span style="color:orange;font-size:1.5em">Linux users have lower conversion rate than users from other OS.</span></li></ul><h3 id="Model-by-Decision-Tree"><a href="#Model-by-Decision-Tree" class="headerlink" title="Model by Decision Tree"></a>Model by Decision Tree</h3><p>I will build a Decision Tree to get feature importance. Since the question is asking about “actionable insight” other than a model which precisely predict converted or not, so I will just fit a shallow Decision Tree on all the data, without giving out model’s performance on test set.</p><pre class="line-numbers language-python"><code class="language-python">testdata<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># glance the data</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>timestamp</th>      <th>source</th>      <th>device</th>      <th>OS</th>      <th>test</th>      <th>price</th>      <th>converted</th>    </tr>    <tr>      <th>user_id</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>840498</th>      <td>2015-03-23 19:22:17</td>      <td>seo-google</td>      <td>mobile</td>      <td>other</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>839879</th>      <td>2015-05-05 09:59:57</td>      <td>direct_traffic</td>      <td>mobile</td>      <td>iOS</td>      <td>1</td>      <td>59</td>      <td>0</td>    </tr>    <tr>      <th>468013</th>      <td>2015-03-29 23:52:11</td>      <td>direct_traffic</td>      <td>mobile</td>      <td>iOS</td>      <td>1</td>      <td>59</td>      <td>0</td>    </tr>    <tr>      <th>377372</th>      <td>2015-04-05 07:12:46</td>      <td>seo-google</td>      <td>mobile</td>      <td>android</td>      <td>1</td>      <td>59</td>      <td>0</td>    </tr>    <tr>      <th>713838</th>      <td>2015-03-10 13:53:46</td>      <td>seo-other</td>      <td>web</td>      <td>windows</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>140135</th>      <td>2015-03-08 10:12:03</td>      <td>ads_other</td>      <td>mobile</td>      <td>iOS</td>      <td>1</td>      <td>59</td>      <td>0</td>    </tr>    <tr>      <th>198679</th>      <td>2015-04-11 07:05:34</td>      <td>seo-google</td>      <td>web</td>      <td>windows</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>547268</th>      <td>2015-03-14 14:04:22</td>      <td>ads-google</td>      <td>mobile</td>      <td>iOS</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>334905</th>      <td>2015-05-28 10:14:47</td>      <td>ads-bing</td>      <td>web</td>      <td>mac</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>    <tr>      <th>813274</th>      <td>2015-03-09 19:43:28</td>      <td>friend_referral</td>      <td>web</td>      <td>windows</td>      <td>0</td>      <td>39</td>      <td>0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python">X <span class="token operator">=</span> testdata<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">del</span> X<span class="token punctuation">[</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span><span class="token keyword">del</span> X<span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">X<span class="token punctuation">.</span>source<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>direct_traffic     60357ads-google         59379ads_facebook       53396ads_other          29876seo-google         23175ads-bing           22873seo_facebook       21205friend_referral    20695seo-other           9260ads-yahoo           7583seo-yahoo           6848seo-bing            2153Name: source, dtype: int64</code></pre><pre class="line-numbers language-python"><code class="language-python">X<span class="token punctuation">.</span>device<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>mobile    186471web       130329Name: device, dtype: int64</code></pre><pre class="line-numbers language-python"><code class="language-python">X<span class="token punctuation">.</span>OS<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>windows    100976iOS         95465android     74935mac         25085other       16204linux        4135Name: OS, dtype: int64</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># One-Hot-Encoding on categorical features</span>X <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># a categorical feature of K unique values, only need K-1 vectors</span><span class="token comment" spellcheck="true"># I don't use 'drop_first' parameter in get_dummies, since it cannot specify which level to drop</span><span class="token keyword">del</span> X<span class="token punctuation">[</span><span class="token string">'source_ads_other'</span><span class="token punctuation">]</span><span class="token keyword">del</span> X<span class="token punctuation">[</span><span class="token string">'device_web'</span><span class="token punctuation">]</span><span class="token keyword">del</span> X<span class="token punctuation">[</span><span class="token string">'OS_other'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">X<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># glance the data</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>price</th>      <th>converted</th>      <th>source_ads-bing</th>      <th>source_ads-google</th>      <th>source_ads-yahoo</th>      <th>source_ads_facebook</th>      <th>source_direct_traffic</th>      <th>source_friend_referral</th>      <th>source_seo-bing</th>      <th>source_seo-google</th>      <th>source_seo-other</th>      <th>source_seo-yahoo</th>      <th>source_seo_facebook</th>      <th>device_mobile</th>      <th>OS_android</th>      <th>OS_iOS</th>      <th>OS_linux</th>      <th>OS_mac</th>      <th>OS_windows</th>    </tr>    <tr>      <th>user_id</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>17427</th>      <td>39</td>      <td>0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>    </tr>    <tr>      <th>687787</th>      <td>39</td>      <td>0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>    </tr>    <tr>      <th>618863</th>      <td>39</td>      <td>0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>    </tr>    <tr>      <th>154636</th>      <td>39</td>      <td>0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>    </tr>    <tr>      <th>832372</th>      <td>59</td>      <td>0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python">Xtrain <span class="token operator">=</span> X<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>X<span class="token punctuation">.</span>columns <span class="token operator">!=</span> <span class="token string">'converted'</span><span class="token punctuation">]</span>ytrain <span class="token operator">=</span> X<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token string">'converted'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">Xtrain<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># glance the data</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>price</th>      <th>source_ads-bing</th>      <th>source_ads-google</th>      <th>source_ads-yahoo</th>      <th>source_ads_facebook</th>      <th>source_direct_traffic</th>      <th>source_friend_referral</th>      <th>source_seo-bing</th>      <th>source_seo-google</th>      <th>source_seo-other</th>      <th>source_seo-yahoo</th>      <th>source_seo_facebook</th>      <th>device_mobile</th>      <th>OS_android</th>      <th>OS_iOS</th>      <th>OS_linux</th>      <th>OS_mac</th>      <th>OS_windows</th>    </tr>    <tr>      <th>user_id</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>604839</th>      <td>39</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>    </tr>    <tr>      <th>624057</th>      <td>39</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>    </tr>    <tr>      <th>317970</th>      <td>39</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>    </tr>    <tr>      <th>685636</th>      <td>59</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>    </tr>    <tr>      <th>820854</th>      <td>39</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python">dt <span class="token operator">=</span> DecisionTreeClassifier<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>dt<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>Xtrain<span class="token punctuation">,</span>ytrain<span class="token punctuation">)</span>export_graphviz<span class="token punctuation">(</span>dt<span class="token punctuation">,</span>feature_names<span class="token operator">=</span>Xtrain<span class="token punctuation">.</span>columns<span class="token punctuation">,</span>proportion<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>leaves_parallel<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="tree.png"></p><p>from above tree plot, we can see that, to reach the leaf node with highest conversion rate (the third leaf from right with conversion rate=0.05), the path is:</p><ol><li>source ‘friend_referral’ = true</li><li>price &lt; 49, i.e., price = 39</li><li>OS ‘iOS’= true</li></ol><pre class="line-numbers language-python"><code class="language-python">pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>dt<span class="token punctuation">.</span>feature_importances_<span class="token punctuation">,</span>index <span class="token operator">=</span> Xtrain<span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>source_friend_referral    0.663549OS_iOS                    0.143231OS_mac                    0.107014source_ads-google         0.043922price                     0.022918OS_linux                  0.019366source_ads-bing           0.000000source_ads-yahoo          0.000000source_ads_facebook       0.000000source_direct_traffic     0.000000OS_windows                0.000000source_seo-bing           0.000000source_seo-other          0.000000source_seo-yahoo          0.000000source_seo_facebook       0.000000device_mobile             0.000000OS_android                0.000000source_seo-google         0.000000dtype: float64</code></pre><h3 id="Actionable-Insights"><a href="#Actionable-Insights" class="headerlink" title="Actionable Insights"></a>Actionable Insights</h3><ul><li>friend_referral, Apple user (MAC or iOS), low price are three great positive factors which improve the conversion rate</li><li>if we want to increase the price, which impacts negatively on conversion rate, we must compensate on the other two factors<ul><li>lauch special marketing program targeted to Apple users (MAC or iOS users)</li><li>run some program which rewards user which can invite his/her friend to use our software</li></ul></li><li>Linux users don’t like our software as much as users on other OS. Development team should find out the reason. For example, is there any incompatibility issue on Linux?</li></ul><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Take home data challenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python_Take home challenge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-Employee_rentention</title>
      <link href="/2018/01/24/3-employee-rentention/"/>
      <url>/2018/01/24/3-employee-rentention/</url>
      
        <content type="html"><![CDATA[<p>In this challenge, you have a dataset with info about the employees and have to predict when employees are going to quit by understanding the main drivers of employee churn.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span>  warningswarnings<span class="token punctuation">.</span>simplefilter<span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> graphviz<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> tree<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifier<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoder<span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'employee_retention.csv'</span><span class="token punctuation">,</span> parse_dates<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'join_date'</span><span class="token punctuation">,</span> <span class="token string">'quit_date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>employee_id</th>      <th>company_id</th>      <th>dept</th>      <th>seniority</th>      <th>salary</th>      <th>join_date</th>      <th>quit_date</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>13021.0</td>      <td>7</td>      <td>customer_service</td>      <td>28</td>      <td>89000.0</td>      <td>2014-03-24</td>      <td>2015-10-30</td>    </tr>    <tr>      <th>1</th>      <td>825355.0</td>      <td>7</td>      <td>marketing</td>      <td>20</td>      <td>183000.0</td>      <td>2013-04-29</td>      <td>2014-04-04</td>    </tr>    <tr>      <th>2</th>      <td>927315.0</td>      <td>4</td>      <td>marketing</td>      <td>14</td>      <td>101000.0</td>      <td>2014-10-13</td>      <td>NaT</td>    </tr>    <tr>      <th>3</th>      <td>662910.0</td>      <td>7</td>      <td>customer_service</td>      <td>20</td>      <td>115000.0</td>      <td>2012-05-14</td>      <td>2013-06-07</td>    </tr>    <tr>      <th>4</th>      <td>256971.0</td>      <td>2</td>      <td>data_science</td>      <td>23</td>      <td>276000.0</td>      <td>2011-10-17</td>      <td>2014-08-22</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python">data<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 24702 entries, 0 to 24701Data columns (total 7 columns):employee_id    24702 non-null float64company_id     24702 non-null int64dept           24702 non-null objectseniority      24702 non-null int64salary         24702 non-null float64join_date      24702 non-null datetime64[ns]quit_date      13510 non-null datetime64[ns]dtypes: datetime64[ns](2), float64(2), int64(2), object(1)memory usage: 1.3+ MB</code></pre><pre class="line-numbers language-python"><code class="language-python">data<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>employee_id</th>      <th>company_id</th>      <th>seniority</th>      <th>salary</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>24702.000000</td>      <td>24702.000000</td>      <td>24702.000000</td>      <td>24702.000000</td>    </tr>    <tr>      <th>mean</th>      <td>501604.403530</td>      <td>3.426969</td>      <td>14.127803</td>      <td>138183.345478</td>    </tr>    <tr>      <th>std</th>      <td>288909.026101</td>      <td>2.700011</td>      <td>8.089520</td>      <td>76058.184573</td>    </tr>    <tr>      <th>min</th>      <td>36.000000</td>      <td>1.000000</td>      <td>1.000000</td>      <td>17000.000000</td>    </tr>    <tr>      <th>25%</th>      <td>250133.750000</td>      <td>1.000000</td>      <td>7.000000</td>      <td>79000.000000</td>    </tr>    <tr>      <th>50%</th>      <td>500793.000000</td>      <td>2.000000</td>      <td>14.000000</td>      <td>123000.000000</td>    </tr>    <tr>      <th>75%</th>      <td>753137.250000</td>      <td>5.000000</td>      <td>21.000000</td>      <td>187000.000000</td>    </tr>    <tr>      <th>max</th>      <td>999969.000000</td>      <td>12.000000</td>      <td>99.000000</td>      <td>408000.000000</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Null information</span>data<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>employee_id        0company_id         0dept               0seniority          0salary             0join_date          0quit_date      11192dtype: int64</code></pre><h1 id="Create-Table-for-day-employee-headcount-and-company-id"><a href="#Create-Table-for-day-employee-headcount-and-company-id" class="headerlink" title="Create Table for day, employee_headcount, and company_id"></a>Create Table for <code>day</code>, <code>employee_headcount</code>, and <code>company_id</code></h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define useful information</span>unique_date <span class="token operator">=</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'2011-01-24'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'2015-12-13'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span>unique_company <span class="token operator">=</span> sorted<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'company_id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">day <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>company <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>headcount <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Loop through date and company id</span><span class="token keyword">for</span> date <span class="token keyword">in</span> unique_date<span class="token punctuation">:</span>    <span class="token keyword">for</span> idx <span class="token keyword">in</span> unique_company<span class="token punctuation">:</span>        total_join <span class="token operator">=</span> len<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'join_date'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> date<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'company_id'</span><span class="token punctuation">]</span> <span class="token operator">==</span> idx<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        total_quit <span class="token operator">=</span> len<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'quit_date'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> date<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'company_id'</span><span class="token punctuation">]</span> <span class="token operator">==</span> idx<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        day<span class="token punctuation">.</span>append<span class="token punctuation">(</span>date<span class="token punctuation">)</span>        company<span class="token punctuation">.</span>append<span class="token punctuation">(</span>idx<span class="token punctuation">)</span>        headcount<span class="token punctuation">.</span>append<span class="token punctuation">(</span>total_join <span class="token operator">-</span> total_quit<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Create table for day, employee_headcount, company_id</span>table <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'day'</span><span class="token punctuation">:</span> day<span class="token punctuation">,</span> <span class="token string">'company_id'</span><span class="token punctuation">:</span> company<span class="token punctuation">,</span> <span class="token string">'employee_headcount'</span><span class="token punctuation">:</span> headcount<span class="token punctuation">}</span><span class="token punctuation">,</span>                      columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'day'</span><span class="token punctuation">,</span> <span class="token string">'company_id'</span><span class="token punctuation">,</span> <span class="token string">'employee_headcount'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">table<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>day</th>      <th>company_id</th>      <th>employee_headcount</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2011-01-24</td>      <td>1</td>      <td>25</td>    </tr>    <tr>      <th>1</th>      <td>2011-01-24</td>      <td>2</td>      <td>17</td>    </tr>    <tr>      <th>2</th>      <td>2011-01-24</td>      <td>3</td>      <td>9</td>    </tr>    <tr>      <th>3</th>      <td>2011-01-24</td>      <td>4</td>      <td>12</td>    </tr>    <tr>      <th>4</th>      <td>2011-01-24</td>      <td>5</td>      <td>5</td>    </tr>  </tbody></table></div><h1 id="Employee-Churn-Analysis"><a href="#Employee-Churn-Analysis" class="headerlink" title="Employee Churn Analysis"></a>Employee Churn Analysis</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Separate stay and quit data</span>quit_data <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token operator">~</span>data<span class="token punctuation">[</span><span class="token string">'quit_date'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>stay_data <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'quit_date'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Feature-Engineering"><a href="#Feature-Engineering" class="headerlink" title="Feature Engineering"></a>Feature Engineering</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Total working days</span>work_days <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>days<span class="token punctuation">,</span> quit_data<span class="token punctuation">[</span><span class="token string">'quit_date'</span><span class="token punctuation">]</span> <span class="token operator">-</span> quit_data<span class="token punctuation">[</span><span class="token string">'join_date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>hist_kws<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'histtype'</span><span class="token punctuation">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'edgecolor'</span><span class="token punctuation">:</span><span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token string">'alpha'</span><span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">}</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>distplot<span class="token punctuation">(</span>work_days<span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> kde<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">,</span> hist_kws<span class="token operator">=</span>hist_kws<span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Histogram of Working Days'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Working Days'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Frequency'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="3_12_0.png" alt="png"></p><p>there are peaks around each employee year anniversary</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Week No. for quiting</span>quit_week <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>month<span class="token punctuation">,</span> quit_data<span class="token punctuation">[</span><span class="token string">'quit_date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>countplot<span class="token punctuation">(</span>quit_week<span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Countplot of Quit Month'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Month'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Frequency'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="3_14_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Week No. for quiting</span>weeks  <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>week<span class="token punctuation">,</span> quit_data<span class="token punctuation">[</span><span class="token string">'quit_date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>hist_kws<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'histtype'</span><span class="token punctuation">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'edgecolor'</span><span class="token punctuation">:</span><span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token string">'alpha'</span><span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">}</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>distplot<span class="token punctuation">(</span>weeks <span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> kde<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">,</span> hist_kws<span class="token operator">=</span>hist_kws<span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Histogram of Quit Weeks'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Quit Weeks'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Frequency'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="3_15_0.png" alt="png"></p><p>And it also peaks around the new year. Makes sense, companies have much more money to hire at the beginning of the year. So our goal becomes to prevent employees to quit within 1 year.</p><p>Now, let’s see if we find the characteristics of the people who quit early. Looking at the histogram of employment_length, it looks like we could define early quitters as those people who quit within 1 yr or so.</p><p>So, let’s create two classes of users : quit within 13 months or not (if they haven’t been in the current company for at least 13 months, we remove them).</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Choose quit data</span>quit_data<span class="token punctuation">[</span><span class="token string">'work_days'</span><span class="token punctuation">]</span> <span class="token operator">=</span> work_daysquit_data<span class="token punctuation">[</span><span class="token string">'quit_week'</span><span class="token punctuation">]</span> <span class="token operator">=</span> quit_weekquit_data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>employee_id</th>      <th>company_id</th>      <th>dept</th>      <th>seniority</th>      <th>salary</th>      <th>join_date</th>      <th>quit_date</th>      <th>work_days</th>      <th>quit_week</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>13021.0</td>      <td>7</td>      <td>customer_service</td>      <td>28</td>      <td>89000.0</td>      <td>2014-03-24</td>      <td>2015-10-30</td>      <td>585</td>      <td>44</td>    </tr>    <tr>      <th>1</th>      <td>825355.0</td>      <td>7</td>      <td>marketing</td>      <td>20</td>      <td>183000.0</td>      <td>2013-04-29</td>      <td>2014-04-04</td>      <td>340</td>      <td>14</td>    </tr>    <tr>      <th>3</th>      <td>662910.0</td>      <td>7</td>      <td>customer_service</td>      <td>20</td>      <td>115000.0</td>      <td>2012-05-14</td>      <td>2013-06-07</td>      <td>389</td>      <td>23</td>    </tr>    <tr>      <th>4</th>      <td>256971.0</td>      <td>2</td>      <td>data_science</td>      <td>23</td>      <td>276000.0</td>      <td>2011-10-17</td>      <td>2014-08-22</td>      <td>1040</td>      <td>34</td>    </tr>    <tr>      <th>5</th>      <td>509529.0</td>      <td>4</td>      <td>data_science</td>      <td>14</td>      <td>165000.0</td>      <td>2012-01-30</td>      <td>2013-08-30</td>      <td>578</td>      <td>35</td>    </tr>  </tbody></table></div><h3 id="Decision-Tree-Model"><a href="#Decision-Tree-Model" class="headerlink" title="Decision Tree Model"></a>Decision Tree Model</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Choose the subset data</span>stop_date <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span><span class="token string">'2015-12-13'</span><span class="token punctuation">)</span> <span class="token operator">-</span> pd<span class="token punctuation">.</span>DateOffset<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">365</span> <span class="token operator">+</span> <span class="token number">31</span><span class="token punctuation">)</span>subset <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'join_date'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> stop_date<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Binary label for early quit (less than 13 months)</span>quit <span class="token operator">=</span> subset<span class="token punctuation">[</span><span class="token string">'quit_date'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>subset<span class="token punctuation">[</span><span class="token string">'quit_date'</span><span class="token punctuation">]</span> <span class="token operator">></span> subset<span class="token punctuation">[</span><span class="token string">'join_date'</span><span class="token punctuation">]</span> <span class="token operator">+</span> pd<span class="token punctuation">.</span>DateOffset<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">396</span><span class="token punctuation">)</span><span class="token punctuation">)</span>subset<span class="token punctuation">[</span><span class="token string">'quit'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> quit<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>int<span class="token punctuation">)</span>subset<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>employee_id</th>      <th>company_id</th>      <th>dept</th>      <th>seniority</th>      <th>salary</th>      <th>join_date</th>      <th>quit_date</th>      <th>quit</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>13021.0</td>      <td>7</td>      <td>customer_service</td>      <td>28</td>      <td>89000.0</td>      <td>2014-03-24</td>      <td>2015-10-30</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>825355.0</td>      <td>7</td>      <td>marketing</td>      <td>20</td>      <td>183000.0</td>      <td>2013-04-29</td>      <td>2014-04-04</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>927315.0</td>      <td>4</td>      <td>marketing</td>      <td>14</td>      <td>101000.0</td>      <td>2014-10-13</td>      <td>NaT</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>662910.0</td>      <td>7</td>      <td>customer_service</td>      <td>20</td>      <td>115000.0</td>      <td>2012-05-14</td>      <td>2013-06-07</td>      <td>1</td>    </tr>    <tr>      <th>4</th>      <td>256971.0</td>      <td>2</td>      <td>data_science</td>      <td>23</td>      <td>276000.0</td>      <td>2011-10-17</td>      <td>2014-08-22</td>      <td>0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Label encoder</span>le <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>train_x <span class="token operator">=</span> subset<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'company_id'</span><span class="token punctuation">,</span> <span class="token string">'seniority'</span><span class="token punctuation">,</span> <span class="token string">'salary'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>train_x<span class="token punctuation">[</span><span class="token string">'dept'</span><span class="token punctuation">]</span> <span class="token operator">=</span> le<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>subset<span class="token punctuation">[</span><span class="token string">'dept'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>train_y <span class="token operator">=</span> subset<span class="token punctuation">[</span><span class="token string">'quit'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuestrain_x<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>company_id</th>      <th>seniority</th>      <th>salary</th>      <th>dept</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>7</td>      <td>28</td>      <td>89000.0</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>7</td>      <td>20</td>      <td>183000.0</td>      <td>4</td>    </tr>    <tr>      <th>2</th>      <td>4</td>      <td>14</td>      <td>101000.0</td>      <td>4</td>    </tr>    <tr>      <th>3</th>      <td>7</td>      <td>20</td>      <td>115000.0</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>2</td>      <td>23</td>      <td>276000.0</td>      <td>1</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Build decision tree</span>clf <span class="token operator">=</span> DecisionTreeClassifier<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> min_samples_leaf<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>clf <span class="token operator">=</span> clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token operator">=</span>train_x<span class="token punctuation">,</span> y<span class="token operator">=</span>train_y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Visualization</span>features <span class="token operator">=</span> list<span class="token punctuation">(</span>train_x<span class="token punctuation">.</span>columns<span class="token punctuation">)</span>targets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Not quit'</span><span class="token punctuation">,</span> <span class="token string">'Quit'</span><span class="token punctuation">]</span>dot_data <span class="token operator">=</span> tree<span class="token punctuation">.</span>export_graphviz<span class="token punctuation">(</span>clf<span class="token punctuation">,</span> out_file<span class="token operator">=</span>None<span class="token punctuation">,</span> feature_names<span class="token operator">=</span>features<span class="token punctuation">,</span> class_names<span class="token operator">=</span>targets<span class="token punctuation">,</span>                                 filled<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> rounded<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> special_characters<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>  graph <span class="token operator">=</span> graphviz<span class="token punctuation">.</span>Source<span class="token punctuation">(</span>dot_data<span class="token punctuation">)</span>graph<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="3_22_0.svg" alt="svg"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Feature importance</span>importance <span class="token operator">=</span> sorted<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>features<span class="token punctuation">,</span> clf<span class="token punctuation">.</span>feature_importances_<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">for</span> feature<span class="token punctuation">,</span> val <span class="token keyword">in</span> importance<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0:10s} | {1:.5f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>feature<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>salary     | 0.97439seniority  | 0.02561company_id | 0.00000dept       | 0.00000</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Visualization</span>hist_kws<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'histtype'</span><span class="token punctuation">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'edgecolor'</span><span class="token punctuation">:</span><span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token string">'alpha'</span><span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">}</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>distplot<span class="token punctuation">(</span>subset<span class="token punctuation">[</span>subset<span class="token punctuation">[</span><span class="token string">'quit'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'salary'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              label<span class="token operator">=</span><span class="token string">'Not Quit'</span><span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">,</span> hist_kws<span class="token operator">=</span>hist_kws<span class="token punctuation">)</span>sns<span class="token punctuation">.</span>distplot<span class="token punctuation">(</span>subset<span class="token punctuation">[</span>subset<span class="token punctuation">[</span><span class="token string">'quit'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'salary'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              label<span class="token operator">=</span><span class="token string">'Quit'</span><span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">,</span> hist_kws<span class="token operator">=</span>hist_kws<span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Salary'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'PDF'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="3_24_0.png" alt="png"></p><p>From this graph, people who make a lot of money and very little are not likely to quit. If salary between 80000 and 200000, the employee has higher probability of being an early quitter.</p><h1 id="Other-Factors"><a href="#Other-Factors" class="headerlink" title="Other Factors"></a>Other Factors</h1><ol><li><p>Given how important is salary, I would definitely love to have as a variable the salary the employee who quit was offered in the next job. Otherwise, things like: promotions or raises received during the employee tenure would be interesting.</p></li><li><p>The major findings are that employees quit at year anniversaries or at the beginning of the year. Both cases make sense. Even if you don’t like your current job, you often stay for 1 yr before quitting + you often get stocks after 1 yr so it makes sense to wait. Also, the beginning of the year is well known to be the best time to change job: companies are hiring more and you often want to stay until end of Dec to get the calendar year bonus.</p></li><li><p>Employees with low and high salaries are less likely to quit. Probably because employees with high salaries are happy there and employees with low salaries are not that marketable, so they have a hard time finding a new job.</p></li></ol><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Take home data challenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python_Take home challenge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-Identifying Fraudulent activities</title>
      <link href="/2018/01/24/4-identifying-fraudulent-activities/"/>
      <url>/2018/01/24/4-identifying-fraudulent-activities/</url>
      
        <content type="html"><![CDATA[<p>The goal of this challenge is to build a machine learning model that predicts the probability that the first transaction of a new user is fraudulent.</p><h1 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h1><ul><li><a href="#Answer-question-1">Answer question 1</a></li><li><a href="#Answer-question-2">Answer question 2</a><ul><li><a href="#Feature-Engineering">Feature Engineering</a></li><li><a href="#Train-the-model">Train the model</a></li><li><a href="#Plot-ROC-and-choose-threshold">Plot ROC and choose threshold</a></li><li><a href="#Impact-of-FP-vs.-FN">Impact of FP vs. FN</a></li></ul></li><li><a href="#Answer-question-3">Answer question 3</a></li><li><a href="#Answer-question-4">Answer question 4</a></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> bisect<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifier<span class="token punctuation">,</span>export_graphviz<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span>  train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score<span class="token punctuation">,</span>classification_report<span class="token punctuation">,</span>roc_curve<span class="token keyword">import</span> xgboost <span class="token keyword">as</span> xgb<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>style<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">'ggplot'</span><span class="token punctuation">)</span><span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span>  warningswarnings<span class="token punctuation">.</span>simplefilter<span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> auc<span class="token punctuation">,</span> roc_curve<span class="token punctuation">,</span> classification_report<span class="token keyword">import</span> h2o<span class="token keyword">from</span> h2o<span class="token punctuation">.</span>frame <span class="token keyword">import</span> H2OFrame<span class="token keyword">from</span> h2o<span class="token punctuation">.</span>estimators<span class="token punctuation">.</span>random_forest <span class="token keyword">import</span> H2ORandomForestEstimator<span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Answer-question-1"><a href="#Answer-question-1" class="headerlink" title="Answer question 1"></a>Answer question 1</h1><p><span style="color:blue">For each user, determine her country based on the numeric IP address.</span></p><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'Fraud_Data.csv'</span><span class="token punctuation">,</span> parse_dates<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'signup_time'</span><span class="token punctuation">,</span> <span class="token string">'purchase_time'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 151112 entries, 0 to 151111Data columns (total 11 columns):user_id           151112 non-null int64signup_time       151112 non-null datetime64[ns]purchase_time     151112 non-null datetime64[ns]purchase_value    151112 non-null int64device_id         151112 non-null objectsource            151112 non-null objectbrowser           151112 non-null objectsex               151112 non-null objectage               151112 non-null int64ip_address        151112 non-null float64class             151112 non-null int64dtypes: datetime64[ns](2), float64(1), int64(4), object(4)memory usage: 12.7+ MB</code></pre><pre class="line-numbers language-python"><code class="language-python">data<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> data<span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nunique<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>151112</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>signup_day</th>      <th>signup_week</th>      <th>purchase_day</th>      <th>purchase_week</th>      <th>purchase_value</th>      <th>source</th>      <th>browser</th>      <th>sex</th>      <th>age</th>      <th>country</th>      <th>time_diff</th>      <th>device_num</th>      <th>ip_num</th>      <th>class</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>9</td>      <td>5</td>      <td>16</td>      <td>34</td>      <td>SEO</td>      <td>Chrome</td>      <td>M</td>      <td>39</td>      <td>Japan</td>      <td>13882</td>      <td>1</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>6</td>      <td>23</td>      <td>0</td>      <td>24</td>      <td>16</td>      <td>Ads</td>      <td>Chrome</td>      <td>F</td>      <td>53</td>      <td>United States</td>      <td>17944</td>      <td>1</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>1</td>      <td>3</td>      <td>1</td>      <td>15</td>      <td>SEO</td>      <td>Opera</td>      <td>M</td>      <td>53</td>      <td>United States</td>      <td>1</td>      <td>12</td>      <td>12</td>      <td>1</td>    </tr>    <tr>      <th>3</th>      <td>1</td>      <td>18</td>      <td>0</td>      <td>19</td>      <td>44</td>      <td>SEO</td>      <td>Safari</td>      <td>M</td>      <td>41</td>      <td>NA</td>      <td>60085</td>      <td>1</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>1</td>      <td>30</td>      <td>2</td>      <td>37</td>      <td>39</td>      <td>Ads</td>      <td>Safari</td>      <td>M</td>      <td>45</td>      <td>United States</td>      <td>41461</td>      <td>1</td>      <td>1</td>      <td>0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python">address2country <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'IpAddress_to_Country.csv'</span><span class="token punctuation">)</span>address2country<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>lower_bound_ip_address</th>      <th>upper_bound_ip_address</th>      <th>country</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>16777216.0</td>      <td>16777471</td>      <td>Australia</td>    </tr>    <tr>      <th>1</th>      <td>16777472.0</td>      <td>16777727</td>      <td>China</td>    </tr>    <tr>      <th>2</th>      <td>16777728.0</td>      <td>16778239</td>      <td>China</td>    </tr>    <tr>      <th>3</th>      <td>16778240.0</td>      <td>16779263</td>      <td>Australia</td>    </tr>    <tr>      <th>4</th>      <td>16779264.0</td>      <td>16781311</td>      <td>China</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python">countries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ip_address <span class="token operator">=</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token string">'ip_address'</span><span class="token punctuation">]</span>    tmp <span class="token operator">=</span> address2country<span class="token punctuation">[</span><span class="token punctuation">(</span>address2country<span class="token punctuation">[</span><span class="token string">'lower_bound_ip_address'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> ip_address<span class="token punctuation">)</span> <span class="token operator">&amp;</span>                          <span class="token punctuation">(</span>address2country<span class="token punctuation">[</span><span class="token string">'upper_bound_ip_address'</span><span class="token punctuation">]</span> <span class="token operator">>=</span> ip_address<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        countries<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        countries<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'NA'</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span> <span class="token operator">=</span> countriesdata<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>signup_time</th>      <th>purchase_time</th>      <th>purchase_value</th>      <th>device_id</th>      <th>source</th>      <th>browser</th>      <th>sex</th>      <th>age</th>      <th>ip_address</th>      <th>class</th>      <th>country</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>22058</td>      <td>2015-02-24 22:55:49</td>      <td>2015-04-18 02:47:11</td>      <td>34</td>      <td>QVPSPJUOCKZAR</td>      <td>SEO</td>      <td>Chrome</td>      <td>M</td>      <td>39</td>      <td>7.327584e+08</td>      <td>0</td>      <td>Japan</td>    </tr>    <tr>      <th>1</th>      <td>333320</td>      <td>2015-06-07 20:39:50</td>      <td>2015-06-08 01:38:54</td>      <td>16</td>      <td>EOGFQPIZPYXFZ</td>      <td>Ads</td>      <td>Chrome</td>      <td>F</td>      <td>53</td>      <td>3.503114e+08</td>      <td>0</td>      <td>United States</td>    </tr>    <tr>      <th>2</th>      <td>1359</td>      <td>2015-01-01 18:52:44</td>      <td>2015-01-01 18:52:45</td>      <td>15</td>      <td>YSSKYOSJHPPLJ</td>      <td>SEO</td>      <td>Opera</td>      <td>M</td>      <td>53</td>      <td>2.621474e+09</td>      <td>1</td>      <td>United States</td>    </tr>    <tr>      <th>3</th>      <td>150084</td>      <td>2015-04-28 21:13:25</td>      <td>2015-05-04 13:54:50</td>      <td>44</td>      <td>ATGTXKYKUDUQN</td>      <td>SEO</td>      <td>Safari</td>      <td>M</td>      <td>41</td>      <td>3.840542e+09</td>      <td>0</td>      <td>NA</td>    </tr>    <tr>      <th>4</th>      <td>221365</td>      <td>2015-07-21 07:09:52</td>      <td>2015-09-09 18:40:53</td>      <td>39</td>      <td>NAUITBZFJKHWW</td>      <td>Ads</td>      <td>Safari</td>      <td>M</td>      <td>45</td>      <td>4.155831e+08</td>      <td>0</td>      <td>United States</td>    </tr>  </tbody></table></div><h1 id="Feature-Engineering"><a href="#Feature-Engineering" class="headerlink" title="Feature Engineering"></a>Feature Engineering</h1><ul><li>Time difference between sign-up time and purchase time</li><li>If the device id is unique or certain users are sharing the same device (many different user ids using the same device could be an indicator of fake accounts)</li><li>Same for the ip address. Many different users having the same ip address could be an indicator of fake accounts</li><li>Usual week of the year and day of the week from time variables</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Get the time difference between purchase time and signup time</span>time_diff <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'purchase_time'</span><span class="token punctuation">]</span> <span class="token operator">-</span> data<span class="token punctuation">[</span><span class="token string">'signup_time'</span><span class="token punctuation">]</span>time_diff <span class="token operator">=</span> time_diff<span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>seconds<span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'time_diff'</span><span class="token punctuation">]</span> <span class="token operator">=</span> time_diffdata<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>signup_time</th>      <th>purchase_time</th>      <th>purchase_value</th>      <th>device_id</th>      <th>source</th>      <th>browser</th>      <th>sex</th>      <th>age</th>      <th>ip_address</th>      <th>class</th>      <th>country</th>      <th>time_diff</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>22058</td>      <td>2015-02-24 22:55:49</td>      <td>2015-04-18 02:47:11</td>      <td>34</td>      <td>QVPSPJUOCKZAR</td>      <td>SEO</td>      <td>Chrome</td>      <td>M</td>      <td>39</td>      <td>7.327584e+08</td>      <td>0</td>      <td>Japan</td>      <td>13882</td>    </tr>    <tr>      <th>1</th>      <td>333320</td>      <td>2015-06-07 20:39:50</td>      <td>2015-06-08 01:38:54</td>      <td>16</td>      <td>EOGFQPIZPYXFZ</td>      <td>Ads</td>      <td>Chrome</td>      <td>F</td>      <td>53</td>      <td>3.503114e+08</td>      <td>0</td>      <td>United States</td>      <td>17944</td>    </tr>    <tr>      <th>2</th>      <td>1359</td>      <td>2015-01-01 18:52:44</td>      <td>2015-01-01 18:52:45</td>      <td>15</td>      <td>YSSKYOSJHPPLJ</td>      <td>SEO</td>      <td>Opera</td>      <td>M</td>      <td>53</td>      <td>2.621474e+09</td>      <td>1</td>      <td>United States</td>      <td>1</td>    </tr>    <tr>      <th>3</th>      <td>150084</td>      <td>2015-04-28 21:13:25</td>      <td>2015-05-04 13:54:50</td>      <td>44</td>      <td>ATGTXKYKUDUQN</td>      <td>SEO</td>      <td>Safari</td>      <td>M</td>      <td>41</td>      <td>3.840542e+09</td>      <td>0</td>      <td>NA</td>      <td>60085</td>    </tr>    <tr>      <th>4</th>      <td>221365</td>      <td>2015-07-21 07:09:52</td>      <td>2015-09-09 18:40:53</td>      <td>39</td>      <td>NAUITBZFJKHWW</td>      <td>Ads</td>      <td>Safari</td>      <td>M</td>      <td>45</td>      <td>4.155831e+08</td>      <td>0</td>      <td>United States</td>      <td>41461</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Check user number for unique devices</span>device_num <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">,</span> <span class="token string">'device_id'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'device_id'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>device_num <span class="token operator">=</span> device_num<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'user_id'</span><span class="token punctuation">:</span> <span class="token string">'device_num'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>device_num<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'device_id'</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>signup_time</th>      <th>purchase_time</th>      <th>purchase_value</th>      <th>device_id</th>      <th>source</th>      <th>browser</th>      <th>sex</th>      <th>age</th>      <th>ip_address</th>      <th>class</th>      <th>country</th>      <th>time_diff</th>      <th>device_num</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>22058</td>      <td>2015-02-24 22:55:49</td>      <td>2015-04-18 02:47:11</td>      <td>34</td>      <td>QVPSPJUOCKZAR</td>      <td>SEO</td>      <td>Chrome</td>      <td>M</td>      <td>39</td>      <td>7.327584e+08</td>      <td>0</td>      <td>Japan</td>      <td>13882</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>333320</td>      <td>2015-06-07 20:39:50</td>      <td>2015-06-08 01:38:54</td>      <td>16</td>      <td>EOGFQPIZPYXFZ</td>      <td>Ads</td>      <td>Chrome</td>      <td>F</td>      <td>53</td>      <td>3.503114e+08</td>      <td>0</td>      <td>United States</td>      <td>17944</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>1359</td>      <td>2015-01-01 18:52:44</td>      <td>2015-01-01 18:52:45</td>      <td>15</td>      <td>YSSKYOSJHPPLJ</td>      <td>SEO</td>      <td>Opera</td>      <td>M</td>      <td>53</td>      <td>2.621474e+09</td>      <td>1</td>      <td>United States</td>      <td>1</td>      <td>12</td>    </tr>    <tr>      <th>3</th>      <td>150084</td>      <td>2015-04-28 21:13:25</td>      <td>2015-05-04 13:54:50</td>      <td>44</td>      <td>ATGTXKYKUDUQN</td>      <td>SEO</td>      <td>Safari</td>      <td>M</td>      <td>41</td>      <td>3.840542e+09</td>      <td>0</td>      <td>NA</td>      <td>60085</td>      <td>1</td>    </tr>    <tr>      <th>4</th>      <td>221365</td>      <td>2015-07-21 07:09:52</td>      <td>2015-09-09 18:40:53</td>      <td>39</td>      <td>NAUITBZFJKHWW</td>      <td>Ads</td>      <td>Safari</td>      <td>M</td>      <td>45</td>      <td>4.155831e+08</td>      <td>0</td>      <td>United States</td>      <td>41461</td>      <td>1</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Check user number for unique ip_address</span>ip_num <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">,</span> <span class="token string">'ip_address'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'ip_address'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>ip_num <span class="token operator">=</span> ip_num<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'user_id'</span><span class="token punctuation">:</span> <span class="token string">'ip_num'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>ip_num<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'ip_address'</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>signup_time</th>      <th>purchase_time</th>      <th>purchase_value</th>      <th>device_id</th>      <th>source</th>      <th>browser</th>      <th>sex</th>      <th>age</th>      <th>ip_address</th>      <th>class</th>      <th>country</th>      <th>time_diff</th>      <th>device_num</th>      <th>ip_num</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>22058</td>      <td>2015-02-24 22:55:49</td>      <td>2015-04-18 02:47:11</td>      <td>34</td>      <td>QVPSPJUOCKZAR</td>      <td>SEO</td>      <td>Chrome</td>      <td>M</td>      <td>39</td>      <td>7.327584e+08</td>      <td>0</td>      <td>Japan</td>      <td>13882</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>333320</td>      <td>2015-06-07 20:39:50</td>      <td>2015-06-08 01:38:54</td>      <td>16</td>      <td>EOGFQPIZPYXFZ</td>      <td>Ads</td>      <td>Chrome</td>      <td>F</td>      <td>53</td>      <td>3.503114e+08</td>      <td>0</td>      <td>United States</td>      <td>17944</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>1359</td>      <td>2015-01-01 18:52:44</td>      <td>2015-01-01 18:52:45</td>      <td>15</td>      <td>YSSKYOSJHPPLJ</td>      <td>SEO</td>      <td>Opera</td>      <td>M</td>      <td>53</td>      <td>2.621474e+09</td>      <td>1</td>      <td>United States</td>      <td>1</td>      <td>12</td>      <td>12</td>    </tr>    <tr>      <th>3</th>      <td>150084</td>      <td>2015-04-28 21:13:25</td>      <td>2015-05-04 13:54:50</td>      <td>44</td>      <td>ATGTXKYKUDUQN</td>      <td>SEO</td>      <td>Safari</td>      <td>M</td>      <td>41</td>      <td>3.840542e+09</td>      <td>0</td>      <td>NA</td>      <td>60085</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>4</th>      <td>221365</td>      <td>2015-07-21 07:09:52</td>      <td>2015-09-09 18:40:53</td>      <td>39</td>      <td>NAUITBZFJKHWW</td>      <td>Ads</td>      <td>Safari</td>      <td>M</td>      <td>45</td>      <td>4.155831e+08</td>      <td>0</td>      <td>United States</td>      <td>41461</td>      <td>1</td>      <td>1</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Signup day and week</span>data<span class="token punctuation">[</span><span class="token string">'signup_day'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'signup_time'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>dayofweek<span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'signup_week'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'signup_time'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>week<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Purchase day and week</span>data<span class="token punctuation">[</span><span class="token string">'purchase_day'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'purchase_time'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>dayofweek<span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'purchase_week'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'purchase_time'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>week<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>signup_time</th>      <th>purchase_time</th>      <th>purchase_value</th>      <th>device_id</th>      <th>source</th>      <th>browser</th>      <th>sex</th>      <th>age</th>      <th>ip_address</th>      <th>class</th>      <th>country</th>      <th>time_diff</th>      <th>device_num</th>      <th>ip_num</th>      <th>signup_day</th>      <th>signup_week</th>      <th>purchase_day</th>      <th>purchase_week</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>22058</td>      <td>2015-02-24 22:55:49</td>      <td>2015-04-18 02:47:11</td>      <td>34</td>      <td>QVPSPJUOCKZAR</td>      <td>SEO</td>      <td>Chrome</td>      <td>M</td>      <td>39</td>      <td>7.327584e+08</td>      <td>0</td>      <td>Japan</td>      <td>13882</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>9</td>      <td>5</td>      <td>16</td>    </tr>    <tr>      <th>1</th>      <td>333320</td>      <td>2015-06-07 20:39:50</td>      <td>2015-06-08 01:38:54</td>      <td>16</td>      <td>EOGFQPIZPYXFZ</td>      <td>Ads</td>      <td>Chrome</td>      <td>F</td>      <td>53</td>      <td>3.503114e+08</td>      <td>0</td>      <td>United States</td>      <td>17944</td>      <td>1</td>      <td>1</td>      <td>6</td>      <td>23</td>      <td>0</td>      <td>24</td>    </tr>    <tr>      <th>2</th>      <td>1359</td>      <td>2015-01-01 18:52:44</td>      <td>2015-01-01 18:52:45</td>      <td>15</td>      <td>YSSKYOSJHPPLJ</td>      <td>SEO</td>      <td>Opera</td>      <td>M</td>      <td>53</td>      <td>2.621474e+09</td>      <td>1</td>      <td>United States</td>      <td>1</td>      <td>12</td>      <td>12</td>      <td>3</td>      <td>1</td>      <td>3</td>      <td>1</td>    </tr>    <tr>      <th>3</th>      <td>150084</td>      <td>2015-04-28 21:13:25</td>      <td>2015-05-04 13:54:50</td>      <td>44</td>      <td>ATGTXKYKUDUQN</td>      <td>SEO</td>      <td>Safari</td>      <td>M</td>      <td>41</td>      <td>3.840542e+09</td>      <td>0</td>      <td>NA</td>      <td>60085</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>18</td>      <td>0</td>      <td>19</td>    </tr>    <tr>      <th>4</th>      <td>221365</td>      <td>2015-07-21 07:09:52</td>      <td>2015-09-09 18:40:53</td>      <td>39</td>      <td>NAUITBZFJKHWW</td>      <td>Ads</td>      <td>Safari</td>      <td>M</td>      <td>45</td>      <td>4.155831e+08</td>      <td>0</td>      <td>United States</td>      <td>41461</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>30</td>      <td>2</td>      <td>37</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define features and target to be used</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'signup_day'</span><span class="token punctuation">,</span> <span class="token string">'signup_week'</span><span class="token punctuation">,</span> <span class="token string">'purchase_day'</span><span class="token punctuation">,</span> <span class="token string">'purchase_week'</span><span class="token punctuation">,</span> <span class="token string">'purchase_value'</span><span class="token punctuation">,</span> <span class="token string">'source'</span><span class="token punctuation">,</span>            <span class="token string">'browser'</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'country'</span><span class="token punctuation">,</span> <span class="token string">'time_diff'</span><span class="token punctuation">,</span> <span class="token string">'device_num'</span><span class="token punctuation">,</span> <span class="token string">'ip_num'</span><span class="token punctuation">,</span> <span class="token string">'class'</span><span class="token punctuation">]</span>data <span class="token operator">=</span> data<span class="token punctuation">[</span>columns<span class="token punctuation">]</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>signup_day</th>      <th>signup_week</th>      <th>purchase_day</th>      <th>purchase_week</th>      <th>purchase_value</th>      <th>source</th>      <th>browser</th>      <th>sex</th>      <th>age</th>      <th>country</th>      <th>time_diff</th>      <th>device_num</th>      <th>ip_num</th>      <th>class</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>9</td>      <td>5</td>      <td>16</td>      <td>34</td>      <td>SEO</td>      <td>Chrome</td>      <td>M</td>      <td>39</td>      <td>Japan</td>      <td>13882</td>      <td>1</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>6</td>      <td>23</td>      <td>0</td>      <td>24</td>      <td>16</td>      <td>Ads</td>      <td>Chrome</td>      <td>F</td>      <td>53</td>      <td>United States</td>      <td>17944</td>      <td>1</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>1</td>      <td>3</td>      <td>1</td>      <td>15</td>      <td>SEO</td>      <td>Opera</td>      <td>M</td>      <td>53</td>      <td>United States</td>      <td>1</td>      <td>12</td>      <td>12</td>      <td>1</td>    </tr>    <tr>      <th>3</th>      <td>1</td>      <td>18</td>      <td>0</td>      <td>19</td>      <td>44</td>      <td>SEO</td>      <td>Safari</td>      <td>M</td>      <td>41</td>      <td>NA</td>      <td>60085</td>      <td>1</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>1</td>      <td>30</td>      <td>2</td>      <td>37</td>      <td>39</td>      <td>Ads</td>      <td>Safari</td>      <td>M</td>      <td>45</td>      <td>United States</td>      <td>41461</td>      <td>1</td>      <td>1</td>      <td>0</td>    </tr>  </tbody></table></div><h1 id="Fraudulent-Activity-Identification"><a href="#Fraudulent-Activity-Identification" class="headerlink" title="Fraudulent Activity Identification"></a>Fraudulent Activity Identification</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Initialize H2O cluster</span>h2o<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>h2o<span class="token punctuation">.</span>remove_all<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>Checking whether there is an H2O instance running at http://localhost:54321 ..... not found.Attempting to start a local H2O server...; Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)  Starting server from C:\Users\Naixin\Anaconda3\lib\site-packages\h2o\backend\bin\h2o.jar  Ice root: C:\Users\Naixin\AppData\Local\Temp\tmpaer_0p20  JVM stdout: C:\Users\Naixin\AppData\Local\Temp\tmpaer_0p20\h2o_Naixin_started_from_python.out  JVM stderr: C:\Users\Naixin\AppData\Local\Temp\tmpaer_0p20\h2o_Naixin_started_from_python.err  Server is running at http://127.0.0.1:54321Connecting to H2O server at http://127.0.0.1:54321 ... successful.</code></pre><div style="overflow:auto"><table style="width:50%"><tr><td>H2O cluster uptime:</td><td>03 secs</td></tr><tr><td>H2O cluster timezone:</td><td>America/Chicago</td></tr><tr><td>H2O data parsing timezone:</td><td>UTC</td></tr><tr><td>H2O cluster version:</td><td>3.26.0.6</td></tr><tr><td>H2O cluster version age:</td><td>5 days </td></tr><tr><td>H2O cluster name:</td><td>H2O_from_python_Naixin_uxelgu</td></tr><tr><td>H2O cluster total nodes:</td><td>1</td></tr><tr><td>H2O cluster free memory:</td><td>1.747 Gb</td></tr><tr><td>H2O cluster total cores:</td><td>0</td></tr><tr><td>H2O cluster allowed cores:</td><td>0</td></tr><tr><td>H2O cluster status:</td><td>accepting new members, healthy</td></tr><tr><td>H2O connection url:</td><td>http://127.0.0.1:54321</td></tr><tr><td>H2O connection proxy:</td><td>None</td></tr><tr><td>H2O internal security:</td><td>False</td></tr><tr><td>H2O API Extensions:</td><td>Amazon S3, Algos, AutoML, Core V3, TargetEncoder, Core V4</td></tr><tr><td>Python version:</td><td>3.7.3 final</td></tr></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Transform to H2O Frame, and make sure the target variable is categorical</span>h2o_df <span class="token operator">=</span> H2OFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">for</span> name <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'signup_day'</span><span class="token punctuation">,</span> <span class="token string">'purchase_day'</span><span class="token punctuation">,</span> <span class="token string">'source'</span><span class="token punctuation">,</span> <span class="token string">'browser'</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">,</span> <span class="token string">'country'</span><span class="token punctuation">,</span> <span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    h2o_df<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> h2o_df<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span>asfactor<span class="token punctuation">(</span><span class="token punctuation">)</span>h2o_df<span class="token punctuation">.</span>summary<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Parse progress: |█████████████████████████████████████████████████████████| 100%</code></pre><table><thead><tr><th>       </th><th>signup_day  </th><th>signup_week      </th><th>purchase_day  </th><th>purchase_week     </th><th>purchase_value   </th><th>source  </th><th>browser  </th><th>sex  </th><th>age              </th><th>country      </th><th>time_diff        </th><th>device_num        </th><th>ip_num            </th><th>class  </th></tr></thead><tbody><tr><td>type   </td><td>enum        </td><td>int              </td><td>enum          </td><td>int               </td><td>int              </td><td>enum    </td><td>enum     </td><td>enum </td><td>int              </td><td>enum         </td><td>int              </td><td>int               </td><td>int               </td><td>enum   </td></tr><tr><td>mins   </td><td>            </td><td>1.0              </td><td>              </td><td>1.0               </td><td>9.0              </td><td>        </td><td>         </td><td>     </td><td>18.0             </td><td>             </td><td>1.0              </td><td>1.0               </td><td>1.0               </td><td>       </td></tr><tr><td>mean   </td><td>            </td><td>16.50174043093866</td><td>              </td><td>24.65857112605202 </td><td>36.93537243898601</td><td>        </td><td>         </td><td>     </td><td>33.14070358409675</td><td>             </td><td>40942.58442744426</td><td>1.6843665625496351</td><td>1.6027185134205097</td><td>       </td></tr><tr><td>maxs   </td><td>            </td><td>34.0             </td><td>              </td><td>51.0              </td><td>154.0            </td><td>        </td><td>         </td><td>     </td><td>76.0             </td><td>             </td><td>86399.0          </td><td>20.0              </td><td>20.0              </td><td>       </td></tr><tr><td>sigma  </td><td>            </td><td>9.814287461798903</td><td>              </td><td>11.651556782719481</td><td>18.32276214866213</td><td>        </td><td>         </td><td>     </td><td>8.617733490961495</td><td>             </td><td>26049.66190211841</td><td>2.616953602804173 </td><td>2.596239527375834 </td><td>       </td></tr><tr><td>zeros  </td><td>            </td><td>0                </td><td>              </td><td>0                 </td><td>0                </td><td>        </td><td>         </td><td>     </td><td>0                </td><td>             </td><td>0                </td><td>0                 </td><td>0                 </td><td>       </td></tr><tr><td>missing</td><td>0           </td><td>0                </td><td>0             </td><td>0                 </td><td>0                </td><td>0       </td><td>0        </td><td>0    </td><td>0                </td><td>0            </td><td>0                </td><td>0                 </td><td>0                 </td><td>0      </td></tr><tr><td>0      </td><td>1           </td><td>9.0              </td><td>5             </td><td>16.0              </td><td>34.0             </td><td>SEO     </td><td>Chrome   </td><td>M    </td><td>39.0             </td><td>Japan        </td><td>13882.0          </td><td>1.0               </td><td>1.0               </td><td>0      </td></tr><tr><td>1      </td><td>6           </td><td>23.0             </td><td>0             </td><td>24.0              </td><td>16.0             </td><td>Ads     </td><td>Chrome   </td><td>F    </td><td>53.0             </td><td>United States</td><td>17944.0          </td><td>1.0               </td><td>1.0               </td><td>0      </td></tr><tr><td>2      </td><td>3           </td><td>1.0              </td><td>3             </td><td>1.0               </td><td>15.0             </td><td>SEO     </td><td>Opera    </td><td>M    </td><td>53.0             </td><td>United States</td><td>1.0              </td><td>12.0              </td><td>12.0              </td><td>1      </td></tr><tr><td>3      </td><td>1           </td><td>18.0             </td><td>0             </td><td>19.0              </td><td>44.0             </td><td>SEO     </td><td>Safari   </td><td>M    </td><td>41.0             </td><td>NA           </td><td>60085.0          </td><td>1.0               </td><td>1.0               </td><td>0      </td></tr><tr><td>4      </td><td>1           </td><td>30.0             </td><td>2             </td><td>37.0              </td><td>39.0             </td><td>Ads     </td><td>Safari   </td><td>M    </td><td>45.0             </td><td>United States</td><td>41461.0          </td><td>1.0               </td><td>1.0               </td><td>0      </td></tr><tr><td>5      </td><td>3           </td><td>21.0             </td><td>3             </td><td>28.0              </td><td>42.0             </td><td>Ads     </td><td>Chrome   </td><td>M    </td><td>18.0             </td><td>Canada       </td><td>7331.0           </td><td>1.0               </td><td>1.0               </td><td>0      </td></tr><tr><td>6      </td><td>5           </td><td>31.0             </td><td>3             </td><td>35.0              </td><td>11.0             </td><td>Ads     </td><td>Chrome   </td><td>F    </td><td>19.0             </td><td>NA           </td><td>17825.0          </td><td>1.0               </td><td>1.0               </td><td>0      </td></tr><tr><td>7      </td><td>0           </td><td>15.0             </td><td>0             </td><td>22.0              </td><td>27.0             </td><td>Ads     </td><td>Opera    </td><td>M    </td><td>34.0             </td><td>United States</td><td>35129.0          </td><td>1.0               </td><td>1.0               </td><td>0      </td></tr><tr><td>8      </td><td>1           </td><td>17.0             </td><td>1             </td><td>23.0              </td><td>30.0             </td><td>SEO     </td><td>IE       </td><td>F    </td><td>43.0             </td><td>China        </td><td>51800.0          </td><td>1.0               </td><td>1.0               </td><td>0      </td></tr><tr><td>9      </td><td>6           </td><td>4.0              </td><td>0             </td><td>13.0              </td><td>62.0             </td><td>Ads     </td><td>IE       </td><td>M    </td><td>31.0             </td><td>United States</td><td>18953.0          </td><td>1.0               </td><td>1.0               </td><td>0      </td></tr></tbody></table><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Split into 70% training and 30% test dataset</span>strat_split <span class="token operator">=</span> h2o_df<span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>stratified_split<span class="token punctuation">(</span>test_frac<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span> seed<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>train <span class="token operator">=</span> h2o_df<span class="token punctuation">[</span>strat_split <span class="token operator">==</span> <span class="token string">'train'</span><span class="token punctuation">]</span>test <span class="token operator">=</span> h2o_df<span class="token punctuation">[</span>strat_split <span class="token operator">==</span> <span class="token string">'test'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Define features and target</span>feature <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'signup_day'</span><span class="token punctuation">,</span> <span class="token string">'signup_week'</span><span class="token punctuation">,</span> <span class="token string">'purchase_day'</span><span class="token punctuation">,</span> <span class="token string">'purchase_week'</span><span class="token punctuation">,</span> <span class="token string">'purchase_value'</span><span class="token punctuation">,</span>            <span class="token string">'source'</span><span class="token punctuation">,</span> <span class="token string">'browser'</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'country'</span><span class="token punctuation">,</span> <span class="token string">'time_diff'</span><span class="token punctuation">,</span> <span class="token string">'device_num'</span><span class="token punctuation">,</span> <span class="token string">'ip_num'</span><span class="token punctuation">]</span>target <span class="token operator">=</span> <span class="token string">'class'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Build random forest model </span>model <span class="token operator">=</span> H2ORandomForestEstimator<span class="token punctuation">(</span>balance_classes<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> ntrees<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> mtries<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> stopping_rounds<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>                                  stopping_metric<span class="token operator">=</span><span class="token string">'auc'</span><span class="token punctuation">,</span> score_each_iteration<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> seed<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>train<span class="token punctuation">(</span>x<span class="token operator">=</span>feature<span class="token punctuation">,</span> y<span class="token operator">=</span>target<span class="token punctuation">,</span> training_frame<span class="token operator">=</span>train<span class="token punctuation">,</span> validation_frame<span class="token operator">=</span>test<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>drf Model Build progress: |███████████████████████████████████████████████| 100%</code></pre><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Feature importance</span>importance <span class="token operator">=</span> model<span class="token punctuation">.</span>varimp<span class="token punctuation">(</span>use_pandas<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'scaled_importance'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'variable'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>importance<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="4_23_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Make predictions </span>train_true <span class="token operator">=</span> train<span class="token punctuation">.</span>as_data_frame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuestest_true <span class="token operator">=</span> test<span class="token punctuation">.</span>as_data_frame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuestrain_pred <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>train<span class="token punctuation">)</span><span class="token punctuation">.</span>as_data_frame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'p1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuestest_pred <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">.</span>as_data_frame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'p1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuestrain_fpr<span class="token punctuation">,</span> train_tpr<span class="token punctuation">,</span> _ <span class="token operator">=</span> roc_curve<span class="token punctuation">(</span>train_true<span class="token punctuation">,</span> train_pred<span class="token punctuation">)</span>test_fpr<span class="token punctuation">,</span> test_tpr<span class="token punctuation">,</span> _ <span class="token operator">=</span> roc_curve<span class="token punctuation">(</span>test_true<span class="token punctuation">,</span> test_pred<span class="token punctuation">)</span>train_auc <span class="token operator">=</span> np<span class="token punctuation">.</span>round<span class="token punctuation">(</span>auc<span class="token punctuation">(</span>train_fpr<span class="token punctuation">,</span> train_tpr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>test_auc <span class="token operator">=</span> np<span class="token punctuation">.</span>round<span class="token punctuation">(</span>auc<span class="token punctuation">(</span>test_fpr<span class="token punctuation">,</span> test_tpr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>drf prediction progress: |████████████████████████████████████████████████| 100%drf prediction progress: |████████████████████████████████████████████████| 100%</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Classification report</span><span class="token keyword">print</span><span class="token punctuation">(</span>classification_report<span class="token punctuation">(</span>y_true<span class="token operator">=</span>test_true<span class="token punctuation">,</span> y_pred<span class="token operator">=</span><span class="token punctuation">(</span>test_pred <span class="token operator">></span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>              precision    recall  f1-score   support           0       0.95      1.00      0.98     41088           1       1.00      0.53      0.69      4245    accuracy                           0.96     45333   macro avg       0.98      0.76      0.83     45333weighted avg       0.96      0.96      0.95     45333</code></pre><p>​    </p><pre class="line-numbers language-python"><code class="language-python">train_fpr <span class="token operator">=</span> np<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>train_fpr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>train_tpr <span class="token operator">=</span> np<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>train_tpr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>test_fpr <span class="token operator">=</span> np<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>test_fpr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>test_tpr <span class="token operator">=</span> np<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>test_tpr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>train_fpr<span class="token punctuation">,</span> train_tpr<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Train AUC: '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>train_auc<span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>test_fpr<span class="token punctuation">,</span> test_tpr<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Test AUC: '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>test_auc<span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>train_fpr<span class="token punctuation">,</span> train_fpr<span class="token punctuation">,</span> <span class="token string">'k--'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Chance Curve'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'False Positive Rate'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'True Positive Rate'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="4_26_0.png" alt="png"></p><p>Based on the ROC, if we care about minimizing false positive, we would choose a cut-off that would give us true positive rate of ~0.5 and false positive rate almost zero (this was essentially the random forest output). However, if we care about maximizing true positive, we will have to decrease the cut-off. This way we will classify more events as “1”: some will be true ones (so true positive goes up) and many, unfortunately, will be false ones (so false positive will also go up).</p><pre class="line-numbers language-python"><code class="language-python">cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'device_num'</span><span class="token punctuation">,</span> <span class="token string">'time_diff'</span><span class="token punctuation">,</span> <span class="token string">'purchase_week'</span><span class="token punctuation">,</span> <span class="token string">'country'</span><span class="token punctuation">,</span> <span class="token string">'ip_num'</span><span class="token punctuation">]</span>_ <span class="token operator">=</span> model<span class="token punctuation">.</span>partial_plot<span class="token punctuation">(</span>data<span class="token operator">=</span>train<span class="token punctuation">,</span> cols<span class="token operator">=</span>cols<span class="token punctuation">,</span> nbins<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>PartialDependencePlot progress: |█████████████████████████████████████████| 100%</code></pre><p><img src="4_28_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Shutdown h2o instance</span>h2o<span class="token punctuation">.</span>cluster<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Regarding “how to use this from a product perspective”: you now have a model that assigns to each user a probability of committing a fraud. You want to think about creating different experiences based on that. For instance:</p><ol><li>If predicted fraud probability &lt; X, the user has the normal experience (the high majority should fall here)</li><li>If X &lt;= predicted fraud probability &lt; Z (so the user is at risk, but not too much), you can create an additional verification step, like verify your phone number via a code sent by SMS or log in via Facebook.</li><li>If predicted fraud probability &gt;= Z (so here is really likely the user is trying to commit a fraud), you can tell the user his session has been put on hold, send this user info to someone who reviews it manually and either blocks the user or decides it is not a fraud so the session is resumed.</li></ol><p>This is just an example and there are many different ways to build products around some fraud score. However, it is important because it highlights that a ML model is often really useful when it is combined with a product which is able to take advantage of its strengths and minimize its possible drawbacks (like false positives).</p><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Take home data challenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python_Take home challenge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-spanish_translation AB test</title>
      <link href="/2018/01/23/2-spanish-translation-ab-test/"/>
      <url>/2018/01/23/2-spanish-translation-ab-test/</url>
      
        <content type="html"><![CDATA[<p>This notebook details the approaches and the conclusions of how I approached verifying the results of an A/B Test. The test measured conversion rates when a website used custom language tamplates for spanish speaking countries compared to the same template (a Spain dialect translation) for all countries. We would think that custom templates would do better but that was not the case, the results point to the same template increasing conversions. So in this notebook I seek to see if the test can be trusted and if not what could be done differently for the next test.</p><p>This notebook covers:</p><ul><li>Data Cleaning</li><li>Verifying Results</li><li>Using Statistical Tools to test for Sample Bias</li></ul><p>Conclusions:</p><ul><li>If the results seem unbelievable, they probably are. We intuitively know that a custom website for each region would yield better results. So when it didn’t it’s important to take extra precautions to make sure that the test was run appropriately, in this case we found that the test sample wasn’t indicative of the population</li><li>The test was misleading because suffered from sample bias and a possible small sample size which needs to be addressed.</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> scipy<span class="token punctuation">.</span>stats <span class="token keyword">import</span> ttest_ind<span class="token keyword">from</span> scipy <span class="token keyword">import</span> stats<span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> statsmodels<span class="token punctuation">.</span>stats<span class="token punctuation">.</span>weightstats <span class="token keyword">import</span> ttest_ind <span class="token keyword">as</span> sm_ttest<span class="token keyword">from</span> statsmodels<span class="token punctuation">.</span>stats<span class="token punctuation">.</span>weightstats <span class="token keyword">import</span> zconfint <span class="token keyword">as</span> sm_confint<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoder<span class="token punctuation">,</span> OneHotEncoder<span class="token punctuation">,</span> LabelBinarizer<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifier<span class="token punctuation">,</span> export_graphviz<span class="token punctuation">,</span> DecisionTreeRegressor<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>dates <span class="token keyword">as</span> mdates<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token keyword">from</span> pylab <span class="token keyword">import</span> rcParams<span class="token keyword">from</span> pydotplus <span class="token keyword">import</span> graph_from_dot_data<span class="token keyword">from</span> IPython<span class="token punctuation">.</span>display <span class="token keyword">import</span> Image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>set_printoptions<span class="token punctuation">(</span>precision<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'precision'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">test_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'test_table.csv'</span><span class="token punctuation">)</span>user_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'user_table.csv'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">test_df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>date</th>      <th>source</th>      <th>device</th>      <th>browser_language</th>      <th>ads_channel</th>      <th>browser</th>      <th>conversion</th>      <th>test</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>315281</td>      <td>2015-12-03</td>      <td>Direct</td>      <td>Web</td>      <td>ES</td>      <td>NaN</td>      <td>IE</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>497851</td>      <td>2015-12-04</td>      <td>Ads</td>      <td>Web</td>      <td>ES</td>      <td>Google</td>      <td>IE</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>848402</td>      <td>2015-12-04</td>      <td>Ads</td>      <td>Web</td>      <td>ES</td>      <td>Facebook</td>      <td>Chrome</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>290051</td>      <td>2015-12-03</td>      <td>Ads</td>      <td>Mobile</td>      <td>Other</td>      <td>Facebook</td>      <td>Android_App</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>4</th>      <td>548435</td>      <td>2015-11-30</td>      <td>Ads</td>      <td>Web</td>      <td>ES</td>      <td>Google</td>      <td>FireFox</td>      <td>0</td>      <td>1</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python">test_df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 453321 entries, 0 to 453320Data columns (total 9 columns):user_id             453321 non-null int64date                453321 non-null objectsource              453321 non-null objectdevice              453321 non-null objectbrowser_language    453321 non-null objectads_channel         181877 non-null objectbrowser             453321 non-null objectconversion          453321 non-null int64test                453321 non-null int64dtypes: int64(3), object(6)memory usage: 31.1+ MB</code></pre><pre class="line-numbers language-python"><code class="language-python">user_df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>sex</th>      <th>age</th>      <th>country</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>765821</td>      <td>M</td>      <td>20</td>      <td>Mexico</td>    </tr>    <tr>      <th>1</th>      <td>343561</td>      <td>F</td>      <td>27</td>      <td>Nicaragua</td>    </tr>    <tr>      <th>2</th>      <td>118744</td>      <td>M</td>      <td>23</td>      <td>Colombia</td>    </tr>    <tr>      <th>3</th>      <td>987753</td>      <td>F</td>      <td>27</td>      <td>Venezuela</td>    </tr>    <tr>      <th>4</th>      <td>554597</td>      <td>F</td>      <td>20</td>      <td>Spain</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python">user_df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 452867 entries, 0 to 452866Data columns (total 4 columns):user_id    452867 non-null int64sex        452867 non-null objectage        452867 non-null int64country    452867 non-null objectdtypes: int64(2), object(2)memory usage: 13.8+ MB</code></pre><p>Steps:</p><ul><li>Join the Tables on the common column user_id</li><li>Check for Null Values</li><li>Deal with Null Values</li></ul><h2 id="1-join-data"><a href="#1-join-data" class="headerlink" title="1.join data"></a>1.join data</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># check the two tables uniqueness</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Test ID:\t'</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>test_df<span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>test_df<span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>test_df<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'User ID:\t'</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>user_df<span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>user_df<span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>user_df<span class="token punctuation">)</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>Test ID:     453321      TrueUser ID:     452867      True</code></pre><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> test_df<span class="token punctuation">.</span>join<span class="token punctuation">(</span>user_df<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token string">'user_id'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'user_id'</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">data<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 453321 entries, 0 to 453320Data columns (total 12 columns):user_id             453321 non-null int64date                453321 non-null objectsource              453321 non-null objectdevice              453321 non-null objectbrowser_language    453321 non-null objectads_channel         181877 non-null objectbrowser             453321 non-null objectconversion          453321 non-null int64test                453321 non-null int64sex                 452867 non-null objectage                 452867 non-null float64country             452867 non-null objectdtypes: float64(1), int64(3), object(8)memory usage: 41.5+ MB</code></pre><h2 id="2-check-null-value"><a href="#2-check-null-value" class="headerlink" title="2. check null value"></a>2. check null value</h2><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>data<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>user_id                  0date                     0source                   0device                   0browser_language         0ads_channel         271444browser                  0conversion               0test                     0sex                    454age                    454country                454dtype: int64</code></pre><ul><li>There are null values in 3 columns: sex, age, country, and ads channel</li><li>We will delete the rows with null values for sex, age and country because it’s so few.</li><li>Since there are so many missing values for ads_channel we will fill create a different colum that raises a 1 when it’s a null value and a 0 when it’s not. </li><li>We will investigate the ads_channel to determine whether to erase it or not.</li></ul><h2 id="3-dealing-with-null-values"><a href="#3-dealing-with-null-values" class="headerlink" title="3. dealing with null values"></a>3. dealing with null values</h2><pre class="line-numbers language-python"><code class="language-python">data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>sex<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>date</th>      <th>source</th>      <th>device</th>      <th>browser_language</th>      <th>ads_channel</th>      <th>browser</th>      <th>conversion</th>      <th>test</th>      <th>sex</th>      <th>age</th>      <th>country</th>    </tr>  </thead>  <tbody>    <tr>      <th>819</th>      <td>657841</td>      <td>2015-12-02</td>      <td>Ads</td>      <td>Mobile</td>      <td>ES</td>      <td>Bing</td>      <td>Android_App</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>1696</th>      <td>859340</td>      <td>2015-12-04</td>      <td>Direct</td>      <td>Mobile</td>      <td>EN</td>      <td>NaN</td>      <td>Android_App</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>1934</th>      <td>716487</td>      <td>2015-12-04</td>      <td>SEO</td>      <td>Mobile</td>      <td>ES</td>      <td>NaN</td>      <td>Android_App</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>2409</th>      <td>87209</td>      <td>2015-12-01</td>      <td>Direct</td>      <td>Web</td>      <td>ES</td>      <td>NaN</td>      <td>Chrome</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>2721</th>      <td>771642</td>      <td>2015-11-30</td>      <td>SEO</td>      <td>Mobile</td>      <td>ES</td>      <td>NaN</td>      <td>Android_App</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>    </tr>  </tbody></table></div><p>The missing values for sex,age, and country are all the same 454 rows so we will get rid of them</p><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>data<span class="token punctuation">.</span>index<span class="token punctuation">.</span>difference<span class="token punctuation">(</span>data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>sex<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">data<span class="token punctuation">[</span><span class="token string">'ads_channel_is_null'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token boolean">True</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">.</span>ads_channel<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>data<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>user_id                     0date                        0source                      0device                      0browser_language            0ads_channel            271174browser                     0conversion                  0test                        0sex                         0age                         0country                     0ads_channel_is_null         0dtype: int64</code></pre><h2 id="First-question-check-test-results"><a href="#First-question-check-test-results" class="headerlink" title="First question: check test results."></a>First question: check test results.</h2><p>But even before that, let’s make sure it is true Spain coverts much better than rest of LatAm countries</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># First check that Spain converts much better than the rest of LatAm countries</span>groupby_country <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'conversion'</span><span class="token punctuation">,</span> <span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'country'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>groupby_country <span class="token operator">=</span> groupby_country<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>groupby_country <span class="token operator">=</span> groupby_country<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">'conversion'</span><span class="token punctuation">,</span> ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Visualization</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'country'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'conversion'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>groupby_country<span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="2_26_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Visualization</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'country'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'conversion'</span><span class="token punctuation">,</span> hue<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="2_27_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># A/B test</span>data <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'Spain'</span><span class="token punctuation">]</span>test_val <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'conversion'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuescont_val <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'conversion'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token keyword">print</span><span class="token punctuation">(</span>test_val<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">,</span> cont_val<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0.043411161678422794      0.04829179055749524</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>ttest_ind<span class="token punctuation">(</span>test_val<span class="token punctuation">,</span> cont_val<span class="token punctuation">,</span> equal_var<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Ttest_indResult(statistic=-7.353895203080277, pvalue=1.9289178577799033e-13)</code></pre><p>Mmh..not in the test are converting at 4.8% while users in the test just at 4.3%.That’s a 10% drop, which should be dramatic if it were true. The most likely reason for weired A/B test results are:</p><ul><li>we didn’t collect enough data</li><li>some bias has been introduce in the experiment so that test/control people are not really random</li></ul><p>Firstly, let’s plot day by day, to see if these weird results have been constantly happening or they just started happening all of a sudden</p><pre class="line-numbers language-python"><code class="language-python">data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token string">'date'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token string">'date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data_test_by_day <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>test<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'conversion'</span><span class="token punctuation">]</span><span class="token operator">/</span>data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>test<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'conversion'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data_test_by_day<span class="token punctuation">.</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'test_vs_control'</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data_test_by_day<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data_test_by_day<span class="token punctuation">.</span>test_vs_control<span class="token punctuation">)</span><span class="token punctuation">;</span>plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_major_locator<span class="token punctuation">(</span>mdates<span class="token punctuation">.</span>DayLocator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_major_formatter<span class="token punctuation">(</span>mdates<span class="token punctuation">.</span>DateFormatter<span class="token punctuation">(</span><span class="token string">'%b %d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'test_vs_control'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Test Conversion in Relation to Control Conversion'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>C:\Users\Naixin\Anaconda3\lib\site-packages\pandas\plotting\_converter.py:129: FutureWarning: Using an implicitly registered datetime converter for a matplotlib plotting method. The converter was registered by pandas on import. Future versions of pandas will require you to explicitly register matplotlib converters.To register the converters:    &gt;&gt;&gt; from pandas.plotting import register_matplotlib_converters    &gt;&gt;&gt; register_matplotlib_converters()  warnings.warn(msg, FutureWarning)Text(0.5, 1.0, &#39;Test Conversion in Relation to Control Conversion&#39;)</code></pre><p><img src="2_32_2.png" alt="png"></p><p>From this plot, we notice a couple of things:</p><ul><li>The Control sample consistently under-performs throughout the 5 days</li><li>It is trending upward which could be a sign that the a/b test was for too short a time span</li></ul><p>To prove if the test was valid we can check for two things:</p><ul><li>Small Sample Size</li><li>Sample Bias</li></ul><p>We already saw that the test ran for 5 days in which the test sample was beginning to trend upwards, so that could be the culprit. However, we cannot know so we can look to bias get a further understanding.</p><p>For the a/b test to be valid, both the control and test sample have to be the same except for the one feature. If they are not then the effect of another feature could of caused the change in conversion. So here we will use three tools:</p><ul><li>We will plot the distributions of each feature in for the test and control</li><li>We will use a decision tree to see if any feature can predict whether a data point is in a test or control (it shouldn’t!)</li><li>We will use a t-test to verify results</li></ul><h1 id="1-Distribution-of-Columns-in-Relation-to-Test-or-Control-Sample"><a href="#1-Distribution-of-Columns-in-Relation-to-Test-or-Control-Sample" class="headerlink" title="1. Distribution of Columns in Relation to Test or Control Sample"></a>1. Distribution of Columns in Relation to Test or Control Sample</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Let's look at each feature's conversion in relation</span><span class="token comment" spellcheck="true">#to whether it's a test or control sample</span><span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>difference<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sns<span class="token punctuation">.</span>factorplot<span class="token punctuation">(</span>i<span class="token punctuation">,</span> data <span class="token operator">=</span> data<span class="token punctuation">,</span> kind <span class="token operator">=</span> <span class="token string">'count'</span><span class="token punctuation">,</span> col <span class="token operator">=</span> <span class="token string">'test'</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> aspect <span class="token operator">=</span> <span class="token number">1.5</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>C:\Users\Naixin\Anaconda3\lib\site-packages\seaborn\categorical.py:3666: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`&#39;point&#39;`) has changed `&#39;strip&#39;` in `catplot`.  warnings.warn(msg)C:\Users\Naixin\Anaconda3\lib\site-packages\seaborn\categorical.py:3672: UserWarning: The `size` paramter has been renamed to `height`; please update your code.  warnings.warn(msg, UserWarning)</code></pre><p><img src="2_35_1.png" alt="png"></p><p><img src="2_35_2.png" alt="png"></p><p><img src="2_35_3.png" alt="png"></p><p><img src="2_35_4.png" alt="png"></p><p><img src="2_35_5.png" alt="png"></p><p><img src="2_35_6.png" alt="png"></p><p><img src="2_35_7.png" alt="png"></p><p><img src="2_35_8.png" alt="png"></p><p><img src="2_35_9.png" alt="png"></p><p><img src="2_35_10.png" alt="png"></p><p><img src="2_35_11.png" alt="png"></p><ul><li>There is no clear difference between the control and test sample for each features</li><li>There seem to make small differences between age and countries but it’s not definite.</li><li>The new feature we made for the null values seems to have no effect.</li></ul><h1 id="2-Training-a-Model-To-Test-for-Bias"><a href="#2-Training-a-Model-To-Test-for-Bias" class="headerlink" title="2. Training a Model To Test for Bias"></a>2. Training a Model To Test for Bias</h1><p>Here we will use a random forrest classifier to see if any features become significant in predicting whether a data point is in a test or control sample. We will make the test column the dependent variable and the rest of the features conversion as independent variables.</p><h3 id="This-process-can-be-fully-automated-in-the-future-and-give-a-warning-when-an-a-b-test-may-contain-sample-bias"><a href="#This-process-can-be-fully-automated-in-the-future-and-give-a-warning-when-an-a-b-test-may-contain-sample-bias" class="headerlink" title="This process can be fully automated in the future and give a warning when an a/b test may contain sample bias!"></a>This process can be fully automated in the future and give a warning when an a/b test may contain sample bias!</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create a New Dataframe without the conversion column</span>tree_df <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>difference<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'conversion'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create dummy variables for categorical values</span>ads_channel_dums <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>tree_df<span class="token punctuation">.</span>ads_channel<span class="token punctuation">,</span> prefix<span class="token operator">=</span> <span class="token string">'ads'</span><span class="token punctuation">)</span>browser_dums <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>tree_df<span class="token punctuation">.</span>browser<span class="token punctuation">,</span>prefix<span class="token operator">=</span> <span class="token string">'browser'</span><span class="token punctuation">)</span>browser_language_dums <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>tree_df<span class="token punctuation">.</span>browser_language<span class="token punctuation">,</span>prefix<span class="token operator">=</span> <span class="token string">'browser_language'</span><span class="token punctuation">)</span>country_dums <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>tree_df<span class="token punctuation">.</span>country<span class="token punctuation">,</span>prefix<span class="token operator">=</span> <span class="token string">'country'</span><span class="token punctuation">)</span>device_dums <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>tree_df<span class="token punctuation">.</span>device<span class="token punctuation">,</span>prefix<span class="token operator">=</span> <span class="token string">'device'</span><span class="token punctuation">)</span>sex_dums <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>tree_df<span class="token punctuation">.</span>sex<span class="token punctuation">,</span>prefix<span class="token operator">=</span> <span class="token string">'sex'</span><span class="token punctuation">)</span>source_dums <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>tree_df<span class="token punctuation">.</span>source<span class="token punctuation">,</span>prefix<span class="token operator">=</span> <span class="token string">'source'</span><span class="token punctuation">)</span>dums_list <span class="token operator">=</span> <span class="token punctuation">[</span>ads_channel_dums<span class="token punctuation">,</span> browser_dums<span class="token punctuation">,</span>browser_language_dums<span class="token punctuation">,</span>country_dums<span class="token punctuation">,</span>device_dums<span class="token punctuation">,</span>sex_dums<span class="token punctuation">,</span>source_dums <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Training the Tree</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifierX <span class="token operator">=</span> tree_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>dums_list<span class="token punctuation">)</span>y <span class="token operator">=</span> tree_df<span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span>tree <span class="token operator">=</span> DecisionTreeClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>tree<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>DecisionTreeClassifier(class_weight=None, criterion=&#39;gini&#39;, max_depth=None,                       max_features=None, max_leaf_nodes=None,                       min_impurity_decrease=0.0, min_impurity_split=None,                       min_samples_leaf=1, min_samples_split=2,                       min_weight_fraction_leaf=0.0, presort=False,                       random_state=None, splitter=&#39;best&#39;)</code></pre><pre class="line-numbers language-python"><code class="language-python">features_significance<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>features</th>      <th>importance</th>    </tr>  </thead>  <tbody>    <tr>      <th>16</th>      <td>country_Argentina</td>      <td>0.21</td>    </tr>    <tr>      <th>30</th>      <td>country_Uruguay</td>      <td>0.04</td>    </tr>    <tr>      <th>35</th>      <td>sex_M</td>      <td>0.04</td>    </tr>    <tr>      <th>34</th>      <td>sex_F</td>      <td>0.04</td>    </tr>    <tr>      <th>13</th>      <td>browser_language_EN</td>      <td>0.03</td>    </tr>    <tr>      <th>3</th>      <td>ads_Google</td>      <td>0.02</td>    </tr>    <tr>      <th>14</th>      <td>browser_language_ES</td>      <td>0.02</td>    </tr>    <tr>      <th>15</th>      <td>browser_language_Other</td>      <td>0.02</td>    </tr>    <tr>      <th>5</th>      <td>ads_Yahoo</td>      <td>0.02</td>    </tr>    <tr>      <th>29</th>      <td>country_Peru</td>      <td>0.02</td>    </tr>    <tr>      <th>31</th>      <td>country_Venezuela</td>      <td>0.02</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># ploting</span>features_significance <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'features'</span><span class="token punctuation">:</span> X<span class="token punctuation">.</span>columns<span class="token punctuation">,</span>\          <span class="token string">'importance'</span><span class="token punctuation">:</span> tree<span class="token punctuation">.</span>feature_importances_<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">'importance'</span><span class="token punctuation">,</span> ascending <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">]</span>_ <span class="token operator">=</span> sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token string">'features'</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token string">'importance'</span>                  <span class="token punctuation">,</span>data <span class="token operator">=</span> features_significance<span class="token punctuation">,</span> orient <span class="token operator">=</span> <span class="token string">'v'</span><span class="token punctuation">)</span>_<span class="token punctuation">.</span>figure<span class="token punctuation">.</span>set_size_inches<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="2_44_0.png" alt="png"></p><ul><li>There is one very predictive features: whether country is Argentina</li><li>This is a signal for bias so we can verify with T-tests</li></ul><h1 id="3-using-T-tests-to-verify-results"><a href="#3-using-T-tests-to-verify-results" class="headerlink" title="3. using T-tests to verify results"></a>3. using T-tests to verify results</h1><p>Approach:</p><ul><li><p>We will then verify the power of these features by running t-tests on country</p></li><li><p>We will conclude that there is bias in the data if the data comes back non-significant for the features </p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">##1. Running T-Test</span>country <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>conversion_test <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>conversion_control <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ttest_vals<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>p_vals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">.</span>country<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">:</span>    temp <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>country <span class="token operator">==</span> i<span class="token punctuation">]</span>    cat1 <span class="token operator">=</span> temp<span class="token punctuation">[</span>data<span class="token punctuation">.</span>test <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>conversion    cat2 <span class="token operator">=</span> temp<span class="token punctuation">[</span>data<span class="token punctuation">.</span>test <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>conversion    ttest<span class="token punctuation">,</span> p <span class="token operator">=</span>stats<span class="token punctuation">.</span>ttest_ind<span class="token punctuation">(</span>cat2<span class="token punctuation">,</span> cat1<span class="token punctuation">)</span>    country<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    conversion_test<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cat1<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>float<span class="token punctuation">(</span>len<span class="token punctuation">(</span>cat1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    conversion_control<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cat2<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>float<span class="token punctuation">(</span>len<span class="token punctuation">(</span>cat2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ttest_vals<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ttest<span class="token punctuation">)</span>    p_vals<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'country'</span><span class="token punctuation">:</span> country<span class="token punctuation">,</span>               <span class="token string">'conversion_test'</span><span class="token punctuation">:</span> conversion_test<span class="token punctuation">,</span>              <span class="token string">'conversion_control'</span><span class="token punctuation">:</span> conversion_control<span class="token punctuation">,</span>             <span class="token string">'p_value'</span><span class="token punctuation">:</span> p_vals<span class="token punctuation">}</span><span class="token punctuation">)</span>\<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">,</span> <span class="token string">'p_value'</span><span class="token punctuation">,</span> <span class="token string">'conversion_test'</span><span class="token punctuation">,</span> <span class="token string">'conversion_control'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>C:\Users\Naixin\Anaconda3\lib\site-packages\ipykernel_launcher.py:9: UserWarning: Boolean Series key will be reindexed to match DataFrame index.  if __name__ == &#39;__main__&#39;:C:\Users\Naixin\Anaconda3\lib\site-packages\ipykernel_launcher.py:10: UserWarning: Boolean Series key will be reindexed to match DataFrame index.  # Remove the CWD from sys.path while we load stuff.</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>country</th>      <th>p_value</th>      <th>conversion_test</th>      <th>conversion_control</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Mexico</td>      <td>0.17</td>      <td>0.05</td>      <td>0.05</td>    </tr>    <tr>      <th>1</th>      <td>Colombia</td>      <td>0.42</td>      <td>0.05</td>      <td>0.05</td>    </tr>    <tr>      <th>2</th>      <td>Argentina</td>      <td>0.32</td>      <td>0.01</td>      <td>0.02</td>    </tr>    <tr>      <th>3</th>      <td>Peru</td>      <td>0.77</td>      <td>0.05</td>      <td>0.05</td>    </tr>    <tr>      <th>4</th>      <td>Venezuela</td>      <td>0.57</td>      <td>0.05</td>      <td>0.05</td>    </tr>    <tr>      <th>5</th>      <td>Chile</td>      <td>0.30</td>      <td>0.05</td>      <td>0.05</td>    </tr>    <tr>      <th>6</th>      <td>Ecuador</td>      <td>0.96</td>      <td>0.05</td>      <td>0.05</td>    </tr>    <tr>      <th>7</th>      <td>Guatemala</td>      <td>0.57</td>      <td>0.05</td>      <td>0.05</td>    </tr>    <tr>      <th>8</th>      <td>Bolivia</td>      <td>0.72</td>      <td>0.05</td>      <td>0.05</td>    </tr>    <tr>      <th>9</th>      <td>Honduras</td>      <td>0.47</td>      <td>0.05</td>      <td>0.05</td>    </tr>    <tr>      <th>10</th>      <td>El Salvador</td>      <td>0.25</td>      <td>0.05</td>      <td>0.05</td>    </tr>    <tr>      <th>11</th>      <td>Paraguay</td>      <td>0.88</td>      <td>0.05</td>      <td>0.05</td>    </tr>    <tr>      <th>12</th>      <td>Nicaragua</td>      <td>0.78</td>      <td>0.05</td>      <td>0.05</td>    </tr>    <tr>      <th>13</th>      <td>Costa Rica</td>      <td>0.69</td>      <td>0.05</td>      <td>0.05</td>    </tr>    <tr>      <th>14</th>      <td>Uruguay</td>      <td>0.88</td>      <td>0.01</td>      <td>0.01</td>    </tr>    <tr>      <th>15</th>      <td>Panama</td>      <td>0.71</td>      <td>0.05</td>      <td>0.05</td>    </tr>  </tbody></table></div><p>After control for country, the test clearly appears non-significant.Not a great success given that the goal was to impove conversion rate, but at least we know that a localized translation didn’t make things worse.</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p><b>1. If the Results Seem Unbelievable, They Probably Are  </b></p><ul><li>We intuitively know that a custom website for each region would yield better results. So when it didn’t it’s important to take extra precautions to make sure that the test was run appropriately, in this case we found that the test sample wasn’t indicative of the population</li></ul><p><b>2. We can Automate This Process Using Machine Learning  </b></p><ul><li>By building a model that can show us if any features can predict whether a user is in the test or control sample, we can automate the process. We can set a threshold for feature significance and let the model tell us automatically if the sample is biased or not! This gives us more time to deal with deeper subjects. 3. By simply looking at feature distributions, we miss the subtly of sample bias</li><li>When we saw the distribution of features, all the features seemed balanced. There were a little discrepancies in country but aged seemed balanced. If we had not run T-test or the decision tree to prove statistical significance then we would of missed country as the major indicator of a biased data set. When running an A/B test, the quality of the test is just important if not more important than the results.</li></ul><p><b>There are many ways to test bias but I’m going to try 2 here:</b>a. Train a to see if it can predict whether it’s the test or control sample(if the sample is unbiased then no features should be predictive)b. : A t-test should reveal whether a feature’s effect on conversion is statistically significant</p>]]></content>
      
      
      <categories>
          
          <category> Data Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python_Take home challenge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-converison rate</title>
      <link href="/2018/01/22/1-conversion-rate/"/>
      <url>/2018/01/22/1-conversion-rate/</url>
      
        <content type="html"><![CDATA[<p>You are asked to :</p><ul><li><p>confirm that the test is actually negative. That is, it appears that the old version of the site with just one translation across Spain AND LatAm performs better.</p></li><li><p>Explain why that might be happening. Are the localized translations really worse?</p></li><li><p>If you are identified what was wrong, design an algorithm that would return FALSE if the same problem is happening in the future and TRUE if everything is good and the results can be trusted.</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> warningswarnings<span class="token punctuation">.</span>simplefilter<span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> auc<span class="token punctuation">,</span> roc_curve<span class="token punctuation">,</span> classification_report<span class="token keyword">from</span> IPython<span class="token punctuation">.</span>display <span class="token keyword">import</span> display<span class="token punctuation">,</span> Image<span class="token punctuation">,</span> SVG<span class="token punctuation">,</span> Math<span class="token punctuation">,</span> YouTubeVideo<span class="token keyword">import</span> h2o<span class="token keyword">from</span> h2o<span class="token punctuation">.</span>frame <span class="token keyword">import</span> H2OFrame<span class="token keyword">from</span> h2o<span class="token punctuation">.</span>estimators<span class="token punctuation">.</span>random_forest <span class="token keyword">import</span> H2ORandomForestEstimator<span class="token keyword">from</span> h2o<span class="token punctuation">.</span>grid<span class="token punctuation">.</span>grid_search <span class="token keyword">import</span> H2OGridSearch<span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'conversion_data.csv'</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>country</th>      <th>age</th>      <th>new_user</th>      <th>source</th>      <th>total_pages_visited</th>      <th>converted</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>UK</td>      <td>25</td>      <td>1</td>      <td>Ads</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>US</td>      <td>23</td>      <td>1</td>      <td>Seo</td>      <td>5</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>US</td>      <td>28</td>      <td>1</td>      <td>Seo</td>      <td>4</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>China</td>      <td>39</td>      <td>1</td>      <td>Seo</td>      <td>5</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>US</td>      <td>30</td>      <td>1</td>      <td>Seo</td>      <td>6</td>      <td>0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python">data<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 316200 entries, 0 to 316199Data columns (total 6 columns):country                316200 non-null objectage                    316200 non-null int64new_user               316200 non-null int64source                 316200 non-null objecttotal_pages_visited    316200 non-null int64converted              316200 non-null int64dtypes: int64(4), object(2)memory usage: 14.5+ MB</code></pre><pre class="line-numbers language-python"><code class="language-python">data<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>age</th>      <th>new_user</th>      <th>total_pages_visited</th>      <th>converted</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>316200.000000</td>      <td>316200.000000</td>      <td>316200.000000</td>      <td>316200.000000</td>    </tr>    <tr>      <th>mean</th>      <td>30.569858</td>      <td>0.685465</td>      <td>4.872966</td>      <td>0.032258</td>    </tr>    <tr>      <th>std</th>      <td>8.271802</td>      <td>0.464331</td>      <td>3.341104</td>      <td>0.176685</td>    </tr>    <tr>      <th>min</th>      <td>17.000000</td>      <td>0.000000</td>      <td>1.000000</td>      <td>0.000000</td>    </tr>    <tr>      <th>25%</th>      <td>24.000000</td>      <td>0.000000</td>      <td>2.000000</td>      <td>0.000000</td>    </tr>    <tr>      <th>50%</th>      <td>30.000000</td>      <td>1.000000</td>      <td>4.000000</td>      <td>0.000000</td>    </tr>    <tr>      <th>75%</th>      <td>36.000000</td>      <td>1.000000</td>      <td>7.000000</td>      <td>0.000000</td>    </tr>    <tr>      <th>max</th>      <td>123.000000</td>      <td>1.000000</td>      <td>29.000000</td>      <td>1.000000</td>    </tr>  </tbody></table></div><p>user base is pretty young, conversion rate at around 3% is industry standard. it make sense.everything seems to make sense here except for max age 123 yrs</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> column <span class="token keyword">in</span> data<span class="token punctuation">.</span>columns<span class="token punctuation">:</span>    uniques <span class="token operator">=</span> sorted<span class="token punctuation">(</span>data<span class="token punctuation">[</span>column<span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0:20s} {1:5d}\t'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>column<span class="token punctuation">,</span> len<span class="token punctuation">(</span>uniques<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> uniques<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>country                  4     [&#39;China&#39;, &#39;Germany&#39;, &#39;UK&#39;, &#39;US&#39;]age                     60     [17, 18, 19, 20, 21, 22, 23, 24, 25, 26]new_user                 2     [0, 1]source                   3     [&#39;Ads&#39;, &#39;Direct&#39;, &#39;Seo&#39;]total_pages_visited     29     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]converted                2     [0, 1]</code></pre><p>A few quick observations: the site is probably a US site, although it does have a large Chinese user base as well user base is pretty young conversion rate at around 3% is industry standard. It makes sense. everything seems to make sense here except for max age 123 yrs! Let’s investigate it:</p><h1 id="Remove-Outliers"><a href="#Remove-Outliers" class="headerlink" title="Remove Outliers"></a>Remove Outliers</h1><p>Typically, age should be below 100. So, first let check outliers and clean the dataset</p><pre class="line-numbers language-python"><code class="language-python">data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">90</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>country</th>      <th>age</th>      <th>new_user</th>      <th>source</th>      <th>total_pages_visited</th>      <th>converted</th>    </tr>  </thead>  <tbody>    <tr>      <th>90928</th>      <td>Germany</td>      <td>123</td>      <td>0</td>      <td>Seo</td>      <td>15</td>      <td>1</td>    </tr>    <tr>      <th>295581</th>      <td>UK</td>      <td>111</td>      <td>0</td>      <td>Ads</td>      <td>10</td>      <td>1</td>    </tr>  </tbody></table></div><p>There are only two records that is invalid, let’s first remove them directly</p><p>It is just 2 users! In this case, we can remove them, nothing will change. In general, depending on theproblem, you can:</p><ul><li>remove the entire row saying you don’t trust the data</li><li>treat those values as NAsif there is a pattern, try to figure out what went wrong.In doubt, always go with removing the row. It is the safest choice.You probably also want to emphasize in the text that wrong data is worrisome and can be an indicator ofsome bug in the logging code. Therefore, you’d like to talk to the software engineer who implemented thecode to see if, perhaps, there are some bugs which affect the data significantly.</li><li>Anyway, here is probably just users who put wrong data. So let’s remove them:</li></ul><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Exploratory-Data-Analysis"><a href="#Exploratory-Data-Analysis" class="headerlink" title="Exploratory Data Analysis"></a>Exploratory Data Analysis</h1><p>now let’s quickly investigate the variables and how their distribution differs for the two classes, this will help us understand whether ther is any information in our data in the first place and get a sense of the data</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Visualization of different countries</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ncols<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>countplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'country'</span><span class="token punctuation">,</span> hue<span class="token operator">=</span><span class="token string">'converted'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Count Plot of Country'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_yscale<span class="token punctuation">(</span><span class="token string">'log'</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'country'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'converted'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Mean Conversion Rate per Country'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="conversion_rate_14_0.jpg" alt="png"></p><p>Here it clearly looks like Chinese covert at a much lower rate than other countries.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Visualization of different user types</span>grouped <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'new_user'</span><span class="token punctuation">,</span> <span class="token string">'converted'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'new_user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ncols<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>countplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'new_user'</span><span class="token punctuation">,</span> hue<span class="token operator">=</span><span class="token string">'converted'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Count Plot of User Types'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_yscale<span class="token punctuation">(</span><span class="token string">'log'</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'new_user'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'converted'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Mean Conversion Rate per User Type'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="conversion_rate_16_0.jpg" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Visualization of different sources</span>grouped <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'source'</span><span class="token punctuation">,</span> <span class="token string">'converted'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'source'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ncols<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>countplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'source'</span><span class="token punctuation">,</span> hue<span class="token operator">=</span><span class="token string">'converted'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Count Plot of Different Sources'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_yscale<span class="token punctuation">(</span><span class="token string">'log'</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'source'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'converted'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Mean Conversion Rate per Source'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="conversion_rate_17_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Visualization of different age</span>grouped <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'converted'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>hist_kws<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'histtype'</span><span class="token punctuation">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'edgecolor'</span><span class="token punctuation">:</span><span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token string">'alpha'</span><span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">}</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ncols<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>distplot<span class="token punctuation">(</span>data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'converted'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Converted 0'</span><span class="token punctuation">,</span>              ax<span class="token operator">=</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hist_kws<span class="token operator">=</span>hist_kws<span class="token punctuation">)</span>sns<span class="token punctuation">.</span>distplot<span class="token punctuation">(</span>data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'converted'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Converted 1'</span><span class="token punctuation">,</span>              ax<span class="token operator">=</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hist_kws<span class="token operator">=</span>hist_kws<span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Count Plot of Age'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>grouped<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grouped<span class="token punctuation">[</span><span class="token string">'converted'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'.-'</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Mean Conversion Rate vs. Age'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Mean convertion rate'</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="conversion_rate_18_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Visualization of different sources</span>grouped <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'total_pages_visited'</span><span class="token punctuation">,</span> <span class="token string">'converted'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'total_pages_visited'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ncols<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>distplot<span class="token punctuation">(</span>data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'converted'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'total_pages_visited'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              label<span class="token operator">=</span><span class="token string">'Converted 0'</span><span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hist_kws<span class="token operator">=</span>hist_kws<span class="token punctuation">)</span>sns<span class="token punctuation">.</span>distplot<span class="token punctuation">(</span>data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'converted'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'total_pages_visited'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              label<span class="token operator">=</span><span class="token string">'Converted 1'</span><span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hist_kws<span class="token operator">=</span>hist_kws<span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Count Plot of Age'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>grouped<span class="token punctuation">[</span><span class="token string">'total_pages_visited'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grouped<span class="token punctuation">[</span><span class="token string">'converted'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'.-'</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Mean Conversion Rate vs. Total_pages_visited'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'total_pages_visited'</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Mean convertion rate'</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="conversion_rate_19_0.png" alt="png"></p><p>definitely spending more time on the site implies higher probability of conversion</p><h1 id="Machine-Learning"><a href="#Machine-Learning" class="headerlink" title="Machine Learning"></a>Machine Learning</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Initialize H2O cluster</span>h2o<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>h2o<span class="token punctuation">.</span>remove_all<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>Checking whether there is an H2O instance running at http://localhost:54321 ..... not found.Attempting to start a local H2O server...; Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)  Starting server from C:\Users\Naixin\Anaconda3\lib\site-packages\h2o\backend\bin\h2o.jar  Ice root: C:\Users\Naixin\AppData\Local\Temp\tmpmhgna45g  JVM stdout: C:\Users\Naixin\AppData\Local\Temp\tmpmhgna45g\h2o_Naixin_started_from_python.out  JVM stderr: C:\Users\Naixin\AppData\Local\Temp\tmpmhgna45g\h2o_Naixin_started_from_python.err  Server is running at http://127.0.0.1:54321Connecting to H2O server at http://127.0.0.1:54321 ... successful.</code></pre><div style="overflow:auto"><table style="width:50%"><tr><td>H2O cluster uptime:</td><td>03 secs</td></tr><tr><td>H2O cluster timezone:</td><td>America/Chicago</td></tr><tr><td>H2O data parsing timezone:</td><td>UTC</td></tr><tr><td>H2O cluster version:</td><td>3.26.0.6</td></tr><tr><td>H2O cluster version age:</td><td>4 days </td></tr><tr><td>H2O cluster name:</td><td>H2O_from_python_Naixin_fptvaq</td></tr><tr><td>H2O cluster total nodes:</td><td>1</td></tr><tr><td>H2O cluster free memory:</td><td>1.747 Gb</td></tr><tr><td>H2O cluster total cores:</td><td>4</td></tr><tr><td>H2O cluster allowed cores:</td><td>4</td></tr><tr><td>H2O cluster status:</td><td>accepting new members, healthy</td></tr><tr><td>H2O connection url:</td><td>http://127.0.0.1:54321</td></tr><tr><td>H2O connection proxy:</td><td>None</td></tr><tr><td>H2O internal security:</td><td>False</td></tr><tr><td>H2O API Extensions:</td><td>Amazon S3, Algos, AutoML, Core V3, TargetEncoder, Core V4</td></tr><tr><td>Python version:</td><td>3.7.3 final</td></tr></table></div><ul><li>I am going to pick a random forest to predict conversion rate. </li><li>I pick a random forest cause: it usually<ol><li>requires very little time to optimize it (its default params are often close to the best ones) </li><li>it is strong with outliers, irrelevant variables, continuous and discrete variables. </li></ol></li></ul><p>I will use the random forest to predict conversion, then I will use its partial dependence plots and variable importance to get insights about howit got information from the variables. Also, I will build a simple tree to find the most obvious user segmentsand see if they agree with RF partial dependence plots.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Transform to H2O Frame, and make sure the target variable is categorical</span>h2o_df <span class="token operator">=</span> H2OFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>h2o_df<span class="token punctuation">[</span><span class="token string">'new_user'</span><span class="token punctuation">]</span> <span class="token operator">=</span> h2o_df<span class="token punctuation">[</span><span class="token string">'new_user'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>asfactor<span class="token punctuation">(</span><span class="token punctuation">)</span>h2o_df<span class="token punctuation">[</span><span class="token string">'converted'</span><span class="token punctuation">]</span> <span class="token operator">=</span> h2o_df<span class="token punctuation">[</span><span class="token string">'converted'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>asfactor<span class="token punctuation">(</span><span class="token punctuation">)</span>h2o_df<span class="token punctuation">.</span>summary<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Parse progress: |█████████████████████████████████████████████████████████| 100%</code></pre><table><thead><tr><th>       </th><th>country  </th><th>age              </th><th>new_user  </th><th>source  </th><th>total_pages_visited  </th><th>converted  </th></tr></thead><tbody><tr><td>type   </td><td>enum     </td><td>int              </td><td>enum      </td><td>enum    </td><td>int                  </td><td>enum       </td></tr><tr><td>mins   </td><td>         </td><td>17.0             </td><td>          </td><td>        </td><td>1.0                  </td><td>           </td></tr><tr><td>mean   </td><td>         </td><td>30.5693110013347 </td><td>          </td><td>        </td><td>4.872918234777034    </td><td>           </td></tr><tr><td>maxs   </td><td>         </td><td>79.0             </td><td>          </td><td>        </td><td>29.0                 </td><td>           </td></tr><tr><td>sigma  </td><td>         </td><td>8.268957596421474</td><td>          </td><td>        </td><td>3.3410533442156267   </td><td>           </td></tr><tr><td>zeros  </td><td>         </td><td>0                </td><td>          </td><td>        </td><td>0                    </td><td>           </td></tr><tr><td>missing</td><td>0        </td><td>0                </td><td>0         </td><td>0       </td><td>0                    </td><td>0          </td></tr><tr><td>0      </td><td>UK       </td><td>25.0             </td><td>1         </td><td>Ads     </td><td>1.0                  </td><td>0          </td></tr><tr><td>1      </td><td>US       </td><td>23.0             </td><td>1         </td><td>Seo     </td><td>5.0                  </td><td>0          </td></tr><tr><td>2      </td><td>US       </td><td>28.0             </td><td>1         </td><td>Seo     </td><td>4.0                  </td><td>0          </td></tr><tr><td>3      </td><td>China    </td><td>39.0             </td><td>1         </td><td>Seo     </td><td>5.0                  </td><td>0          </td></tr><tr><td>4      </td><td>US       </td><td>30.0             </td><td>1         </td><td>Seo     </td><td>6.0                  </td><td>0          </td></tr><tr><td>5      </td><td>US       </td><td>31.0             </td><td>0         </td><td>Seo     </td><td>1.0                  </td><td>0          </td></tr><tr><td>6      </td><td>China    </td><td>27.0             </td><td>1         </td><td>Seo     </td><td>4.0                  </td><td>0          </td></tr><tr><td>7      </td><td>US       </td><td>23.0             </td><td>0         </td><td>Ads     </td><td>4.0                  </td><td>0          </td></tr><tr><td>8      </td><td>UK       </td><td>29.0             </td><td>0         </td><td>Direct  </td><td>4.0                  </td><td>0          </td></tr><tr><td>9      </td><td>US       </td><td>25.0             </td><td>0         </td><td>Ads     </td><td>2.0                  </td><td>0          </td></tr></tbody></table><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Split into 75% training and 25% test dataset</span>strat_split <span class="token operator">=</span> h2o_df<span class="token punctuation">[</span><span class="token string">'converted'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>stratified_split<span class="token punctuation">(</span>test_frac<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">,</span> seed<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>train <span class="token operator">=</span> h2o_df<span class="token punctuation">[</span>strat_split <span class="token operator">==</span> <span class="token string">'train'</span><span class="token punctuation">]</span>test <span class="token operator">=</span> h2o_df<span class="token punctuation">[</span>strat_split <span class="token operator">==</span> <span class="token string">'test'</span><span class="token punctuation">]</span>feature <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'new_user'</span><span class="token punctuation">,</span> <span class="token string">'source'</span><span class="token punctuation">,</span> <span class="token string">'total_pages_visited'</span><span class="token punctuation">]</span>target <span class="token operator">=</span> <span class="token string">'converted'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Build random forest model</span>model <span class="token operator">=</span> H2ORandomForestEstimator<span class="token punctuation">(</span>balance_classes<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> ntrees<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> max_depth<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>                                  mtries<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> seed<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">,</span> score_each_iteration<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>train<span class="token punctuation">(</span>x<span class="token operator">=</span>feature<span class="token punctuation">,</span> y<span class="token operator">=</span>target<span class="token punctuation">,</span> training_frame<span class="token operator">=</span>train<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>drf Model Build progress: |███████████████████████████████████████████████| 100%</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Feature importance</span>importance <span class="token operator">=</span> model<span class="token punctuation">.</span>varimp<span class="token punctuation">(</span>use_pandas<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'scaled_importance'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'variable'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>importance<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="conversion_rate_27_0.png" alt="png"></p><p>total pages visited is the most important one, by far.Unfortunately, it is probably the least “actionable”. People visit many pages cause they already want to buy. Also, in order to buy you have to click on multipages</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Make predictions</span>train_true <span class="token operator">=</span> train<span class="token punctuation">.</span>as_data_frame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'converted'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuestest_true <span class="token operator">=</span> test<span class="token punctuation">.</span>as_data_frame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'converted'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuestrain_pred <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>train<span class="token punctuation">)</span><span class="token punctuation">.</span>as_data_frame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'p1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuestest_pred <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">.</span>as_data_frame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'p1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuestrain_fpr<span class="token punctuation">,</span> train_tpr<span class="token punctuation">,</span> _ <span class="token operator">=</span> roc_curve<span class="token punctuation">(</span>train_true<span class="token punctuation">,</span> train_pred<span class="token punctuation">)</span>test_fpr<span class="token punctuation">,</span> test_tpr<span class="token punctuation">,</span> _ <span class="token operator">=</span> roc_curve<span class="token punctuation">(</span>test_true<span class="token punctuation">,</span> test_pred<span class="token punctuation">)</span>train_auc <span class="token operator">=</span> np<span class="token punctuation">.</span>round<span class="token punctuation">(</span>auc<span class="token punctuation">(</span>train_fpr<span class="token punctuation">,</span> train_tpr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>test_auc <span class="token operator">=</span> np<span class="token punctuation">.</span>round<span class="token punctuation">(</span>auc<span class="token punctuation">(</span>test_fpr<span class="token punctuation">,</span> test_tpr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>drf prediction progress: |████████████████████████████████████████████████| 100%drf prediction progress: |████████████████████████████████████████████████| 100%</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Classification report</span><span class="token keyword">print</span><span class="token punctuation">(</span>classification_report<span class="token punctuation">(</span>y_true<span class="token operator">=</span>test_true<span class="token punctuation">,</span> y_pred<span class="token operator">=</span><span class="token punctuation">(</span>test_pred <span class="token operator">></span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>              precision    recall  f1-score   support           0       0.99      1.00      0.99     76500           1       0.84      0.63      0.72      2550    accuracy                           0.98     79050   macro avg       0.91      0.82      0.86     79050weighted avg       0.98      0.98      0.98     79050</code></pre><p>​    </p><pre class="line-numbers language-python"><code class="language-python">fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>train_fpr<span class="token punctuation">,</span> train_tpr<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Train AUC: '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>train_auc<span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>test_fpr<span class="token punctuation">,</span> test_tpr<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Test AUC: '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>test_auc<span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'False Positive Rate'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'True Positive Rate'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="conversion_rate_31_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">_ <span class="token operator">=</span> model<span class="token punctuation">.</span>partial_plot<span class="token punctuation">(</span>train<span class="token punctuation">,</span> cols<span class="token operator">=</span>feature<span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>PartialDependencePlot progress: |█████████████████████████████████████████| 100%</code></pre><p><img src="conversion_rate_32_1.png" alt="png"></p><p>In partial dependency plots, we just care about trends, not the actual y valueso this shows:</p><ul><li>user with old account are better than new users</li><li>china is really bad, all other country are similar with Germany being the best</li><li>the site works very well for young people and bad for less young people(&gt;30)</li><li>source is irrelative</li></ul><h1 id="Conclusions-and-suggestions"><a href="#Conclusions-and-suggestions" class="headerlink" title="Conclusions and suggestions:"></a>Conclusions and suggestions:</h1><pre class="line-numbers language-python"><code class="language-python">i <span class="token operator">=</span> Image<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'conclusion.png'</span><span class="token punctuation">)</span>i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="conversion_rate_35_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Shutdown h2o instance</span>h2o<span class="token punctuation">.</span>cluster<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>H2O session _sid_a87c closed.</code></pre><p>with more time you spend ~ 1 day trying other models/different params and I would pick the best</p><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Take home data challenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python_Take home challenge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ISLR-Multiple Linear Regression</title>
      <link href="/2018/01/22/islr-multiple-linear-regression/"/>
      <url>/2018/01/22/islr-multiple-linear-regression/</url>
      
        <content type="html"><![CDATA[<h1 id="Comparing-Logistic-Regression-LDA-QDA-and-KNN"><a href="#Comparing-Logistic-Regression-LDA-QDA-and-KNN" class="headerlink" title="Comparing Logistic Regression, LDA, QDA, and KNN"></a>Comparing Logistic Regression, LDA, QDA, and KNN</h1><h2 id="logistic-regression-and-LDA-methods-are-closely-connected"><a href="#logistic-regression-and-LDA-methods-are-closely-connected" class="headerlink" title="logistic regression and LDA methods are closely connected."></a>logistic regression and LDA methods are closely connected.</h2><p><strong>Setting</strong>: Consider the two-class setting with $p = 1$ predictor,and let $p_1(x)$ and $p_2(x) = 1−p_1(x)$ be the probabilities that the observation$X = x$ belongs to class 1 and class 2, respectively.</p><p>In LDA, from</p><p>\begin{align}p_k(x)=\frac{\pi_k \frac{1}{\sqrt{2\pi}\sigma}\exp{\left( -\frac{1}{2\sigma^2}(x-\mu_k)^2 \right)}}{\sum_{l=1}^K\pi_l\frac{1}{\sqrt{2\pi}\sigma}\exp{\left( -\frac{1}{2\sigma^2}(x-\mu_l)^2 \right)}}\end{align}</p><p>\begin{align}\delta_k(x)=x\frac{\mu_k}{\sigma^2}-\frac{\mu_k^2}{2\sigma^2}+\log(\pi_k) \end{align}</p><p>The <strong>log odds</strong> is given by</p><p>\begin{align}\log{\frac{p_1(x)}{1-p_1(x)}}=\log{\frac{p_1(x)}{p_2(x)}}=c_0+c_1x\end{align}</p><p>where c0 and c1 are functions of μ1, μ2, and σ2.</p><p>In Logistic Regression,</p><p>\begin{align}\log{\frac{p_1}{1-p_1}}=\beta_0+\beta_1x\end{align}</p><p><strong>SAME</strong></p><ul><li><strong>Both logistic regressionand LDA produce linear decision boundaries.</strong> </li></ul><p><strong>DIFFERENCES</strong></p><ul><li><p>The only differencebetween the two approaches lies in the fact that β0 and β1 are estimatedusing maximum likelihood, whereas c0 and c1 are computed using the estimatedmean and variance from a normal distribution. This same connectionbetween LDA and logistic regression also holds for multidimensional datawith p &gt; 1.</p></li><li><p>LDA assumes that the observations are drawnfrom a Gaussian distribution with a common covariance matrix in eachclass, and so can provide some improvements over logistic regression whenthis assumption approximately holds. Conversely, logistic regression canoutperform LDA if these Gaussian assumptions are not met.</p></li></ul><h2 id="KNN-dominate-LDA-and-Logistic-in-non-linear-setting"><a href="#KNN-dominate-LDA-and-Logistic-in-non-linear-setting" class="headerlink" title="KNN dominate LDA and Logistic in non-linear setting"></a>KNN dominate LDA and Logistic in non-linear setting</h2><p>In order to make a prediction for an observation X = x, the K training observations that are closest to x areidentified. Then X is assigned to the class to which the plurality of theseobservations belong. Hence KNN is a completely <strong>non-parametric</strong> approach:<em>no assumptions are made about the shape of the decision boundary</em>. </p><blockquote><p>Therefore,we can expect KNN to dominate LDA and logistic regressionwhen the decision boundary is highly non-linear. </p></blockquote><p>On the other hand, KNNdoes not tell us which predictors are important</p><h2 id="QDA-serves-as-a-compromise-between-KNN-LDA-and-logistic-regression"><a href="#QDA-serves-as-a-compromise-between-KNN-LDA-and-logistic-regression" class="headerlink" title="QDA serves as a compromise between KNN, LDA and logistic regression"></a>QDA serves as a compromise between KNN, LDA and logistic regression</h2><p>QDA serves as a compromise between the non-parametric KNNmethod and the linear LDA and logistic regression approaches. Since QDAassumes a quadratic decision boundary, it can accurately model a widerrange of problems than can the linear methods. Though not as flexibleas KNN, QDA can perform better in the presence of a <em>limited number oftraining observations</em> because it does make some assumptions about theform of the decision boundary. </p><img src="17.png" width="800"> <p><strong>Scenario 1</strong>: </p><ul><li>20 training observations in each of two classes. The observations within each class were uncorrelated random normal variables with a different mean in each class.</li><li>LDA performed well in this setting. KNN performed poorly because it paid a price in terms of variance thatwas not offset by a reduction in bias. </li></ul><p><strong>Scenario 2</strong>: </p><ul><li>Details are as in Scenario 1, except that within eachclass, the two predictors had a correlation of −0.5. </li><li>Little change in the relative performances ofthe methods as compared to the previous scenario.</li></ul><p><strong>Scenario 3</strong>: </p><ul><li>X1 and X2 are from the t-distribution, with 50 observations per class. </li></ul><blockquote><p>The <strong>t-distribution</strong> has a similar shape to the normal distribution, but it has a tendency to yield more extremepoints—that is, more points that are far from the mean. </p></blockquote><ul><li>The decision boundary was still linear, and so fit into the logisticregression framework. The set-up violated the assumptions of LDA,since the observations were not drawn from a normal distribution. QDA results deteriorated considerablyas a consequence of non-normality.</li></ul><p><strong>Scenario 4</strong>: </p><ul><li>The data were generated from a normal distribution,with a correlation of 0.5 between the predictors in the first class,and correlation of −0.5 between the predictors in the second class.</li><li>This setup corresponded to the QDA assumption, and resulted inquadratic decision boundaries. </li></ul><p><strong>Scenario 5</strong>: </p><ul><li>Within each class, the observations were generated froma normal distribution with uncorrelated predictors. However, the responseswere sampled from the logistic function using $X^2_1 , X^2_2, and \, X1 × X2$ as predictors. </li><li>Consequently, there is a quadratic decisionboundary. QDA onceagain performed best, followed closely by KNN-CV. The linear methodshad poor performance.</li></ul><p><strong>Scenario 6</strong>: </p><ul><li>Details are as in the previous scenario, but the responseswere sampled from a more complicated non-linear function. </li><li>Even the quadratic decision boundaries of QDA could not adequatelymodel the data. </li><li>Much more flexible KNN-CV method gave the best results. ButKNN with K = 1 gave the worst results out of all methods. </li></ul><blockquote><p>Thishighlights the fact that <strong>even when the data exhibits a complex nonlinearrelationship, a non-parametric method such as KNN can stillgive poor results if the level of smoothness is not chosen correctly.</strong></p></blockquote><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><ul><li><p>When the true decision boundaries are linear, thenthe LDA and logistic regression approaches will tend to perform well.</p></li><li><p>Whenthe boundaries are moderately non-linear, QDA may give better results.</p></li><li><p>For much more complicated decision boundaries, a non-parametricapproach such as KNN can be superior. But the level of smoothness for anon-parametric approach must be chosen carefully.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Regression </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
