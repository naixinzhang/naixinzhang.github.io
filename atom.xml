<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Naixin&#39;s blog</title>
  
  <subtitle>Naixin Zhang</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://naixinzhang.github.io/"/>
  <updated>2020-09-21T04:30:35.378Z</updated>
  <id>http://naixinzhang.github.io/</id>
  
  <author>
    <name>Naixin Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://naixinzhang.github.io/2020/09/16/mysql/wei-3-tong-suo-cun-zhe/"/>
    <id>http://naixinzhang.github.io/2020/09/16/mysql/wei-3-tong-suo-cun-zhe/</id>
    <published>2020-09-17T01:49:30.000Z</published>
    <updated>2020-09-21T04:30:35.378Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.1point3acres.com/bbs/interview/amazon-data-science-478865.html" target="_blank" rel="noopener">https://www.1point3acres.com/bbs/interview/amazon-data-science-478865.html</a>亚麻BIE physical retail seatle1)一个manuafacture 有三种product 求每天三种产品里最早生产的三个产品product_name, product_date, type</p><pre><code>SELECT * FROM(SELECT *, ROW_NUMBER() OVER(PARTITION BY Type ORDER BY product_date ASC) AS numFROM Orders)WHERE num &lt;=3</code></pre><p>TOP N ROWS:</p><p>WITHorders_ranked as (   SELECT-baidu 1point3acres   date_trunc(‘month’,datetime)::date as month,   <em>,   row_number() over (partition by date_trunc(‘month’,datetime) order by amount desc, datetime)   FROM orders_cleaned)SELECT </em>. check 1point3acres for more.</p><p>FROM orders_rankedWHERE row_number&lt;=2ORDER BY 1</p><p>2)用group by还是 rank 的sql run的时间最短， total 1B row数据，两种情况：</p><ol><li>3 个类型产品，每个类型333333333 rows </li><li>1000个类型产品，每个类型1000000 row</li></ol><p>group by比较快。例子，一摞纸，要是rank的话要一张一张看数字。group by 就直接归类。</p><p>3)day-to-day production change: d-o-d% = (current_day_amt - Previous_day_amt)/(current_day_amt) 这里用到window function and lag()</p><pre><code>SELECT ROUND((current_day_amt - Previous_day_amt)/(current_day_amt) ,2) FROM(SELECT current_day_amt, LAG(current_day_amt,1) OVER (ORDER BY DAY) as previous_day_amtFROM (SELECT COUNT(PRODUCT_NAME) OVER(PARTITION BY product_date) AS current_day_amt, *FROM..) a) b</code></pre><p><em>Calculate Revenue:         100</em>(m1-m0)/m0</p><p>WITHmonthly_revenue as (   SELECT   date_trunc(‘month’,datetime)::date as month,   state,   sum(amount) as revenue   FROM orders   GROUP BY 1,2),prev_month_revenue as (   SELECT <em>,   lag(revenue) over (partition by state order by month) as prev_month_revenue   FROM monthly_revenue)SELECT </em>,round(100.0*(revenue-prev_month_revenue)/prev_month_revenue,1) as revenue_growthFROM prev_month_revenueORDER BY 2,11.duplicate data</p><p>FB DS:</p><p>What is the default order of ORDER BY? AscendingHow do you combine the result-set of two statement? UNION &amp; UNION ALL, depends on requirementWhat is the value of 1+ null? null</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.1point3acres.com/bbs/interview/amazon-data-science-478865.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.1point3ac
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SQL_notes_Mode</title>
    <link href="http://naixinzhang.github.io/2020/09/15/mysql/sql-notes-mode/"/>
    <id>http://naixinzhang.github.io/2020/09/15/mysql/sql-notes-mode/</id>
    <published>2020-09-16T00:25:09.000Z</published>
    <updated>2020-09-21T04:30:35.339Z</updated>
    
    <content type="html"><![CDATA[<p>Learning from <a href="https://mode.com/sql-tutorial/" target="_blank" rel="noopener">https://mode.com/sql-tutorial/</a></p><h1 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h1><p><strong>1.SELECT * FROM table</strong></p><ul><li><p>rename column names: </p><pre><code>SELECT west AS &quot;West Region&quot; FROM tutorial.us_housing_units</code></pre></li></ul><p><strong>2.LIMIT</strong></p><p><strong>3.WHERE</strong>   </p><ul><li><p>Equal to    =</p></li><li><p>Not equal to    &lt;&gt; or !=</p></li><li><p>Greater than    &gt;</p></li><li><p>Less than    &lt;</p></li><li><p>Greater than or equal to    &gt;=</p></li><li><p>Less than or equal to    &lt;=</p></li><li><p>Arithmetic in SQL : You can perform arithmetic in SQL using the same operators you would in Excel: +, -, *, /.</p><pre><code> SELECT west + south AS south_plus_west  FROM tutorial.us_housing_units</code></pre><p> <strong>4.SQL Logical operators</strong></p></li><li><p><strong>LIKE</strong> allows you to match similar values, instead of exact values.EX: include rows for which “group” starts with “Snoop” :</p><pre><code>SELECT *FROM tutorial.billboard_top_100_year_endWHERE &quot;group&quot; LIKE &#39;Snoop%&#39;</code></pre><p>(In general, putting double quotes around a word or phrase will indicate that you are referring to that    column name)<strong><em>like is case_sensitive,ILIKE is not case sensitive.</em></strong>You can also use _ (a single underscore) to substitute for an individual character:</p></li></ul><pre><code>SELECT *tutorial.billboard_top_100_year_endWHERE artist ILIKE &#39;dr_ke&#39;</code></pre><ul><li><p><strong>IN</strong> allows you to specify a list of values you’d like to include.EX:</p><pre><code>SELECT *tutorial.billboard_top_100_year_endWHERE year_rank IN (1, 2, 3)</code></pre><p>  (non-numerical values, but they need to go inside single quotes. )</p><pre><code>SELECT *FROM tutorial.billboard_top_100_year_endWHERE artist IN (&#39;Taylor Swift&#39;, &#39;Usher&#39;, &#39;Ludacris&#39;)</code></pre></li><li><p><strong>BETWEEN</strong> allows you to select only rows within a certain range.</p></li><li><p><strong>IS NULL</strong> allows you to select rows that contain no data in a given column.</p><pre><code>  SELECT *  FROM tutorial.billboard_top_100_year_endWHERE artist IS NULL</code></pre></li></ul><pre><code>(WHERE artist = NULL will not work��you can&#39;t perform arithmetic on null values.)</code></pre><ul><li><p><strong>AND</strong> allows you to select only rows that satisfy two conditions.You can use SQL’s AND operator with additional AND statements or any other comparison operator, as many times as you want.</p><pre><code>SELECT *FROM tutorial.billboard_top_100_year_endWHERE year = 2012 AND year_rank &lt;= 10 AND &quot;group&quot; ILIKE &#39;%feat%&#39;</code></pre></li><li><p><strong>OR</strong> allows you to select rows that satisfy either of two conditions.</p></li><li><p><strong>NOT</strong> allows you to select rows that do not match a certain condition.</p><p>  NOT is commonly used with LIKE.</p><pre><code>    SELECT *    FROM tutorial.billboard_top_100_year_end    WHERE year = 2013    AND &quot;group&quot; NOT ILIKE &#39;%macklemore%&#39;</code></pre></li></ul><p>?      NOT is also frequently used to identify non-null rows</p><pre><code> SELECT * FROM tutorial.billboard_top_100_year_end WHERE year = 2013 AND artist IS NOT NULL</code></pre><ol start="5"><li><p><strong>ORDER BY DESC</strong></p><p>You can also order by multiple columns. This is particularly useful if your data falls into categories and you’d like to organize rows by date, for example, but keep all of the results within a given category together.</p></li></ol><pre><code>SELECT *FROM tutorial.billboard_top_100_year_endWHERE year_rank &lt;= 3ORDER BY year DESC, year_rank</code></pre><p>  you can make your life a little easier by substituting numbers for column names in the ORDER BY clause. The numbers will correspond to the order in which you list columns in the SELECT clause. </p><pre><code>SELECT *tutorial.billboard_top_100_year_endWHERE year_rank &lt;= 3ORDER BY 2, 1 DESC</code></pre><p><strong>6.Using comments</strong>    You can use– (two dashes) to comment out everything to the right of them on a given line:</p><pre><code>SELECT *  --This comment won&#39;t affect the way the code runsFROM tutorial.billboard_top_100_year_endWHERE year = 2013</code></pre><p>   You can also leave comments across multiple lines using /<em> to begin the comment and </em>/ to close it:      </p><pre><code>/* Here&#39;s a comment so long and descriptive thatit could only fit on multiple lines. Fortunately,it, too, will not affect how this code runs. */SELECT *FROM tutorial.billboard_top_100_year_endWHERE year = 2013</code></pre><h1 id="Intermediate"><a href="#Intermediate" class="headerlink" title="Intermediate"></a>Intermediate</h1><p>1.<strong>Aggregate functions</strong></p><ul><li><p>COUNT counts how many rows are in a particular column.</p><ul><li><p>Typing COUNT(1) has the same effect as COUNT(*). Which one you use is a matter of personal preference.</p></li><li><p>Counting individual columnsCount of all of rows in which the high column is not null:</p></li></ul><pre><code>  SELECT COUNT(high)  FROM tutorial.aapl_historical_stock_prie</code></pre></li><li><p>SUM adds together all the values in a particular column.you can only use SUM on columns containing numerical values.You don’t need to worry as much about the presence of nulls with SUM as you would with COUNT, as SUM treats nulls as 0.</p></li><li><p>MIN and MAX return the lowest and highest values in a particular column, respectively.They’re similar to COUNT in that they can be used on non-numerical columns. Depending on the column type, MIN will return the lowest number, earliest date, or non-numerical value as close alphabetically to “A” as possible.</p></li><li><p>AVG calculates the average of a group of selected values.First, it can only be used on numerical columns. Second, it ignores nulls completely.</p></li></ul><p><strong>2.GROUP BY</strong>You can group by multiple columns. The order of column names in your GROUP BY clause doesn’t matter����the results will be the same regardless. If you want to control how the aggregations are grouped together, use ORDER BY.</p><p><strong>3.HAVING</strong>  Having is the “clean” way to filter a query that has been aggregated,The WHERE clause won’t work for filtering on aggregate columns</p><pre><code>SELECT year,       month,       MAX(high) AS month_highFROM tutorial.aapl_historical_stock_priceGROUP BY year, monthHAVING MAX(high) &gt; 400ORDER BY year, month</code></pre><p><strong>4.DISTINCT</strong></p><p>  Only the unique values in a particular column  If you include two (or more) columns in a SELECT DISTINCT clause, your results will contain all of the unique pairs of those two columns:</p><pre><code>SELECT DISTINCT year, monthFROM tutorial.aapl_historical_stock_price</code></pre><p>DISTINCT goes inside the aggregate function rather than at the beginning of the SELECT clause:</p><pre><code>SELECT COUNT(DISTINCT month) AS unique_monthsFROM tutorial.aapl_historical_stock_price</code></pre><p><strong>5.CASE</strong>  Every CASE statement must end with the END statement. The ELSE statement is optional:</p><pre><code>CASE WHEN...THENEND</code></pre><pre><code>  SELECT player_name,         year,         CASE WHEN year = &#39;SR&#39; THEN &#39;yes&#39;         ELSE NULL END AS is_a_senior  FROM benn.college_football_players</code></pre><pre><code>SELECT player_name,         weight,         CASE WHEN weight &gt; 250 THEN &#39;over 250&#39;              WHEN weight &gt; 200 THEN &#39;201-250&#39;              WHEN weight &gt; 175 THEN &#39;176-200&#39;              ELSE &#39;175 or under&#39; END AS weight_group  FROM benn.college_football_players</code></pre><p><strong>6.Joins</strong></p><pre><code> SELECT teams.conference AS conference,         AVG(players.weight) AS average_weight  FROM benn.college_football_players players  JOIN benn.college_football_teams teams  ON teams.school_name = players.school_name  GROUP BY teams.conference  ORDER BY AVG(players.weight) DESC</code></pre><ul><li><p>inner joinInner joins eliminate rows from both tables that do not satisfy the join condition set forth in the ON statement. In mathematical terms, an inner join is the intersection of the two tables.rename column names:</p></li><li><p>outer join</p><ul><li>LEFT JOIN returns only unmatched rows from the left table.</li><li>RIGHT JOIN returns only unmatched rows from the right table.</li><li>FULL OUTER JOIN returns unmatched rows from both tables.</li></ul></li></ul><p>   Filtering in the ON clause: filter one or both of the tables before joining them</p><pre><code>   SELECT companies.permalink AS companies_permalink,       companies.name AS companies_name,       acquisitions.company_permalink AS acquisitions_permalink,       acquisitions.acquired_at AS acquired_date   FROM tutorial.crunchbase_companies companies   LEFT JOIN tutorial.crunchbase_acquisitions acquisitions   ON companies.permalink = acquisitions.company_permalink   AND acquisitions.company_permalink != &#39;/company/1000memories&#39;   ORDER BY 1</code></pre><p>   Filtering in the WHERE clause:(Join  then filter)</p><pre><code>   SELECT companies.permalink AS companies_permalink,       companies.name AS companies_name,       acquisitions.company_permalink AS acquisitions_permalink,       acquisitions.acquired_at AS acquired_date   FROM tutorial.crunchbase_companies companies   LEFT JOIN tutorial.crunchbase_acquisitions acquisitions   ON companies.permalink = acquisitions.company_permalink   WHERE acquisitions.company_permalink != &#39;/company/1000memories&#39;   OR acquisitions.company_permalink IS NULL   ORDER BY 1</code></pre><ul><li><p>Joining on multiple keyswhy? The first has to do with accuracy.</p><pre><code> The second reason has to do with performance. SQL uses &quot;indexes&quot; (essentially pre-defined joins) to speed up queries</code></pre></li><li><p>Self join Sometimes it can be useful to join a table to itself. Let����s say you wanted to identify companies that received an investment from Great Britain following an investment from Japan.</p></li></ul><pre><code>SELECT DISTINCT japan_investments.company_name,       japan_investments.company_permalink  FROM tutorial.crunchbase_investments_part1 japan_investments  JOIN tutorial.crunchbase_investments_part1 gb_investments    ON japan_investments.company_name = gb_investments.company_name   AND gb_investments.investor_country_code = &#39;GBR&#39;   AND gb_investments.funded_at &gt; japan_investments.funded_at WHERE japan_investments.investor_country_code = &#39;JPN&#39; ORDER BY 1</code></pre><ol start="7"><li><p><strong>UNION</strong>SQL joins allow you to combine two datasets side-by-side, but UNION allows you to stack one dataset on top of the otherSQL has strict rules for appending data:</p><ul><li>Both tables must have the same number of columns</li><li>The columns must have the same data types in the same order as the first tablecolumn names don’t necessarily have to be the same</li></ul></li></ol><p>tips:1.If you must use spaces in naming, you will need to use double quotes:  SELECT COUNT(date) AS “Count Of Date”  FROM tutorial.aapl_historical_stock_price2.Query clause order:</p><ul><li>SELECT</li><li>FROM</li><li>WHERE</li><li>GROUP BY</li><li>HAVING</li><li>ORDER BY</li></ul><h1 id="ADVANCED"><a href="#ADVANCED" class="headerlink" title="ADVANCED"></a>ADVANCED</h1><p>Data Type**</p><table><thead><tr><th>Imported as</th><th>Stored as</th><th>With these rules</th></tr></thead><tbody><tr><td>String</td><td>VARCHAR(1024)</td><td>Any characters, with a maximum field length of 1024 characters.</td></tr><tr><td>Date/Time</td><td>TIMESTAMP</td><td>Stores year, month, day, hour, minute and second values as YYYY-MM-DD hh:mm:ss.</td></tr><tr><td>Number</td><td>DOUBLE PRECISION</td><td>Numerical, with up to 17 significant digits decimal precision.</td></tr><tr><td>Boolean</td><td>BOOLEAN</td><td>Only TRUE or FALSE values.</td></tr></tbody></table><p>Changing a column’s data type��</p><p>two types: <code>CAST(column_name AS integer)</code> and <code>column_name::integer</code> </p><p><strong>2.Data Format</strong></p><pre><code>SELECT companies.permalink,       companies.founded_at_clean,       acquisitions.acquired_at_cleaned,       acquisitions.acquired_at_cleaned -         companies.founded_at_clean::timestamp AS time_to_acquisition  FROM tutorial.crunchbase_companies_clean_date companies  JOIN tutorial.crunchbase_acquisitions_clean_date acquisitions    ON acquisitions.company_permalink = companies.permalink WHERE founded_at_clean IS NOT NULL</code></pre><pre><code>SELECT companies.permalink,              companies.founded_at_clean,              companies.founded_at_clean::timestamp +                INTERVAL &#39;1 week&#39; AS plus_one_week         FROM tutorial.crunchbase_companies_clean_date companies WHERE founded_at_clean IS NOT NULL</code></pre><pre><code>SELECT companies.permalink,       companies.founded_at_clean,       NOW() - companies.founded_at_clean::timestamp AS founded_time_ago  FROM tutorial.crunchbase_companies_clean_date companies WHERE founded_at_clean IS NOT NULL</code></pre><pre><code>SELECT    DATE_FORMAT(wk,&#39;%Y%m%d&#39;),    wk,    song FROM totp WHERE singer=&#39;Madness&#39;</code></pre><p><strong>3.Data Wrangling with SQL</strong></p><p><strong>4.Using SQL String Functions to Clean data</strong></p><p><strong>LEFT, RIGHT, LENGTH</strong></p><p><code>LEFT(string, number of characters)</code></p><pre><code>SELECT incidnt_num,        date,               LEFT(date, 10) AS cleaned_date  FROM tutorial.sf_crime_incidents_2014_01</code></pre><pre><code>SELECT incidnt_num,              date,              LEFT(date, 10) AS cleaned_date,              RIGHT(date, LENGTH(date) - 11) AS cleaned_time         FROM tutorial.sf_crime_incidents_2014_01</code></pre><p><strong>TRIM</strong></p><pre><code>SELECT location,       TRIM(both &#39;()&#39; FROM location)  FROM tutorial.sf_crime_incidents_2014_01</code></pre><p><strong>POSITION</strong> <strong>and STRPOS</strong></p><p>Importantly, both the <code>POSITION</code> and <code>STRPOS</code> functions are case-sensitive. If you want to look for a character regardless of its case, you can make your entire string a single by using the <code>UPPER</code> or <code>LOWER</code> functions described below.</p><p><code>POSITION</code> allows you to specify a substring, then returns a numerical value equal to the character number (counting from left) where that substring first appears in the target string. For example, the following query will return the position of the character ‘A’ (case-sensitive) where it first appears in the <code>descript</code> field:</p><pre><code>SELECT incidnt_num,              descript,              POSITION(&#39;A&#39; IN descript) AS a_position  FROM tutorial.sf_crime_incidents_2014_01</code></pre><p>You can also use the <code>STRPOS</code> function to achieve the same results?just replace <code>IN</code> with a comma and switch the order of the string and substring:</p><pre><code>SELECT incidnt_num,              descript,              STRPOS(descript, &#39;A&#39;) AS a_position  FROM tutorial.sf_crime_incidents_2014_01</code></pre><p><strong>SUBSTR</strong></p><pre><code>SELECT incidnt_num,              date,              SUBSTR(date, 4, 2) AS day  FROM tutorial.sf_crime_incidents_2014_01</code></pre><p><strong>CONCAT</strong></p><pre><code>SELECT incidnt_num,             day_of_week,              LEFT(date, 10) AS cleaned_date,              CONCAT(day_of_week, &#39;, &#39;, LEFT(date, 10)) AS day_and_date  FROM tutorial.sf_crime_incidents_2014_01</code></pre><p>Alternatively, you can use two pipe characters (<code>||</code>) to perform the same concatenation:</p><pre><code>SELECT incidnt_num,              day_of_week,              LEFT(date, 10) AS cleaned_date,              day_of_week || &#39;, &#39; || LEFT(date, 10) AS day_and_date         UPPER(address) AS address_upper,       LOWER(address) AS address_lowerFROM tutorial.sf_crime_incidents_2014_01</code></pre><p><strong>Turning strings into dates</strong></p><pre><code>SELECT incidnt_num,date,              (SUBSTR(date, 7, 4) || &#39;-&#39; || LEFT(date, 2) ||&#39;-&#39; || SUBSTR(date, 4, 2))::date AS cleaned_date  FROM tutorial.sf_crime_incidents_2014_01</code></pre><pre><code>SELECT cleaned_date,              EXTRACT(&#39;year&#39; FROM cleaned_date) AS year,              EXTRACT(&#39;month&#39;  FROM cleaned_date) AS month,              EXTRACT(&#39;day&#39;    FROM cleaned_date) AS day,              EXTRACT(&#39;hour&#39;   FROM cleaned_date) AS hour,              EXTRACT(&#39;minute&#39; FROM cleaned_date) AS minute,              EXTRACT(&#39;second&#39; FROM cleaned_date) AS second,              EXTRACT(&#39;decade&#39; FROM cleaned_date) AS decade,              EXTRACT(&#39;dow&#39;    FROM cleaned_date) AS day_of_week  FROM tutorial.sf_crime_incidents_cleandate</code></pre><p>You can also round dates to the nearest unit of measurement. This is particularly useful if you don’t care about an individual date, but do care about the week (or month, or quarter) that it occurred in. The <code>DATE_TRUNC</code>function rounds a date to whatever precision you specify. The value displayed is the first value in that period. So when you <code>DATE_TRUNC</code> by year, any value in that year will be listed as January 1st of that year:</p><pre><code>SELECT cleaned_date,              DATE_TRUNC(&#39;year&#39;   , cleaned_date) AS year,              DATE_TRUNC(&#39;month&#39;  , cleaned_date) AS month,              DATE_TRUNC(&#39;week&#39;   , cleaned_date) AS week,              DATE_TRUNC(&#39;day&#39;    , cleaned_date) AS day,             DATE_TRUNC(&#39;hour&#39;   , cleaned_date) AS hour,              DATE_TRUNC(&#39;minute&#39; , cleaned_date) AS minute,              DATE_TRUNC(&#39;second&#39; , cleaned_date) AS second,              DATE_TRUNC(&#39;decade&#39; , cleaned_date) AS decade  FROM tutorial.sf_crime_incidents_cleandate</code></pre><pre><code>SELECT CURRENT_DATE AS date,              CURRENT_TIME AS time,              CURRENT_TIMESTAMP AS timestamp,              LOCALTIME AS localtime,              LOCALTIMESTAMP AS localtimestamp,              NOW() AS now</code></pre><pre><code>SELECT CURRENT_TIME AS time,       CURRENT_TIME AT TIME ZONE &#39;PST&#39; AS time_pst</code></pre><p><strong>COALESCE</strong></p><pre><code>SELECT incidnt_num,              descript,              COALESCE(descript, &#39;No Description&#39;)  FROM tutorial.sf_crime_incidents_cleandate ORDER BY descript DESC</code></pre><p><strong>5.Writing subqueries in SQL</strong></p><p><strong>6.SQL window functions</strong></p><ul><li>Basic windowing syntax</li></ul><pre><code>SELECT start_terminal,       duration_seconds,       SUM(duration_seconds) OVER         (PARTITION BY start_terminal) AS running_total,       COUNT(duration_seconds) OVER         (PARTITION BY start_terminal) AS running_count,       AVG(duration_seconds) OVER         (PARTITION BY start_terminal) AS running_avg  FROM tutorial.dc_bikeshare_q1_2012 WHERE start_time &lt; &#39;2012-01-08&#39;</code></pre><ul><li>ROW_NUMBER()displays the number of a given row. It starts are 1 and numbers the rows according to the ORDER BY part of the window statement. ROW_NUMBER() does not require you to specify a variable within the parentheses:</li></ul><pre><code>SELECT start_terminal,       start_time,       duration_seconds,       ROW_NUMBER() OVER (ORDER BY start_time)                    AS row_number  FROM tutorial.dc_bikeshare_q1_2012 WHERE start_time &lt; &#39;2012-01-08&#39;</code></pre><p>Using the PARTITION BY clause will allow you to begin counting 1 again in each partition. The following query starts the count over again for each terminal:</p><pre><code>SELECT start_terminal,       start_time,       duration_seconds,       ROW_NUMBER() OVER (PARTITION BY start_terminal                          ORDER BY start_time)                    AS row_number  FROM tutorial.dc_bikeshare_q1_2012 WHERE start_time &lt; &#39;2012-01-08&#39;</code></pre><ul><li>RANK() and DENSE_RANK()RANK() would give the identical rows a rank of 2, then skip ranks 3 and 4, so the next result would be 5DENSE_RANK() would still give all the identical rows a rank of 2, but the following row would be 3?no ranks would be skipped.</li></ul><pre><code>SELECT start_terminal,       duration_seconds,       RANK() OVER (PARTITION BY start_terminal                    ORDER BY start_time)              AS rank  FROM tutorial.dc_bikeshare_q1_2012 WHERE start_time &lt; &#39;2012-01-08&#39;</code></pre><ul><li>NTILENTILE(<em># of buckets</em>) identify what percentile a given row falls into. In this case, ORDER BY determines which column to use to determine the quartiles (or whatever number of ‘tiles you specify). For example:</li></ul><pre><code>SELECT start_terminal,       duration_seconds,       NTILE(4) OVER         (PARTITION BY start_terminal ORDER BY duration_seconds)          AS quartile,       NTILE(5) OVER         (PARTITION BY start_terminal ORDER BY duration_seconds)         AS quintile,       NTILE(100) OVER         (PARTITION BY start_terminal ORDER BY duration_seconds)         AS percentile  FROM tutorial.dc_bikeshare_q1_2012 WHERE start_time &lt; &#39;2012-01-08&#39; ORDER BY start_terminal, duration_seconds</code></pre><ul><li>LAG and LEAD</li></ul><p>It can often be useful to compare rows to preceding or following rows, especially if you’ve got the data in an order that makes sense. You can use LAG or LEAD to create columns that pull values from other rows?all you need to do is enter which column to pull from and how many rows away you’d like to do the pull. LAG pulls from previous rows and LEAD pulls from following rows:</p><pre><code>SELECT start_terminal,       duration_seconds,       LAG(duration_seconds, 1) OVER         (PARTITION BY start_terminal ORDER BY duration_seconds) AS lag,       LEAD(duration_seconds, 1) OVER         (PARTITION BY start_terminal ORDER BY duration_seconds) AS lead  FROM tutorial.dc_bikeshare_q1_2012 WHERE start_time &lt; &#39;2012-01-08&#39; ORDER BY start_terminal, duration_seconds</code></pre><p>This is especially useful if you want to calculate differences between rows:</p><pre><code>SELECT start_terminal,       duration_seconds,       duration_seconds -LAG(duration_seconds, 1) OVER         (PARTITION BY start_terminal ORDER BY duration_seconds)         AS difference  FROM tutorial.dc_bikeshare_q1_2012 WHERE start_time &lt; &#39;2012-01-08&#39; ORDER BY start_terminal, duration_seconds</code></pre><p>The first row of the difference column is null because there is no previous row from which to pull. Similarly, using LEAD will create nulls at the end of the dataset. If you’d like to make the results a bit cleaner, you can wrap it in an outer query to remove nulls:</p><pre><code>SELECT *  FROM (    SELECT start_terminal,           duration_seconds,           duration_seconds -LAG(duration_seconds, 1) OVER             (PARTITION BY start_terminal ORDER BY duration_seconds)             AS difference      FROM tutorial.dc_bikeshare_q1_2012     WHERE start_time &lt; &#39;2012-01-08&#39;     ORDER BY start_terminal, duration_seconds       ) sub WHERE sub.difference IS NOT NULL</code></pre><ul><li>Defining a windows aliasIf you’re planning to write several window functions in to the same query, using the same window, you can create an alias. Take the NTILE example above:</li></ul><pre><code>SELECT start_terminal,       duration_seconds,       NTILE(4) OVER         (PARTITION BY start_terminal ORDER BY duration_seconds)         AS quartile,       NTILE(5) OVER         (PARTITION BY start_terminal ORDER BY duration_seconds)         AS quintile,       NTILE(100) OVER         (PARTITION BY start_terminal ORDER BY duration_seconds)         AS percentile  FROM tutorial.dc_bikeshare_q1_2012 WHERE start_time &lt; &#39;2012-01-08&#39; ORDER BY start_terminal, duration_seconds</code></pre><p>This can be rewritten as:</p><pre><code>SELECT start_terminal,       duration_seconds,       NTILE(4) OVER ntile_window AS quartile,       NTILE(5) OVER ntile_window AS quintile,       NTILE(100) OVER ntile_window AS percentile  FROM tutorial.dc_bikeshare_q1_2012 WHERE start_time &lt; &#39;2012-01-08&#39;WINDOW ntile_window AS         (PARTITION BY start_terminal ORDER BY duration_seconds) ORDER BY start_terminal, duration_seconds</code></pre><p><strong>7.Performance Tunning SQL Queries</strong></p><p><strong>8.Pivoting Data in SQL</strong></p><pre><code>SELECT conference,       SUM(players) AS total_players,       SUM(CASE WHEN year = &#39;FR&#39; THEN players ELSE NULL END) AS fr,       SUM(CASE WHEN year = &#39;SO&#39; THEN players ELSE NULL END) AS so,       SUM(CASE WHEN year = &#39;JR&#39; THEN players ELSE NULL END) AS jr,       SUM(CASE WHEN year = &#39;SR&#39; THEN players ELSE NULL END) AS sr  FROM (        SELECT teams.conference AS conference,               players.year,               COUNT(1) AS players          FROM benn.college_football_players players          JOIN benn.college_football_teams teams            ON teams.school_name = players.school_name         GROUP BY 1,2       ) sub GROUP BY 1 ORDER BY 2 DESC</code></pre><h1 id="Table-Manipulation"><a href="#Table-Manipulation" class="headerlink" title="Table Manipulation"></a>Table Manipulation</h1><pre><code>INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)VALUES (&#39;Cardinal&#39;, &#39;Tom B. Erichsen&#39;, &#39;Skagen 21&#39;, &#39;Stavanger&#39;, &#39;4006&#39;, &#39;Norway&#39;);</code></pre><pre><code>UPDATE CustomersSET ContactName = &#39;Alfred Schmidt&#39;, City= &#39;Frankfurt&#39;WHERE CustomerID = 1;</code></pre><pre><code>DELETE FROM Customers WHERE CustomerName=&#39;Alfreds Futterkiste&#39;;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Learning from &lt;a href=&quot;https://mode.com/sql-tutorial/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mode.com/sql-tutorial/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Basi
      
    
    </summary>
    
      <category term="SQL" scheme="http://naixinzhang.github.io/categories/SQL/"/>
    
    
      <category term="SQL Learning notes" scheme="http://naixinzhang.github.io/tags/SQL-Learning-notes/"/>
    
  </entry>
  
  <entry>
    <title>2.0_leetcode_database_practice</title>
    <link href="http://naixinzhang.github.io/2020/09/10/mysql/sql-leetcode2-by-tag/"/>
    <id>http://naixinzhang.github.io/2020/09/10/mysql/sql-leetcode2-by-tag/</id>
    <published>2020-09-11T01:26:09.000Z</published>
    <updated>2020-09-21T04:30:35.359Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EASY-tag"><a href="#EASY-tag" class="headerlink" title="EASY tag:"></a>EASY tag:</h1><p>176.</p><pre><code>SELECT IFNULL(    (SELECT ...    LIMIT 1 OFFSET 1,NULL) AS SecondHighestSalarySELECT MAX(salary) AS ..FROMWHERE Salary &lt; (SELECT Max(Salary) FROM Employee)</code></pre><p>181.</p><pre><code>SELECT a.Name FROM Employee aJOIN Employee bON a.Id = b.ManagerId AND a.Salary &gt; b.Salary</code></pre><p>Tips: self-join classical questions</p><p>182.</p><pre><code>Having count()&gt;1</code></pre><p>196.delete duplicate</p><pre><code>DELETE p1 FROM Person p1, Person p2WHERE p1.Email= p2.Email and p1.ID &gt; P2.ID;</code></pre><p>620.</p><pre><code>mod(id,2)=1</code></pre><p>627.</p><pre><code>UPDATE salarySET    sex = CASE sex          WHEN &#39;m&#39; THEN &#39;f&#39;          ELSE &#39;m&#39;          END;</code></pre><p>1173.</p><pre><code>SELECT ROUND(100*SUM(ORDER DATE = DELIVERY DATE)/COUNT(*),2)</code></pre><ol start="1179"><li>reformat</li></ol><pre><code>SELECT id, SUM(if (month = &#39;Jan&#39;, revenue, null)) AS Jan_Revenue</code></pre><p>1251.</p><pre><code>select         p.product_id ,        ROUND((SUM(u.units*p.price)/SUM(units)),2) average_price from Prices p JOIN UnitsSold u ON         p.product_id = u.product_id         AND u.purchase_date between p.start_date and p.end_date group by p.product_id</code></pre><p>1303.</p><pre><code>SELECT     employee_id,     team_sizeFROM    Employee aJOIN    (SELECT team_id, COUNT(*) AS team_size FROM Employee GROUP BY team_id) bON a.team_id = b.team_id; </code></pre><p>1322.</p><pre><code>select ad_id, ifnull(round(sum(case when action = &#39;Clicked&#39; then 1 else 0 end) / sum(case when action = &#39;Clicked&#39; or action = &#39;Viewed&#39; then 1 else 0 end) * 100, 2), 0) as ctrfrom Adsgroup by ad_idorder by ctr desc, ad_id asc</code></pre><p>1484</p><pre><code>select sell_date, count(distinct product) as num_sold , group_concat(DISTINCT product ORDER BY product ASC separator &#39;,&#39;) as products               from activities  group by sell_dateorder by sell_date</code></pre><p>Tips:The GROUP_CONCAT() function in MySQL is used to concatenate data from multiple rows into one field. This is an aggregate (GROUP BY) function which returns a String value, if the group contains at least one non-NULL value. Otherwise, it returns NULL.</p><p>1453.Create a session bar chart</p><pre><code>(select &#39;[0-5&gt;&#39; as bin, sum(case when duration/60 &lt; 5 then 1 else 0 end) as total from sessions)union(select &#39;[5-10&gt;&#39; as bin, sum(case when ((duration/60 &gt;= 5) and (duration/60 &lt; 10)) then 1 else 0 end) as total from sessions)union(select &#39;[10-15&gt;&#39; as bin, sum(case when ((duration/60 &gt;= 10) and (duration/60 &lt; 15)) then 1 else 0 end) as total from sessions)union(select &#39;15 or more&#39; as bin, sum(case when duration/60 &gt;= 15 then 1 else 0 end) as total from sessions)</code></pre><p>1543.</p><pre><code>SELECT TRIM(lower(product_name)) AS product_name, DATE_FORMAT(sale_date,&#39;%Y-%m&#39;) AS sale_date,count(*)AS totalFROM SalesGROUP BY 1,2ORDER BY 1,2</code></pre><p>TIPS: </p><ul><li>The TRIM() removes the space character</li><li>LTRIM() removes leading spaces from a string.</li><li>RTRIM() removes trailing spaces from a string:</li><li>DATE_FORMAT</li></ul><table><thead><tr><th>%D</th><th>Day of the month as a numeric value, followed by suffix (1st, 2nd, 3rd, …)</th></tr></thead><tbody><tr><td>%d</td><td>Day of the month as a numeric value (01 to 31)</td></tr><tr><td>—-</td><td>—————————————-</td></tr><tr><td>%M</td><td>Month name in full (January to December)</td></tr><tr><td>—-</td><td>—————————————-</td></tr></tbody></table><p>1565.</p><pre><code>SELECT DATE_FORMAT(order_date, &#39;%Y-%m&#39;) AS month,count(DISTINCT order_id) AS order_count,count(DISTINCT customer_id) AS customer_countFROM OrdersWHERE invoice &gt; 20GROUP BY 1ORDER BY 1</code></pre><p>TIPS:LEFT(order_date, 7) month</p><h1 id="Medium-tag"><a href="#Medium-tag" class="headerlink" title="Medium tag"></a>Medium tag</h1><p>177.</p><pre><code>CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INTBEGIN  DECLARE p INT;  SET p = N - 1;  RETURN (      SELECT DISTINCT Salary      FROM Employee      ORDER BY Salary DESC      LIMIT 1 OFFSET p  );END</code></pre><p>178.</p><pre><code>select score,dense_rank() over(order by score desc) as rankfrom scores</code></pre><p>Row_number()RANK()Dense_rank()</p><p>184.</p><pre><code>SELECT    Department.name AS &#39;Department&#39;,    Employee.name AS &#39;Employee&#39;,    SalaryFROM    EmployeeJOIN    Department ON Employee.DepartmentId = Department.IdWHERE    (Employee.DepartmentId , Salary) IN    (   SELECT            DepartmentId, MAX(Salary)        FROM            Employee        GROUP BY DepartmentId    )</code></pre><p>Tips:</p><p>since there might be more than one people in each department has the same salary, it is safe to just select the department id and max salary firstly.</p><p>534.</p><pre><code>SELECT  player_id, event_date, SUM(games_played) over(PARTITION BY player_id order_by event_date ASC) AS games_played_so_far FROM ActivityOrder by player_id;</code></pre><p>550.</p><pre><code>SELECT ROUND(COUNT(t2.player_id)/COUNT(t1.player_id),2) AS fractionFROM(SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id) t1 LEFT JOIN Activity t2ON t1.player_id = t2.player_id AND t1.first_login = t2.event_date - 1</code></pre><p>578.</p><pre><code>SELECT question_idFROM survey_log GROUP BY qustion_idORDER BY COUNT(answer_id)/COUNT(IF(action = &#39;SHOW&#39;,1,NULL)) DESCLIMIT 1</code></pre><p>580.</p><pre><code>SELECT    SUM(insurance.TIV_2016) AS TIV_2016FROM    insuranceWHERE    insurance.TIV_2015 IN    (      SELECT        TIV_2015      FROM        insurance      GROUP BY TIV_2015      HAVING COUNT(*) &gt; 1    )    AND CONCAT(LAT, LON) IN    (      SELECT        CONCAT(LAT, LON)      FROM        insurance      GROUP BY LAT , LON      HAVING COUNT(*) = 1    )</code></pre><p>608.</p><pre><code>SELECT    id AS Id,    CASE        WHEN tree.P_id IS NULL          THEN &#39;Root&#39;        WHEN tree.id IN (SELECT atree.p_id FROM tree atree)          THEN &#39;Inner&#39;        ELSE &#39;Leaf&#39;    END AS TypeFROM    treeORDER BY `Id`;</code></pre><p>612.</p><pre><code>SELECT    ROUND(SQRT(MIN((POW(p1.x - p2.x, 2) + POW(p1.y - p2.y, 2)))),2) AS shortestFROM    point_2d p1        JOIN    point_2d p2 ON p1.x != p2.x OR p1.y != p2.y</code></pre><p>626.</p><pre><code>SELECT(CASE WHEN MOD(id,2) != 0 AND counts != id THEN id+1          MOD(id,2) != 0 AND counts == id THEN id          ELSE id - 1END) AS id, studentFROM seat,(SELECT COUNT(*) as counts FROM seat) AS seat_countsORDER BY id ASC</code></pre><p>1077.</p><pre><code>SELECT t.project_id, t.employee_idFROM (    SELECT p1.project_id, p1.employee_id,         DENSE_RANK() OVER (PARTITION BY p1.project_id ORDER BY e1.experience_years DESC) AS r    FROM Project p1 JOIN Employee e1 ON p1.employee_id = e1.employee_id) AS tWHERE t.r = 1</code></pre><p>1098.</p><pre><code>SELECT b.book_id, b.name FROM Books bLEFT JOIN Orders oON b.book_id = o.book_id AND DATEDIFF(&#39;2019-06-23&#39;,available_from) &gt; 30GROUP BY b.book_id, b.nameHAVING IFNULL(SUM(quantity),0)&lt; 10</code></pre><p>1107.</p><pre><code>SELECT login_date, count(user_id) as user_countFROM(    SELECT user_id, MIN(activity_date) AS login_date    FROM Traffic    WHERE activity = &#39;login&#39;    GROUP BY user_id    ) tWHERE datediff(&#39;2019-6-30&#39;, login_date) &lt;= 90GROUP BY login_date</code></pre><p>1112.</p><pre><code>SELECT student_id, MIN(course_id) AS course_id,grade FROM enrollmentsWHERE(student_id, grade) IN(SELECT student_id, MAX(grade) as ma FROM Enrollments GROUP BY student_id) GROUP BY student_id, gradeORDER BY student_id</code></pre><p>1126.</p><pre><code>SELECT business_id FROM(SELECT *, AVG(OCCURENCES) OVER (PARTITION BY event_type) AS e_AVG FROM events)a WHERE OCCURENCES &gt; e_avgGROUP BY business_idHAVING COUNT(event_type) &gt; 1</code></pre><p>1132.</p><pre><code>select round(avg(num_remove / num_spam) * 100, 2) as average_daily_percentfrom(    select action_date,            count(distinct a.post_id) as num_spam,           count(distinct case when remove_date is not null then a.post_id                                else null                           end) as num_remove    from Actions a left join Removals r    on a.post_id = r.post_id    where extra = &#39;spam&#39;    group by action_date) t</code></pre><p>1164.</p><pre><code>SELECT distinct a.product_id,ifnull(temp.new_price,10) as price FROM products as aLEFT JOIN(SELECT * FROM products WHERE (product_id, change_date) in (select product_id,max(change_date) from products where change_date&lt;=&quot;2019-08-16&quot; group by product_id)) as tempon a.product_id = temp.product_id;</code></pre><p>1174.</p><pre><code>SELECT    ROUND(100*SUM(CASE WHEN order_date = customer_pref_delivery_date THEN 1    ELSE 0 END)/ COUNT(distinct customer_id) ,2) AS immediate_percentageFROM    DeliveryWHERE    (customer_id, order_date)IN(SELECT    customer_id, min(order_date) as min_dateFROM    DeliveryGROUP BY    customer_id);</code></pre><p>1204.</p><pre><code>select q1.person_namefrom queue as q1 join(select turn, sum(weight) over (order by turn) as cumu_sum from queue) as temp1on q1.turn = temp1.turnwhere temp1.cumu_sum &lt;= 1000order by temp1.cumu_sum desclimit 1;</code></pre><p>tips:  RUNNING TOTAL</p><p>1205.</p><pre><code>SELECT month, country,     SUM(CASE WHEN state = &quot;approved&quot; THEN 1 ELSE 0 END) AS approved_count,     SUM(CASE WHEN state = &quot;approved&quot; THEN amount ELSE 0 END) AS approved_amount,     SUM(CASE WHEN state = &quot;back&quot; THEN 1 ELSE 0 END) AS chargeback_count,    SUM(CASE WHEN state = &quot;back&quot; THEN amount ELSE 0 END) AS chargeback_amountFROM(    SELECT LEFT(chargebacks.trans_date, 7) AS month,        country,         &quot;back&quot; AS state, amount    FROM chargebacks    JOIN transactions ON chargebacks.trans_id = transactions.id    UNION ALL    SELECT LEFT(trans_date, 7) AS month, country, state, amount    FROM transactions    WHERE state = &quot;approved&quot;) sGROUP BY month, country</code></pre><p>The <code>UNION</code> command combines the result set of two or more SELECT statements (only distinct values)</p><p>The <code>UNION ALL</code> command combines the result set of two or more SELECT statements (allows duplicate values).</p><p>1212.</p><pre><code>SELECT team_id, team_name,SUM(    CASE WHEN team_id = host_team AND host_goals &gt; guest_goals THEN 3         WHEN team_id = guest_team AND guest_goals &gt; host_goals THEN 3         WHEN host_goals = guest_goals THEN 1         ELSE 0    END          ) AS &quot;num_points&quot;FROM Teams tLEFT JOIN Matches m ON t.team_id = m.host_team OR t.team_id = m.guest_teamGROUP BY team_id, team_nameORDER BY num_points DESC, team_id</code></pre><p>Key point: LEFT JOIN Matches m ON t.team_id = m.host_team OR t.team_id = m.guest_team</p><p>1264.</p><pre><code>SELECT DISTINCT page_id AS recommended_pageFROM (SELECT CASE WHEN user1_id = 1 THEN user2_id            WHEN user2_id = 1 THEN user1_id       END AS user_idFROM Friendship) aJOIN Likes lON a.user_id = l.user_idWHERE page_id NOT IN (SELECT page_id FROM Likes WHERE user_id = 1)</code></pre><p>1270.</p><pre><code>SELECT e1.employee_idFROM Employees e1JOIN Employees e2ON e1.manager_id = e2.employee_idJOIN Employees e3ON e2.manager_id = e3.employee_idWHERE e3.manager_id = 1 AND e1.employee_id != 1</code></pre><p>1285.</p><pre><code>SELECT MIN(log_id)AS start_id, MAX(log_id) AS end_idFROM (SELECT log_id, ROW_NUMBER() OVER(Order by log_id) as numFROM  LOGs)aGROUP BY log_id - num</code></pre><pre><code>TIPS:log_id, num, difference1, 1, 02, 2, 03, 3, 07, 4, 38, 5, 310, 6, 4</code></pre><p>1321.</p><pre><code>SELECT a.visited_on as visted_on, SUM(b.day_sum) AS amount, ROUND(b.day_sum,2) AS average_amount FROM (SELECT visited_on, SUM(amount) AS day_sum FROM Customer GROUP BY visited_on) a,(SELECT visited_on, SUM(amount) AS day_sum FROM Customer GROUP BY visited_on)bWHERE DATEDIFF(a.visited_on, b.visited_on) BETWEEN 0 AND 6GROUP BY a.visited_onHAVING COUNT(b.visited_on) = 7</code></pre><p>TIPS : moving average and  sum every 7 days</p><p>1364.</p><pre><code>select    i.invoice_id,    c.customer_name,    i.price,    count(con.user_id) as contacts_cnt,    count(c2.email) as trusted_contacts_cntfrom invoices ijoin customers c on c.customer_id = i.user_idleft join contacts con on con.user_id = c.customer_idleft join customers c2 on c2.email = con.contact_emailgroup by i.invoice_id, c.customer_name, i.priceorder by i.invoice_id</code></pre><p>1398.</p><pre><code>SELECT customer_id,customer_name FROM CustomersWHERE customer_id IN (SELECT customer_idFROM Orders GROUP BY customer_idHAVING SUM(product_name = &#39;A&#39;) &gt; 0 AND SUM(product_name = &#39;B&#39;) &gt; 0 AND SUM(product_name = &#39;C&#39;) = 0)ORDER BY 1</code></pre><p>1440.</p><pre><code>SELECT e.left_operand, e.operator, e.right_operand,    (        CASE            WHEN e.operator = &#39;&lt;&#39; AND v1.value &lt; v2.value THEN &#39;true&#39;            WHEN e.operator = &#39;=&#39; AND v1.value = v2.value THEN &#39;true&#39;            WHEN e.operator = &#39;&gt;&#39; AND v1.value &gt; v2.value THEN &#39;true&#39;            ELSE &#39;false&#39;        END    ) AS valueFROM Expressions eJOIN Variables v1 ON e.left_operand = v1.nameJOIN Variables v2 ON e.right_operand = v2.name</code></pre><p>1445.</p><pre><code>SELECT *FROM AccountsWHERE id IN    (SELECT DISTINCT t1.id      FROM Logins t1 INNER JOIN Logins t2 on t1.id = t2.id AND DATEDIFF(t1.login_date, t2.login_date) BETWEEN 1 AND 4     GROUP BY t1.id, t1.login_date     HAVING COUNT(DISTINCT(t2.login_date)) = 4)ORDER BY id</code></pre><p>Tips: 5 consecutive days</p><p>1459.</p><pre><code>SELECT  pt1.id as P1, pt2.id as P2,        ABS(pt2.x_value - pt1.x_value)*ABS(pt2.y_value-pt1.y_value) as AREAFROM Points pt1 JOIN Points pt2 ON pt1.id&lt;pt2.idAND pt1.x_value!=pt2.x_value AND pt2.y_value!=pt1.y_valueORDER BY AREA DESC, p1 ASC, p2 ASC;</code></pre><p>1468.</p><pre><code>SELECT s.company_id, s.employee_id, s.employee_name,ROUND(        case when x.max_sal between 1000 and 10000 then salary * 0.76        when x.max_sal &gt; 10000 then salary * 0.51 else salary end, 0) AS salaryFROM salaries s JOIN(SELECT company_id, MAX(salary) max_sal FROM salaries GROUP BY company_id) xON s.company_id = x.company_id;</code></pre><p>TIP:</p><p>max()  group by  only gives you one row</p><p>1501.</p><pre><code>SELECT Country.name AS countryFROM Person JOIN Calls ON Calls.caller_id = Person.id OR Calls.callee_id = Person.idJOIN Country ON Country.country_code = LEFT(Person.phone_number, 3)GROUP BY Country.nameHAVING AVG(duration) &gt; (SELECT AVG(duration) FROM Calls)</code></pre><p>1532.</p><pre><code>SELECT customer_name, customer_id, order_id, order_dateFROM  (   SELECT name AS customer_name, Customers.customer_id, order_id, order_date,      (row_number() over (partition by Customers.customer_id order by order_date DESC)) AS rownum   FROM Customers   INNER JOIN Orders ON Customers.customer_id = Orders.customer_id   ORDER BY customer_name, Customers.customer_id, order_date DESC) latest_ordersWHERE rownum &lt;= 3</code></pre><p>1555.</p><pre><code>SELECT user_id,user_name,IFNULL(SUM(CASE WHEN a.user_id=b.paid_by THEN -amount ELSE amount END),0)+a.credit as credit,CASE WHEN IFNULL(SUM(CASE WHEN a.user_id=b.paid_by THEN -amount ELSE amount END),0)&gt;=-a.credit THEN &quot;No&quot; ELSE &quot;Yes&quot; END as credit_limit_breachedFROM Users as aLEFT JOIN Transactions as bON a.user_id=b.paid_by OR a.user_id=b.paid_toGROUP BY a.user_id;</code></pre><h1 id="HARD-tag"><a href="#HARD-tag" class="headerlink" title="HARD tag"></a>HARD tag</h1><p>185.</p><pre><code>select     Department, Employee, Salaryfrom(select    D.name as Department, E.name as Employee, E.salary as Salary,    dense_rank() over (partition by DepartmentId order by salary desc) as salary_rankfrom    employee E join Department D on E.departmentid = D.id) as new_tablewhere    new_table.salary_rank &lt;= 3</code></pre><p>262.</p><pre><code>SELECT Request_at as Day,         ROUND ((SUM(                CASE WHEN Status = &#39;cancelled_by_driver&#39;                     OR Status = &#39;cancelled_by_client&#39;                 THEN 1                 ELSE 0         END)        / COUNT(Request_at)) ,2) as &quot;Cancellation Rate&quot;                               FROM Trips trpWHERE Request_at BETWEEN &#39;2013-10-01&#39; AND &#39;2013-10-03&#39;       AND trp.Client_Id IN (SELECT Users_Id FROM Users WHERE Banned = &#39;No&#39;)      AND trp.Driver_Id IN (SELECT Users_Id FROM Users WHERE Banned = &#39;No&#39;)GROUP BY Request_at</code></pre><p>569.(got medium by partition)</p><pre><code>SELECT Id, Company, SalaryFROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY COMPANY ORDER BY Salary ASC, Id ASC) AS RN_ASC,ROW_NUMBER() OVER(PARTITION BY COMPANY ORDER BY Salary DESC, Id DESC) AS RN_DESCFROM Employee) AS tempWHERE RN_ASC BETWEEN RN_DESC - 1 AND RN_DESC + 1ORDER BY Company, Salary;</code></pre><p>579.</p><pre><code>Select Id , Month , sum(Salary) over(Partition by Id order by month Rows 2 preceding) AS SalaryFROM Employeewhere concat(Id, Month) not in (select concat(Id, max(Month))  from Employee   group by Id)order by Id, Month desc</code></pre><p>Rows 2 preceding:将当前行和它前面的两行划为一个窗口，因此sum函数就作 用在这三行上面</p><p>601.</p><pre><code>SELECT s1.id, s1.visit_date, s1.peopleFROM(    SELECT     s.id,     s.visit_date,     s.people,     lead(people) OVER (ORDER BY id ASC) as next1,    lead(people,2) OVER (ORDER BY id ASC ) as next2,    lag(people) OVER (ORDER BY id ASC) as prev1,    lag(people,2) OVER (ORDER BY id ASC ) as prev2    FROM stadium as s    ) AS s1    WHERE (people&gt;=100 and        ((next1&gt;=100 and next2&gt;=100)        or (prev1&gt;=100 and prev2&gt;=100)        or (prev1&gt;=100 and next1&gt;=100) -- &lt;-this one is missing       ));</code></pre><p>615.</p><pre><code>select department_salary.pay_month, department_id,case  when department_avg&gt;company_avg then &#39;higher&#39;  when department_avg&lt;company_avg then &#39;lower&#39;  else &#39;same&#39;end as comparisonfrom(  select department_id, avg(amount) as department_avg, date_format(pay_date, &#39;%Y-%m&#39;) as pay_month  from salary join employee on salary.employee_id = employee.employee_id  group by department_id, pay_month) as department_salaryjoin(  select avg(amount) as company_avg,  date_format(pay_date, &#39;%Y-%m&#39;) as pay_month from salary group by date_format(pay_date, &#39;%Y-%m&#39;)) as company_salaryon department_salary.pay_month = company_salary.pay_month;</code></pre><p>618.</p><pre><code>SELECT        MAX(CASE WHEN continent = &#39;America&#39; THEN name END )AS America,        MAX(CASE WHEN continent = &#39;Asia&#39; THEN name END )AS Asia,        MAX(CASE WHEN continent = &#39;Europe&#39; THEN name END )AS Europe  FROM (SELECT *, ROW_NUMBER()OVER(PARTITION BY continent ORDER BY name) AS row_id FROM student) AS tGROUP BY row_id</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;EASY-tag&quot;&gt;&lt;a href=&quot;#EASY-tag&quot; class=&quot;headerlink&quot; title=&quot;EASY tag:&quot;&gt;&lt;/a&gt;EASY tag:&lt;/h1&gt;&lt;p&gt;176.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT IFNULL(
    (SELE
      
    
    </summary>
    
      <category term="SQL" scheme="http://naixinzhang.github.io/categories/SQL/"/>
    
    
      <category term="SQL Learning notes" scheme="http://naixinzhang.github.io/tags/SQL-Learning-notes/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://naixinzhang.github.io/2020/09/09/product/lean-analystics/"/>
    <id>http://naixinzhang.github.io/2020/09/09/product/lean-analystics/</id>
    <published>2020-09-09T06:06:36.000Z</published>
    <updated>2020-09-21T04:30:34.869Z</updated>
    
    <content type="html"><![CDATA[<p>title: Lean Analyticsdate: 2020-09-9 11:26:09top: falsecover: falsepassword:toc: truemathjax: falsetags: </p><ul><li>Product_Notescategories:</li><li>Product</li></ul><h3 id="Chapter1-We-are-All-Liars"><a href="#Chapter1-We-are-All-Liars" class="headerlink" title="Chapter1  We are All Liars"></a>Chapter1  We are All Liars</h3><p><strong>Concierge MVP</strong></p><p>The Minimum Viable Product is the smallest thing you can build that will create the value you’ve promised to your market. </p><h3 id="Chapter2-How-to-Keep-Score"><a href="#Chapter2-How-to-Keep-Score" class="headerlink" title="Chapter2 How to Keep Score"></a>Chapter2 How to Keep Score</h3><h5 id="What-Makes-a-Good-Metric"><a href="#What-Makes-a-Good-Metric" class="headerlink" title="What Makes a Good Metric?"></a>What Makes a Good Metric?</h5><ul><li>A good metric is comparative</li><li>A good metric is understandable</li><li>A good metric is a ratio or a rate</li><li>A good metric changes the way you behave</li></ul><h5 id="Metrics-often-come-in-pairs"><a href="#Metrics-often-come-in-pairs" class="headerlink" title="Metrics often come in pairs:"></a>Metrics often come in pairs:</h5><p><strong><em>Conversion rate</em></strong>(the percentage of people who buy something)  and <em>Time-to-purchase</em>((how long it takes someone to buy something)： Together, they tell you a lot about your cash flow.</p><p><strong><em>Viral cycle time</em></strong> (how long it takes them to invite others) drive your adoption rate</p><h5 id="Industries-and-KPIs"><a href="#Industries-and-KPIs" class="headerlink" title="Industries and KPIs:"></a>Industries and KPIs:</h5><p>restaurant owner : the number of covers (tables) in a night;</p><p>investor: the return on an investment</p><p>media website: ad clicks</p><h5 id="Qualitative-versus-quantitative-metrics"><a href="#Qualitative-versus-quantitative-metrics" class="headerlink" title="Qualitative versus quantitative metrics"></a>Qualitative versus quantitative metrics</h5><p>Quantitative data is easy to understand</p><p>Qualitative data is messy, subjective, and imprecise.</p><p>If quantitative data answers “what” and “how much,” qualitative data answers “why.”</p><h5 id="Vanity-versus-actionable-metrics"><a href="#Vanity-versus-actionable-metrics" class="headerlink" title="Vanity versus actionable metrics"></a>Vanity versus actionable metrics</h5><p>vanity metrics: </p><p><strong><em>total signups:</em></strong></p><p>The number can only increase over time (a classic “up and to the right” graph). It tells us nothing about what those users are doing or whether they’re valuable to us. They may have signed up for the application and vanished forever.</p><p><strong><em>total active users</em></strong></p><p>Assuming that you’ve done a decent job of defining an active user—but it’s still a vanity metric. It will gradually increase over time, too, unless you do something horribly wrong</p><p>actionable metrics:</p><p><strong><em>percent of users who are active</em></strong></p><p> it tells us about the level of engagement your users have with your product. When you change something about the product, this metric should change, and if you change it in a good way, it should go up. That means you can experiment, learn, and iterate with it.</p><p><strong>number of users acquired over a specific time period</strong></p><p>This will help you compare different marketing, Segmenting experiments by time.</p><h6 id="Eight-Vanity-Metrics-to-Watch-Out-For"><a href="#Eight-Vanity-Metrics-to-Watch-Out-For" class="headerlink" title="Eight Vanity Metrics to Watch Out For"></a>Eight Vanity Metrics to Watch Out For</h6><ol><li><strong>Number of hits</strong>. If you have a site with many objects on it, this will be a big number. Count people instead.</li><li><strong>Number of page views</strong>.it counts the number of times someone requests a page. Unless your business model depends on page views (i.e., display advertising inventory), you should count people instead.</li><li><strong>Number of visits</strong>. Is this one person who visits a hundred times, or are a hundred people visiting once? Fail.</li><li><strong>Number of unique visitors</strong>. All this shows you is how many people saw your home page. It tells you nothing about what they did, why they stuck around, or if they left.</li><li><strong>Number of followers/friends/likes.</strong> Counting followers and friends is nothing more than a popularity contest, unless you can get them to do something useful for you. Once you know how many followers will do your bidding when asked, you’ve got something.</li><li><strong>Time on site/number of pages.</strong> These are a poor substitute for actual engagement or activity unless your business is tied to this behavior. If customers spend a lot of time on your support or complaints pages, that’s probably a bad thing.</li><li><strong>Emails collected*</strong>. A big mailing list of people excited about your new startup is nice, but until you know how many will open your emails (and act on what’s inside them), this isn’t useful. Send test emails to some of your registered subscribers and see if they’ll do what you tell them.</li><li><strong>Number of downloads</strong>. While it sometimes affects your ranking in app stores, downloads alone don’t lead to real value. Measure activations, account creations, or something else.</li></ol><h5 id="Exploratory-versus-reporting-metrics"><a href="#Exploratory-versus-reporting-metrics" class="headerlink" title="Exploratory versus reporting metrics"></a>Exploratory versus reporting metrics</h5><h5 id="Leading-versus-lagging-metrics"><a href="#Leading-versus-lagging-metrics" class="headerlink" title="Leading versus lagging metrics"></a>Leading versus lagging metrics</h5><p>Lagging metric <strong>churn</strong> (which is the number of customers who leave in a given time period) gives you an indication that there’s a problem—but by the time you’re able to collect the data and identify the problem.</p><p>In the early days of your startup, you won’t have enough data to know how a current metric relates to one down the road, so measure lagging metrics at first. Lagging metrics  can provide a solid baseline of performance. For leading indicators to work, you need to be able to do cohort analysis and compare groups of customers over periods of time.</p><p><strong>The volume of customer complaints</strong>. </p><p><strong>the number of support calls that happen in a day</strong> </p><p><strong>the number of customer complaints in a 90-day period</strong></p><p>Both could be leading indicators of churn: if complaints are increasing, it’s likely that more customers will stop using your product or service. As a leading indicator, customer complaints also give you ammunition to dig into what’s going on, figure out why customers are complaining more, and address those issues</p><p><strong>Account cancellation or product returns</strong></p><p>In an enterprise software company, <strong>quarterly new product bookings</strong> are a lagging metric of sales success. <strong>new qualified leads</strong> are a leading indicator, because they let you predict sales success ahead of time. But in addition to qualified leads you need a good understanding of <strong>conversion rate</strong> and <strong>sales-cycle length</strong>. Only then can you make a realistic estimate of how much new business you’ll book.</p><h5 id="Correlated-versus-causal-metrics"><a href="#Correlated-versus-causal-metrics" class="headerlink" title="Correlated versus causal metrics"></a>Correlated versus causal metrics</h5><h5 id="Moving-Targets"><a href="#Moving-Targets" class="headerlink" title="Moving Targets"></a>Moving Targets</h5><p><strong>Cohort</strong>: comparison of similar groups along a timeline.</p><p><strong>Segmentation</strong>: cross-sectional comparison of all people divided by some attribute(age, gender, etc)</p><p><strong>A/B test</strong>: changing one thing and measuring the result(e.g. revenue)</p><p><strong>multivariate analysis</strong>: changing several things at once to see which correlates with a result.</p><h3 id="Chapter3-Deciding-what-to-do-with-your-life"><a href="#Chapter3-Deciding-what-to-do-with-your-life" class="headerlink" title="Chapter3 Deciding what to do with your life"></a>Chapter3 Deciding what to do with your life</h3><p>The Lean Canvas:</p><ol><li><p>Problem: Have you identified real problems people know they have?</p></li><li><p>Customer segments: Do you know your target markets? Do you know how to target messages to them as distinct groups?</p></li><li><p>Unique value proposition: Have you found a clear, distinctive, memorable way to explain why you’re better or different? </p></li><li><p>Solution: Can you solve the problems in the right way?</p></li><li><p>Channels: How will you get your product or service to your customers, and their money back to you? </p></li><li><p>Revenue streams: Where will the money come from? Will it be onetime or recurring? The result of a direct transaction (e.g., buying a meal) or something indirect (magazine subscriptions)? </p></li><li><p>Cost structure: What are the direct, variable, and indirect costs you’ll have to pay for when you run the business? </p></li><li><p>Metrics: Do you know what numbers to track to understand if you’re making progress? </p></li><li><p>Unfair advantage: What is the “force multiplier” that will make your efforts have greater impact than your competitors?</p><h3 id="Chapter3-Data-Driven-vs-Data-informed"><a href="#Chapter3-Data-Driven-vs-Data-informed" class="headerlink" title="Chapter3 Data Driven vs Data informed"></a>Chapter3 Data Driven vs Data informed</h3></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: Lean Analytics
date: 2020-09-9 11:26:09
top: false
cover: false
password:
toc: true
mathjax: false
tags: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Product_Not
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hackerrank(medium and hard)</title>
    <link href="http://naixinzhang.github.io/2020/03/22/mysql/sql-hackerrank/"/>
    <id>http://naixinzhang.github.io/2020/03/22/mysql/sql-hackerrank/</id>
    <published>2020-03-22T22:26:09.000Z</published>
    <updated>2020-09-21T04:30:35.322Z</updated>
    
    <content type="html"><![CDATA[<p><em>15 Days of Learning SQL</em></p><pre><code>SELECT SUBMISSION_DATE,(SELECT COUNT(DISTINCT HACKER_ID)   FROM SUBMISSIONS S2   WHERE S2.SUBMISSION_DATE = S1.SUBMISSION_DATE AND    (SELECT COUNT(DISTINCT S3.SUBMISSION_DATE)  FROM SUBMISSIONS S3 WHERE S3.HACKER_ID = S2.HACKER_ID AND S3.SUBMISSION_DATE &lt; S1.SUBMISSION_DATE) = DATEDIFF(S1.SUBMISSION_DATE , &#39;2016-03-01&#39;)),(SELECT HACKER_ID FROM SUBMISSIONS S2 WHERE S2.SUBMISSION_DATE = S1.SUBMISSION_DATE GROUP BY HACKER_ID ORDER BY COUNT(SUBMISSION_ID) DESC, HACKER_ID LIMIT 1) AS TMP,(SELECT NAME FROM HACKERS WHERE HACKER_ID = TMP)FROM(SELECT DISTINCT SUBMISSION_DATE FROM SUBMISSIONS) S1GROUP BY SUBMISSION_DATE;</code></pre><p><em>The PADS</em></p><pre><code>SELECT concat(NAME,concat(&quot;(&quot;,concat(substr(OCCUPATION,1,1),&quot;)&quot;))) FROM OCCUPATIONS ORDER BY NAME ASC;SELECT &quot;There are a total of &quot;, count(OCCUPATION), concat(lower(occupation),&quot;s.&quot;) FROM OCCUPATIONS GROUP BY OCCUPATION ORDER BY count(OCCUPATION), OCCUPATION ASC</code></pre><p><em>OCCUPATIONS</em></p><pre><code>select     min(doctor) d, min(professor) p, min(singer) s, min(actor) a    from     (        SELECT         CASE WHEN Occupation = &#39;Doctor&#39; THEN name END AS Doctor ,         CASE WHEN Occupation = &#39;Professor&#39; THEN name END AS Professor ,         CASE WHEN Occupation = &#39;Singer&#39; THEN name END AS Singer ,         CASE WHEN Occupation = &#39;Actor&#39; THEN name END AS Actor ,         RANK() OVER (PARTITION BY Occupation order by name) AS row_rank         FROM         Occupations     )x     group by row_rank    order by row_rank;</code></pre><p><em>Binary Tree Nodes</em></p><pre><code>SELECT N, IF(P IS NULL,&#39;Root&#39;,IF((SELECT COUNT(*) FROM BST WHERE P=B.N)&gt;0,&#39;Inner&#39;,&#39;Leaf&#39;)) FROM BST AS B ORDER BY N;</code></pre><p><em>New Companies</em></p><pre><code>select c.company_code, c.founder,     count(distinct l.lead_manager_code), count(distinct s.senior_manager_code),     count(distinct m.manager_code),count(distinct e.employee_code) from Company c, Lead_Manager l, Senior_Manager s, Manager m, Employee e where c.company_code = l.company_code     and l.lead_manager_code=s.lead_manager_code     and s.senior_manager_code=m.senior_manager_code     and m.manager_code=e.manager_code group by c.company_code,c.founder order by c.company_code;</code></pre><p><em>Weather Observation Station 18</em></p><pre><code>select round(max(lat_n)- min(lat_n) + max(long_w)-min(long_w),4) from station;</code></pre><p><em>Weather Observation Station 19</em></p><pre><code>select round(sqrt(pow(max(LAT_N)-min(LAT_N),2)+pow(max(LONG_W)-min(LONG_W),2)),4) from STATION;</code></pre><p><em>Weather Observation Station 20</em></p><pre><code>SELECT ROUND(LAT_N,4) FROM STATION sWHERE (SELECT COUNT(LAT_N) FROM STATION WHERE LAT_N &lt; s.LAT_N) = (SELECT COUNT(LAT_N) FROM STATION WHERE LAT_N &gt; s.LAT_N) </code></pre><p><em>The Report</em></p><pre><code>select if(grades.grade &gt; 7, students.name, null), grades.grade, students.marks from students, grades where marks between min_mark and max_mark order by grade desc, name;</code></pre><p><em>Top Competitors</em></p><pre><code>select h.hacker_id, h.namefrom submissions sinner join challenges con s.challenge_id = c.challenge_idinner join difficulty don c.difficulty_level = d.difficulty_level inner join hackers hon s.hacker_id = h.hacker_idwhere s.score = d.score and c.difficulty_level = d.difficulty_levelgroup by h.hacker_id, h.namehaving count(s.hacker_id) &gt; 1order by count(s.hacker_id) desc, s.hacker_id asc</code></pre><p><em>Ollivander’s Inventory</em></p><pre><code>SELECT A.myid,A.age,A.coins_needed,A.power from     (SELECT w1.id as myid,age,coins_needed,power,            row_number() OVER(PARTITION BY age,power                              ORDER BY coins_needed asc) as rn    FROM wands w1 inner join     wands_property w2 on w1.code = w2.code    where is_evil = 0) Awhere A.rn = 1order by power desc, age desc;</code></pre><p><em>Challenges</em></p><pre><code>select c.hacker_id, h.name ,count(c.hacker_id) as c_countfrom Hackers as hinner join Challenges as c on c.hacker_id = h.hacker_idgroup by c.hacker_id,h.namehaving     c_count =         (SELECT MAX(temp1.cnt)         from (SELECT COUNT(hacker_id) as cnt             from Challenges             group by hacker_id             order by hacker_id) temp1)    or c_count in         (select t.cnt         from (select count(*) as cnt                from challenges               group by hacker_id) t         group by t.cnt         having count(t.cnt) = 1)order by c_count DESC, c.hacker_id;</code></pre><p><em>Contest Leaderboard</em></p><pre><code>select h.hacker_id, name, sum(score) as total_scorefrom hackers as h inner join(select hacker_id,  max(score) as score from submissions group by challenge_id, hacker_id) max_scoreon h.hacker_id=max_score.hacker_idgroup by h.hacker_id, namehaving total_score &gt; 0order by total_score desc, h.hacker_id;</code></pre><p><em>SQL Project Planning</em></p><pre><code>SELECT Start_Date, MIN(End_Date)FROM     (SELECT Start_Date FROM Projects WHERE Start_Date NOT IN (SELECT End_Date FROM Projects)) a,    (SELECT End_Date FROM Projects WHERE End_Date NOT IN (SELECT Start_Date FROM Projects)) b WHERE Start_Date &lt; End_DateGROUP BY Start_DateORDER BY DATEDIFF(MIN(End_Date), Start_Date) ASC, Start_Date ASC;</code></pre><p><em>Placements</em></p><pre><code>select s.name from students s, friends f, packages p, packages p2 where s.id = f.id and f.friend_id = p2.id and s.id = p.id and p.salary &lt; p2.salary order by p2.salary;</code></pre><p><em>Symmetric Pairs</em></p><pre><code>SELECT f1.X, f1.Y FROM Functions f1INNER JOIN Functions f2 ON f1.X=f2.Y AND f1.Y=f2.XGROUP BY f1.X, f1.YHAVING COUNT(f1.X)&gt;1 or f1.X&lt;f1.YORDER BY f1.X </code></pre><p><em>Interviews</em></p><pre><code>select con.contest_id,        con.hacker_id,         con.name,         sum(total_submissions),         sum(total_accepted_submissions),         sum(total_views), sum(total_unique_views)from contests con join colleges col on con.contest_id = col.contest_id join challenges cha on  col.college_id = cha.college_id left join(select challenge_id, sum(total_views) as total_views, sum(total_unique_views) as total_unique_viewsfrom view_stats group by challenge_id) vs on cha.challenge_id = vs.challenge_id left join(select challenge_id, sum(total_submissions) as total_submissions, sum(total_accepted_submissions) as total_accepted_submissions from submission_stats group by challenge_id) ss on cha.challenge_id = ss.challenge_id    group by con.contest_id, con.hacker_id, con.name        having sum(total_submissions)!=0 or                 sum(total_accepted_submissions)!=0 or                sum(total_views)!=0 or                sum(total_unique_views)!=0            order by contest_id;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;15 Days of Learning SQL&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT SUBMISSION_DATE,
(SELECT COUNT(DISTINCT HACKER_ID)  
 FROM SUBMISSIONS S2  
 WHERE
      
    
    </summary>
    
      <category term="SQL" scheme="http://naixinzhang.github.io/categories/SQL/"/>
    
    
      <category term="SQL Learning notes" scheme="http://naixinzhang.github.io/tags/SQL-Learning-notes/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://naixinzhang.github.io/2020/03/06/stat/stat-interview-prep-copy/"/>
    <id>http://naixinzhang.github.io/2020/03/06/stat/stat-interview-prep-copy/</id>
    <published>2020-03-06T19:36:30.000Z</published>
    <updated>2020-09-21T04:30:34.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Freddie"><a href="#Freddie" class="headerlink" title="Freddie"></a>Freddie</h1><p>This is a computer program that simulates a Data Analyst chatbot,  named Freddie, capable of processing user input and returning desired output following the rules and directions in the script. The chatbot can help identify your computer’s operating system (OS), set the input and output paths, read input data stored into the memory of your computer, provide descriptive statistics for key variables in the analysis, and finally, run a linear regression model of your choice. Check a sample output here.</p><p>################################# NY HOSPITALS #################################</p><p><strong>Files</strong>: cleaning.py,hospitalsNY.py,input.py, main.py,path.py,regression.py,statistics.py,test_2.py,test.py</p><p><strong>Author</strong>: Naixin Zhang<strong>Email</strong>: <a href="mailto:nzhang228@wisc.edu" target="_blank" rel="noopener">nzhang228@wisc.edu</a></p><p>############################### OUTSIDE HELP CREDITS ###########################</p><p><strong>Online sources:</strong> </p><p>1.Importing csv from a subdirectory in Python<a href="https://stackoverflow.com/questions/10235752/importing-csv-from-a-subdirectory-in-python" target="_blank" rel="noopener">https://stackoverflow.com/questions/10235752/importing-csv-from-a-subdirectory-in-python</a></p><p>2.How to open my files in <code>data_folder</code> with pandas using relative path?<a href="https://stackoverflow.com/questions/35384358/how-to-open-my-files-in-data-folder-with-pandas-using-relative-path" target="_blank" rel="noopener">https://stackoverflow.com/questions/35384358/how-to-open-my-files-in-data-folder-with-pandas-using-relative-path</a></p><p>3.how to join path<a href="https://stackoverflow.com/questions/17438027/os-path-join-and-os-path-normpath-both-add-double-backwards-slash-on-windows" target="_blank" rel="noopener">https://stackoverflow.com/questions/17438027/os-path-join-and-os-path-normpath-both-add-double-backwards-slash-on-windows</a>os.path.join() and os.path.normpath() both add double backwards slash on windows </p><p>4.get the drive letter <a href="https://docs.python.org/2/library/os.path.html" target="_blank" rel="noopener">https://docs.python.org/2/library/os.path.html</a></p><p>5.get the users system<a href="https://docs.python.org/2/library/platform.html" target="_blank" rel="noopener">https://docs.python.org/2/library/platform.html</a></p><p>6.how to drop na using panda <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.dropna.html" target="_blank" rel="noopener">https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.dropna.html</a></p><p>7.remove missing values<a href="https://towardsdatascience.com/data-cleaning-with-python-and-pandas-detecting-missing-values-3e9c6ebcf78b" target="_blank" rel="noopener">https://towardsdatascience.com/data-cleaning-with-python-and-pandas-detecting-missing-values-3e9c6ebcf78b</a></p><p>8.Finding outliers in dataset using python<a href="https://medium.com/datadriveninvestor/finding-outliers-in-dataset-using-python-efc3fce6ce32" target="_blank" rel="noopener">https://medium.com/datadriveninvestor/finding-outliers-in-dataset-using-python-efc3fce6ce32</a></p><p>9.using pretty table for drawing<a href="http://zetcode.com/python/prettytable/" target="_blank" rel="noopener">http://zetcode.com/python/prettytable/</a></p><p>10.pandas.DataFrame.align¶<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.align.html" target="_blank" rel="noopener">https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.align.html</a></p><ol start="11"><li><p>pandas.concat</p><p><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.concat.html" target="_blank" rel="noopener">https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.concat.html</a></p></li></ol><p>12.compare two data series using this Matplotlib code:<a href="https://pythonspot.com/matplotlib-bar-chart/" target="_blank" rel="noopener">https://pythonspot.com/matplotlib-bar-chart/</a></p><p>13.using tabulate<a href="https://pypi.org/project/tabulate/" target="_blank" rel="noopener">https://pypi.org/project/tabulate/</a></p><p>14.draw for scatter<a href="https://pythonspot.com/matplotlib-scatterplot/" target="_blank" rel="noopener">https://pythonspot.com/matplotlib-scatterplot/</a></p><p>15.for data splitting into training and testing datasetsklearn.model_selection.train_test_split<a href="https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html" target="_blank" rel="noopener">https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html</a></p><p>16.Linear Regression Example<a href="https://scikit-learn.org/stable/auto_examples/linear_model/plot_ols.html" target="_blank" rel="noopener">https://scikit-learn.org/stable/auto_examples/linear_model/plot_ols.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Freddie&quot;&gt;&lt;a href=&quot;#Freddie&quot; class=&quot;headerlink&quot; title=&quot;Freddie&quot;&gt;&lt;/a&gt;Freddie&lt;/h1&gt;&lt;p&gt;This is a computer program that simulates a Data A
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AB_test_prep</title>
    <link href="http://naixinzhang.github.io/2020/02/24/abtest/ab-test-interveiw-prep/"/>
    <id>http://naixinzhang.github.io/2020/02/24/abtest/ab-test-interveiw-prep/</id>
    <published>2020-02-24T23:26:09.000Z</published>
    <updated>2020-09-21T04:30:33.977Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>What is A/B testing?A/B testing (sometimes called split testing) is basically statistical hypothesis testing applied to web page comparison. You compare two versions of web pages by showing the two variants (call them A and B) randomly to two equally sized groups of visitors at the same time, the one that gives better conversion rate wins. </p></li><li><p>Why do we need A/B test?The goal is to :</p><ul><li>establish causal relationship between actions and results</li><li>measure impact solely from the change</li></ul></li><li><p>where is A/B test used? widely used in high tech industry. Major use case:</p></li></ul><p>​        product iteration:</p><ul><li><p>front end: change ui design, user flow, add new features</p><ul><li>algrithm enhancement: recommendation system, search ranking, ads display</li><li>operations: define coupon value, promotion programmarketing optimization</li><li>search engine optimization(SEO)</li><li>campaign performance measurement</li></ul></li><li><p>Describe the process of A/B test</p><ul><li><p>Design</p><ul><li><p>understand problem &amp; objective</p></li><li><p>come up with hypothesis</p></li><li><p>design of experiment</p><ul><li><p>key assumptions:</p><ol><li>the factor to test is the only reason for difference</li><li>all other factors are comparable</li><li>a unit been assigned to A or B is random</li><li>each experiment unit are independent.</li></ol></li><li><p>assigment unit   what is the unit to split A/B?   user_id? cookie_id? device_id? session_id? Ip address?   split users in test/control?   most common 50/50 split   sometimes not. time sensitive. eg: holiday marketing campaign</p></li><li><p>A/A TEST:use A/B test framwork to test two identical versions against each other. There should be no difference between the two groups.The goal: make sure the framework been used is correct</p><pre><code>      data exploration &amp; parameter estimation(sample variance)</code></pre><img src="1582610120(1).png" style="zoom:60%;"></li><li><p>metrics</p></li><li><p>exposure &amp; duration</p><p>   should you show the A/B version to all users?</p><p> No,May cause bad user experience if test version is bad</p><p> start with a small proportion, like 5%, gradually roll out to more users</p><p> How long are you going to run the experiment?</p><p> In practice, we want to minimize the exposure and duration of an A/B test, because </p><ul><li><p>optimizaiton businesss performance as much as possible</p></li><li><p>potential negative user experience</p><ul><li><p>inconsisitent user experience </p></li><li><p>expensive to maintain multiple versions</p><p>how to decide exposure %?</p><ul><li><p>size of eligible population’</p></li><li><p>potential impact</p></li><li><p>easy to test &amp; debg</p><p>how to decide duration? </p><ul><li>minimum sample size</li><li>daily volume &amp; exposure</li><li>seasonality(at least one seasonal period)</li></ul></li></ul></li></ul></li></ul></li><li><p>sample size calculation </p><p>   data assumption:</p><p>   what distribution assumption are you making to your data?</p><p>   normal distribution, central limit theorem</p><p>   what is the null-hypothesis of your test?</p><p>   diff = Ua - Ub = 0</p>   <img src="image-20200225001249432.png" alt="image-20200225001249432" style="zoom:60%;"><p>   <img src="image-20200225001346889.png" alt="image-20200225001346889"></p><p>   why calculate sample size? can we just let the experiment run until the result is statistically significant?</p><p>   ​     No highly increase false positive rate(Type I error)</p><p>   ​     when null hypothesis is true, the chance of reject H0 is 0.05</p><p>   what if it takes too long to get a desired sample size?</p><p>   ​    Increase exposure</p><p>   ​    reduce variance to reduce required sample size</p><pre><code>  - blocking - run experiment within sub-groups  -  propensity score matching      procedure:    1. run a model to predit Y with appropriate covariates        obtain propensity score: predict y_hat    2.  check that prepensity score is balanced across test aadn control groups    3. match each test unit to one or more controls on propensity score       nearest neighbor matching/ matching with certain width       4. run expriemnt on matched samples       5. conduct post expriment analysis on matched samples          what if your data is highly skewed or statistics is  hard to approximate with CLT?             transformation/ winsorization/capping/bootstrap          bootstrap is a resampling method, it can be used to estimate the sampling distribution of any statistics,commonly used in estimating CI &amp; P-value &amp; statistics with complex or no close- form estimators          Procedure:          1. randomly generate a sample of size n with replacement from the original data          2. repeate step 1 many times          3. estimate statistics with sampling statistics of the generated samples             pros:             no assumptions on distribution of original data             simple to implement             cons:             computational expensive</code></pre></li></ul></li></ul></li><li><p>Implement</p><ul><li>code change &amp; testing</li><li>run experiment &amp; monitor</li></ul></li><li><p>measurement</p><ul><li><p>result measurement</p><ul><li>data exploration</li></ul><p>imbalance assigment:</p><p>check for % test/contro units. Is the % matching DOE?</p><p>mixed assignment:</p><p>if # of mixed samples is small, ok to remove. if big, need to figure out why</p><p>what is the problem throwing away mixed samples</p><p>sanity check</p><p>  are test/control similar in other factors other than treatment</p><ul><li><p>hypothesis test</p><p>conduct test/ multiple testing:</p><p>most use T test,</p><p>when variance is known is large, can use Z test</p><p>when sample size small can use non-parametric methods</p><p>for complicated statistics, can use bootstrap to calculate p-value</p><ul><li><p>result analysis</p><p>pre-bias adjustment/analysis unit different with assignment unit</p></li></ul><p>cohort analysis</p></li></ul></li><li><p>data analysis</p></li><li><p>decision making</p><p>if all metrics move postively:</p><p>  meet expectations. Yes , ready to lauch</p><p>  be cautious if result is too good. May need to investigate(outliers)</p><p>if  some metrics move negatively:</p><p>are they as expected? are these metrics important?</p><p>deep dive to find causes</p><p>if result are neutral?</p><p>slice/dice on sub-groups</p></li></ul></li></ul></li></ul><pre><code>  Multiple testing  what if you have multiple test groups?  false positive rate is much higher when doing multiple testing. need to control family-wise false positive rate  &lt;img src=&quot;image-20200225004208305.png&quot; alt=&quot;image-20200225004208305&quot; style=&quot;zoom:67%;&quot; /&gt;  &lt;img src=&quot;image-20200225004248014.png&quot; alt=&quot;image-20200225004248014&quot; style=&quot;zoom:67%;&quot; /&gt;  ![image-20200225004324771](image-20200225004324771.png)  Pre-bias adjustment  when A/B groups have difference before experiment.  &lt;img src=&quot;image-20200225004450709.png&quot; alt=&quot;image-20200225004450709&quot; style=&quot;zoom:67%;&quot; /&gt;  A/B test can be summarized into the 5 steps below:  (1). choose and characterize metrics to evaluate your experiment, i.e. what do you care about, how do you want to measure the effect.  Brain storm potential metrics. Use customer conversion funnel to summarize the process. Invariant metric does not relate to the change. Evaluation metrics are related to the change.  (2). choose significant level (alpha), statistical power (1-beta) and practical significance level you really want to launch the change if the test is statistically significant  (3). Calculate required sample size  (4). Take sample for control/ treatment groups and run the test  (5). Analyze the results and draw valid conclusions  Sanity check: invariant metric does not change in experiment and control  Analyze evaluation metrics  Using pooled mean/conversion probability, then calculate pooled standard deviation, then calculate margin of error (z*sd). Then compare the difference between control and experiment and calculate upper and lower bound of the difference (P-diff +/ - margin of error). Compare with 0 (statistically significant) or required difference to be practically different.  Sign test: confirm the result with sign test. The number of success out of total trial is statistically significant.</code></pre><ul><li><p>Situations we can’t analyze through A/B testA/B test can’t test new experience, because (1) what’s the base of your comparison (2) how much time it will take for the users to adapt to the new experience. Long term effect is hard to test with A/B test</p></li><li><p>How many variates should we have in A/B testThe goal of A/B test should be clear. A number of factors from each different design can muddy the test result water. We suggest running two versions against each other, and then running a second test afterwards to compare the winners.</p></li><li><p>What do I do if I do not trust the results?If you really don’t trust the results and have ruled out any errors or challenges to the test’s validity, the best thing to do is to run the same test again. Treat it as an entirely separate test and see if you can replicate the results. If you can replicate again and again, you probably have a solid set of results.</p></li><li><p>What if I do not have control?A control is the existing version of a landing page or webpage that you are testing against. Sometimes you may want to test two versions of a page that never existed before… and that’s oaky. Just choose one of the variations and call that one the control. Try to pick the one that’s the most similar to how you currently design pages and use the other as the treatment.</p></li><li><p>When A/B test is not useful, what you can do?Analyze the user activity logsConduct retrospective analysisConduct user experience researchFocus groups and surveysHuman evaluation</p></li><li><p>MetricsThe metrics we choose for sanity check are called invariant metrics. They are not supposed to be affected by the experiment. They should not change across control and experiment groups.Evaluation metrics are used to measure which variation is better. For example daily active users (DAU) to measure user engagement; click through rate (CTR) to measure a button design on a webpage. </p></li></ul><p>There are four categories of metrics:</p><ul><li><p>Sums and counts</p></li><li><p>Distribution (mean, median, percentiles)</p></li><li><p>Probability and rates (click through probability and click through rate)-baidu 1point3acres</p></li><li><p>Ratios: any two numbers divide by each other</p><p>Sensitivity and robustness:You want to choose a metric that has high sensitivity, so the metric can pick up the change you care about. You also want the metric to be robust against changes you don’t care about.There is a balance between the sensitivity and robustness, you need to look into the data to find out which metric to use.</p></li></ul><p>How to measure the sensitivity and robustness?</p><ul><li>Run experiments</li><li>Use A/A test to see if metrics pick up difference (if yes, then the metric is not robust)</li><li>Retrospective analysis</li></ul><ul><li><p>Significance level, statistical power and practical significance levelUsually the significance level is 0.05 and power is 0.8. practical significance level varies depends on each individual test. Practical significance level is higher than statistical significance level. You may not want to launch a change even the test is statistically significant because you need to consider</p><ul><li>The business impact of the change</li><li>Whether it is worth to launch considering the engineering cost, customer support, sales issue and opportunity cost</li></ul></li><li><p>How to calculate the sample size? Sample size required for valid hypothesis test depends on 5 of the following parameters</p><ul><li>The conversion rate value of control variation (baseline value)</li><li>The minimum difference between control and experiment which is to be identified. The smaller the difference between experiment and control to be identified, the bigger the sample size is required.</li><li>Chosen confidence/significance level</li><li>Chosen statistical power</li></ul></li><li><p>Type of the test: one or two tailed test. Sample size for two tailed test is relatively bigger.There are different kinds of online testing tools, G-power, Evan Miller, google analytics, etc. If using R, first calculate the z value based on alpha using qnorm(). Then using a grid of sample size values to calculate beta (the pdf of reject the null when the null is true) using pnorm(), so the smallest sample size corresponds to beta &lt;= required beta is the required sample size for valid test. This make use of the fact that as sample size getting big, the estimated standard deviation become smaller, so the power of the test gets big. Formula:</p></li></ul><ul><li><p>How to split sample?The sample size in control and experiment should be statistically equal. </p></li><li><p>Correlational VS causal</p></li><li><p>Advantages of A/B testScientific way to prove causality, i.e. the changes in metrics are caused by changes introduced in the treatment.Sensitivity: you can detect tiny changes to metricsDetect unexpected consequences</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;What is A/B testing?
A/B testing (sometimes called split testing) is basically statistical hypothesis testing applied to web pag
      
    
    </summary>
    
      <category term="A/B TEST" scheme="http://naixinzhang.github.io/categories/A-B-TEST/"/>
    
    
      <category term="A/B TEST" scheme="http://naixinzhang.github.io/tags/A-B-TEST/"/>
    
  </entry>
  
  <entry>
    <title>statistics_interview_prep</title>
    <link href="http://naixinzhang.github.io/2020/02/19/stat/stat-interview-prep/"/>
    <id>http://naixinzhang.github.io/2020/02/19/stat/stat-interview-prep/</id>
    <published>2020-02-19T23:26:09.000Z</published>
    <updated>2020-09-21T04:30:34.909Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>P-ValueThe p-value is the probability of obtaining at least as extreme results given that the null hypothesis is true. In other words, the p-value is the expected fluctuation in a given sample, similar to the variance.In AB testing, the p-value is the difference we would see across samples if we ran an A/A test.</p></li><li><p>Significance LevelThe significance level is the probability of rejecting the null hypothesis given that it is true. It’s a value we set based on the level of accuracy we deem acceptable.In AB testing, the significance level is the industry standard 5% we use to give us results with 95% confidence.</p></li><li><p>Statistical Hypothesis TestingAn AB test is an example of statistical hypothesis testing, a process whereby a hypothesis is made about the relationship between two data sets and those data sets are then compared against each other to determine if there is a statistically significant relationship or not.To put this in more practical terms, a prediction is made that Page Variation #B will perform better than Page Variation #A, and then data sets from both pages are observed and compared to determine if Page Variation #B is a statistically significant improvement over Page Variation #A.</p></li><li><p>Data Sample:A data sample is a set of data collected and/or selected from a statistical population by a defined procedure. It’s a small portion of the larger population.When AB testing, the sample is the number of visitors we display our new page variation too in order to collect data.</p></li><li><p>MeanThe mean is the central tendency of a probability distribution.In AB testing, the mean is our page’s conversion rate with the sample visitors.</p></li><li><p>VarianceThe variance is a measure of variability across samples. It is officially the expectation of the squared deviation of a random variable from its mean.In AB testing, the variance affects the sample size we need in order to have a chance of deriving statistically significant results.</p></li><li><p>Regression to the MeanRegression to the mean is the phenomenon that if a variable is extreme on its first measurement, it will tend to be closer to the average on its second measurement.In AB testing, this phenomenon ensures that as we continue increasing the sample size and the length of observation, the mean of our cumulative observations will get closer and closer to the true mean of the population.</p></li><li><p>Confidence Level &amp; IntervalThe confidence interval is an observed range in which a given percentage of test outcomes fall. The confidence interval is determined by the confidence level we manually select at the beginning of our test and influences the sample size required.In AB testing, the confidence level is usually set to 95%, which gives us a range (the confidence interval) in which we know the mean will fall in at least 19 of 20 samples.</p></li><li><p>Margin of ErrorThe margin of error is a statistic expressing the amount of random sampling error in a sample’s results. The margin for error is a function of the standard deviation, which is a function of the variance. Really all you need to know is that all of these terms are measures of variability across samples.The margin of error is added to and subtracted form the mean to determine the confidence interval.</p></li><li><p>Null HypothesisThe null hypothesis is a baseline assumption that there is no relationship between two data sets. When a statistical hypothesis test is run, the results either disprove the null hypothesis or they fail to disprove the null hypothesis.In AB testing, the null hypothesis is the assumption that the original page and the new page variation have no statistical significant relationship.</p></li><li><p>Statistical SignificanceStatistical significance is attained when the p-value is less than the significance level. And that is way too many new words in one sentence, so let’s break down these terms real quick and then we’ll summarize the entire concept in plain English.. In AB testing, statistical significance is how we verify that a new page truly outperforms the original.</p></li><li><p>Statistical PowerStatistical power is the probability that a test correctly rejects the null hypothesis.</p><p>how is the power change if the following factors increase?</p><ol><li>size of the effect 增加</li><li>variance of distribution减少</li><li>significance level desired α 减少</li></ol></li><li><p>Type I ErrorA type I error occurs when we incorrectly reject the null hypothesis.</p></li></ul><p>In AB testing, a type I error would occur if we concluded that Variation B was “better” than Variation A when it actually was not. These errors are avoided by achieving statistically significant results.</p><ul><li><p>Type II ErrorA type II error occurs when the null hypothesis is false, but we incorrectly fail to reject it.To put this in AB testing terms, a type II error would occur if we concluded that Variation B was not “better” than Variation A when it actually was better. These errors are avoided by running tests with a high statistical power.</p></li><li><p>Normal distribution</p></li></ul><ul><li>central Limit Theorem</li><li>Hypothesis Testing<ul><li>T test and Z test</li><li>P value</li><li>Two sample/ one sample/ paired</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;P-Value
The p-value is the probability of obtaining at least as extreme results given that the null hypothesis is true. In other
      
    
    </summary>
    
      <category term="statistic knowlege review" scheme="http://naixinzhang.github.io/categories/statistic-knowlege-review/"/>
    
    
      <category term="statistic knowlege review" scheme="http://naixinzhang.github.io/tags/statistic-knowlege-review/"/>
    
  </entry>
  
  <entry>
    <title>1.0_leetcode_database_practice</title>
    <link href="http://naixinzhang.github.io/2020/02/15/mysql/sql-leetcode/"/>
    <id>http://naixinzhang.github.io/2020/02/15/mysql/sql-leetcode/</id>
    <published>2020-02-16T02:26:09.000Z</published>
    <updated>2020-09-21T04:30:35.276Z</updated>
    
    <content type="html"><![CDATA[<p>*175. </p><pre><code>SELECT Person.FirstName, Person.LastName, Address.City, Address.StateFROM PersonLEFT JOIN AddressON Person.PersonID = Address.PersonID</code></pre><p>176.</p><pre><code>SELECT (  SELECT DISTINCT Salary FROM Employee   ORDER BY Salary DESC  LIMIT 1,1)as SecondHighestSalary </code></pre><p>notes: </p><ul><li>limit y 分句表示: 读取 y 条数据</li><li>limit x, y 分句表示: 跳过 x 条数据，读取 y 条数据</li><li>limit y offset x 分句表示: 跳过 x 条数据，读取 y 条数据</li></ul><p>177.</p><pre><code>CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INTBEGINDECLARE M INT;SET M=N-1;  RETURN (      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M, 1  );END</code></pre><p>NOTES:MUST use declare and set in this case</p><p>178.MySQL Solution:</p><pre><code>SELECT S.Score, COUNT(S2.Score) AS Rank FROM Scores S,(SELECT DISTINCT Score FROM Scores) S2WHERE S.Score&lt;=S2.ScoreGROUP BY S.Id ORDER BY S.Score DESC;</code></pre><p>MS SQL Solution</p><pre><code>SELECT Score, DENSE_RANK() OVER (ORDER BY Score DESC) AS RankFROM Scores</code></pre><p>180.Assume the id is consecutive: 1,2,3</p><pre><code>SELECT DISTINCT l1.Num AS ConsecutiveNumsFROM Logs l1, Logs l2,Logs l3WHERE l1.Id + 1 = l2.Id AND l2.Id + 1 = l3.IdAND l1.Num = l2.Num AND l2.Num = l3.Num</code></pre><pre><code>select distinct Num as ConsecutiveNumsfrom Logswhere (Id + 1, Num) in (select * from Logs) and (Id + 2, Num) in (select * from Logs)</code></pre><p>181.</p><pre><code>SELECT a.Name AS Employee FROM Employee aJOIN Employee bON a.ManagerId = b.IdAND a.Salary &gt; b.Salary</code></pre><p>182.</p><pre><code>SELECT EmailFROM PersonGROUP BY EmailHaving count(Email) &gt; 1</code></pre><p>183.</p><pre><code>SELECT Customers.Name AS CustomersFROM Customers WHERE Customers.id NOT IN (SELECT CustomerId FROM Orders)</code></pre><p>184.</p><pre><code>SELECT d.Name AS &#39;Department&#39;, e.Name AS &#39;Employee&#39;,e.Salary FROM Employee eJOIN Department dON e.DepartmentId = d.IdWHERE (DepartmentId,Salary) IN (     SELECT DepartmentId, Max(Salary)     FROM Employee     GROUP BY DepartmentId )</code></pre><p>185.</p><pre><code>SELECT d.Name AS &#39;Department&#39;, e1.Name AS &#39;Employee&#39;,e1.Salary FROM Employee e1JOIN Department dON e1.DepartmentId = d.IdWHERE 3 &gt; ( SELECT COUNT(DISTINCT e2.Salary) FROM Employee e2 WHERE e2.Salary &gt; e1.Salary AND e1.DepartmentId = e2.DepartmentId)</code></pre><pre><code>SELECT d.Name AS Department, a. Name as Employee, a. Salary FROM (SELECT e.*, DENSE_RANK() OVER (PARTITION BY DepartmentId ORDER BY Salary DESC) AS DeptPayRank FROM Employee e ) a JOIN Department dON a. DepartmentId = d. Id WHERE DeptPayRank &lt;=3</code></pre><p>196.</p><pre><code>DELETE p1 FROM Person p1,    Person p2WHERE    p1.Email = p2.Email AND p1.Id &gt; p2.Id</code></pre><p>197.</p><pre><code>SELECT w1.IdFROM weather w0, weather w1WHERE DATEDIFF(w1.recorddate, w0.recorddate) = 1 and w0.temperature &lt; w1.temperature</code></pre><p>262.</p><pre><code>SELECT Request_at as Day,       ROUND(COUNT(IF(Status != &#39;completed&#39;, TRUE, NULL)) / COUNT(*), 2) AS &#39;Cancellation Rate&#39;FROM TripsWHERE (Request_at BETWEEN &#39;2013-10-01&#39; AND &#39;2013-10-03&#39;)      AND Client_id NOT IN (SELECT Users_Id FROM Users WHERE Banned = &#39;Yes&#39;)GROUP BY Request_at;</code></pre><p>511.</p><pre><code>SELECT player_id,MIN(event_date)AS first_loginFROM ActivityGROUP BY player_id</code></pre><p>512.</p><pre><code>select player_id, device_id from activity where (player_id, event_date) in (                                select player_id, min(event_date)                                from activity                                 group by player_id                                 ) </code></pre><p>534.</p><pre><code>SELECTplayer_id, event_date, sum(games_played) over(PARTITION BY player_id ORDER BY event_date)AS &#39;games_played_so_far&#39;FROM activityORDER BY player_id, games_played_so_far;</code></pre><pre><code>SELECT a1.player_id, a1.event_date,SUM(a2.games_played) AS games_played_so_farFROM activity a1, activity a2WHERE a1.player_id = a2.player_idAND a1.event_date &gt;=a2.event_dateGROUP BY a1.player_id, a1.event_dateORDER BY a1.player_id, a1.event_date;</code></pre><p>550.</p><pre><code>SELECT ROUND(COUNT(t2.player_id)/COUNT(t1.player_id),2) AS fractionFROM (    SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id) t1LEFT JOIN Activity t2ON t1.player_id = t2.player_id AND t1.first_login = t2.event_date - 1</code></pre><p>569.</p><pre><code>SELECT MIN(A.Id) AS Id, A.Company, A.SalaryFROM Employee A, Employee BWHERE A.Company = B.CompanyGROUP BY A.Company, A.SalaryHAVING SUM(CASE WHEN B.Salary &gt;= A.Salary THEN 1 ELSE 0 END) &gt;= COUNT(*)/2AND SUM(CASE WHEN B.Salary &lt;= A.Salary THEN 1 ELSE 0 END) &gt;= COUNT(*)/2</code></pre><p>570.</p><pre><code>SELECT Name FROM EmployeeWHERE Id IN (SELECT ManagerId FROM Employee GROUP BY ManagerId HAVING COUNT(ManagerId) &gt;=5)</code></pre><p>571.(HARD)</p><pre><code>SELECT AVG(n1.Number) AS medianFROM Numbers n1JOIN (    SELECT n3.Number,    ABS(SUM(CASE WHEN n3.Number &gt; n4.Number THEN n4.Frequency ELSE 0 END) -         SUM(CASE WHEN n3.Number &lt; n4.Number THEN n4.Frequency ELSE 0 END))    AS Diff    FROM Numbers n3, Numbers n4 #为什么inner join不对？    GROUP BY n3.Number     ) n2ON n1.Number =n2.NumberWHERE n1.Frequency &gt;= n2.Diff</code></pre><p>LOGIC:比它大的数的频数和与比它小的数的频数和的差需要落在中位数的频数里NUM, FREQ, DIFF0,7,71,1,32,3,73,11</p><p>574.</p><pre><code>SELECT Name FROM CandidateWHERE id = (SELECT CandidateId FROM Vote GROUP BY CandidateIDORDER BY COUNT(id) DESCLIMIT 1)</code></pre><p>*577.</p><pre><code>SELECT e.name, b.bonus FROM Employee eLEFT JOIN Bonus bON e.empId = b.empIdWHERE b.bonus &lt; 1000 OR b.bonus IS NULL</code></pre><p>578.</p><pre><code>SELECT question_id AS survey_logFROM(    SELECT question_id,    SUM(CASE WHEN action = &#39;answer&#39; THEN 1 ELSE 0 END)    /    SUM(CASE WHEN action = &#39;show&#39; THEN 1 ELSE 0 END) AS rate    FROM survey_log    GROUP BY question_id    ) temORDER BY rate DESC LIMIT 1</code></pre><p>579.</p><pre><code>SELECT e1.ID,e1.Month, Sum(e2.Salary) As Salary FROM Employee e1JOIN Employee e2ON e1.ID = e2.ID and e1.Month &gt;= e2.MonthWHERE(e1.ID, e1.Month) NOT IN (SELECT Id, MAX(Month) FROM Employee GROUP BY Id)      AND e1.Month - e2.Month &lt; 3GROUP BY e1.Id, e1.MonthORDER BY e1.ID, e1.Month DESC</code></pre><pre><code>SELECT Id, Month, SUM(Salary) OVER(PARTITION BY Id ORDER BY Month ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS SalaryFROM (SELECT Id, Month, Salary, MAX(Month) OVER(PARTITION BY Id) AS recent_monthFROM Employee) subWHERE sub.Month != recent_monthORDER BY Id, Month DESC</code></pre><p>reference for windows function: <a href="https://blog.csdn.net/huozhicheng/article/details/5843782" target="_blank" rel="noopener">https://blog.csdn.net/huozhicheng/article/details/5843782</a></p><p>580.</p><pre><code>SELECT d.dept_name, COUNT(student_id) AS student_number FROMstudent sRIGHT JOIN department dON d.dept_id = s.dept_idGROUP BY d.dept_idORDER BY student_number DESC,d.dept_name</code></pre><p>*584.</p><pre><code>SELECT name FROM customerWHERE referee_id != 2 OR referee_id IS NULL</code></pre><p>585.</p><pre><code>SELECT SUM(TIV_2016) AS TIV_2016FROM insuranceWHERE TIV_2015 IN (    SELECT TIV_2015 FROM insurance    GROUP BY TIV_2015    HAVING COUNT(*) &gt; 1) AND CONCAT(LAT,CONCAT(,LON)) IN(    SELECT CONCATE(LAT,CONCATE(,LON)) FROM insurance    GROUP BY LAT,LON    HAVING COUNT(*) = 1)</code></pre><p>586.</p><pre><code>SELECT customer_numberFROM ordersGROUP BY customer_numberORDER BY COUNT(*) DESCLIMIT 1</code></pre><p>*595</p><pre><code>SELECT    name, population, areaFROM    worldWHERE    area &gt; 3000000 OR population &gt; 25000000</code></pre><p>*596</p><pre><code>SELECT classFROM coursesGROUP BY classHAVING COUNT(DISTINCT student) &gt;= 5</code></pre><p>597</p><pre><code>SELECT ROUND(    IFNULL(    (SELECT COUNT(distinct requester_id, accepter_id) FROM request_accepted)    /    (SELECT COUNT(distinct sender_id, send_to_id) FROM friend_request),    0), 2) AS accept_rate</code></pre><p>601</p><pre><code>SELECT DISTINCT S1.*FROM stadium S1JOIN stadium S2JOIN stadium S3ON ((S1.id = S2.id - 1 AND S1.id = S3.id -2) # s1,s2,s3 OR (S3.id = S1.id - 1 AND S3.id = S2.id -2)  # s3,s1,s2OR (S3.id = S2.id - 1 AND S3.id = S1.id -2)) # s3,s2,s1WHERE S1.people &gt;= 100AND S2.people &gt;= 100AND S3.people &gt;= 100ORDER BY S1.id;</code></pre><p>Notes:Considering t1, t2 and t3 are identical, we can take one of them to consider what conditions we should add to filter the data and get the final result. Taking t1 for example, it could exist in the beginning of the consecutive 3 days, or the middle, or the last.</p><p>603.</p><pre><code>SELECT DISTINCT a.seat_idFROM cinema aJOIN cinema b ON ABS(a.seat_id - b.seat_id) = 1WHERE a.free = 1 AND b.free = 1ORDER BY a.seat_id;</code></pre><p>607</p><pre><code>SELECT    s.nameFROM    salesperson sWHERE    s.sales_id NOT IN         (SELECT            o.sales_id        FROM            orders o                LEFT JOIN            company c ON o.com_id = c.com_id        WHERE            c.name = &#39;RED&#39;)</code></pre><p>610</p><pre><code>SELECT     x,    y,    z,    CASE        WHEN x + y &gt; z AND x + z &gt; y AND y + z &gt; x THEN &#39;Yes&#39;        ELSE &#39;No&#39;    END AS &#39;triangle&#39;FROM    triangle</code></pre><p>613.</p><pre><code>SELECT    MIN(ABS(p1.x - p2.x)) AS shortestFROM point p1JOIN point p2 ON p1.x != p2.x</code></pre><p>619</p><pre><code>SELECT IFNULL(    (SELECT num     FROM my_numbers     GROUP BY 1     HAVING COUNT(*) = 1     ORDER BY num DESC     LIMIT 1),NULL) AS num</code></pre><p>620</p><pre><code>select *from cinemawhere mod(id, 2) = 1 and description != &#39;boring&#39;order by rating DESC</code></pre><p>627</p><pre><code>UPDATE salarySET sex =         CASE sex        WHEN &#39;m&#39; THEN &#39;f&#39;        ELSE &#39;m&#39;        END</code></pre><p>1050</p><pre><code>select actor_id, director_id from actordirector group by actor_id, director_id having count(*) &gt;= 3</code></pre><p>*1086</p><pre><code>selectp.product_name,s.year,s.pricefrom sales sjoin product pon s.product_id = p.product_id;</code></pre><p>*1069</p><pre><code>select product_id, sum(quantity) total_quantity from sales group by product_id;</code></pre><p>*1075</p><pre><code>SELECT p.project_id, ROUND(avg(e.experience_years),2) AS average_years        FROM Project p        JOIN Employee e        ON p.employee_id = e.employee_id        GROUP BY p.project_id</code></pre><p>*1076</p><pre><code>select project_idfrom Project pgroup by project_idhaving count(*) = (select count(*) c from Project group by project_id order by c desc limit 1)</code></pre><p>1082</p><pre><code>SELECT seller_idFROM SalesGROUP BY seller_idHAVING SUM(price) = (SELECT SUM(price)                     FROM Sales                     GROUP BY seller_id                     ORDER BY 1 DESC                     LIMIT 1 )</code></pre><p>1083</p><pre><code>SELECT s.buyer_idFROM Sales sJOIN Product pON s.product_id = p.product_idGROUP BY s.buyer_idHAVING SUM(p.product_name = &#39;S8&#39;) &gt; 0 AND SUM(p.product_name = &#39;iphone&#39;) = 0</code></pre><p>1084</p><pre><code>SELECT product_id, product_nameFROM productWHERE product_id NOT IN(SELECT product_idFROM salesWHERE sale_date NOT BETWEEN &#39;2019-01-01&#39; AND &#39;2019-03-31&#39;);</code></pre><p>1113</p><pre><code>SELECT extra AS report_reason, COUNT(DISTINCT post_id) AS report_countFROM ActionsWHERE action = &#39;report&#39; AND action_date = &#39;2019-07-04&#39;GROUP BY extra</code></pre><p>1142</p><pre><code>SELECT IFNULL(ROUND(COUNT(DISTINCT session_id)/COUNT(DISTINCT user_id),2),0.00) AS average_sessions_per_userFROM Activity WHERE activity_date &gt;= &#39;2019-06-28&#39; and activity_date &lt;= &#39;2019-07-27&#39;;  </code></pre><p>*1148</p><pre><code>SELECT DISTINCT author_id AS idFROM ViewsWHERE author_id = viewer_idORDER BY id</code></pre><p>1173</p><pre><code>SELECT ROUND( (a.immediate / b.total) * 100.0, 2) AS immediate_percentage FROM(SELECT COUNT(*) AS immediate FROM delivery WHERE order_date = customer_pref_delivery_date) AS a,(SELECT COUNT(*) AS total FROM delivery) AS b</code></pre><pre><code>SELECT ROUND(100*AVG(order_date = customer_pref_delivery_date), 2) AS immediate_percentageFROM Delivery;</code></pre><p>1179</p><pre><code>select id,     sum(case when month = &#39;jan&#39; then revenue else null end) as Jan_Revenue,    sum(case when month = &#39;feb&#39; then revenue else null end) as Feb_Revenue,    sum(case when month = &#39;mar&#39; then revenue else null end) as Mar_Revenue,    sum(case when month = &#39;apr&#39; then revenue else null end) as Apr_Revenue,    sum(case when month = &#39;may&#39; then revenue else null end) as May_Revenue,    sum(case when month = &#39;jun&#39; then revenue else null end) as Jun_Revenue,    sum(case when month = &#39;jul&#39; then revenue else null end) as Jul_Revenue,    sum(case when month = &#39;aug&#39; then revenue else null end) as Aug_Revenue,    sum(case when month = &#39;sep&#39; then revenue else null end) as Sep_Revenue,    sum(case when month = &#39;oct&#39; then revenue else null end) as Oct_Revenue,    sum(case when month = &#39;nov&#39; then revenue else null end) as Nov_Revenue,    sum(case when month = &#39;dec&#39; then revenue else null end) as Dec_Revenuefrom departmentgroup by idorder by id</code></pre><p>1211</p><pre><code>SELECT     query_name,    ROUND(AVG(rating / position), 2) AS quality,    ROUND(AVG(rating &lt; 3) * 100, 2) AS poor_query_percentage FROM     QueriesGROUP BY     query_name</code></pre><p>1241</p><pre><code>SELECT s.sub_id AS post_id,(SELECT COUNT(DISTINCT(s1.sub_id)) FROM Submissions s1 WHERE s1.parent_id = s.sub_id) AS number_of_commentsFROM Submissions sWHERE s.parent_id IS nullGROUP BY s.sub_id</code></pre><p>1251</p><pre><code>SELECT a.product_id,ROUND(SUM(b.units*a.price)/SUM(b.units),2) as average_priceFROM Prices as aJOIN UnitsSold as bON a.product_id=b.product_id AND (b.purchase_date BETWEEN a.start_date AND a.end_date)GROUP BY product_id;</code></pre><p>*1350</p><pre><code>SELECT s.id, s.nameFROM Students sWHERE s.department_id NOT in (SELECT d.id FROM Departments d)</code></pre><p>1280</p><pre><code>SELECT a.student_id,a.student_name,b.subject_name,COUNT(c.subject_name) as attended_examsFROM Students as aJOIN Subjects as bLEFT JOIN Examinations as cON a.student_id=c.student_id AND b.subject_name=c.subject_nameGROUP BY a.student_id,b.subject_name;</code></pre><p>1294</p><pre><code>SELECT a.country_name,CASE WHEN AVG(weather_state)&lt;=15 THEN &quot;Cold&quot;WHEN AVG(weather_State)&gt;=25 THEN &quot;Hot&quot;ELSE &quot;Warm&quot;ENDAS weather_type FROM Countries AS aJOIN Weather AS bON a.country_id = b.country_idWHERE MONTH(b.day) = 11GROUP BY b.country_id</code></pre><p>1303</p><pre><code>SELECT employee_id,COUNT(employee_id) OVER (PARTITION BY team_id) team_sizeFROM EMPLOYEE</code></pre><pre><code>SELECT employee_id, team_sizeFROM Employee AS eLEFT JOIN (      SELECT team_id, COUNT(DISTINCT employee_id) AS team_size      FROM Employee      GROUP BY team_id) AS teamsON e.team_id = teams.team_id</code></pre><p>1322</p><pre><code>SELECT ad_id, IFNULL(ROUND(SUM(CASE WHEN ACTION = &#39;Clicked&#39; THEN 1 ELSE 0 END) / SUM(CASE WHEN ACTION = &#39;Clicked&#39; OR ACTION = &#39;Viewed&#39; THEN 1 ELSE 0 END) * 100, 2), 0) AS ctrFROM AdsGROUP BY ad_idORDER BY ctr DESC, ad_id</code></pre><p>1327</p><pre><code>SELECT p.product_name,SUM(o.unit) AS unitFROM Products pJOIN Orders oON p.product_id = o.product_idWHERE LEFT(order_date, 7) = &#39;2020-02&#39;GROUP BY p.product_idHAVING sum(o.unit) &gt;= 100ORDER BY unit DESC</code></pre><p>1270</p><pre><code>SELECT a.employee_id as EMPLOYEE_ID FROM Employees as a # those whose boss is 1WHERE a.employee_id!=1 AND a.manager_id=1UNIONSELECT b.employee_id FROM Employees as b #those whose boss&#39; boss is 1WHERE b.manager_id IN(    SELECT a.employee_id FROM Employees as a    WHERE a.employee_id!=1 AND a.manager_id=1    )UNIONSELECT c.employee_id FROM Employees as c #those whose boss&#39; boss&#39; boss is 1WHERE c.manager_id IN(    SELECT b.employee_id FROM Employees as b    WHERE b.manager_id IN    (        SELECT a.employee_id FROM Employees as a        WHERE a.employee_id!=1 AND a.manager_id=1        ))ORDER BY EMPLOYEE_ID;</code></pre><pre><code>select employee_id from employeeswhere manager_id in(select employee_id from employees where manager_id in(select employee_id from employees where manager_id = 1))and employee_id !=1;</code></pre><p>1308</p><pre><code>SELECT gender, day,        SUM(score_points) OVER(PARTITION BY gender ORDER BY day) AS totalFROM Scores</code></pre><pre><code>SELECT s1.gender, s1.day, SUM(s2.score_points) AS totalFROM Scores AS s1,     Scores AS s2WHERE s1.gender = s2.gender AND s2.day &lt;= s1.dayGROUP BY s1.gender, s1.dayORDER BY s1.gender, s1.day</code></pre><p>1285 <strong><em>**</em></strong></p><pre><code>SELECT min(log_id) as start_id, max(log_id) as end_idFROM(SELECT log_id, ROW_NUMBER() OVER(ORDER BY log_id) as numFROM Logs) aGROUP BY log_id - num</code></pre><p>NOTES:1 12 23 3 7 48 510 6the difference of (log_id - num) will change whenever a log_id is skipped. The rows with same difference (log_id - num), should be a continuous series. Then we just need to find the min, and max for that series as start/ end id. It’s easier to understand if you draft it out with column log_in &amp; row_number.</p><p>1077</p><pre><code>SELECT p.project_id, e.employee_idfrom project as pjoin employee as e on e.employee_id = p.employee_idwhere (p.project_id, e.experience_years) in(SELECT p.project_id, max(e.experience_years)from project as pjoin employee as e on e.employee_id = p.employee_idgroup by project_id)</code></pre><p>1126</p><pre><code>select business_idfrom events as ajoin    (    select event_type, avg(occurences) as av    from events    group by event_type    ) as bon a.event_type = b.event_typewhere a.occurences &gt; b.avgroup by business_idhaving count(*)&gt;1;</code></pre><p>1204</p><pre><code>SELECT q1.person_nameFROM Queue q1 JOIN Queue q2 ON q1.turn &gt;= q2.turnGROUP BY q1.turnHAVING SUM(q2.weight) &lt;= 1000ORDER BY SUM(q2.weight) DESCLIMIT 1</code></pre><p>1321.Same problem as 1204</p><pre><code>SELECT a.visited_on AS visited_on, SUM(b.day_sum) AS amount,       ROUND(AVG(b.day_sum), 2) AS average_amountFROM  (SELECT visited_on, SUM(amount) AS day_sum FROM Customer GROUP BY visited_on ) a,  (SELECT visited_on, SUM(amount) AS day_sum FROM Customer GROUP BY visited_on ) bWHERE DATEDIFF(a.visited_on, b.visited_on) BETWEEN 0 AND 6GROUP BY a.visited_onHAVING COUNT(b.visited_on) = 7</code></pre><p>1045</p><pre><code>SELECT customer_idFROM customer cGROUP BY customer_idHAVING COUNT(DISTINCT product_key)=(SELECT COUNT(DISTINCT product_key) FROM product)</code></pre><p>1193</p><pre><code>SELECT LEFT(trans_date, 7) AS month, country,    COUNT(1) AS trans_count,    SUM(CASE WHEN state = &#39;approved&#39; then 1 else 0 end) as approved_count,    sum(amount) as trans_total_amount,     sum(case when state = &#39;approved&#39; then amount else 0 end) as approved_total_amountfrom Transactionsgroup by country, left(trans_date, 7)</code></pre><p>608</p><pre><code># Write your MySQL query statement belowSELECT    id, &#39;Root&#39; AS TypeFROM    treeWHERE    p_id IS NULLUNIONSELECT    id, &#39;Leaf&#39; AS TypeFROM    treeWHERE    id NOT IN (SELECT DISTINCT            p_id        FROM            tree        WHERE            p_id IS NOT NULL)    AND p_id IS NOT NULLUNIONSELECT    id, &#39;Inner&#39; AS TypeFROM    treeWHERE    id IN (SELECT DISTINCT            p_id        FROM            tree        WHERE            p_id IS NOT NULL)        AND p_id IS NOT NULLORDER BY id;</code></pre><p>1164</p><pre><code>select distinct product_id, 10 as pricefrom Productsgroup by product_idhaving (min(change_date) &gt; &quot;2019-08-16&quot;)unionselect p2.product_id, new_pricefrom Products p2where (p2.product_id, p2.change_date) in(select product_id, max(change_date) as recent_datefrom Productswhere change_date &lt;= &quot;2019-08-16&quot;group by product_id)</code></pre><p>626</p><pre><code>#For students with odd id, the new id is (id+1) after switch unless it is the last seat. And for students #with even id, the new id is (id-1). In order to know how many seats in total, we can use a subquery:SELECT    (CASE        WHEN MOD(id, 2) != 0 AND counts != id THEN id + 1        WHEN MOD(id, 2) != 0 AND counts = id THEN id        ELSE id - 1    END) AS id,    studentFROM    seat,    (SELECT        COUNT(*) AS counts    FROM        seat) AS seat_countsORDER BY id ASC;</code></pre><p>1158</p><pre><code>SELECT user_id AS buyer_id, join_date, COALESCE(COUNT(o.order_id),0) AS orders_in_2019FROM Users uLEFT JOIN Orders o ON u.user_id = o.buyer_id AND YEAR(order_date)=&#39;2019&#39;GROUP BY user_idORDER BY user_id</code></pre><p>612</p><pre><code># Write your MySQL query statement belowSELECT    ROUND(SQRT(MIN((POW(p1.x - p2.x, 2) + POW(p1.y - p2.y, 2)))), 2) AS shortestFROM    point_2d p1        JOIN    point_2d p2 ON p1.x != p2.x OR p1.y != p2.y</code></pre><p>1174</p><pre><code># Write your MySQL query statement belowSELECT    ROUND(100*SUM(CASE WHEN order_date = customer_pref_delivery_date THEN 1    ELSE 0 END)/ COUNT(distinct customer_id) ,2) AS immediate_percentageFROM    DeliveryWHERE    (customer_id, order_date)IN(SELECT    customer_id, min(order_date) as min_dateFROM    DeliveryGROUP BY    customer_id)</code></pre><p>112</p><p>1112</p><pre><code>SELECT student_id, MIN(course_id) AS course_id, gradeFROM EnrollmentsWHERE (student_id, grade) IN(SELECT student_id, MAX(grade)FROM EnrollmentsGROUP BY student_id)GROUP BY student_idORDER BY student_id</code></pre><p>1264</p><pre><code>SELECT DISTINCT page_id AS recommended_pageFROM LikesWHERE user_id IN (    SELECT user2_id AS friend_id FROM Friendship WHERE user1_id = 1    UNION    SELECT user1_id AS friend_id FROM Friendship WHERE user2_id = 1)     AND    page_id NOT IN (      SELECT page_id FROM Likes WHERE user_id = 1    )</code></pre><p>1070</p><pre><code>SELECT product_id, year AS first_year, quantity, priceFROM SalesWHERE (product_id, year) IN (SELECT product_id, MIN(year) as yearFROM SalesGROUP BY product_id) ;</code></pre><p>*1149</p><pre><code>SELECT DISTINCT viewer_id AS idFROM ViewsGROUP BY viewer_id, view_dateHAVING COUNT(DISTINCT article_id) &gt; 1</code></pre><p>1107</p><pre><code>select login_date, count(user_id) as user_countfrom(select user_id, min(activity_date) as login_datefrom Trafficwhere activity = &#39;login&#39;group by user_id) twhere datediff(&#39;2019-06-30&#39;, login_date) &lt;= 90group by login_date</code></pre><p>1205</p><pre><code>SELECT month, country, SUM(CASE WHEN state = &quot;approved&quot; THEN 1 ELSE 0 END) AS approved_count, SUM(CASE WHEN state = &quot;approved&quot; THEN amount ELSE 0 END) AS approved_amount, SUM(CASE WHEN state = &quot;back&quot; THEN 1 ELSE 0 END) AS chargeback_count, SUM(CASE WHEN state = &quot;back&quot; THEN amount ELSE 0 END) AS chargeback_amountFROM(    SELECT LEFT(chargebacks.trans_date, 7) AS month, country, &quot;back&quot; AS state, amount    FROM chargebacks    JOIN transactions ON chargebacks.trans_id = transactions.id    UNION ALL    SELECT LEFT(trans_date, 7) AS month, country, state, amount    FROM transactions    WHERE state = &quot;approved&quot;) sGROUP BY month, country</code></pre><p>1098</p><pre><code>select b.book_id, b.namefrom books b left join orders oon b.book_id = o.book_id and dispatch_date between &#39;2018-06-23&#39; and &#39;2019-06-23&#39;where datediff(&#39;2019-06-23&#39;, available_from) &gt; 30group by b.book_id, b.namehaving ifnull(sum(quantity),0) &lt;10;</code></pre><p>1132</p><pre><code>SELECT ROUND(AVG(cnt), 2) AS average_daily_percent FROM(    SELECT (COUNT(DISTINCT r.post_id)/ COUNT(DISTINCT a.post_id))*100  AS cntFROM Actions aLEFT JOIN Removals rON a.post_id = r.post_idWHERE extra=&#39;spam&#39; and action = &#39;report&#39;GROUP BY action_date)tmp</code></pre><p>614</p><pre><code>SELECT f1.follower as follower, COUNT(DISTINCT f2.follower) as numFROM follow f1 join follow f2on f1.follower=f2.followeeGROUP BY f2.followee</code></pre><p>1225<em>**</em></p><pre><code></code></pre><p>615</p><pre><code>select department_salary.pay_month, department_id,case  when department_avg&gt;company_avg then &#39;higher&#39;  when department_avg&lt;company_avg then &#39;lower&#39;  else &#39;same&#39;end as comparisonfrom(  select department_id, avg(amount) as department_avg, date_format(pay_date, &#39;%Y-%m&#39;) as pay_month  from salary join employee on salary.employee_id = employee.employee_id  group by department_id, pay_month) as department_salaryjoin(  select avg(amount) as company_avg,  date_format(pay_date, &#39;%Y-%m&#39;) as pay_month from salary group by date_format(pay_date, &#39;%Y-%m&#39;)) as company_salaryon department_salary.pay_month = company_salary.pay_month</code></pre><p>618<em>*</em></p><pre><code>SELECT     America, Asia, EuropeFROM    (SELECT @as:=0, @am:=0, @eu:=0) t,    (SELECT         @as:=@as + 1 AS asid, name AS Asia    FROM        student    WHERE        continent = &#39;Asia&#39;    ORDER BY Asia) AS t1        RIGHT JOIN    (SELECT         @am:=@am + 1 AS amid, name AS America    FROM        student    WHERE        continent = &#39;America&#39;    ORDER BY America) AS t2 ON asid = amid        LEFT JOIN    (SELECT         @eu:=@eu + 1 AS euid, name AS Europe    FROM        student    WHERE        continent = &#39;Europe&#39;    ORDER BY Europe) AS t3 ON amid = euid</code></pre><p>1097</p><pre><code>select distinct install_dt,count(install_dt) as installs,round(ifnull(count(day1),0)/count(install_dt),2) as Day1_retentionfrom    (select a1.player_id,a1.install_dt, a2.event_date as day1     from         (select player_id,min(event_date) as install_dt         from activity         group by player_id) as a1    left join activity a2    on a1.player_id=a2.player_id and a1.install_dt=a2.event_date-1) as a3group by install_dt</code></pre><p>1159</p><pre><code>SELECT user_id as seller_id, if(i.item_brand = u.favorite_brand, &quot;yes&quot;, &quot;no&quot;) as 2nd_item_fav_brandfrom Users u left join     (SELECT o1.seller_id, o1.item_id, o1.order_date    FROM Orders o1 JOIN Orders o2    ON o1.seller_id = o2.seller_id AND o1.order_date &gt; o2.order_date    GROUP BY o1.seller_id, o1.order_date    HAVING count(o1.order_id) = 1) tON u.user_id = t.seller_idLEFT JOIN Items iON t.item_id = i.item_idORDER BY u.user_id;</code></pre><p>1194</p><pre><code>select group_id as GROUP_ID, min(player_id) as PLAYER_IDfrom Players,    (select player, sum(score) as score from        (select first_player as player, first_score as score from Matches        union all        select second_player, second_score from Matches) s    group by player) PlayerScoreswhere Players.player_id = PlayerScores.player and (group_id, score) in    (select group_id, max(score)    from Players,        (select player, sum(score) as score from            (select first_player as player, first_score as score from Matches            union all            select second_player, second_score from Matches) s        group by player) PlayerScores    where Players.player_id = PlayerScores.player    group by group_id)group by group_id</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;*175. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT Person.FirstName, Person.LastName, Address.City, Address.State
FROM Person
LEFT JOIN Address
ON Person.Perso
      
    
    </summary>
    
      <category term="SQL" scheme="http://naixinzhang.github.io/categories/SQL/"/>
    
    
      <category term="SQL Learning notes" scheme="http://naixinzhang.github.io/tags/SQL-Learning-notes/"/>
    
  </entry>
  
  <entry>
    <title>Investment opportunities Identify</title>
    <link href="http://naixinzhang.github.io/2020/01/23/tableau/sec2/"/>
    <id>http://naixinzhang.github.io/2020/01/23/tableau/sec2/</id>
    <published>2020-01-23T18:32:09.000Z</published>
    <updated>2020-09-21T04:30:32.740Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>You have been approached by a Venture Capital Fund. The board of Directors are currently review 1000 interesting startups and deciding on which ones they are going to invest in.The criterion for selection investments for this fund is a combination of</p><ul><li>High Revenue(2015)</li><li>Low Expenses(2015)</li><li>Top Growth(2015)</li></ul><p>You task is to assist the Board in identifying which business represent the best investment opportunities.</p><h2 id="The-Data"><a href="#The-Data" class="headerlink" title="The Data"></a>The Data</h2><p>This is part of the data:</p><p>Table1 - Overview</p><table><thead><tr><th>ID</th><th>Name</th><th>Industry</th><th>Description</th><th>Year Founded</th><th>Employees</th><th>State</th><th>City</th><th>Metro Area</th></tr></thead><tbody><tr><td>1</td><td>Over-Hex</td><td>Software</td><td>Provides a Web-based CRM tool that allows hospice and home  care companies to target new sales opportunities, cut down on administrative  tasks, monitor marketing compliance and protect referral source information.</td><td>2006</td><td>25</td><td>TN</td><td>Franklin</td><td>Nashville</td></tr><tr><td>2</td><td>Unimattax</td><td>IT Services</td><td>Helps law firms use Thomson Reuters Elite practice management  software more effectively, providing implementation, training, customization  and upgrades.</td><td>2009</td><td>36</td><td>PA</td><td>Newtown Square</td><td>Philadelphia</td></tr><tr><td>3</td><td>Lexila</td><td>Real Estate</td><td>Offers investment, construction, residential, commercial, and  brokerage services.</td><td>2013</td><td>38</td><td>IL</td><td>Tinley Park</td><td>Chicago</td></tr><tr><td>4</td><td>Greenfax</td><td>Retail</td><td>A Verizon Wireless premium retailer that offers products and  services throughout its 36 retail locations.</td><td>2012</td><td>320</td><td>SC</td><td>Greenville</td><td>Newberry, SC</td></tr><tr><td>5</td><td>Saoace</td><td>Energy</td><td>An energy efficiency consulting firm that works with business  owners to educate them on cutting costs, increasing productivity and  profitability, and reducing negative effects energy consumption has on air  quality and water supply.</td><td>2009</td><td>24</td><td>WI</td><td>New Holstein</td><td>Appleton, WI</td></tr><tr><td>6</td><td>Donplus</td><td>Advertising &amp; Marketing</td><td>Offers public relations consulting services to food and  beverage, baby and children’s products, and franchise and lifestyle clients  to create ROI driven campaigns, land strategic media placement opportunities,  and deliver results for its clients.</td><td>2009</td><td>26</td><td>CA</td><td>Los Angeles</td><td>Los Angeles</td></tr></tbody></table><p>Table2 Financials</p><table><thead><tr><th>ID</th><th>Name</th><th>2015 Revenue</th><th>2015 Expenses</th><th>2015 Profit</th><th>2015 Growth %</th><th>2014 Revenue</th><th>2014 Expenses</th><th>2014 Profit</th><th>2014 Growth %</th><th>2013 Revenue</th><th>2013 Expenses</th><th align="right">2013 Profit</th></tr></thead><tbody><tr><td>1</td><td>Over-Hex</td><td>$10,684,527</td><td>$1,130,700</td><td>$9,553,827</td><td>334%</td><td>$2,463,739</td><td>$194,748</td><td>$2,268,991</td><td>410%</td><td>$483,086</td><td>$43,394</td><td align="right">$439,692</td></tr><tr><td>2</td><td>Unimattax</td><td>$9,016,543</td><td>$804,035</td><td>$8,212,507</td><td>65%</td><td>$5,448,571</td><td>$239,227</td><td>$5,209,344</td><td>41%</td><td>$3,864,235</td><td>$91,714</td><td align="right">$3,772,520</td></tr><tr><td>3</td><td>Lexila</td><td>$12,456,642</td><td>$2,149,297</td><td>$10,307,345</td><td>520%</td><td>$2,007,778</td><td>$335,127</td><td>$1,672,651</td><td>423%</td><td>$383,896</td><td>$112,257</td><td align="right">$271,639</td></tr><tr><td>4</td><td>Greenfax</td><td>$7,746,272</td><td>$1,044,375</td><td>$6,701,897</td><td>317%</td><td>$1,857,830</td><td>$247,049</td><td>$1,610,781</td><td>56%</td><td>$1,190,917</td><td>$625,443</td><td align="right">$565,474</td></tr><tr><td>5</td><td>Saoace</td><td>$10,725,585</td><td>$2,694,644</td><td>$8,030,941</td><td>312%</td><td>$2,604,017</td><td>$615,041</td><td>$1,988,976</td><td>239%</td><td>$768,147</td><td>$222,963</td><td align="right">$545,184</td></tr><tr><td>6</td><td>Donplus</td><td>$7,798,447</td><td>$3,206,652</td><td>$4,591,796</td><td>560%</td><td>$1,180,753</td><td>$497,981</td><td>$682,772</td><td>367%</td><td>$252,838</td><td>$105,372</td><td align="right">$147,466</td></tr><tr><td>7</td><td>Blacklane</td><td>$10,359,369</td><td>$4,631,808</td><td>$5,727,561</td><td>564%</td><td>$1,559,705</td><td>$771,343</td><td>$788,362</td><td>622%</td><td>$216,026</td><td>$98,255</td><td align="right">$117,770</td></tr><tr><td>8</td><td>Toughtam</td><td>$8,501,568</td><td>$371,849</td><td>$8,129,720</td><td>267%</td><td>$2,319,207</td><td>$117,793</td><td>$2,201,414</td><td>30%</td><td>$1,784,005</td><td>$258,266</td><td align="right">$1,525,739</td></tr><tr><td>9</td><td>Zimlane</td><td>$6,329,644</td><td>$1,716,657</td><td>$4,612,987</td><td>323%</td><td>$1,496,864</td><td>$503,288</td><td>$993,576</td><td>199%</td><td>$500,623</td><td>$111,856</td><td align="right">$388,768</td></tr><tr><td>10</td><td>Quotelane</td><td>$9,227,504</td><td>$3,282,018</td><td>$5,945,486</td><td>400%</td><td>$1,844,478</td><td>$647,674</td><td>$1,196,804</td><td>493%</td><td>$311,042</td><td>$122,126</td><td align="right">$188,916</td></tr><tr><td>11</td><td>Ganzzap</td><td>$6,836,807</td><td>$6,515,505</td><td>$321,302</td><td>313%</td><td>$1,656,470</td><td>$2,400,796</td><td>-$744,326</td><td>118%</td><td>$759,849</td><td>$15,012,814</td><td align="right">-$14,252,965</td></tr><tr><td>12</td><td>Yearflex</td><td>$9,567,910</td><td>$4,374,841</td><td>$5,193,069</td><td>451%</td><td>$1,735,446</td><td>$646,445</td><td>$1,089,001</td><td>283%</td><td>$453,119</td><td>$130,333</td><td align="right">$322,786</td></tr><tr><td>13</td><td>Indigoplanet</td><td>$7,805,452</td><td>$4,626,275</td><td>$3,179,177</td><td>488%</td><td>$1,328,154</td><td>$785,729</td><td>$542,425</td><td>352%</td><td>$293,839</td><td>$136,206</td><td align="right">$157,633</td></tr><tr><td>14</td><td>Indigoholding</td><td>$9,812,558</td><td>$4,684,563</td><td>$5,127,995</td><td>439%</td><td>$1,820,544</td><td>$1,192,543</td><td>$628,001</td><td>359%</td><td>$396,633</td><td>$273,652</td><td align="right">$122,980</td></tr><tr><td>15</td><td>Lexinamex</td><td>$13,058,157</td><td>$4,403,888</td><td>$8,654,269</td><td>372%</td><td>$2,765,577</td><td>$718,235</td><td>$2,047,342</td><td>368%</td><td>$590,935</td><td>$145,540</td><td align="right">$445,395</td></tr></tbody></table><h1 id="Assumptions"><a href="#Assumptions" class="headerlink" title="Assumptions"></a>Assumptions</h1><p>Top growth mean overall, regardless of the industry</p><h1 id="Visualization-Dashboard"><a href="#Visualization-Dashboard" class="headerlink" title="Visualization Dashboard"></a>Visualization Dashboard</h1><p>Demo:<img src="sec2_demo.gif" alt="png"></p><p>check the full-version:<a href="https://prod-useast-a.online.tableau.com/#/site/naixinsdashboard/views/InvestmentopportunitiesIdentify/ThestartupQuadrant?:iid=8" target="_blank" rel="noopener">https://prod-useast-a.online.tableau.com/#/site/naixinsdashboard/views/InvestmentopportunitiesIdentify/ThestartupQuadrant?:iid=8</a></p><h1 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h1><p>In this section:</p><p>we learned:</p><ul><li><p>how to create groups</p></li><li><p>Groups vs Sets</p></li><li><p>Static Sets</p></li><li><p>Dynamic Sets</p></li><li><p>Combining Sets</p></li><li><p>Controlling Sets with Parameters</p></li><li><p>Creating Sets via Formulas</p></li></ul><p>Additional we learned：</p><ul><li><p>how to create Folders</p></li><li><p>how to set default properties for Fields</p></li><li><p>how to use two dimensions  in color</p></li><li><p>how to add reference lines</p></li><li><p>how to create useful tooltips</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;You have been approached by a 
      
    
    </summary>
    
      <category term="Tableau" scheme="http://naixinzhang.github.io/categories/Tableau/"/>
    
    
      <category term="Tableau" scheme="http://naixinzhang.github.io/tags/Tableau/"/>
    
  </entry>
  
  <entry>
    <title>Coal Terminal Maintenance Analysis</title>
    <link href="http://naixinzhang.github.io/2020/01/23/tableau/sec3/"/>
    <id>http://naixinzhang.github.io/2020/01/23/tableau/sec3/</id>
    <published>2020-01-23T18:32:09.000Z</published>
    <updated>2020-09-21T04:30:32.717Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>You have been hired by a Coal Terminal to assess which of their Coal Reclaimer machines require maintenance in the upcoming month.</p><p>The machines run literally round the clock 24/7 for 365 days a year. Every minute of downtime equates to millions of dollars lost revenue, that is why it is crucial to identify exactly when these machines require maintenance (neither less or more frequently is acceptable).</p><p>Currently the Coal Terminal follows the following criterion: a reclaimer-type machine requires maintenance when within the previous month there was at least one 8-hour period when the average idle capacity was over 10%.</p><p>Idle Capacity is a utilization metric which, for the purposes of this project, is defined as:</p><p>Idle capacity = (Actual Tonnage - Nominal Capacity) / Nominal Capacity</p><p>Your task is to find out which of the 5 machines have exceeded this level and create a report for the executive stakeholders with your recommendations.</p><h2 id="The-Data"><a href="#The-Data" class="headerlink" title="The Data"></a>The Data</h2><p>RL1:</p><table><thead><tr><th>Datetime</th><th>Nominal Capacity</th><th>Actual Tonnes</th></tr></thead><tbody><tr><td>01 Sep 2015 00:00</td><td>4200</td><td>4200</td></tr><tr><td>01 Sep 2015 01:00</td><td>4200</td><td>3941</td></tr><tr><td>01 Sep 2015 02:00</td><td>4200</td><td>3950</td></tr><tr><td>01 Sep 2015 03:00</td><td>4200</td><td>4200</td></tr><tr><td>01 Sep 2015 04:00</td><td>4200</td><td>4041</td></tr><tr><td>01 Sep 2015 05:00</td><td>4200</td><td>4200</td></tr></tbody></table><p>RL2:</p><table><thead><tr><th>Datetime</th><th>Nominal Capacity</th><th>Actual Tonnes</th></tr></thead><tbody><tr><td>01 Sep 2015 00:00</td><td>3350</td><td>3350</td></tr><tr><td>01 Sep 2015 01:00</td><td>3350</td><td>3350</td></tr><tr><td>01 Sep 2015 02:00</td><td>3350</td><td>3350</td></tr><tr><td>01 Sep 2015 03:00</td><td>3350</td><td>3350</td></tr><tr><td>01 Sep 2015 04:00</td><td>3350</td><td>3350</td></tr><tr><td>01 Sep 2015 05:00</td><td>3350</td><td>3350</td></tr><tr><td>01 Sep 2015 06:00</td><td>3350</td><td>3228</td></tr><tr><td>01 Sep 2015 07:00</td><td>3350</td><td>3337</td></tr></tbody></table><p>SR1:</p><table><thead><tr><th>Datetime</th><th>Nominal Capacity</th><th>Actual Tonnes</th></tr></thead><tbody><tr><td>01 Sep 2015 00:00</td><td>4500</td><td>4339</td></tr><tr><td>01 Sep 2015 01:00</td><td>4500</td><td>4179</td></tr><tr><td>01 Sep 2015 02:00</td><td>4500</td><td>4262</td></tr><tr><td>01 Sep 2015 03:00</td><td>4500</td><td>3779</td></tr><tr><td>01 Sep 2015 04:00</td><td>4500</td><td>3871</td></tr><tr><td>01 Sep 2015 05:00</td><td>4500</td><td>4500</td></tr><tr><td>01 Sep 2015 06:00</td><td>4500</td><td>4423</td></tr><tr><td>01 Sep 2015 07:00</td><td>4500</td><td>3960</td></tr><tr><td>01 Sep 2015 08:00</td><td>4500</td><td>4500</td></tr><tr><td>01 Sep 2015 09:00</td><td>4500</td><td>4500</td></tr></tbody></table><p>SR4A:</p><table><thead><tr><th>Datetime</th><th>Nominal Capacity</th><th>Actual Tonnes</th></tr></thead><tbody><tr><td>06 Sep 2015 00:00</td><td>4500</td><td>3993</td></tr><tr><td>06 Sep 2015 01:00</td><td>4500</td><td>4500</td></tr><tr><td>06 Sep 2015 02:00</td><td>4500</td><td>4499</td></tr><tr><td>06 Sep 2015 03:00</td><td>4500</td><td>4370</td></tr><tr><td>06 Sep 2015 04:00</td><td>4500</td><td>4499</td></tr><tr><td>06 Sep 2015 05:00</td><td>4500</td><td>4500</td></tr><tr><td>06 Sep 2015 06:00</td><td>4500</td><td>4500</td></tr><tr><td>06 Sep 2015 07:00</td><td>4500</td><td>4497</td></tr><tr><td>06 Sep 2015 08:00</td><td>4500</td><td>4244</td></tr><tr><td>06 Sep 2015 09:00</td><td>4500</td><td>4497</td></tr><tr><td>06 Sep 2015 10:00</td><td>4500</td><td>3770</td></tr><tr><td>06 Sep 2015 11:00</td><td>4500</td><td>4438</td></tr></tbody></table><p>SR6:</p><table><thead><tr><th>Datetime</th><th>Nominal Capacity</th><th>Actual Tonnes</th></tr></thead><tbody><tr><td>01 Sep 2015 00:00</td><td>3450</td><td>3365</td></tr><tr><td>01 Sep 2015 01:00</td><td>3450</td><td>3124</td></tr><tr><td>01 Sep 2015 02:00</td><td>3450</td><td>2978</td></tr><tr><td>01 Sep 2015 03:00</td><td>3450</td><td>3450</td></tr><tr><td>01 Sep 2015 04:00</td><td>3450</td><td>2859</td></tr><tr><td>01 Sep 2015 05:00</td><td>3450</td><td>2939</td></tr><tr><td>01 Sep 2015 06:00</td><td>3450</td><td>3450</td></tr><tr><td>01 Sep 2015 07:00</td><td>3450</td><td>3450</td></tr><tr><td>01 Sep 2015 08:00</td><td>3450</td><td>3349</td></tr><tr><td>01 Sep 2015 09:00</td><td>3450</td><td>2991</td></tr></tbody></table><h1 id="Visualization"><a href="#Visualization" class="headerlink" title="Visualization"></a>Visualization</h1><p>Explain:</p><ul><li><p>why there are some gaps in SR1,SR4A,SR6? there are 312 nulls? what do they mean?</p><p>Basically, RL1 and RL2 have no gaps, because they are declaimers. What they always do is they collect coal and then they send it off to the ships.</p><p>SR stands for stacker reclaimer, sometimes stackers are as told to stack coal, sometimes stackers are called to reclaim call. This machine starts from the start of the month,all the way up until somewhere around 13th of September 13, it was reclaiming coal, then it was told to go and stack coal. it was put on a different job that is why we don’t have any data during this period, because we only analyzing the utilization of reclaimers.</p></li></ul><p>Demo:</p><p><img src="sec3_demo.gif" alt="png"></p><p>Check the full-version:</p><p> <a href="https://prod-useast-a.online.tableau.com/#/site/naixinsdashboard/views/CoalTerminalMaintenanceAnalysis/Report?:iid=9" target="_blank" rel="noopener">https://prod-useast-a.online.tableau.com/#/site/naixinsdashboard/views/CoalTerminalMaintenanceAnalysis/Report?:iid=9</a></p><h1 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h1><p>In this section:</p><p>we learned:</p><ul><li>create multiple joins</li><li>calculate fields and table calculations</li><li>creating advanced table calculations</li><li>add second layer moving average</li><li>trendlines for power insights</li><li>create a storyline</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;You have been hired by a Coal 
      
    
    </summary>
    
      <category term="Tableau" scheme="http://naixinzhang.github.io/categories/Tableau/"/>
    
    
      <category term="Tableau" scheme="http://naixinzhang.github.io/tags/Tableau/"/>
    
  </entry>
  
  <entry>
    <title>Clothing Retailing Expansion Analysis</title>
    <link href="http://naixinzhang.github.io/2020/01/23/tableau/sec4/"/>
    <id>http://naixinzhang.github.io/2020/01/23/tableau/sec4/</id>
    <published>2020-01-23T18:32:09.000Z</published>
    <updated>2020-09-21T04:30:32.812Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>You are a Data Scientist working for an Australian retail chain operating in the “Clothing Retailing” industry.</p><p>To date the company has only been running operations in New South Wales. However, the Board of Directors is considering an expansion into one of the following three states:</p><ul><li>Queensland</li><li>Victoria</li><li>Western Australia</li></ul><p>You have been asked to assess the business environments for the industry in question in each of these three states and present your findings to the Board of Directors in person.</p><p><img src="sec4.png" alt></p><h1 id="Visualization"><a href="#Visualization" class="headerlink" title="Visualization"></a>Visualization</h1><p>Demo:</p><p><img src="sec4_demo.gif" alt="png"></p><p>Check the full-version:</p><p><a href="https://prod-useast-a.online.tableau.com/#/site/naixinsdashboard/views/ExpansionAnalysisInsights/FinalPresentation?:iid=10" target="_blank" rel="noopener">https://prod-useast-a.online.tableau.com/#/site/naixinsdashboard/views/ExpansionAnalysisInsights/FinalPresentation?:iid=10</a></p><h1 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h1><p>-Box plot:</p><ul><li>maximum, Q3(upper quartile), Median, Q1, Min</li><li>Interquartile Range: make sure our analysis is not affected by outliers.</li><li>how to determine if an observations is too far away?  1.5 * IQR, if an observation falls further than that,shouldn’t include it in the box plot, it consider an outlier</li><li>use case: check the shape of distribution, compact or narrow, uncertainty</li></ul><ul><li><p>how to deal with big data</p><p>  use data source filters in the top right of the bottom.</p></li></ul><p>In this section:</p><p>we learned:</p><ul><li>First build charts,then build dashboard, then build presentation</li><li>advanced time series blending</li><li>do forecasting</li><li>how to present story line</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;You are a Data Scientist worki
      
    
    </summary>
    
      <category term="Tableau" scheme="http://naixinzhang.github.io/categories/Tableau/"/>
    
    
      <category term="Tableau" scheme="http://naixinzhang.github.io/tags/Tableau/"/>
    
  </entry>
  
  <entry>
    <title>populations developing across countries of the world</title>
    <link href="http://naixinzhang.github.io/2020/01/23/tableau/sec5/"/>
    <id>http://naixinzhang.github.io/2020/01/23/tableau/sec5/</id>
    <published>2020-01-23T18:32:09.000Z</published>
    <updated>2020-09-21T04:30:32.791Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>You are hired by the World Bank as a Tableau Developer.</p><p>You assignment is to deliver an animated dashboard showing how populations of countries across the world have been developing over the past 50 years.</p><p>Specifically, the stake holders of this assignment are interested to see overall trend in fertility, life expectancy and population. In addition to overall trends they would like to be able to drill into individual countries.</p><h1 id="Visualization"><a href="#Visualization" class="headerlink" title="Visualization"></a>Visualization</h1><p>Demo:</p><p><img src="sec5_demo.gif" alt="png"></p><p>Check the full-version:</p><p><a href="https://prod-useast-a.online.tableau.com/#/site/naixinsdashboard/views/WorldDemographicAnalysisDashboard/WorldDemographics?:iid=2" target="_blank" rel="noopener">https://prod-useast-a.online.tableau.com/#/site/naixinsdashboard/views/WorldDemographicAnalysisDashboard/WorldDemographics?:iid=2</a></p><h1 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h1><p>In this section:</p><p>we learned:</p><ul><li><p>create animations in Tableau</p></li><li><p>edit blending relationships</p></li><li><p>build visualization</p></li><li><p>adding animation</p></li><li><p>manually sorting blended data</p></li><li><p>leaving a trail in animations</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;You are hired by the World Ban
      
    
    </summary>
    
      <category term="Tableau" scheme="http://naixinzhang.github.io/categories/Tableau/"/>
    
    
      <category term="Tableau" scheme="http://naixinzhang.github.io/tags/Tableau/"/>
    
  </entry>
  
  <entry>
    <title>Regional profit analysis</title>
    <link href="http://naixinzhang.github.io/2020/01/23/tableau/sec6/"/>
    <id>http://naixinzhang.github.io/2020/01/23/tableau/sec6/</id>
    <published>2020-01-23T18:32:09.000Z</published>
    <updated>2020-09-21T04:30:32.760Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>You have been approached by a retail chain operating in the US.</p><p>They would like you to re-create the visualization, which is depicted on the following page:</p><p><img src="sec6.png" alt></p><h1 id="Visualization"><a href="#Visualization" class="headerlink" title="Visualization"></a>Visualization</h1><p>Demo:</p><p><img src="sec6_demo.gif" alt="png"></p><p>Check the full version:</p><p><a href="https://prod-useast-a.online.tableau.com/#/site/naixinsdashboard/views/Regionalprofitanalysis/Combinedvisualization?:iid=11" target="_blank" rel="noopener">https://prod-useast-a.online.tableau.com/#/site/naixinsdashboard/views/Regionalprofitanalysis/Combinedvisualization?:iid=11</a></p><h1 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h1><p>In this section:</p><p>we learned:</p><ul><li><p>Level of Detail Calculation</p></li><li><p>aggregation and granularity</p></li><li><p>LOD Type 1: INCLUDE</p></li><li><p>LOD Type 2: EXCLUDE</p></li><li><p>Multiple fields in an LOD calculation</p></li><li><p>LOD Type 2: Fixed</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;You have been approached by a 
      
    
    </summary>
    
      <category term="Tableau" scheme="http://naixinzhang.github.io/categories/Tableau/"/>
    
    
      <category term="Tableau" scheme="http://naixinzhang.github.io/tags/Tableau/"/>
    
  </entry>
  
  <entry>
    <title>KPI dashboard</title>
    <link href="http://naixinzhang.github.io/2020/01/02/excel/demo/"/>
    <id>http://naixinzhang.github.io/2020/01/02/excel/demo/</id>
    <published>2020-01-03T03:06:09.000Z</published>
    <updated>2020-09-21T04:30:34.612Z</updated>
    
    <content type="html"><![CDATA[<p>This is my kPI dashboard making by Excel. I learned it from Udemy <a href="https://www.udemy.com/course/excel-dashboards-reports/" target="_blank" rel="noopener">https://www.udemy.com/course/excel-dashboards-reports/</a></p><p><img src="db.gif" alt="png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is my kPI dashboard making by Excel. I learned it from Udemy &lt;a href=&quot;https://www.udemy.com/course/excel-dashboards-reports/&quot; target
      
    
    </summary>
    
      <category term="EXCEL" scheme="http://naixinzhang.github.io/categories/EXCEL/"/>
    
    
      <category term="DashBoard" scheme="http://naixinzhang.github.io/tags/DashBoard/"/>
    
  </entry>
  
  <entry>
    <title>AB Test summary</title>
    <link href="http://naixinzhang.github.io/2019/12/22/abtest/ab-test-summary/"/>
    <id>http://naixinzhang.github.io/2019/12/22/abtest/ab-test-summary/</id>
    <published>2019-12-23T03:06:09.000Z</published>
    <updated>2020-09-21T04:30:34.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Main-script-to-perform-an-A-B-experiment-using-simulated-data"><a href="#Main-script-to-perform-an-A-B-experiment-using-simulated-data" class="headerlink" title="Main script to perform an A/B experiment using simulated data"></a>Main script to perform an A/B experiment using simulated data</h1><p>Modules: N/A <br>Author: Cornelia Ilin <br>Email: <a href="mailto:cilin@wisc.edu" target="_blank" rel="noopener">cilin@wisc.edu</a> <br>Date created: Oct 13, 2019 <br></p><p>Citations (online sources):</p><ul><li>[1] info on Bernoulli and Binomial Random Variables, as well as Sampling Distribution of Sample Proportions <br><a href="https://www.khanacademy.org/math/ap-statistics/sampling-distribution-ap/sampling-distribution-proportion/v/sampling-distribution-of-sample-proportion-part-1" target="_blank" rel="noopener">https://www.khanacademy.org/math/ap-statistics/sampling-distribution-ap/sampling-distribution-proportion/v/sampling-distribution-of-sample-proportion-part-1</a></li><li>[2] info on hypothesis test for sample proportions <br><a href="https://www.khanacademy.org/math/ap-statistics/two-sample-inference/two-sample-z-test-proportions/v/hypothesis-test-for-difference-in-proportions-example" target="_blank" rel="noopener">https://www.khanacademy.org/math/ap-statistics/two-sample-inference/two-sample-z-test-proportions/v/hypothesis-test-for-difference-in-proportions-example</a></li><li>[3] Intro to power in significance tests <br><a href="https://www.khanacademy.org/math/ap-statistics/tests-significance-ap/error-probabilities-power/v/introduction-to-power-in-significance-tests" target="_blank" rel="noopener">https://www.khanacademy.org/math/ap-statistics/tests-significance-ap/error-probabilities-power/v/introduction-to-power-in-significance-tests</a></li><li>[4] The math behind A/B testing with example code <br><a href="https://towardsdatascience.com/the-math-behind-a-b-testing-with-example-code-part-1-of-2-7be752e1d06f" target="_blank" rel="noopener">https://towardsdatascience.com/the-math-behind-a-b-testing-with-example-code-part-1-of-2-7be752e1d06f</a></li><li>[5] Udacity/Google course on A/B testing <br><a href="https://classroom.udacity.com/courses/ud257/lessons/4028708543/concepts/39546791500923" target="_blank" rel="noopener">https://classroom.udacity.com/courses/ud257/lessons/4028708543/concepts/39546791500923</a></li></ul><p>Citations (persons): n/a</p><h3 id="Step-1-Define-functions"><a href="#Step-1-Define-functions" class="headerlink" title="Step 1: Define functions"></a>Step 1: Define functions</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">z_val</span><span class="token punctuation">(</span>sig_level<span class="token punctuation">,</span> power <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" A function that returns the z-value for given significance or power level    param sig_level: indicates the significance level, i.e. the probability to commit a type I error    return: z_onetail, z_twotail_minus, z_twotail_plus, z_power    """</span>    <span class="token comment" spellcheck="true"># draw normal distribution with mean = 0 and se = 1 (standardized random variable)</span>    z_dist <span class="token operator">=</span> scs<span class="token punctuation">.</span>norm<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># define alpha</span>    alpha <span class="token operator">=</span> sig_level    <span class="token comment" spellcheck="true"># find the value of z for which the cdf = 1 - alpha</span>    z_onetail <span class="token operator">=</span> z_dist<span class="token punctuation">.</span>ppf<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>alpha<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># find the value of z for which the cdf = alpha/2, and the cdf = 1-alpha/2</span>    z_twotail_left <span class="token operator">=</span> z_dist<span class="token punctuation">.</span>ppf<span class="token punctuation">(</span>alpha<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>    z_twotail_right <span class="token operator">=</span> z_dist<span class="token punctuation">.</span>ppf<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> alpha<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># find the value of z for which the cdf = power</span>    <span class="token keyword">if</span> power<span class="token punctuation">:</span>        power_val <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"Introduce the desired level of power: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        z_power <span class="token operator">=</span> round<span class="token punctuation">(</span>z_dist<span class="token punctuation">.</span>ppf<span class="token punctuation">(</span>power_val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        z_power <span class="token operator">=</span> <span class="token string">"n/a"</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>z_onetail<span class="token punctuation">,</span> z_twotail_left<span class="token punctuation">,</span> z_twotail_right<span class="token punctuation">,</span> z_power<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">z_distribution</span><span class="token punctuation">(</span>sig_level<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" A function that plots the distribution of the standardized random variable z    param sig_level: indicates the significance level, i.e. the probability to commit a type I error    return: none    """</span>    <span class="token comment" spellcheck="true"># draw normal distribution with mean = 0 and se = 1 (standardized random variable)</span>    z_dist <span class="token operator">=</span> scs<span class="token punctuation">.</span>norm<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># define values for x and y axes</span>    x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>z_dist<span class="token punctuation">.</span>ppf<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">,</span> z_dist<span class="token punctuation">.</span>ppf<span class="token punctuation">(</span><span class="token number">0.99</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> z_dist<span class="token punctuation">.</span>pdf<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># define alpha</span>    alpha <span class="token operator">=</span> sig_level    <span class="token comment" spellcheck="true"># define arrow propoerties (used for annotations in figure)</span>    arrow_properties <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'facecolor'</span><span class="token punctuation">:</span> <span class="token string">'black'</span><span class="token punctuation">,</span>        <span class="token string">'shrink'</span><span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span>        <span class="token string">'headlength'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token string">'width'</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">## plot 1, one-tailed test</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"Distribution of z_statistic with one-tail test"</span><span class="token punctuation">)</span>    lines <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#plt.title('The distribution of the z-statistic')</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"pdf"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># find confidence levels, find the value of z for which the cdf = 1 - alpha</span>    z_onetail <span class="token operator">=</span> z_val<span class="token punctuation">(</span>alpha<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># add fill</span>    plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"green"</span><span class="token punctuation">,</span> where <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> z_onetail<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># add annotation</span>    annotation <span class="token operator">=</span> plt<span class="token punctuation">.</span>annotate<span class="token punctuation">(</span><span class="token string">'\u03B1 = 0.05'</span><span class="token punctuation">,</span>                 xy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1.98</span><span class="token punctuation">,</span> <span class="token number">0.12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 xytext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1.98</span><span class="token punctuation">,</span> <span class="token number">0.20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 arrowprops <span class="token operator">=</span> arrow_properties<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">## plot 2, two-tailed test</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"Distribution of z_statistic with two-tail test"</span><span class="token punctuation">)</span>    lines <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"pdf"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"z value"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># find confidence levels, find the value of z for which the cdf = alpha/2, and the cdf = 1-alpha/2</span>    z_twotail_left <span class="token operator">=</span> z_val<span class="token punctuation">(</span>alpha<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    z_twotail_right <span class="token operator">=</span> z_val<span class="token punctuation">(</span>alpha<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># add fill</span>    plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"green"</span><span class="token punctuation">,</span> where <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> z_twotail_left<span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"green"</span><span class="token punctuation">,</span> where <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> z_twotail_right<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># add annotation</span>    annotation <span class="token operator">=</span> plt<span class="token punctuation">.</span>annotate<span class="token punctuation">(</span><span class="token string">'\u03B1 = 0.025'</span><span class="token punctuation">,</span>                 xy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">0.12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 xytext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">0.20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 arrowprops <span class="token operator">=</span> arrow_properties<span class="token punctuation">)</span>    annotation <span class="token operator">=</span> plt<span class="token punctuation">.</span>annotate<span class="token punctuation">(</span><span class="token string">'\u03B1 = 0.025'</span><span class="token punctuation">,</span>                 xy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">0.12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 xytext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">0.20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 arrowprops <span class="token operator">=</span> arrow_properties<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># adds more space between subplots</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"z value for one-tail test = "</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>z_onetail<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"z value for one-tail test = +-"</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>z_twotail_right<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">d_distribution</span><span class="token punctuation">(</span>alpha <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> beta <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> power <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> onetail <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" A function that plots the d_distribution    param alfa: colors the alpha region(s) when True, i.e. P(reject H0 | H0 is true)     param beta: computes and colors the beta region when True, i.e. P(accept H0 | H0 is false)    param power: computes and color the power region when True, i.e. P(reject H0 | H0 is false)    param onetail: sets test to one-tail when True    return: none    Note that under H0: d = 0, under Ha: d = d_hat     """</span>    <span class="token comment" spellcheck="true"># define values for the x axis</span>    <span class="token comment" spellcheck="true">#x = np.linspace(-0.08, 0.08, 100)</span>    x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">12</span> <span class="token operator">*</span> se_pool_hat<span class="token punctuation">,</span> <span class="token number">12</span> <span class="token operator">*</span> se_pool_hat<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># generate distribution under H0; d ~ N(0, SE_pool)</span>    d_dist_0 <span class="token operator">=</span> scs<span class="token punctuation">.</span>norm<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> se_pool_hat<span class="token punctuation">)</span><span class="token punctuation">.</span>pdf<span class="token punctuation">(</span>x<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># generate distribution under Ha: d ~ N(d_hat, SE_pool)</span>    d_dist_a <span class="token operator">=</span> scs<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>d_hat<span class="token punctuation">,</span> se_pool_hat<span class="token punctuation">)</span><span class="token punctuation">.</span>pdf<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># plot d_dist_0, d_dist_a</span>    plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    lines <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> d_dist_0<span class="token punctuation">,</span> label <span class="token operator">=</span> <span class="token string">"d_dist under H0"</span><span class="token punctuation">)</span>    lines <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> d_dist_a<span class="token punctuation">,</span> label <span class="token operator">=</span> <span class="token string">"d_dist under Ha"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># add title, axis labels, and legend</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Distribution of d under H0 and Ha"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'d value'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'pdf'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># draw confidence intervals under H0</span>    <span class="token comment" spellcheck="true"># remeber ci = d +- z*se_pool, under H0: d = 0</span>    <span class="token comment" spellcheck="true"># for alpha = 0.05, z_onetail = 1.65, z_twotail_left = -1.96, z_twotail_right = 1.96 (see output z_dist() function)</span>    <span class="token keyword">if</span> onetail<span class="token punctuation">:</span>        ci_right <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token number">1.65</span> <span class="token operator">*</span> se_pool_hat        plt<span class="token punctuation">.</span>axvline<span class="token punctuation">(</span>x <span class="token operator">=</span> ci_right<span class="token punctuation">,</span> linestyle <span class="token operator">=</span> <span class="token string">"--"</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"grey"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        ci_right <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token number">1.96</span> <span class="token operator">*</span> se_pool_hat        ci_left <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> <span class="token number">1.96</span> <span class="token operator">*</span> se_pool_hat        plt<span class="token punctuation">.</span>axvline<span class="token punctuation">(</span>x <span class="token operator">=</span> ci_left<span class="token punctuation">,</span> linestyle <span class="token operator">=</span> <span class="token string">"--"</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"grey"</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>axvline<span class="token punctuation">(</span>x <span class="token operator">=</span> ci_right<span class="token punctuation">,</span> linestyle <span class="token operator">=</span> <span class="token string">"--"</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"grey"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># compute alpha</span>    <span class="token comment" spellcheck="true"># alpha = the area under H0, to the left of ci_left and to the right of ci_right</span>    <span class="token keyword">if</span> alpha<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Green shaded area: H0 is false"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> onetail<span class="token punctuation">:</span>            plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> d_dist_0<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"olivedrab"</span><span class="token punctuation">,</span> where <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">></span> ci_right<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> d_dist_0<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"olivedrab"</span><span class="token punctuation">,</span> where <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> ci_left<span class="token punctuation">)</span><span class="token punctuation">)</span>            plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> d_dist_0<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"olivedrab"</span><span class="token punctuation">,</span> where <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">></span> ci_right<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># compute beta</span>    <span class="token comment" spellcheck="true"># beta = the area under Ha, to the left of ci_right</span>    <span class="token keyword">if</span> beta<span class="token punctuation">:</span>        beta_val <span class="token operator">=</span> scs<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>d_hat<span class="token punctuation">,</span> se_pool_hat<span class="token punctuation">)</span><span class="token punctuation">.</span>cdf<span class="token punctuation">(</span>ci_right<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#finds the P(d &lt; ci_right) under Ha</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Beta ="</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>beta_val<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Yelolw shaded area: Type II error area: P(accept H0|H0 is false)"</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> d_dist_a<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"goldenrod"</span><span class="token punctuation">,</span> where <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> ci_right<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># compute power</span>    <span class="token comment" spellcheck="true"># power = 1 - beta = the area under Ha, to the right of ci_right</span>    <span class="token keyword">if</span> power<span class="token punctuation">:</span>        power <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> scs<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>d_hat<span class="token punctuation">,</span> se_pool_hat<span class="token punctuation">)</span><span class="token punctuation">.</span>cdf<span class="token punctuation">(</span>ci_right<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#finds the P(d >= ci_right) = 1 - P (d &lt; ci_right) under Ha</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Power ="</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>power<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Blue shaded area: Power = 1- Beta, P(reject H0|H0 is false)"</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> d_dist_a<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"steelblue"</span><span class="token punctuation">,</span> where <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">></span> ci_right<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Step-2-Import-required-packages"><a href="#Step-2-Import-required-packages" class="headerlink" title="Step 2: Import required packages"></a>Step 2: Import required packages</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> scipy<span class="token punctuation">.</span>stats <span class="token keyword">as</span> scs<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> random<span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Step-3-Define-the-A-B-experiment"><a href="#Step-3-Define-the-A-B-experiment" class="headerlink" title="Step 3: Define the A/B experiment"></a>Step 3: Define the A/B experiment</h3><p>Assume that <strong>facebook.com/business</strong> runs an A/B test to see if changing the color of the “create an ad” button, increases the click-thorugh probability.</p><p>Let’s assume that the structure of the facebook.com/business website is as follows: [1] a homepage that includes the “create an ad” button; if create an ad is chosen, then [2] a webpage to “create new account”, and if new account is created, then [3] a webpage to buy adds.</p><p>To run the A/B experiement, the engineers at <strong>facebook.com/business</strong> create two versions of the homepage. One where the “create an ad” button is orange (existing version), and one where it is blue (experimental version). The former is served to the control users, and the later to the users in the treatment group.</p><p>Unfortunately, we don’t have this data available, so we will first need to generate it.</p><p>We assume that the total number of users that participate in the A/B experiement is 2000, equally devided between the control and treated groups. This means that the probability to be assigned to either the treatment or control group is 0.5.</p><h3 id="Step-4-Generate-toy-data"><a href="#Step-4-Generate-toy-data" class="headerlink" title="Step 4: Generate toy data"></a>Step 4: Generate toy data</h3><p>Notations:</p><ul><li>group A = control patients</li><li>group B = treated patients </li><li>p_c = click-though probability for the control group</li><li>p_t = click-thorugh probability for the treated group</li></ul><h4 id="Step-4-1-Set-seed"><a href="#Step-4-1-Set-seed" class="headerlink" title="Step 4.1: Set seed"></a>Step 4.1: Set seed</h4><pre class="line-numbers language-python"><code class="language-python">random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Step-4-2-Create-user-group-column"><a href="#Step-4-2-Create-user-group-column" class="headerlink" title="Step 4.2: Create user_group column"></a>Step 4.2: Create user_group column</h4><p>(with values A and B)</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># draw from Bernoulli distribution</span>user_group <span class="token operator">=</span> scs<span class="token punctuation">.</span>bernoulli<span class="token punctuation">.</span>rvs<span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token number">0.4</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># rename values, such that 0 = A and 1 = B; keep track of the length of group A and B</span>len_A <span class="token operator">=</span> <span class="token number">0</span>len_B <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> val <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>user_group<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">if</span> val <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        user_group<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"A"</span>        len_A <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        user_group<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"B"</span>        len_B <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Step-4-3-Create-user-click-column"><a href="#Step-4-3-Create-user-click-column" class="headerlink" title="Step 4.3: Create user_click column"></a>Step 4.3: Create user_click column</h4><p>(= 1 if a unique user clicked “create an ad” at least once)</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># first define the desired p_c and p_t, assuming p_t > p_c</span>p_c <span class="token operator">=</span> <span class="token number">0.10</span>p_t <span class="token operator">=</span> <span class="token number">0.12</span><span class="token comment" spellcheck="true"># draw user_click column from Bernoulli distribution for both group A and B</span>user_click_A <span class="token operator">=</span> scs<span class="token punctuation">.</span>bernoulli<span class="token punctuation">.</span>rvs<span class="token punctuation">(</span>p_c<span class="token punctuation">,</span> size <span class="token operator">=</span> len_A<span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>user_click_B <span class="token operator">=</span> scs<span class="token punctuation">.</span>bernoulli<span class="token punctuation">.</span>rvs<span class="token punctuation">(</span>p_t<span class="token punctuation">,</span> size <span class="token operator">=</span> len_B<span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Step-4-4-Combine-user-group-and-user-click-columns"><a href="#Step-4-4-Combine-user-group-and-user-click-columns" class="headerlink" title="Step 4.4 Combine user_group and user_click columns"></a>Step 4.4 Combine user_group and user_click columns</h4><p>create a dataframe</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># merge the two columns</span>user_click <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>index_A <span class="token operator">=</span> <span class="token number">0</span>index_B <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> val <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>user_group<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> val <span class="token operator">==</span> <span class="token string">"A"</span><span class="token punctuation">:</span>        user_click<span class="token punctuation">.</span>append<span class="token punctuation">(</span>user_click_A<span class="token punctuation">[</span>index_A<span class="token punctuation">]</span><span class="token punctuation">)</span>        index_A <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        user_click<span class="token punctuation">.</span>append<span class="token punctuation">(</span>user_click_B<span class="token punctuation">[</span>index_B<span class="token punctuation">]</span><span class="token punctuation">)</span>        index_B <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># create dataframe        </span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"user_group"</span><span class="token punctuation">:</span> user_group<span class="token punctuation">,</span> <span class="token string">"user_click"</span><span class="token punctuation">:</span> user_click<span class="token punctuation">}</span><span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># print the first five rows:</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_group</th>      <th>user_click</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>B</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>B</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>B</td>      <td>1</td>    </tr>    <tr>      <th>3</th>      <td>A</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>A</td>      <td>0</td>    </tr>  </tbody></table></div><h3 id="Step-5-Summary-statistics"><a href="#Step-5-Summary-statistics" class="headerlink" title="Step 5: Summary statistics"></a>Step 5: Summary statistics</h3><p>We assume our toy data is the real data of <strong>facebook.com/business</strong>‘ experiment</p><p>Notation:</p><ul><li>n_c = sample size control group</li><li>n_t = sample size treated group</li><li>x_c = number of users in the control group who click “create an ad”</li><li>x_t = number of users in the treated group who click “create an ad”</li><li>p_c_hat = estimated click-thorugh propbability of control group</li><li>p_t_hat = estimated click-thorugh probability of treated group</li></ul><h4 id="Step-5-1-Sample-sizes"><a href="#Step-5-1-Sample-sizes" class="headerlink" title="Step 5.1: Sample sizes"></a>Step 5.1: Sample sizes</h4><pre class="line-numbers language-python"><code class="language-python">n_c <span class="token operator">=</span> len_An_t <span class="token operator">=</span> len_B<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"n_c ="</span><span class="token punctuation">,</span> n_c<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"n_t ="</span><span class="token punctuation">,</span> n_t<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>n_c = 6038n_t = 3962</code></pre><h4 id="Step-5-2-Sum-of-user-click-by-group"><a href="#Step-5-2-Sum-of-user-click-by-group" class="headerlink" title="Step 5.2: Sum of user_click by group"></a>Step 5.2: Sum of user_click by group</h4><pre class="line-numbers language-python"><code class="language-python">x_c <span class="token operator">=</span> <span class="token number">0</span>x_t <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> ind <span class="token keyword">in</span> data<span class="token punctuation">.</span>index<span class="token punctuation">:</span>    <span class="token keyword">if</span> data<span class="token punctuation">[</span><span class="token string">"user_group"</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ind<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"A"</span> <span class="token operator">and</span> data<span class="token punctuation">[</span><span class="token string">"user_click"</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ind<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>         x_c <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">if</span> data<span class="token punctuation">[</span><span class="token string">"user_group"</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ind<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"B"</span> <span class="token operator">and</span> data<span class="token punctuation">[</span><span class="token string">"user_click"</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ind<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>         x_t <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x_c = "</span><span class="token punctuation">,</span> x_c<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x_t = "</span><span class="token punctuation">,</span> x_t<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>x_c =  605x_t =  471</code></pre><h4 id="Step-5-3-Click-thourgh-probability-by-group"><a href="#Step-5-3-Click-thourgh-probability-by-group" class="headerlink" title="Step 5.3: Click-thourgh probability by group"></a>Step 5.3: Click-thourgh probability by group</h4><p>Def: click-thorugh probability = unique users who click / unique total users <br>We can think of the click-through probability as being the sample proportion</p><pre class="line-numbers language-python"><code class="language-python">p_c_hat <span class="token operator">=</span> x_c<span class="token operator">/</span>n_cp_t_hat <span class="token operator">=</span> x_t<span class="token operator">/</span>n_t<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p_c_hat = "</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>p_c_hat<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p_t_hat = "</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>p_t_hat<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>p_c_hat =  0.1p_t_hat =  0.12</code></pre><h3 id="Step-6-Hypothesis-testing"><a href="#Step-6-Hypothesis-testing" class="headerlink" title="Step 6: Hypothesis testing"></a>Step 6: Hypothesis testing</h3><p>We want to see if chaging the color of the “create an ad” has any statistically significant effects on the click-through probability. <br>Remember that “create an ad” button is orange for the control gorup, and blue for the the treated group. <br></p><p>Our hypothesis is as follows: <br>H0: p_c = p_t, in other words p_c - p_t = 0 <br>Ha: p_t - p_c != 0 (try both one tail and two tail test)</p><p><strong>Let</strong>: <br>d = p_c - p_t <br>alpha = P(reject H0 | H0 is true) <br>beta = P(accept H0 | H0 is false) <br>power = 1 - beta = P(reject H0 | H0 is false)</p><p>To test the hypthesis we construct the z_statistic ~ N(0, 1)</p><h4 id="Step-6-1-Compute-the-z-statistic"><a href="#Step-6-1-Compute-the-z-statistic" class="headerlink" title="Step 6.1 Compute the z_statistic"></a>Step 6.1 Compute the z_statistic</h4><p>We assume the followings:</p><ul><li>H0 is true</li><li>random variables</li><li>iid</li></ul><p>Then, <br>z = (p_t_hat - p_c_hat) - 0/ SE(p_t_hat - p_c_hat) <br></p><p>Note:</p><ul><li>For a Bernoulli random variable: mean = p; variance = p(1-p); se = sqrt(p(1-p))</li><li>For Binomial random variable: mean = n <em> p; variance = n </em> p(1-p) = sqrt(n * (p(1-p))</li><li>Under the Central Limit Theorem, as the number of samples increases, the distribution of the sample proportion means (p_hat), will be ~ N(p, sqrt(p(1-p)/n))</li></ul><p>Thus,<br>se(p_t_hat - p_c_hat) = sqrt(p_t_hat(1-p_t_hat)/n_t) + sqrt(p_c_hat(1-p_c_hat)/n_c)</p><p>Note:</p><ul><li>cov(p_t_hat, p_c_hat) = 0 due to iid assumption.</li><li>because we assume that H0 is true (p_t = p_c), then we can compute SE_pool</li></ul><p>Thus, <br>se_pool = sqrt(p_pool_hat(1-p_pool_hat) * (1/n_t + 1/n_c) <br>where,<br>p_pool_hat = (x_c + x_t)/(n_c + n_t)</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># compute d = p_t_hat - p_c_hat</span>d_hat <span class="token operator">=</span> p_t_hat <span class="token operator">-</span> p_c_hat<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"d_hat ="</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>d_hat<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>d_hat = 0.02</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># compute p_pool_hat</span>p_pool_hat <span class="token operator">=</span> <span class="token punctuation">(</span>x_c <span class="token operator">+</span> x_t<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>n_c <span class="token operator">+</span> n_t<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p_pool_hat = "</span><span class="token punctuation">,</span> p_pool_hat<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>p_pool_hat =  0.1076</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># compute se_pool_hat</span>se_pool_hat <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>p_pool_hat <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>p_pool_hat<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span>n_c <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">/</span>n_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"se_pool_hat = "</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>se_pool_hat<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>se_pool_hat =  0.01</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># compute the z-statistic</span>z_statistic <span class="token operator">=</span> d_hat<span class="token operator">/</span>se_pool_hat<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"z_statistic ="</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>z_statistic<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Remeber that the z-statistic is ~ N(0, 1)"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>z_statistic = 2.95Remeber that the z-statistic is ~ N(0, 1)</code></pre><h4 id="Step-6-2-Find-p-val-Test-if-H0-is-true"><a href="#Step-6-2-Find-p-val-Test-if-H0-is-true" class="headerlink" title="Step 6.2: Find p_val. Test if H0 is true"></a>Step 6.2: Find p_val. Test if H0 is true</h4><p>Define p_val:</p><ul><li>if one-tailed test: p_val = P(Z &gt;= z) = 1 - P(Z &lt; z)</li><li>if two-tailed test: p_val = P(Z &lt;= -z or Z &gt;= z) = 1 - P(-z &lt; Z &lt; z) = 1- [P(Z &lt; z) - P (Z &lt; -z)]</li></ul><p>For a one-tailed test:</p><ul><li>if p_val &gt; alpha, accept H0 <br></li><li>if p_val &lt; alpha, reject H0 </li></ul><p>For a two-tailed test:</p><ul><li>if p_val &gt; alpha/2, accept H0 <br></li><li>if p_val &lt; alpha/2, reject H0 </li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># print message</span>accept <span class="token operator">=</span> <span class="token string">"Accept H0. p_val > alpha\n"</span>reject <span class="token operator">=</span> <span class="token string">"Reject H0. p_val &lt; alpha\n"</span><span class="token comment" spellcheck="true"># z_distribution</span>z_dist <span class="token operator">=</span> scs<span class="token punctuation">.</span>norm<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># alpha level</span>alpha <span class="token operator">=</span> <span class="token number">0.05</span><span class="token comment" spellcheck="true">## one-tailed test, find P(Z &lt; z_statistic) and then compute p_val</span>cdf_onetail <span class="token operator">=</span> z_dist<span class="token punctuation">.</span>cdf<span class="token punctuation">(</span>z_statistic<span class="token punctuation">)</span>p_val_onetail <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> cdf_onetail<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"one-tail test: p_val = "</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>p_val_onetail<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">if</span> p_val_onetail <span class="token operator">&lt;</span> alpha<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>reject<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>accept<span class="token punctuation">)</span><span class="token comment" spellcheck="true">## two_tailed test, find P (Z &lt; z) - P (Z &lt; -z), then compute p_val</span>cdf_twotail <span class="token operator">=</span> z_dist<span class="token punctuation">.</span>cdf<span class="token punctuation">(</span>z_statistic<span class="token punctuation">)</span> <span class="token operator">-</span> z_dist<span class="token punctuation">.</span>cdf<span class="token punctuation">(</span><span class="token operator">-</span>z_statistic<span class="token punctuation">)</span>p_val_twotail <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> cdf_twotail<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"two-tailed test: p_val = "</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>p_val_twotail<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">if</span> p_val_twotail <span class="token operator">&lt;</span> alpha<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>reject<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>accept<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>one-tail test: p_val =  0.0016Reject H0. p_val &lt; alphatwo-tailed test: p_val =  0.0032Reject H0. p_val &lt; alpha</code></pre><p>​    </p><h4 id="Step-6-3-Plot-the-distribution-of-d-under-H0-and-Ha"><a href="#Step-6-3-Plot-the-distribution-of-d-under-H0-and-Ha" class="headerlink" title="Step 6.3: Plot the distribution of d under H0 and Ha"></a>Step 6.3: Plot the distribution of d under H0 and Ha</h4><pre class="line-numbers language-python"><code class="language-python">d_distribution<span class="token punctuation">(</span>alpha <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Green shaded area: H0 is false</code></pre><p><img src="1_34_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">d_distribution<span class="token punctuation">(</span>beta <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Beta = 0.097Yelolw shaded area: Type II error area: P(accept H0|H0 is false)</code></pre><p><img src="1_35_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">d_distribution<span class="token punctuation">(</span>power <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Power = 0.903Blue shaded area: Power = 1- Beta, P(reject H0|H0 is false)</code></pre><p><img src="1_36_1.png" alt="png"></p><h3 id="Step-7-Find-appropiate-sample-size-for-A-B-test"><a href="#Step-7-Find-appropiate-sample-size-for-A-B-test" class="headerlink" title="Step 7: Find appropiate sample size for A/B test"></a>Step 7: Find appropiate sample size for A/B test</h3><p>Note: user introduces desired beta, power, alpha, one-tail or two-tail test parameters</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># define beta, power, and alpha</span>beta <span class="token operator">=</span> <span class="token number">0.2</span>power <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> betaalpha <span class="token operator">=</span> <span class="token number">0.05</span>one_tail <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># find the value of z that corresponds to the value of the power level (user input required)</span>z_power <span class="token operator">=</span> z_val<span class="token punctuation">(</span>alpha<span class="token punctuation">,</span> power <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The value of the z statistics for this level of power is"</span><span class="token punctuation">,</span> z_power<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># find the value of z that corresponds to the value of alpha</span><span class="token keyword">if</span> one_tail<span class="token punctuation">:</span>    z_alpha <span class="token operator">=</span> z_val<span class="token punctuation">(</span>alpha<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">else</span><span class="token punctuation">:</span>    z_alpha <span class="token operator">=</span> z_val<span class="token punctuation">(</span>alpha<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># find sample size</span>n <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> p_pool_hat <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span> p_pool_hat<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>z_power <span class="token operator">+</span> z_alpha<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span>p_t_hat <span class="token operator">-</span> p_c_hat<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The sample size needed for the parameters listed above ="</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Introduce the desired level of power: 0.8The value of the z statistics for this level of power is 0.842The sample size needed for the parameters listed above = 4320.61</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Main-script-to-perform-an-A-B-experiment-using-simulated-data&quot;&gt;&lt;a href=&quot;#Main-script-to-perform-an-A-B-experiment-using-simulated-da
      
    
    </summary>
    
      <category term="A_B Test" scheme="http://naixinzhang.github.io/categories/A-B-Test/"/>
    
    
      <category term="A_B Test" scheme="http://naixinzhang.github.io/tags/A-B-Test/"/>
    
  </entry>
  
  <entry>
    <title>CS301_Proj10</title>
    <link href="http://naixinzhang.github.io/2019/12/15/cs301/cs301-proj10/"/>
    <id>http://naixinzhang.github.io/2019/12/15/cs301/cs301-proj10/</id>
    <published>2019-12-15T18:32:09.000Z</published>
    <updated>2020-09-21T04:30:35.407Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CS301-Proj10"><a href="#CS301-Proj10" class="headerlink" title="CS301_Proj10"></a>CS301_Proj10</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>For your final CS 301 project, you’re going to analyze the wholeworld!</p><p>Specifically, you’re going to study various statistics for 174countries, answering questions such as: <em>what is the correlationbetween a country’s literacy rate and GDP?</em></p><p>To start, download <code>test.py</code> and <code>expected.html</code>.  You’ll also need todownload <code>lint.py</code> (see linter documentation under “Testing” below).Do not download any data files manually (you must write Python code todownload these automatically).  You’ll do all your work in a<code>main.ipynb</code>.</p><h1 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h1><p>For this project, you’ll be using one large JSON file with statisticsabout 174 countries adapted from<a href="https://www.kaggle.com/fernandol/countries-of-the-world" target="_blank" rel="noopener">here</a>.and you will also extract data from a snapshot of<a href="http://techslides.com/list-of-countries-and-capitals" target="_blank" rel="noopener">this page</a>.</p><p>First check these resources:</p><ul><li><a href="https://raw.githubusercontent.com/tylerharter/caraza-harter-com/master/tyler/cs301/fall19/data/countries.json" target="_blank" rel="noopener">https://raw.githubusercontent.com/tylerharter/caraza-harter-com/master/tyler/cs301/fall19/data/countries.json</a></li><li><a href="http://techslides.com/list-of-countries-and-capitals" target="_blank" rel="noopener">http://techslides.com/list-of-countries-and-capitals</a></li></ul><p>Some of the columns require a little extra explanation:</p><ul><li>area: measured in square miles</li><li>coastline: ratio of coast to area</li><li>birth-rate: births per 1000 people per year</li><li>death-rate: deaths per 1000 people per year</li><li>infant-mortality: per 1000 births</li><li>literacy: (out of 100%)</li><li>phones: number of phone per 1000 people</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#project: p10</span><span class="token comment" spellcheck="true">#submitter: naixinzhang</span><span class="token comment" spellcheck="true">#partner: none</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> requests<span class="token punctuation">,</span>json<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> os<span class="token keyword">from</span> pandas <span class="token keyword">import</span> DataFrame<span class="token punctuation">,</span> Series<span class="token keyword">from</span> math <span class="token keyword">import</span> radians<span class="token punctuation">,</span> cos<span class="token punctuation">,</span> sin<span class="token punctuation">,</span> asin<span class="token punctuation">,</span> sqrt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># We do not download again if the file already exists</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>str<span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" already exists!"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        r<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> r<span class="token punctuation">.</span>text        f <span class="token operator">=</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>str<span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" created!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">download<span class="token punctuation">(</span><span class="token string">"countries.json"</span><span class="token punctuation">,</span><span class="token string">"https://raw.githubusercontent.com/tylerharter/caraza-harter-com/master/tyler/cs301/fall19/data/countries.json"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;countries.json already exists!&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python">countries <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_json<span class="token punctuation">(</span><span class="token string">'countries.json'</span><span class="token punctuation">)</span>countries<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>area</th>      <th>birth-rate</th>      <th>coastline</th>      <th>continent</th>      <th>country</th>      <th>death-rate</th>      <th>gdp-per-capita</th>      <th>infant-mortality</th>      <th>literacy</th>      <th>net-migration</th>      <th>phones</th>      <th>population</th>      <th>region</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>756950</td>      <td>15.23</td>      <td>0.85</td>      <td>South America</td>      <td>Chile</td>      <td>5.81</td>      <td>9900</td>      <td>8.80</td>      <td>96,2</td>      <td>0.00</td>      <td>213,0</td>      <td>16134219</td>      <td>LATIN AMER. &amp; CARIB</td>    </tr>    <tr>      <th>1</th>      <td>665</td>      <td>17.80</td>      <td>24.21</td>      <td>Asia</td>      <td>Bahrain</td>      <td>4.14</td>      <td>16900</td>      <td>17.27</td>      <td>89,1</td>      <td>1.05</td>      <td>281,3</td>      <td>698585</td>      <td>NEAR EAST</td>    </tr>    <tr>      <th>2</th>      <td>22966</td>      <td>28.84</td>      <td>1.68</td>      <td>North America</td>      <td>Belize</td>      <td>5.72</td>      <td>4900</td>      <td>25.69</td>      <td>94,1</td>      <td>0.00</td>      <td>115,7</td>      <td>287730</td>      <td>LATIN AMER. &amp; CARIB</td>    </tr>    <tr>      <th>3</th>      <td>582650</td>      <td>39.72</td>      <td>0.09</td>      <td>Africa</td>      <td>Kenya</td>      <td>14.02</td>      <td>1000</td>      <td>61.47</td>      <td>85,1</td>      <td>-0.10</td>      <td>8,1</td>      <td>34707817</td>      <td>SUB-SAHARAN AFRICA</td>    </tr>    <tr>      <th>4</th>      <td>11854</td>      <td>33.05</td>      <td>3.12</td>      <td>Australia</td>      <td>Marshall Islands</td>      <td>4.78</td>      <td>1600</td>      <td>29.45</td>      <td>93,7</td>      <td>-6.04</td>      <td>91,2</td>      <td>60422</td>      <td>OCEANIA</td>    </tr>    <tr>      <th>5</th>      <td>111370</td>      <td>44.77</td>      <td>0.52</td>      <td>Africa</td>      <td>Liberia</td>      <td>23.10</td>      <td>1000</td>      <td>128.87</td>      <td>57,5</td>      <td>0.00</td>      <td>2,3</td>      <td>3042004</td>      <td>SUB-SAHARAN AFRICA</td>    </tr>    <tr>      <th>6</th>      <td>504782</td>      <td>10.06</td>      <td>0.98</td>      <td>Europe</td>      <td>Spain</td>      <td>9.72</td>      <td>22000</td>      <td>4.42</td>      <td>97,9</td>      <td>0.99</td>      <td>453,5</td>      <td>40397842</td>      <td>WESTERN EUROPE</td>    </tr>    <tr>      <th>7</th>      <td>65610</td>      <td>15.51</td>      <td>2.04</td>      <td>Asia</td>      <td>Sri Lanka</td>      <td>6.52</td>      <td>3700</td>      <td>14.35</td>      <td>92,3</td>      <td>-1.31</td>      <td>61,5</td>      <td>20222240</td>      <td>ASIA (EX. NEAR EAST)</td>    </tr>    <tr>      <th>8</th>      <td>212460</td>      <td>36.24</td>      <td>0.98</td>      <td>Asia</td>      <td>Oman</td>      <td>3.81</td>      <td>13100</td>      <td>19.51</td>      <td>75,8</td>      <td>0.28</td>      <td>85,5</td>      <td>3102229</td>      <td>NEAR EAST</td>    </tr>    <tr>      <th>9</th>      <td>316</td>      <td>10.22</td>      <td>62.28</td>      <td>Europe</td>      <td>Malta</td>      <td>8.10</td>      <td>17700</td>      <td>3.89</td>      <td>92,8</td>      <td>2.07</td>      <td>505,0</td>      <td>400214</td>      <td>WESTERN EUROPE</td>    </tr>    <tr>      <th>10</th>      <td>185180</td>      <td>27.76</td>      <td>0.10</td>      <td>Asia</td>      <td>Syria</td>      <td>4.81</td>      <td>3300</td>      <td>29.53</td>      <td>76,9</td>      <td>0.00</td>      <td>153,8</td>      <td>18881361</td>      <td>NEAR EAST</td>    </tr>    <tr>      <th>11</th>      <td>1759540</td>      <td>26.49</td>      <td>0.10</td>      <td>Africa</td>      <td>Libya</td>      <td>3.48</td>      <td>6400</td>      <td>24.60</td>      <td>82,6</td>      <td>0.00</td>      <td>127,1</td>      <td>5900754</td>      <td>NORTHERN AFRICA</td>    </tr>    <tr>      <th>12</th>      <td>752614</td>      <td>41.00</td>      <td>0.00</td>      <td>Africa</td>      <td>Zambia</td>      <td>19.93</td>      <td>800</td>      <td>88.29</td>      <td>80,6</td>      <td>0.00</td>      <td>8,2</td>      <td>11502010</td>      <td>SUB-SAHARAN AFRICA</td>    </tr>    <tr>      <th>13</th>      <td>10991</td>      <td>20.82</td>      <td>9.30</td>      <td>North America</td>      <td>Jamaica</td>      <td>6.52</td>      <td>3900</td>      <td>12.36</td>      <td>87,9</td>      <td>-4.92</td>      <td>124,0</td>      <td>2758124</td>      <td>LATIN AMER. &amp; CARIB</td>    </tr>    <tr>      <th>14</th>      <td>447400</td>      <td>26.36</td>      <td>0.00</td>      <td>Asia</td>      <td>Uzbekistan</td>      <td>7.84</td>      <td>1700</td>      <td>71.10</td>      <td>99,3</td>      <td>-1.72</td>      <td>62,9</td>      <td>27307134</td>      <td>C.W. OF IND. STATES</td>    </tr>    <tr>      <th>15</th>      <td>61</td>      <td>10.02</td>      <td>0.00</td>      <td>Europe</td>      <td>San Marino</td>      <td>8.17</td>      <td>34600</td>      <td>5.73</td>      <td>96,0</td>      <td>10.98</td>      <td>704,3</td>      <td>29251</td>      <td>WESTERN EUROPE</td>    </tr>    <tr>      <th>16</th>      <td>488100</td>      <td>27.61</td>      <td>0.00</td>      <td>Asia</td>      <td>Turkmenistan</td>      <td>8.60</td>      <td>5800</td>      <td>73.08</td>      <td>98,0</td>      <td>-0.86</td>      <td>74,6</td>      <td>5042920</td>      <td>C.W. OF IND. STATES</td>    </tr>    <tr>      <th>17</th>      <td>33843</td>      <td>15.70</td>      <td>0.00</td>      <td>Europe</td>      <td>Moldova</td>      <td>12.64</td>      <td>1800</td>      <td>40.42</td>      <td>99,1</td>      <td>-0.26</td>      <td>208,1</td>      <td>4466706</td>      <td>C.W. OF IND. STATES</td>    </tr>    <tr>      <th>18</th>      <td>28748</td>      <td>15.11</td>      <td>1.26</td>      <td>Europe</td>      <td>Albania</td>      <td>5.22</td>      <td>4500</td>      <td>21.52</td>      <td>86,5</td>      <td>-4.93</td>      <td>71,2</td>      <td>3581655</td>      <td>EASTERN EUROPE</td>    </tr>    <tr>      <th>19</th>      <td>53</td>      <td>11.40</td>      <td>194.34</td>      <td>North America</td>      <td>Bermuda</td>      <td>7.74</td>      <td>36000</td>      <td>8.53</td>      <td>98,0</td>      <td>2.49</td>      <td>851,4</td>      <td>65773</td>      <td>NORTHERN AMERICA</td>    </tr>    <tr>      <th>20</th>      <td>803940</td>      <td>29.74</td>      <td>0.13</td>      <td>Asia</td>      <td>Pakistan</td>      <td>8.23</td>      <td>2100</td>      <td>72.44</td>      <td>45,7</td>      <td>-2.77</td>      <td>31,8</td>      <td>165803560</td>      <td>ASIA (EX. NEAR EAST)</td>    </tr>    <tr>      <th>21</th>      <td>30528</td>      <td>10.38</td>      <td>0.22</td>      <td>Europe</td>      <td>Belgium</td>      <td>10.27</td>      <td>29100</td>      <td>4.68</td>      <td>98,0</td>      <td>1.23</td>      <td>462,6</td>      <td>10379067</td>      <td>WESTERN EUROPE</td>    </tr>    <tr>      <th>22</th>      <td>47000</td>      <td>33.65</td>      <td>0.00</td>      <td>Asia</td>      <td>Bhutan</td>      <td>12.70</td>      <td>1300</td>      <td>100.44</td>      <td>42,2</td>      <td>0.00</td>      <td>14,3</td>      <td>2279723</td>      <td>ASIA (EX. NEAR EAST)</td>    </tr>    <tr>      <th>23</th>      <td>587040</td>      <td>41.41</td>      <td>0.82</td>      <td>Africa</td>      <td>Madagascar</td>      <td>11.11</td>      <td>800</td>      <td>76.83</td>      <td>68,9</td>      <td>0.00</td>      <td>3,6</td>      <td>18595469</td>      <td>SUB-SAHARAN AFRICA</td>    </tr>    <tr>      <th>24</th>      <td>17363</td>      <td>27.41</td>      <td>0.00</td>      <td>Africa</td>      <td>Swaziland</td>      <td>29.74</td>      <td>4900</td>      <td>69.27</td>      <td>81,6</td>      <td>0.00</td>      <td>30,8</td>      <td>1136334</td>      <td>SUB-SAHARAN AFRICA</td>    </tr>    <tr>      <th>25</th>      <td>4167</td>      <td>16.68</td>      <td>60.60</td>      <td>Australia</td>      <td>French Polynesia</td>      <td>4.69</td>      <td>17500</td>      <td>8.44</td>      <td>98,0</td>      <td>2.94</td>      <td>194,5</td>      <td>274578</td>      <td>OCEANIA</td>    </tr>    <tr>      <th>26</th>      <td>64589</td>      <td>9.24</td>      <td>0.82</td>      <td>Europe</td>      <td>Latvia</td>      <td>13.66</td>      <td>10200</td>      <td>9.55</td>      <td>99,8</td>      <td>-2.23</td>      <td>321,4</td>      <td>2274735</td>      <td>BALTICS</td>    </tr>    <tr>      <th>27</th>      <td>93030</td>      <td>9.72</td>      <td>0.00</td>      <td>Europe</td>      <td>Hungary</td>      <td>13.11</td>      <td>13900</td>      <td>8.57</td>      <td>99,4</td>      <td>0.86</td>      <td>336,2</td>      <td>9981334</td>      <td>EASTERN EUROPE</td>    </tr>    <tr>      <th>28</th>      <td>693</td>      <td>9.34</td>      <td>27.85</td>      <td>Asia</td>      <td>Singapore</td>      <td>4.28</td>      <td>23700</td>      <td>2.29</td>      <td>92,5</td>      <td>11.53</td>      <td>411,4</td>      <td>4492150</td>      <td>ASIA (EX. NEAR EAST)</td>    </tr>    <tr>      <th>29</th>      <td>160</td>      <td>10.21</td>      <td>0.00</td>      <td>Europe</td>      <td>Liechtenstein</td>      <td>7.18</td>      <td>25000</td>      <td>4.70</td>      <td>100,0</td>      <td>4.85</td>      <td>585,5</td>      <td>33987</td>      <td>WESTERN EUROPE</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>144</th>      <td>267667</td>      <td>36.16</td>      <td>0.33</td>      <td>Africa</td>      <td>Gabon</td>      <td>12.25</td>      <td>5500</td>      <td>53.64</td>      <td>63,2</td>      <td>0.00</td>      <td>27,4</td>      <td>1424906</td>      <td>SUB-SAHARAN AFRICA</td>    </tr>    <tr>      <th>145</th>      <td>13790</td>      <td>12.77</td>      <td>3.63</td>      <td>North America</td>      <td>Puerto Rico</td>      <td>7.65</td>      <td>16800</td>      <td>8.24</td>      <td>94,1</td>      <td>-1.46</td>      <td>283,1</td>      <td>3927188</td>      <td>LATIN AMER. &amp; CARIB</td>    </tr>    <tr>      <th>146</th>      <td>338145</td>      <td>10.45</td>      <td>0.37</td>      <td>Europe</td>      <td>Finland</td>      <td>9.86</td>      <td>27400</td>      <td>3.57</td>      <td>100,0</td>      <td>0.95</td>      <td>405,3</td>      <td>5231372</td>      <td>WESTERN EUROPE</td>    </tr>    <tr>      <th>147</th>      <td>1240000</td>      <td>49.82</td>      <td>0.00</td>      <td>Africa</td>      <td>Mali</td>      <td>16.89</td>      <td>900</td>      <td>116.79</td>      <td>46,4</td>      <td>-0.33</td>      <td>6,4</td>      <td>11716829</td>      <td>SUB-SAHARAN AFRICA</td>    </tr>    <tr>      <th>148</th>      <td>2170</td>      <td>36.93</td>      <td>15.67</td>      <td>Africa</td>      <td>Comoros</td>      <td>8.20</td>      <td>700</td>      <td>74.93</td>      <td>56,5</td>      <td>0.00</td>      <td>24,5</td>      <td>690948</td>      <td>SUB-SAHARAN AFRICA</td>    </tr>    <tr>      <th>149</th>      <td>7686850</td>      <td>12.14</td>      <td>0.34</td>      <td>Australia</td>      <td>Australia</td>      <td>7.51</td>      <td>29000</td>      <td>4.69</td>      <td>100,0</td>      <td>3.98</td>      <td>565,5</td>      <td>20264082</td>      <td>OCEANIA</td>    </tr>    <tr>      <th>150</th>      <td>825418</td>      <td>24.32</td>      <td>0.19</td>      <td>Africa</td>      <td>Namibia</td>      <td>18.86</td>      <td>7200</td>      <td>48.98</td>      <td>84,0</td>      <td>0.00</td>      <td>62,6</td>      <td>2044147</td>      <td>SUB-SAHARAN AFRICA</td>    </tr>    <tr>      <th>151</th>      <td>181040</td>      <td>26.90</td>      <td>0.24</td>      <td>Asia</td>      <td>Cambodia</td>      <td>9.06</td>      <td>1900</td>      <td>71.48</td>      <td>69,4</td>      <td>0.00</td>      <td>2,6</td>      <td>13881427</td>      <td>ASIA (EX. NEAR EAST)</td>    </tr>    <tr>      <th>152</th>      <td>236040</td>      <td>47.35</td>      <td>0.00</td>      <td>Africa</td>      <td>Uganda</td>      <td>12.24</td>      <td>1400</td>      <td>67.83</td>      <td>69,9</td>      <td>0.00</td>      <td>3,6</td>      <td>28195754</td>      <td>SUB-SAHARAN AFRICA</td>    </tr>    <tr>      <th>153</th>      <td>945087</td>      <td>37.71</td>      <td>0.15</td>      <td>Africa</td>      <td>Tanzania</td>      <td>16.39</td>      <td>600</td>      <td>98.54</td>      <td>78,2</td>      <td>-2.06</td>      <td>4,0</td>      <td>37445392</td>      <td>SUB-SAHARAN AFRICA</td>    </tr>    <tr>      <th>154</th>      <td>27830</td>      <td>42.22</td>      <td>0.00</td>      <td>Africa</td>      <td>Burundi</td>      <td>13.46</td>      <td>600</td>      <td>69.29</td>      <td>51,6</td>      <td>-0.06</td>      <td>3,4</td>      <td>8090068</td>      <td>SUB-SAHARAN AFRICA</td>    </tr>    <tr>      <th>155</th>      <td>82880</td>      <td>18.96</td>      <td>1.59</td>      <td>Asia</td>      <td>United Arab Emirates</td>      <td>4.40</td>      <td>23200</td>      <td>14.51</td>      <td>77,9</td>      <td>1.03</td>      <td>475,3</td>      <td>2602713</td>      <td>NEAR EAST</td>    </tr>    <tr>      <th>156</th>      <td>329750</td>      <td>22.86</td>      <td>1.42</td>      <td>Asia</td>      <td>Malaysia</td>      <td>5.05</td>      <td>9000</td>      <td>17.70</td>      <td>88,7</td>      <td>0.00</td>      <td>179,0</td>      <td>24385858</td>      <td>ASIA (EX. NEAR EAST)</td>    </tr>    <tr>      <th>157</th>      <td>78866</td>      <td>9.02</td>      <td>0.00</td>      <td>Europe</td>      <td>Czech Republic</td>      <td>10.59</td>      <td>15700</td>      <td>3.93</td>      <td>99,9</td>      <td>0.97</td>      <td>314,3</td>      <td>10235455</td>      <td>EASTERN EUROPE</td>    </tr>    <tr>      <th>158</th>      <td>514000</td>      <td>13.87</td>      <td>0.63</td>      <td>Asia</td>      <td>Thailand</td>      <td>7.04</td>      <td>7400</td>      <td>20.48</td>      <td>92,6</td>      <td>0.00</td>      <td>108,9</td>      <td>64631595</td>      <td>ASIA (EX. NEAR EAST)</td>    </tr>    <tr>      <th>159</th>      <td>70280</td>      <td>14.45</td>      <td>2.06</td>      <td>Europe</td>      <td>Ireland</td>      <td>7.82</td>      <td>29600</td>      <td>5.39</td>      <td>98,0</td>      <td>4.99</td>      <td>500,5</td>      <td>4062235</td>      <td>WESTERN EUROPE</td>    </tr>    <tr>      <th>160</th>      <td>18270</td>      <td>22.55</td>      <td>6.18</td>      <td>Australia</td>      <td>Fiji</td>      <td>5.65</td>      <td>5800</td>      <td>12.62</td>      <td>93,7</td>      <td>-3.14</td>      <td>112,6</td>      <td>905949</td>      <td>OCEANIA</td>    </tr>    <tr>      <th>161</th>      <td>2717300</td>      <td>16.00</td>      <td>0.00</td>      <td>Asia</td>      <td>Kazakhstan</td>      <td>9.42</td>      <td>6300</td>      <td>29.21</td>      <td>98,4</td>      <td>-3.35</td>      <td>164,1</td>      <td>15233244</td>      <td>C.W. OF IND. STATES</td>    </tr>    <tr>      <th>162</th>      <td>1564116</td>      <td>21.59</td>      <td>0.00</td>      <td>Asia</td>      <td>Mongolia</td>      <td>6.95</td>      <td>1800</td>      <td>53.79</td>      <td>97,8</td>      <td>0.00</td>      <td>55,1</td>      <td>2832224</td>      <td>ASIA (EX. NEAR EAST)</td>    </tr>    <tr>      <th>163</th>      <td>198500</td>      <td>22.80</td>      <td>0.00</td>      <td>Asia</td>      <td>Kyrgyzstan</td>      <td>7.08</td>      <td>1600</td>      <td>35.64</td>      <td>97,0</td>      <td>-2.45</td>      <td>84,0</td>      <td>5213898</td>      <td>C.W. OF IND. STATES</td>    </tr>    <tr>      <th>164</th>      <td>527970</td>      <td>42.89</td>      <td>0.36</td>      <td>Asia</td>      <td>Yemen</td>      <td>8.30</td>      <td>800</td>      <td>61.50</td>      <td>50,2</td>      <td>0.00</td>      <td>37,2</td>      <td>21456188</td>      <td>NEAR EAST</td>    </tr>    <tr>      <th>165</th>      <td>9984670</td>      <td>10.78</td>      <td>2.02</td>      <td>North America</td>      <td>Canada</td>      <td>7.80</td>      <td>29800</td>      <td>4.75</td>      <td>97,0</td>      <td>5.96</td>      <td>552,2</td>      <td>33098932</td>      <td>NORTHERN AMERICA</td>    </tr>    <tr>      <th>166</th>      <td>262</td>      <td>12.74</td>      <td>61.07</td>      <td>North America</td>      <td>Cayman Islands</td>      <td>4.89</td>      <td>35000</td>      <td>8.19</td>      <td>98,0</td>      <td>18.75</td>      <td>836,3</td>      <td>45436</td>      <td>LATIN AMER. &amp; CARIB</td>    </tr>    <tr>      <th>167</th>      <td>118480</td>      <td>43.13</td>      <td>0.00</td>      <td>Africa</td>      <td>Malawi</td>      <td>19.33</td>      <td>600</td>      <td>103.32</td>      <td>62,7</td>      <td>0.00</td>      <td>7,9</td>      <td>13013926</td>      <td>SUB-SAHARAN AFRICA</td>    </tr>    <tr>      <th>168</th>      <td>86600</td>      <td>20.74</td>      <td>0.00</td>      <td>Europe</td>      <td>Azerbaijan</td>      <td>9.75</td>      <td>3400</td>      <td>81.74</td>      <td>97,0</td>      <td>-4.90</td>      <td>137,1</td>      <td>7961619</td>      <td>C.W. OF IND. STATES</td>    </tr>    <tr>      <th>169</th>      <td>2381740</td>      <td>17.14</td>      <td>0.04</td>      <td>Africa</td>      <td>Algeria</td>      <td>4.61</td>      <td>6000</td>      <td>31.00</td>      <td>70,0</td>      <td>-0.39</td>      <td>78,1</td>      <td>32930091</td>      <td>NORTHERN AFRICA</td>    </tr>    <tr>      <th>170</th>      <td>103000</td>      <td>13.64</td>      <td>4.83</td>      <td>Europe</td>      <td>Iceland</td>      <td>6.72</td>      <td>30900</td>      <td>3.31</td>      <td>99,9</td>      <td>2.38</td>      <td>647,7</td>      <td>299388</td>      <td>WESTERN EUROPE</td>    </tr>    <tr>      <th>171</th>      <td>748</td>      <td>25.37</td>      <td>56.02</td>      <td>Australia</td>      <td>Tonga</td>      <td>5.28</td>      <td>2200</td>      <td>12.62</td>      <td>98,5</td>      <td>0.00</td>      <td>97,7</td>      <td>114689</td>      <td>OCEANIA</td>    </tr>    <tr>      <th>172</th>      <td>27750</td>      <td>36.44</td>      <td>6.38</td>      <td>North America</td>      <td>Haiti</td>      <td>12.17</td>      <td>1600</td>      <td>73.45</td>      <td>52,9</td>      <td>-3.40</td>      <td>16,9</td>      <td>8308504</td>      <td>LATIN AMER. &amp; CARIB</td>    </tr>    <tr>      <th>173</th>      <td>1284000</td>      <td>45.73</td>      <td>0.00</td>      <td>Africa</td>      <td>Chad</td>      <td>16.38</td>      <td>1200</td>      <td>93.82</td>      <td>47,5</td>      <td>-0.11</td>      <td>1,3</td>      <td>9944201</td>      <td>SUB-SAHARAN AFRICA</td>    </tr>  </tbody></table><p>174 rows × 13 columns</p></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q1 How many countries do we have in our dataset?</span><span class="token keyword">def</span> <span class="token function">get_num_countries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> countries<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nunique<span class="token punctuation">(</span><span class="token punctuation">)</span>get_num_countries<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>174</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q2 what is the total area across all the countries in our dataset?</span><span class="token keyword">def</span> <span class="token function">get_total_area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> countries<span class="token punctuation">[</span><span class="token string">'area'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span>get_total_area<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>127170843</code></pre><pre class="line-numbers language-python"><code class="language-python">download<span class="token punctuation">(</span><span class="token string">'capitals.html'</span><span class="token punctuation">,</span> <span class="token string">'https://raw.githubusercontent.com/tylerharter/cs301-projects/master/fall19/p10/techslides-snapshot.html'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>&#39;capitals.html already exists!&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">state_stats</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    stats <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    html_string <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    doc <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_string<span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>    trs <span class="token operator">=</span> doc<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"tr"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> tr <span class="token keyword">in</span> trs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        cells <span class="token operator">=</span> tr<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"td"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>        j <span class="token operator">=</span> cells<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span>        stats<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">"country"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span>        j <span class="token operator">=</span> cells<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span>        stats<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">"capital"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span>         j <span class="token operator">=</span> cells<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span>        stats<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">"latitude"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>float<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>         j <span class="token operator">=</span> cells<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span>        stats<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">"longitude"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>float<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> statswi_stats <span class="token operator">=</span> state_stats<span class="token punctuation">(</span><span class="token string">"capitals.html"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"country"</span><span class="token punctuation">:</span>wi_stats<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token string">"capital"</span><span class="token punctuation">:</span>wi_stats<span class="token punctuation">[</span><span class="token string">'capital'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token string">"latitude"</span><span class="token punctuation">:</span>wi_stats<span class="token punctuation">[</span><span class="token string">'latitude'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token string">"longitude"</span><span class="token punctuation">:</span>wi_stats<span class="token punctuation">[</span><span class="token string">'longitude'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">}</span><span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">full <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>data<span class="token punctuation">,</span> countries<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'inner'</span><span class="token punctuation">)</span>capitals <span class="token operator">=</span> full<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">,</span><span class="token string">'capital'</span><span class="token punctuation">,</span><span class="token string">'latitude'</span><span class="token punctuation">,</span><span class="token string">'longitude'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>capitals<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>country</th>      <th>capital</th>      <th>latitude</th>      <th>longitude</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Afghanistan</td>      <td>Kabul</td>      <td>34.516667</td>      <td>69.183333</td>    </tr>    <tr>      <th>1</th>      <td>Albania</td>      <td>Tirana</td>      <td>41.316667</td>      <td>19.816667</td>    </tr>    <tr>      <th>2</th>      <td>Algeria</td>      <td>Algiers</td>      <td>36.750000</td>      <td>3.050000</td>    </tr>    <tr>      <th>3</th>      <td>Anguilla</td>      <td>The Valley</td>      <td>18.216667</td>      <td>-63.050000</td>    </tr>    <tr>      <th>4</th>      <td>Argentina</td>      <td>Buenos Aires</td>      <td>-34.583333</td>      <td>-58.666667</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q3 What are the country names in capitals.json?</span><span class="token keyword">def</span> <span class="token function">get_country</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> capitals<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> sorted<span class="token punctuation">(</span>res<span class="token punctuation">)</span>get_country<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;Afghanistan&#39;, &#39;Albania&#39;, &#39;Algeria&#39;, &#39;Anguilla&#39;, &#39;Argentina&#39;, &#39;Armenia&#39;, &#39;Aruba&#39;, &#39;Australia&#39;, &#39;Austria&#39;, &#39;Azerbaijan&#39;, &#39;Bahrain&#39;, &#39;Bangladesh&#39;, &#39;Barbados&#39;, &#39;Belarus&#39;, &#39;Belgium&#39;, &#39;Belize&#39;, &#39;Benin&#39;, &#39;Bermuda&#39;, &#39;Bhutan&#39;, &#39;Bolivia&#39;, &#39;Botswana&#39;, &#39;Brazil&#39;, &#39;Bulgaria&#39;, &#39;Burkina Faso&#39;, &#39;Burundi&#39;, &#39;Cambodia&#39;, &#39;Cameroon&#39;, &#39;Canada&#39;, &#39;Cape Verde&#39;, &#39;Cayman Islands&#39;, &#39;Chad&#39;, &#39;Chile&#39;, &#39;China&#39;, &#39;Colombia&#39;, &#39;Comoros&#39;, &#39;Costa Rica&#39;, &#39;Croatia&#39;, &#39;Cuba&#39;, &#39;Czech Republic&#39;, &#39;Denmark&#39;, &#39;Djibouti&#39;, &#39;Dominica&#39;, &#39;Dominican Republic&#39;, &#39;Ecuador&#39;, &#39;Egypt&#39;, &#39;El Salvador&#39;, &#39;Equatorial Guinea&#39;, &#39;Eritrea&#39;, &#39;Estonia&#39;, &#39;Ethiopia&#39;, &#39;Fiji&#39;, &#39;Finland&#39;, &#39;France&#39;, &#39;French Polynesia&#39;, &#39;Gabon&#39;, &#39;Georgia&#39;, &#39;Germany&#39;, &#39;Ghana&#39;, &#39;Greece&#39;, &#39;Grenada&#39;, &#39;Guam&#39;, &#39;Guatemala&#39;, &#39;Guinea&#39;, &#39;Guinea-Bissau&#39;, &#39;Guyana&#39;, &#39;Haiti&#39;, &#39;Honduras&#39;, &#39;Hungary&#39;, &#39;Iceland&#39;, &#39;India&#39;, &#39;Indonesia&#39;, &#39;Iran&#39;, &#39;Iraq&#39;, &#39;Ireland&#39;, &#39;Israel&#39;, &#39;Italy&#39;, &#39;Jamaica&#39;, &#39;Japan&#39;, &#39;Jordan&#39;, &#39;Kazakhstan&#39;, &#39;Kenya&#39;, &#39;Kuwait&#39;, &#39;Kyrgyzstan&#39;, &#39;Laos&#39;, &#39;Latvia&#39;, &#39;Lebanon&#39;, &#39;Lesotho&#39;, &#39;Liberia&#39;, &#39;Libya&#39;, &#39;Liechtenstein&#39;, &#39;Lithuania&#39;, &#39;Luxembourg&#39;, &#39;Madagascar&#39;, &#39;Malawi&#39;, &#39;Malaysia&#39;, &#39;Maldives&#39;, &#39;Mali&#39;, &#39;Malta&#39;, &#39;Marshall Islands&#39;, &#39;Mauritania&#39;, &#39;Mauritius&#39;, &#39;Mexico&#39;, &#39;Moldova&#39;, &#39;Monaco&#39;, &#39;Mongolia&#39;, &#39;Morocco&#39;, &#39;Mozambique&#39;, &#39;Namibia&#39;, &#39;Nepal&#39;, &#39;Netherlands&#39;, &#39;New Caledonia&#39;, &#39;New Zealand&#39;, &#39;Nicaragua&#39;, &#39;Niger&#39;, &#39;Nigeria&#39;, &#39;Norway&#39;, &#39;Oman&#39;, &#39;Pakistan&#39;, &#39;Palau&#39;, &#39;Panama&#39;, &#39;Papua New Guinea&#39;, &#39;Paraguay&#39;, &#39;Peru&#39;, &#39;Philippines&#39;, &#39;Poland&#39;, &#39;Portugal&#39;, &#39;Puerto Rico&#39;, &#39;Qatar&#39;, &#39;Romania&#39;, &#39;Russia&#39;, &#39;Rwanda&#39;, &#39;Saint Helena&#39;, &#39;Saint Lucia&#39;, &#39;Saint Vincent and the Grenadines&#39;, &#39;Samoa&#39;, &#39;San Marino&#39;, &#39;Saudi Arabia&#39;, &#39;Senegal&#39;, &#39;Seychelles&#39;, &#39;Sierra Leone&#39;, &#39;Singapore&#39;, &#39;Slovenia&#39;, &#39;Somalia&#39;, &#39;South Africa&#39;, &#39;Spain&#39;, &#39;Sri Lanka&#39;, &#39;Sudan&#39;, &#39;Suriname&#39;, &#39;Swaziland&#39;, &#39;Sweden&#39;, &#39;Switzerland&#39;, &#39;Syria&#39;, &#39;Taiwan&#39;, &#39;Tajikistan&#39;, &#39;Tanzania&#39;, &#39;Thailand&#39;, &#39;Togo&#39;, &#39;Tonga&#39;, &#39;Tunisia&#39;, &#39;Turkey&#39;, &#39;Turkmenistan&#39;, &#39;Uganda&#39;, &#39;Ukraine&#39;, &#39;United Arab Emirates&#39;, &#39;United Kingdom&#39;, &#39;United States&#39;, &#39;Uruguay&#39;, &#39;Uzbekistan&#39;, &#39;Vanuatu&#39;, &#39;Venezuela&#39;, &#39;Vietnam&#39;, &#39;Yemen&#39;, &#39;Zambia&#39;, &#39;Zimbabwe&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q4 What is the capital of Cuba?</span><span class="token keyword">def</span> <span class="token function">get_capital</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    capitals_country <span class="token operator">=</span> capitals<span class="token punctuation">[</span>capitals<span class="token punctuation">.</span>country <span class="token operator">==</span> <span class="token string">'Cuba'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> next<span class="token punctuation">(</span>iter<span class="token punctuation">(</span>capitals_country<span class="token punctuation">[</span><span class="token string">'capital'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>get_capital<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;Havana&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q5 Which country's capital is Tbilisi?</span><span class="token keyword">def</span> <span class="token function">get_countries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    capital <span class="token operator">=</span> capitals<span class="token punctuation">[</span>capitals<span class="token punctuation">.</span>capital <span class="token operator">==</span> <span class="token string">'Tbilisi'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> next<span class="token punctuation">(</span>iter<span class="token punctuation">(</span>capital<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>get_countries<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;Georgia&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q6 Which 7 countries have the southern-most capitals?</span><span class="token keyword">def</span> <span class="token function">get_southern_most</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> capitals<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'latitude'</span><span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> resget_southern_most<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;New Zealand&#39;, &#39;Australia&#39;, &#39;Uruguay&#39;, &#39;Argentina&#39;, &#39;Chile&#39;, &#39;Lesotho&#39;, &#39;Swaziland&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q7 Which 5 countries have the northern-most capitals?</span><span class="token keyword">def</span> <span class="token function">get_northern_most</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> capitals<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'latitude'</span><span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> resget_northern_most<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;Iceland&#39;, &#39;Finland&#39;, &#39;Norway&#39;, &#39;Estonia&#39;, &#39;Sweden&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q8 For birth-rate and death-rate, what are various summary statistics (e.g., mean, max, standard deviation, etc)?</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'birth-rate'</span><span class="token punctuation">:</span>countries<span class="token punctuation">[</span><span class="token string">'birth-rate'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                         <span class="token string">'death-rate'</span><span class="token punctuation">:</span>countries<span class="token punctuation">[</span><span class="token string">'death-rate'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>birth-rate</th>      <th>death-rate</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>174.000000</td>      <td>174.000000</td>    </tr>    <tr>      <th>mean</th>      <td>22.463851</td>      <td>9.625172</td>    </tr>    <tr>      <th>std</th>      <td>11.278992</td>      <td>5.187143</td>    </tr>    <tr>      <th>min</th>      <td>8.250000</td>      <td>2.410000</td>    </tr>    <tr>      <th>25%</th>      <td>12.597500</td>      <td>6.027500</td>    </tr>    <tr>      <th>50%</th>      <td>20.010000</td>      <td>8.230000</td>    </tr>    <tr>      <th>75%</th>      <td>29.860000</td>      <td>11.715000</td>    </tr>    <tr>      <th>max</th>      <td>50.730000</td>      <td>29.740000</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q9 For columns literacy and phones, what are various summary statistics?</span>countries<span class="token punctuation">[</span><span class="token string">'literacy'</span><span class="token punctuation">]</span> <span class="token operator">=</span> countries<span class="token punctuation">[</span><span class="token string">'literacy'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> regex<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>countries<span class="token punctuation">[</span><span class="token string">'literacy'</span><span class="token punctuation">]</span> <span class="token operator">=</span> countries<span class="token punctuation">[</span><span class="token string">'literacy'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float'</span><span class="token punctuation">)</span>countries<span class="token punctuation">[</span><span class="token string">'phones'</span><span class="token punctuation">]</span> <span class="token operator">=</span> countries<span class="token punctuation">[</span><span class="token string">'phones'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> regex<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>countries<span class="token punctuation">[</span><span class="token string">'phones'</span><span class="token punctuation">]</span> <span class="token operator">=</span> countries<span class="token punctuation">[</span><span class="token string">'phones'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float'</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'literacy'</span><span class="token punctuation">:</span>countries<span class="token punctuation">[</span><span class="token string">'literacy'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                         <span class="token string">'phones'</span><span class="token punctuation">:</span>countries<span class="token punctuation">[</span><span class="token string">'phones'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>literacy</th>      <th>phones</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>174.000000</td>      <td>174.000000</td>    </tr>    <tr>      <th>mean</th>      <td>82.362069</td>      <td>215.770690</td>    </tr>    <tr>      <th>std</th>      <td>20.003166</td>      <td>218.713811</td>    </tr>    <tr>      <th>min</th>      <td>17.600000</td>      <td>1.300000</td>    </tr>    <tr>      <th>25%</th>      <td>70.100000</td>      <td>32.000000</td>    </tr>    <tr>      <th>50%</th>      <td>92.100000</td>      <td>140.350000</td>    </tr>    <tr>      <th>75%</th>      <td>98.000000</td>      <td>331.750000</td>    </tr>    <tr>      <th>max</th>      <td>100.000000</td>      <td>1035.600000</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q10 What is the largest land-locked country in Europe?</span><span class="token keyword">def</span> <span class="token function">get_EU_largest_land_country</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    countries_EU_land <span class="token operator">=</span> countries<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>countries<span class="token punctuation">[</span><span class="token string">'continent'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Europe'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>countries<span class="token punctuation">[</span><span class="token string">'coastline'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    countries_EU_land_largest <span class="token operator">=</span> countries_EU_land<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'area'</span><span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> countries_EU_land_largestget_EU_largest_land_country<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;Belarus&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q11 What is the largest land-locked country in Asia?</span><span class="token keyword">def</span> <span class="token function">get_AS_largest_land_country</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    countries_AS_land <span class="token operator">=</span> countries<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>countries<span class="token punctuation">[</span><span class="token string">'continent'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Asia'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>countries<span class="token punctuation">[</span><span class="token string">'coastline'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    countries_AS_land_largest <span class="token operator">=</span> countries_AS_land<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'area'</span><span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> countries_AS_land_largestget_AS_largest_land_country<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;Kazakhstan&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q12 What is the most populous land-locked country in Asia?</span><span class="token keyword">def</span> <span class="token function">get_AS_most_pop_land_country</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    countries_AS_land <span class="token operator">=</span> countries<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>countries<span class="token punctuation">[</span><span class="token string">'continent'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Asia'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>countries<span class="token punctuation">[</span><span class="token string">'coastline'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    countries_AS_land_most_pop <span class="token operator">=</span> countries_AS_land<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'population'</span><span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> countries_AS_land_most_popget_AS_most_pop_land_country<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;Afghanistan&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Haversine Formula (https://stackoverflow.com/questions/4913349/haversine-formula-in-python-bearing-and-distance-between-two-gps-points)</span><span class="token keyword">def</span> <span class="token function">haversine</span><span class="token punctuation">(</span>lon1<span class="token punctuation">,</span> lat1<span class="token punctuation">,</span> lon2<span class="token punctuation">,</span> lat2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Calculate the great circle distance between two points     on the earth (specified in decimal degrees)    """</span>    <span class="token comment" spellcheck="true"># convert decimal degrees to radians </span>    lon1<span class="token punctuation">,</span> lat1<span class="token punctuation">,</span> lon2<span class="token punctuation">,</span> lat2 <span class="token operator">=</span> map<span class="token punctuation">(</span>radians<span class="token punctuation">,</span> <span class="token punctuation">[</span>lon1<span class="token punctuation">,</span> lat1<span class="token punctuation">,</span> lon2<span class="token punctuation">,</span> lat2<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># haversine formula </span>    dlon <span class="token operator">=</span> lon2 <span class="token operator">-</span> lon1     dlat <span class="token operator">=</span> lat2 <span class="token operator">-</span> lat1     a <span class="token operator">=</span> sin<span class="token punctuation">(</span>dlat<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> cos<span class="token punctuation">(</span>lat1<span class="token punctuation">)</span> <span class="token operator">*</span> cos<span class="token punctuation">(</span>lat2<span class="token punctuation">)</span> <span class="token operator">*</span> sin<span class="token punctuation">(</span>dlon<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span>    c <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> asin<span class="token punctuation">(</span>sqrt<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>     r <span class="token operator">=</span> <span class="token number">3956</span> <span class="token comment" spellcheck="true"># Radius of earth in kilometers. Use 3956 for miles</span>    <span class="token keyword">return</span> c <span class="token operator">*</span> r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q13 What is the distance between Camp Randall Stadium and the Wisconsin State Capital?</span>Randall_lon <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">89.411893</span>Randall_lat <span class="token operator">=</span> <span class="token number">43.070231</span>Wisconsin_lon <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">89.384113</span>Wisconsin_lat <span class="token operator">=</span> <span class="token number">43.074645</span>haversine<span class="token punctuation">(</span>Randall_lon<span class="token punctuation">,</span> Randall_lat<span class="token punctuation">,</span> Wisconsin_lon<span class="token punctuation">,</span> Wisconsin_lat<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1.433899492072933</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q14 What is the distance between France and Japan?</span><span class="token keyword">def</span> <span class="token function">get_distance</span><span class="token punctuation">(</span>country1<span class="token punctuation">,</span> country2<span class="token punctuation">)</span><span class="token punctuation">:</span>    country1_lon <span class="token operator">=</span> capitals<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>capitals<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span> <span class="token operator">==</span> country1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'longitude'</span><span class="token punctuation">]</span>    country1_lat <span class="token operator">=</span> capitals<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>capitals<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span> <span class="token operator">==</span> country1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'latitude'</span><span class="token punctuation">]</span>    country2_lon <span class="token operator">=</span> capitals<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>capitals<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span> <span class="token operator">==</span> country2<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'longitude'</span><span class="token punctuation">]</span>    country2_lat <span class="token operator">=</span> capitals<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>capitals<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span> <span class="token operator">==</span> country2<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'latitude'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> haversine<span class="token punctuation">(</span>country1_lon<span class="token punctuation">,</span> country1_lat<span class="token punctuation">,</span> country2_lon<span class="token punctuation">,</span> country2_lat<span class="token punctuation">)</span>get_distance<span class="token punctuation">(</span><span class="token string">'France'</span><span class="token punctuation">,</span> <span class="token string">'Japan'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>6032.330932363535</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q15 What are the distances between Guam, New Zealand, and Australia?</span>country_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Guam"</span><span class="token punctuation">,</span> <span class="token string">"New Zealand"</span><span class="token punctuation">,</span> <span class="token string">"Australia"</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">get_distances</span><span class="token punctuation">(</span>country_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> country1 <span class="token keyword">in</span> country_list<span class="token punctuation">:</span>        tmp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> country2 <span class="token keyword">in</span> country_list<span class="token punctuation">:</span>            <span class="token keyword">if</span> country1 <span class="token operator">==</span> country2<span class="token punctuation">:</span>                tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>get_distance<span class="token punctuation">(</span>country1<span class="token punctuation">,</span> country2<span class="token punctuation">)</span><span class="token punctuation">)</span>        data<span class="token punctuation">[</span>country1<span class="token punctuation">]</span> <span class="token operator">=</span> tmp    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index <span class="token operator">=</span> country_list<span class="token punctuation">)</span>    <span class="token keyword">return</span> dfget_distances<span class="token punctuation">(</span>country_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Guam</th>      <th>New Zealand</th>      <th>Australia</th>    </tr>  </thead>  <tbody>    <tr>      <th>Guam</th>      <td>NaN</td>      <td>4239.314912</td>      <td>3377.103870</td>    </tr>    <tr>      <th>New Zealand</th>      <td>4239.314912</td>      <td>NaN</td>      <td>1445.147895</td>    </tr>    <tr>      <th>Australia</th>      <td>3377.103870</td>      <td>1445.147895</td>      <td>NaN</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q16 What is the distance between every pair of countries in the Australian continent?</span><span class="token keyword">def</span> <span class="token function">get_distance_Australian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    country_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    country_AU <span class="token operator">=</span> countries<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>countries<span class="token punctuation">[</span><span class="token string">'continent'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Australia'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> country_AU<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        country_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> get_distances<span class="token punctuation">(</span>country_list<span class="token punctuation">)</span>get_distance_Australian<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Marshall Islands</th>      <th>French Polynesia</th>      <th>New Zealand</th>      <th>Vanuatu</th>      <th>Palau</th>      <th>Papua New Guinea</th>      <th>Guam</th>      <th>Samoa</th>      <th>New Caledonia</th>      <th>Australia</th>      <th>Fiji</th>      <th>Tonga</th>    </tr>  </thead>  <tbody>    <tr>      <th>Marshall Islands</th>      <td>NaN</td>      <td>3159.856137</td>      <td>3348.725378</td>      <td>1727.328621</td>      <td>2516.301728</td>      <td>2019.144119</td>      <td>1861.584428</td>      <td>1849.150692</td>      <td>2054.905160</td>      <td>3263.901948</td>      <td>1806.972599</td>      <td>2151.129410</td>    </tr>    <tr>      <th>French Polynesia</th>      <td>3159.856137</td>      <td>NaN</td>      <td>2668.807328</td>      <td>2765.339382</td>      <td>5447.018761</td>      <td>4265.757856</td>      <td>4961.131713</td>      <td>1496.953816</td>      <td>2864.497308</td>      <td>3920.570216</td>      <td>2102.135722</td>      <td>1686.539411</td>    </tr>    <tr>      <th>New Zealand</th>      <td>3348.725378</td>      <td>2668.807328</td>      <td>NaN</td>      <td>1671.641167</td>      <td>4218.188412</td>      <td>2767.607095</td>      <td>4239.314912</td>      <td>2062.548020</td>      <td>1400.483623</td>      <td>1445.147895</td>      <td>1613.916992</td>      <td>1510.219450</td>    </tr>    <tr>      <th>Vanuatu</th>      <td>1727.328621</td>      <td>2765.339382</td>      <td>1671.641167</td>      <td>NaN</td>      <td>2882.041892</td>      <td>1527.495923</td>      <td>2687.395771</td>      <td>1349.904435</td>      <td>335.602971</td>      <td>1687.810709</td>      <td>663.967196</td>      <td>1098.016273</td>    </tr>    <tr>      <th>Palau</th>      <td>2516.301728</td>      <td>5447.018761</td>      <td>4218.188412</td>      <td>2882.041892</td>      <td>NaN</td>      <td>1453.306058</td>      <td>800.243081</td>      <td>3956.305436</td>      <td>2974.892838</td>      <td>3099.023227</td>      <td>3468.037102</td>      <td>3931.843110</td>    </tr>    <tr>      <th>Papua New Guinea</th>      <td>2019.144119</td>      <td>4265.757856</td>      <td>2767.607095</td>      <td>1527.495923</td>      <td>1453.306058</td>      <td>NaN</td>      <td>1591.171595</td>      <td>2789.123270</td>      <td>1552.708901</td>      <td>1786.749660</td>      <td>2174.712829</td>      <td>2623.742354</td>    </tr>    <tr>      <th>Guam</th>      <td>1861.584428</td>      <td>4961.131713</td>      <td>4239.314912</td>      <td>2687.395771</td>      <td>800.243081</td>      <td>1591.171595</td>      <td>NaN</td>      <td>3520.883355</td>      <td>2871.868601</td>      <td>3377.103870</td>      <td>3165.570014</td>      <td>3617.512808</td>    </tr>    <tr>      <th>Samoa</th>      <td>1849.150692</td>      <td>1496.953816</td>      <td>2062.548020</td>      <td>1349.904435</td>      <td>3956.305436</td>      <td>2789.123270</td>      <td>3520.883355</td>      <td>NaN</td>      <td>1542.152644</td>      <td>2840.091065</td>      <td>716.316054</td>      <td>553.393188</td>    </tr>    <tr>      <th>New Caledonia</th>      <td>2054.905160</td>      <td>2864.497308</td>      <td>1400.483623</td>      <td>335.602971</td>      <td>2974.892838</td>      <td>1552.708901</td>      <td>2871.868601</td>      <td>1542.152644</td>      <td>NaN</td>      <td>1375.924712</td>      <td>825.890876</td>      <td>1179.069567</td>    </tr>    <tr>      <th>Australia</th>      <td>3263.901948</td>      <td>3920.570216</td>      <td>1445.147895</td>      <td>1687.810709</td>      <td>3099.023227</td>      <td>1786.749660</td>      <td>3377.103870</td>      <td>2840.091065</td>      <td>1375.924712</td>      <td>NaN</td>      <td>2145.768971</td>      <td>2362.766922</td>    </tr>    <tr>      <th>Fiji</th>      <td>1806.972599</td>      <td>2102.135722</td>      <td>1613.916992</td>      <td>663.967196</td>      <td>3468.037102</td>      <td>2174.712829</td>      <td>3165.570014</td>      <td>716.316054</td>      <td>825.890876</td>      <td>2145.768971</td>      <td>NaN</td>      <td>463.843872</td>    </tr>    <tr>      <th>Tonga</th>      <td>2151.129410</td>      <td>1686.539411</td>      <td>1510.219450</td>      <td>1098.016273</td>      <td>3931.843110</td>      <td>2623.742354</td>      <td>3617.512808</td>      <td>553.393188</td>      <td>1179.069567</td>      <td>2362.766922</td>      <td>463.843872</td>      <td>NaN</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q17 What is the most central country in the Australian continent?</span><span class="token keyword">def</span> <span class="token function">get_most_central_AU</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    df_AU <span class="token operator">=</span> get_distance_Australian<span class="token punctuation">(</span><span class="token punctuation">)</span>    df_AU_mean <span class="token operator">=</span> df_AU<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> numeric_only <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>    df_AU_mean <span class="token operator">=</span> df_AU_mean<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> df_AU_mean<span class="token punctuation">.</span>index<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>get_most_central_AU<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;Vanuatu&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q18 What is the least central country in Australia?</span><span class="token keyword">def</span> <span class="token function">get_least_central_AU</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    df_AU <span class="token operator">=</span> get_distance_Australian<span class="token punctuation">(</span><span class="token punctuation">)</span>    df_AU_mean <span class="token operator">=</span> df_AU<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> numeric_only <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>    df_AU_mean <span class="token operator">=</span> df_AU_mean<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> df_AU_mean<span class="token punctuation">.</span>index<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>get_least_central_AU<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;French Polynesia&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q19 How close is each country in Australia to it's nearest neighbor?</span><span class="token keyword">def</span> <span class="token function">AU_nearest_neighbor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    df_AU <span class="token operator">=</span> get_distance_Australian<span class="token punctuation">(</span><span class="token punctuation">)</span>    df_AU_idxmin <span class="token operator">=</span> df_AU<span class="token punctuation">.</span>idxmin<span class="token punctuation">(</span><span class="token punctuation">)</span>    df_AU_min <span class="token operator">=</span> df_AU<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span>    country_list <span class="token operator">=</span> df_AU_min<span class="token punctuation">.</span>index    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'nearest'</span><span class="token punctuation">:</span>df_AU_idxmin<span class="token punctuation">.</span>values<span class="token punctuation">,</span> <span class="token string">'distance'</span><span class="token punctuation">:</span>df_AU_min<span class="token punctuation">.</span>values<span class="token punctuation">}</span>    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index <span class="token operator">=</span> country_list<span class="token punctuation">)</span>    <span class="token keyword">return</span> dfAU_nearest_neighbor<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>nearest</th>      <th>distance</th>    </tr>  </thead>  <tbody>    <tr>      <th>Marshall Islands</th>      <td>Vanuatu</td>      <td>1727.328621</td>    </tr>    <tr>      <th>French Polynesia</th>      <td>Samoa</td>      <td>1496.953816</td>    </tr>    <tr>      <th>New Zealand</th>      <td>New Caledonia</td>      <td>1400.483623</td>    </tr>    <tr>      <th>Vanuatu</th>      <td>New Caledonia</td>      <td>335.602971</td>    </tr>    <tr>      <th>Palau</th>      <td>Guam</td>      <td>800.243081</td>    </tr>    <tr>      <th>Papua New Guinea</th>      <td>Palau</td>      <td>1453.306058</td>    </tr>    <tr>      <th>Guam</th>      <td>Palau</td>      <td>800.243081</td>    </tr>    <tr>      <th>Samoa</th>      <td>Tonga</td>      <td>553.393188</td>    </tr>    <tr>      <th>New Caledonia</th>      <td>Vanuatu</td>      <td>335.602971</td>    </tr>    <tr>      <th>Australia</th>      <td>New Caledonia</td>      <td>1375.924712</td>    </tr>    <tr>      <th>Fiji</th>      <td>Tonga</td>      <td>463.843872</td>    </tr>    <tr>      <th>Tonga</th>      <td>Fiji</td>      <td>463.843872</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q20 How far is each country in Australia to it's furthest neighbor?</span><span class="token keyword">def</span> <span class="token function">AU_furthest_neighbor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    df_AU <span class="token operator">=</span> get_distance_Australian<span class="token punctuation">(</span><span class="token punctuation">)</span>    df_AU_idxmax <span class="token operator">=</span> df_AU<span class="token punctuation">.</span>idxmax<span class="token punctuation">(</span><span class="token punctuation">)</span>    df_AU_max <span class="token operator">=</span> df_AU<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span>    country_list <span class="token operator">=</span> df_AU_max<span class="token punctuation">.</span>index    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'furthest'</span><span class="token punctuation">:</span>df_AU_idxmax<span class="token punctuation">.</span>values<span class="token punctuation">,</span> <span class="token string">'distance'</span><span class="token punctuation">:</span>df_AU_max<span class="token punctuation">.</span>values<span class="token punctuation">}</span>    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index <span class="token operator">=</span> country_list<span class="token punctuation">)</span>    <span class="token keyword">return</span> dfAU_furthest_neighbor<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>furthest</th>      <th>distance</th>    </tr>  </thead>  <tbody>    <tr>      <th>Marshall Islands</th>      <td>New Zealand</td>      <td>3348.725378</td>    </tr>    <tr>      <th>French Polynesia</th>      <td>Palau</td>      <td>5447.018761</td>    </tr>    <tr>      <th>New Zealand</th>      <td>Guam</td>      <td>4239.314912</td>    </tr>    <tr>      <th>Vanuatu</th>      <td>Palau</td>      <td>2882.041892</td>    </tr>    <tr>      <th>Palau</th>      <td>French Polynesia</td>      <td>5447.018761</td>    </tr>    <tr>      <th>Papua New Guinea</th>      <td>French Polynesia</td>      <td>4265.757856</td>    </tr>    <tr>      <th>Guam</th>      <td>French Polynesia</td>      <td>4961.131713</td>    </tr>    <tr>      <th>Samoa</th>      <td>Palau</td>      <td>3956.305436</td>    </tr>    <tr>      <th>New Caledonia</th>      <td>Palau</td>      <td>2974.892838</td>    </tr>    <tr>      <th>Australia</th>      <td>French Polynesia</td>      <td>3920.570216</td>    </tr>    <tr>      <th>Fiji</th>      <td>Palau</td>      <td>3468.037102</td>    </tr>    <tr>      <th>Tonga</th>      <td>Palau</td>      <td>3931.843110</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sqlite3conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'countries.db'</span><span class="token punctuation">)</span>countries<span class="token punctuation">.</span>to_sql<span class="token punctuation">(</span><span class="token string">"countries"</span><span class="token punctuation">,</span> conn<span class="token punctuation">,</span> if_exists<span class="token operator">=</span><span class="token string">"replace"</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>capitals<span class="token punctuation">.</span>to_sql<span class="token punctuation">(</span><span class="token string">"capitals"</span><span class="token punctuation">,</span> conn<span class="token punctuation">,</span> if_exists<span class="token operator">=</span><span class="token string">"replace"</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q21 In our dataset, how many countries are in each continent?</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_sql<span class="token punctuation">(</span><span class="token string">'select continent, count(country) AS `number of countries` from countries group by continent order by `number of countries`'</span><span class="token punctuation">,</span>conn<span class="token punctuation">)</span>df<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>continent</th>      <th>number of countries</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Australia</td>      <td>12</td>    </tr>    <tr>      <th>1</th>      <td>South America</td>      <td>12</td>    </tr>    <tr>      <th>2</th>      <td>North America</td>      <td>24</td>    </tr>    <tr>      <th>3</th>      <td>Asia</td>      <td>38</td>    </tr>    <tr>      <th>4</th>      <td>Europe</td>      <td>41</td>    </tr>    <tr>      <th>5</th>      <td>Africa</td>      <td>47</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q22 How many countries are in each continent? (answer with a plot)</span><span class="token comment" spellcheck="true">#plt.figure(figsize = (10,3)) </span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'continent'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>df<span class="token punctuation">[</span><span class="token string">'number of countries'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>fc <span class="token operator">=</span> <span class="token string">'black'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'continent'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'number of countries'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>rotation<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>([0, 1, 2, 3, 4, 5], &lt;a list of 6 Text xticklabel objects&gt;)</code></pre><p><img src="output_32_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q23 What is the total population of each continent?</span>df_pop <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_sql<span class="token punctuation">(</span><span class="token string">'select continent,sum(population) AS `total population` from countries group by continent order by `total population` DESC'</span><span class="token punctuation">,</span>conn<span class="token punctuation">)</span>bl <span class="token operator">=</span> df_pop<span class="token punctuation">[</span><span class="token string">'total population'</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">1000000</span>df_pop<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token string">'total population (million)'</span><span class="token punctuation">]</span> <span class="token operator">=</span> bldf_pop<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>columns <span class="token operator">=</span> <span class="token string">'total population'</span><span class="token punctuation">,</span>inplace <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>df_pop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>continent</th>      <th>total population (million)</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Asia</td>      <td>3739.902863</td>    </tr>    <tr>      <th>1</th>      <td>Africa</td>      <td>807.299195</td>    </tr>    <tr>      <th>2</th>      <td>Europe</td>      <td>792.053486</td>    </tr>    <tr>      <th>3</th>      <td>North America</td>      <td>515.041558</td>    </tr>    <tr>      <th>4</th>      <td>South America</td>      <td>375.441666</td>    </tr>    <tr>      <th>5</th>      <td>Australia</td>      <td>32.163025</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q24 What is the total population of each continent? (answer with a plot)</span><span class="token comment" spellcheck="true">#plt.figure(figsize = (10,3)) </span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>df_pop<span class="token punctuation">[</span><span class="token string">'continent'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>df_pop<span class="token punctuation">[</span><span class="token string">'total population (million)'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>fc <span class="token operator">=</span> <span class="token string">'black'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'continent'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'total population (million)'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>rotation<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>([0, 1, 2, 3, 4, 5], &lt;a list of 6 Text xticklabel objects&gt;)</code></pre><p><img src="output_34_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q25 What is the population of each country in South America?</span>df_sou <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_sql<span class="token punctuation">(</span><span class="token string">"select country,sum(population) AS population from countries where continent = 'South America' group by country order by population DESC "</span><span class="token punctuation">,</span>conn<span class="token punctuation">)</span>df_sou<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>country</th>      <th>population</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Brazil</td>      <td>188078227</td>    </tr>    <tr>      <th>1</th>      <td>Colombia</td>      <td>43593035</td>    </tr>    <tr>      <th>2</th>      <td>Argentina</td>      <td>39921833</td>    </tr>    <tr>      <th>3</th>      <td>Peru</td>      <td>28302603</td>    </tr>    <tr>      <th>4</th>      <td>Venezuela</td>      <td>25730435</td>    </tr>    <tr>      <th>5</th>      <td>Chile</td>      <td>16134219</td>    </tr>    <tr>      <th>6</th>      <td>Ecuador</td>      <td>13547510</td>    </tr>    <tr>      <th>7</th>      <td>Bolivia</td>      <td>8989046</td>    </tr>    <tr>      <th>8</th>      <td>Paraguay</td>      <td>6506464</td>    </tr>    <tr>      <th>9</th>      <td>Uruguay</td>      <td>3431932</td>    </tr>    <tr>      <th>10</th>      <td>Guyana</td>      <td>767245</td>    </tr>    <tr>      <th>11</th>      <td>Suriname</td>      <td>439117</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q26 What are the top 10 countries that have the largest real GDP?</span>df_top <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_sql<span class="token punctuation">(</span><span class="token string">"select country,population * `gdp-per-capita` AS `real GDP` from countries order by `real GDP` DESC "</span><span class="token punctuation">,</span>conn<span class="token punctuation">)</span>df_top_10 <span class="token operator">=</span> df_top<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>bl <span class="token operator">=</span> df_top_10<span class="token punctuation">[</span><span class="token string">'real GDP'</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">1000000000</span> df_top_10<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token string">'real GDP (billion)'</span><span class="token punctuation">]</span> <span class="token operator">=</span> bldf_top_10<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>columns <span class="token operator">=</span> <span class="token string">'real GDP'</span><span class="token punctuation">,</span>inplace <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>df_top_10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>country</th>      <th>real GDP (billion)</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>United States</td>      <td>11281.191327</td>    </tr>    <tr>      <th>1</th>      <td>China</td>      <td>6569.868565</td>    </tr>    <tr>      <th>2</th>      <td>Japan</td>      <td>3594.473830</td>    </tr>    <tr>      <th>3</th>      <td>India</td>      <td>3176.520785</td>    </tr>    <tr>      <th>4</th>      <td>Germany</td>      <td>2274.855452</td>    </tr>    <tr>      <th>5</th>      <td>France</td>      <td>1680.181354</td>    </tr>    <tr>      <th>6</th>      <td>United Kingdom</td>      <td>1678.873538</td>    </tr>    <tr>      <th>7</th>      <td>Italy</td>      <td>1552.164690</td>    </tr>    <tr>      <th>8</th>      <td>Brazil</td>      <td>1429.394525</td>    </tr>    <tr>      <th>9</th>      <td>Russia</td>      <td>1271.752506</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q27 What are the top 10 countries that have the largest real GDP? (answer with a plot)</span>ot <span class="token operator">=</span> sum<span class="token punctuation">(</span>df_top<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'real GDP'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000000000</span>df_top_10<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'new'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Other'</span><span class="token punctuation">,</span>ot<span class="token punctuation">]</span>df_top_10 <span class="token operator">=</span> df_top_10<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#plt.figure(figsize = (10,3))</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>df_top_10<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>df_top_10<span class="token punctuation">[</span><span class="token string">'real GDP (billion)'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>fc <span class="token operator">=</span> <span class="token string">'black'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'contry'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'GDP (billions)'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>my_y_ticks <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20000</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span>my_y_ticks<span class="token punctuation">)</span> plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>rotation<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], &lt;a list of 11 Text xticklabel objects&gt;)</code></pre><p><img src="output_37_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q28 What are the top 15 countries that have the largest gap between birth rate and death rate?</span>df_gap <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_sql<span class="token punctuation">(</span><span class="token string">"select country,`birth-rate`,`death-rate` from countries order by (`birth-rate`-`death-rate`) DESC  "</span><span class="token punctuation">,</span>conn<span class="token punctuation">)</span>df_gap<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>country</th>      <th>birth-rate</th>      <th>death-rate</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Uganda</td>      <td>47.35</td>      <td>12.24</td>    </tr>    <tr>      <th>1</th>      <td>Yemen</td>      <td>42.89</td>      <td>8.30</td>    </tr>    <tr>      <th>2</th>      <td>Mali</td>      <td>49.82</td>      <td>16.89</td>    </tr>    <tr>      <th>3</th>      <td>Oman</td>      <td>36.24</td>      <td>3.81</td>    </tr>    <tr>      <th>4</th>      <td>Madagascar</td>      <td>41.41</td>      <td>11.11</td>    </tr>    <tr>      <th>5</th>      <td>Burkina Faso</td>      <td>45.62</td>      <td>15.60</td>    </tr>    <tr>      <th>6</th>      <td>Niger</td>      <td>50.73</td>      <td>20.91</td>    </tr>    <tr>      <th>7</th>      <td>Chad</td>      <td>45.73</td>      <td>16.38</td>    </tr>    <tr>      <th>8</th>      <td>Mauritania</td>      <td>40.99</td>      <td>12.16</td>    </tr>    <tr>      <th>9</th>      <td>Burundi</td>      <td>42.22</td>      <td>13.46</td>    </tr>    <tr>      <th>10</th>      <td>Comoros</td>      <td>36.93</td>      <td>8.20</td>    </tr>    <tr>      <th>11</th>      <td>Somalia</td>      <td>45.13</td>      <td>16.63</td>    </tr>    <tr>      <th>12</th>      <td>Marshall Islands</td>      <td>33.05</td>      <td>4.78</td>    </tr>    <tr>      <th>13</th>      <td>Maldives</td>      <td>34.81</td>      <td>7.06</td>    </tr>    <tr>      <th>14</th>      <td>Togo</td>      <td>37.01</td>      <td>9.83</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q29 What are the top 15 countries that have the largest gap between birth rate and death rate? (answer with a plot)</span>df_gap<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>ax <span class="token operator">=</span> df_gap<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">.</span>plot<span class="token punctuation">.</span>barh<span class="token punctuation">(</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">"rate"</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_yticklabels<span class="token punctuation">(</span>df_gap<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">.</span>country<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[Text(0, 0, &#39;Uganda&#39;), Text(0, 0, &#39;Yemen&#39;), Text(0, 0, &#39;Mali&#39;), Text(0, 0, &#39;Oman&#39;), Text(0, 0, &#39;Madagascar&#39;), Text(0, 0, &#39;Burkina Faso&#39;), Text(0, 0, &#39;Niger&#39;), Text(0, 0, &#39;Chad&#39;), Text(0, 0, &#39;Mauritania&#39;), Text(0, 0, &#39;Burundi&#39;), Text(0, 0, &#39;Comoros&#39;), Text(0, 0, &#39;Somalia&#39;), Text(0, 0, &#39;Marshall Islands&#39;), Text(0, 0, &#39;Maldives&#39;), Text(0, 0, &#39;Togo&#39;)]</code></pre><p><img src="output_39_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q30 What is the relationship between death rates and birth rates? (answer with a plot)</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">"font.size"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>ax <span class="token operator">=</span> df_gap<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'death-rate'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'birth-rate'</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'death-rate'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Text(0.5, 0, &#39;death-rate&#39;)</code></pre><p><img src="output_40_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q31 Did you notice the six outliers? Which countries are they?</span>df_part <span class="token operator">=</span> df_gap<span class="token punctuation">[</span>df_gap<span class="token punctuation">[</span><span class="token string">'death-rate'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">16</span><span class="token punctuation">]</span>df_part <span class="token operator">=</span> df_part<span class="token punctuation">[</span>df_part<span class="token punctuation">[</span><span class="token string">'birth-rate'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">]</span>df_1 <span class="token operator">=</span> df_part<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">,</span><span class="token string">'death-rate'</span><span class="token punctuation">,</span><span class="token string">'birth-rate'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>df_1<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'death-rate'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>country</th>      <th>death-rate</th>      <th>birth-rate</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Namibia</td>      <td>18.86</td>      <td>24.32</td>    </tr>    <tr>      <th>1</th>      <td>Zimbabwe</td>      <td>21.84</td>      <td>28.01</td>    </tr>    <tr>      <th>2</th>      <td>South Africa</td>      <td>22.00</td>      <td>18.20</td>    </tr>    <tr>      <th>3</th>      <td>Lesotho</td>      <td>28.71</td>      <td>24.75</td>    </tr>    <tr>      <th>4</th>      <td>Botswana</td>      <td>29.50</td>      <td>23.08</td>    </tr>    <tr>      <th>5</th>      <td>Swaziland</td>      <td>29.74</td>      <td>27.41</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q32 What is the correlation between death rates and birth rates?</span>countries<span class="token punctuation">.</span>corr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'death-rate'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"birth-rate"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>0.3965086117752512</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q33 What is the relationship between GDP per capita and the number of phones per capita?</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">"font.size"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>ax <span class="token operator">=</span> countries<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'gdp-per-capita'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'phones'</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="output_43_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q34 What is the correlation between GDP per capita and number of phones per capita?</span>countries<span class="token punctuation">.</span>corr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'phones'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'gdp-per-capita'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>0.8786946640591311</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q35 What is the relationship between literacy and GDP per capita?</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">"font.size"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>ax <span class="token operator">=</span> countries<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'literacy'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'gdp-per-capita'</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="output_45_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q36 What is the relationship between GDP per capita and death rates?:</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">"font.size"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>ax <span class="token operator">=</span> countries<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'gdp-per-capita'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'death-rate'</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="output_46_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q37 What is the relationship between GDP per capita and birth rates?</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">"font.size"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>ax <span class="token operator">=</span> countries<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'gdp-per-capita'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'birth-rate'</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="output_47_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q38 What is the relationship between GDP per capita and the inverse of birth rates?</span>countries<span class="token punctuation">[</span><span class="token string">'inverse'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span>countries<span class="token punctuation">[</span><span class="token string">'birth-rate'</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">"font.size"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>ax <span class="token operator">=</span> countries<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'gdp-per-capita'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'inverse'</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_48_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q39 fit a y = m * x + n line to the scatter plot in question 38 using the least-squares method; what are the coefficients m and n?</span>countries<span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>res <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>lstsq<span class="token punctuation">(</span>countries<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"gdp-per-capita"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> countries<span class="token punctuation">[</span><span class="token string">"inverse"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rcond<span class="token operator">=</span>None<span class="token punctuation">)</span>coefficients <span class="token operator">=</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># coefficients is (m,n:</span>m <span class="token operator">=</span> coefficients<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># slope</span>n <span class="token operator">=</span> coefficients<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># intercept</span>coef_tuple <span class="token operator">=</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span>coef_tuple<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>(1.8365703926233426e-06, 0.03916624252079354)</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q40 plot the regression line to the scatter plot</span>ax <span class="token operator">=</span> countries<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'gdp-per-capita'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'inverse'</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token string">'gray'</span><span class="token punctuation">)</span>countries<span class="token punctuation">[</span><span class="token string">"fit"</span><span class="token punctuation">]</span> <span class="token operator">=</span> countries<span class="token punctuation">[</span><span class="token string">"gdp-per-capita"</span><span class="token punctuation">]</span> <span class="token operator">*</span> m <span class="token operator">+</span> ncountries<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>line<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'gdp-per-capita'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'fit'</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1a6a75308d0&gt;</code></pre><p><img src="output_50_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CS301-Proj10&quot;&gt;&lt;a href=&quot;#CS301-Proj10&quot; class=&quot;headerlink&quot; title=&quot;CS301_Proj10&quot;&gt;&lt;/a&gt;CS301_Proj10&lt;/h1&gt;&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#I
      
    
    </summary>
    
      <category term="CS301Proj" scheme="http://naixinzhang.github.io/categories/CS301Proj/"/>
    
    
      <category term="CS301 Data Programming I" scheme="http://naixinzhang.github.io/tags/CS301-Data-Programming-I/"/>
    
  </entry>
  
  <entry>
    <title>CS301_Proj9</title>
    <link href="http://naixinzhang.github.io/2019/11/30/cs301/cs301-proj9/"/>
    <id>http://naixinzhang.github.io/2019/11/30/cs301/cs301-proj9/</id>
    <published>2019-11-30T18:32:09.000Z</published>
    <updated>2020-09-21T04:30:35.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CS301-Proj9"><a href="#CS301-Proj9" class="headerlink" title="CS301_Proj9"></a>CS301_Proj9</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In this project, you’ll be analyzing a collection of reviews of Amazon products (adapted from <a href="https://www.kaggle.com/datafiniti/consumer-reviews-of-amazon-products/data" target="_blank" rel="noopener">https://www.kaggle.com/datafiniti/consumer-reviews-of-amazon-products/data</a>).This data is messy!  You’ll face the following challenges:</p><ul><li>data is spread across multiple files</li><li>some files will be CSVs, others JSONs</li><li>the files may be missing values or be too corrupt to parse</li></ul><p>In stage 1, you’ll write code to cleanup the data, representingeverything as Review objects (you’ll create a new type for these).  Instage 2, you’ll analyze your clean data.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#project: p9</span><span class="token comment" spellcheck="true">#submitter: naixinzhang</span><span class="token comment" spellcheck="true">#partner: none</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span> json<span class="token punctuation">,</span> csv<span class="token keyword">from</span> collections <span class="token keyword">import</span> namedtuple<span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict<span class="token keyword">import</span> operator<span class="token keyword">import</span> statistics<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy<span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q1 What are the names of the files present in the data directory?</span><span class="token keyword">def</span> <span class="token function">get_names</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> name<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">)</span>     <span class="token keyword">return</span> sorted<span class="token punctuation">(</span>res<span class="token punctuation">,</span> reverse <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>get_names<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;sample_reviews.json&#39;, &#39;sample_reviews.csv&#39;, &#39;review5.json&#39;, &#39;review5.csv&#39;, &#39;review4.json&#39;, &#39;review4.csv&#39;, &#39;review3.json&#39;, &#39;review3.csv&#39;, &#39;review2.json&#39;, &#39;review2.csv&#39;, &#39;review1.json&#39;, &#39;review1.csv&#39;, &#39;products.json&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q2 What are the paths of all the files in the data directory?</span><span class="token keyword">def</span> <span class="token function">get_path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">return</span> sorted<span class="token punctuation">(</span>res<span class="token punctuation">,</span> reverse <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>get_path<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;data\\sample_reviews.json&#39;, &#39;data\\sample_reviews.csv&#39;, &#39;data\\review5.json&#39;, &#39;data\\review5.csv&#39;, &#39;data\\review4.json&#39;, &#39;data\\review4.csv&#39;, &#39;data\\review3.json&#39;, &#39;data\\review3.csv&#39;, &#39;data\\review2.json&#39;, &#39;data\\review2.csv&#39;, &#39;data\\review1.json&#39;, &#39;data\\review1.csv&#39;, &#39;data\\products.json&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q3 What are the paths of all the CSV files present in data directory?</span><span class="token keyword">def</span> <span class="token function">get_path_end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> name<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.csv'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span>     <span class="token keyword">return</span> sorted<span class="token punctuation">(</span>res<span class="token punctuation">,</span> reverse <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>get_path_end<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;data\\sample_reviews.csv&#39;, &#39;data\\review5.csv&#39;, &#39;data\\review4.csv&#39;, &#39;data\\review3.csv&#39;, &#39;data\\review2.csv&#39;, &#39;data\\review1.csv&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q4 What are the paths of all the files present in data directory, that begin with the phrase 'review'?</span><span class="token keyword">def</span> <span class="token function">get_path_re</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> name<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'review'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">return</span> sorted<span class="token punctuation">(</span>res<span class="token punctuation">,</span> reverse <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>get_path_re<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;data\\review5.json&#39;, &#39;data\\review5.csv&#39;, &#39;data\\review4.json&#39;, &#39;data\\review4.csv&#39;, &#39;data\\review3.json&#39;, &#39;data\\review3.csv&#39;, &#39;data\\review2.json&#39;, &#39;data\\review2.csv&#39;, &#39;data\\review1.json&#39;, &#39;data\\review1.csv&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">read_json</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    json_str <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>json_str<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q5 What are the products in products.json?</span>read_json<span class="token punctuation">(</span><span class="token string">'products.json'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>{&#39;B00QFQRELG&#39;: &#39;Amazon 9W PowerFast Official OEM USB Charger and Power Adapter for Fire Tablets and Kindle eReaders&#39;, &#39;B01BH83OOM&#39;: &#39;Amazon Tap Smart Assistant Alexa enabled (black) Brand New&#39;, &#39;B00ZV9PXP2&#39;: &#39;All-New Kindle E-reader - Black, 6&quot; Glare-Free Touchscreen Display, Wi-Fi - Includes Special Offers&#39;, &#39;B0751RGYJV&#39;: &#39;Amazon Echo (2nd Generation) Smart Assistant Oak Finish Priority Shipping&#39;, &#39;B00IOY8XWQ&#39;: &#39;Kindle Voyage E-reader, 6 High-Resolution Display (300 ppi) with Adaptive Built-in Light, PagePress Sensors, Wi-Fi - Includes Special Offers&#39;, &#39;B0752151W6&#39;: &#39;All-new Echo (2nd Generation) with improved sound, powered by Dolby, and a new design Walnut Finish&#39;, &#39;B018Y226XO&#39;: &#39;Fire Kids Edition Tablet, 7 Display, Wi-Fi, 16 GB, Pink Kid-Proof Case&#39;, &#39;B01ACEKAJY&#39;: &#39;All-New Fire HD 8 Tablet, 8 HD Display, Wi-Fi, 32 GB - Includes Special Offers, Black&#39;, &#39;B01AHB9CYG&#39;: &#39;All-New Fire HD 8 Tablet, 8 HD Display, Wi-Fi, 32 GB - Includes Special Offers, Magenta&#39;, &#39;B01AHB9CN2&#39;: &#39;All-New Fire HD 8 Tablet, 8 HD Display, Wi-Fi, 16 GB - Includes Special Offers, Magenta&#39;, &#39;B00VINDBJK&#39;: &#39;Kindle Oasis E-reader with Leather Charging Cover - Merlot, 6 High-Resolution Display (300 ppi), Wi-Fi - Includes Special Offers&#39;, &#39;B01AHB9C1E&#39;: &#39;Fire HD 8 Tablet with Alexa, 8 HD Display, 32 GB, Tangerine - with Special Offers&#39;, &#39;B018Y229OU&#39;: &#39;Fire Tablet, 7 Display, Wi-Fi, 8 GB - Includes Special Offers, Magenta&#39;}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">read_csv</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>DictReader<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">return</span> reader<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_review</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    reader <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> reader<span class="token punctuation">:</span>        <span class="token keyword">if</span> row<span class="token punctuation">[</span><span class="token string">'review id'</span><span class="token punctuation">]</span> <span class="token operator">==</span> id<span class="token punctuation">:</span>            <span class="token keyword">return</span> row<span class="token punctuation">[</span><span class="token string">'review text'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q6 What is the review text of review with id 1410?</span>get_review<span class="token punctuation">(</span><span class="token string">'1410'</span><span class="token punctuation">,</span><span class="token string">'review1.csv'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>&#39;It does what it is suppose to. No problems with it...&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q7 What is the review text of review with id 69899?</span><span class="token keyword">def</span> <span class="token function">get_revi</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> name<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'review'</span><span class="token punctuation">)</span> <span class="token operator">and</span> name<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.csv'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">)</span>     re <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> res<span class="token punctuation">:</span>        reader <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> reader<span class="token punctuation">:</span>            <span class="token keyword">if</span> row<span class="token punctuation">[</span><span class="token string">'review id'</span><span class="token punctuation">]</span> <span class="token operator">==</span> id<span class="token punctuation">:</span>                <span class="token keyword">return</span> row<span class="token punctuation">[</span>col<span class="token punctuation">]</span>get_revi<span class="token punctuation">(</span><span class="token string">'69899'</span><span class="token punctuation">,</span><span class="token string">'review text'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;I hate amazon app store. Nothing good in there. The tablet is too slow for what I do... it is good for reading only....&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q8 What is the review title of review id 28013?</span>get_revi<span class="token punctuation">(</span><span class="token string">'28013'</span><span class="token punctuation">,</span><span class="token string">'review title'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>&#39;Perfection&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q9 What file contained the review with that id?</span><span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> name<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'review'</span><span class="token punctuation">)</span> <span class="token operator">and</span> name<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.csv'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">)</span>     re <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> res<span class="token punctuation">:</span>        reader <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> reader<span class="token punctuation">:</span>            <span class="token keyword">if</span> row<span class="token punctuation">[</span><span class="token string">'review id'</span><span class="token punctuation">]</span> <span class="token operator">==</span> id<span class="token punctuation">:</span>                <span class="token keyword">return</span> dataget_data<span class="token punctuation">(</span><span class="token string">'28013'</span><span class="token punctuation">,</span><span class="token string">'review title'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;review3.csv&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q10 What is the data stored in sample_reviews.json?</span>read_json<span class="token punctuation">(</span><span class="token string">'sample_reviews.json'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>{&#39;10101&#39;: [&#39;Mikey123456789&#39;, &#39;B00QFQRELG&#39;], &#39;99904&#39;: [&#39;diamond&#39;, &#39;B00QFQRELG&#39;], &#39;89604&#39;: [&#39;Pat91&#39;, &#39;B00QFQRELG&#39;], &#39;58704&#39;: [&#39;Frank&#39;, &#39;B00QFQRELG&#39;], &#39;38104&#39;: [&#39;LADYD92&#39;, &#39;B00QFQRELG&#39;]}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_reviews</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span>jsonfile<span class="token punctuation">)</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span>    re <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    Review <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span><span class="token string">'Review'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'asin'</span><span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">,</span><span class="token string">'text'</span><span class="token punctuation">,</span><span class="token string">'rating'</span><span class="token punctuation">,</span><span class="token string">'do_recommend'</span><span class="token punctuation">,</span><span class="token string">'num_helpful'</span><span class="token punctuation">,</span><span class="token string">'date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> c<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> row<span class="token punctuation">[</span><span class="token string">'review id'</span><span class="token punctuation">]</span><span class="token operator">!=</span> None <span class="token operator">and</span> row<span class="token punctuation">[</span><span class="token string">'review title'</span><span class="token punctuation">]</span><span class="token operator">!=</span>None <span class="token operator">and</span> row<span class="token punctuation">[</span><span class="token string">'review text'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> None <span class="token operator">and</span> row<span class="token punctuation">[</span><span class="token string">'review rating'</span><span class="token punctuation">]</span> <span class="token operator">!=</span>None <span class="token operator">and</span> row<span class="token punctuation">[</span><span class="token string">'review do_recommend'</span><span class="token punctuation">]</span><span class="token operator">!=</span>None <span class="token operator">and</span> row<span class="token punctuation">[</span><span class="token string">'review num_helpful'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> None <span class="token operator">and</span> row<span class="token punctuation">[</span><span class="token string">'review date'</span><span class="token punctuation">]</span><span class="token operator">!=</span>None<span class="token punctuation">:</span>                review <span class="token operator">=</span> Review<span class="token punctuation">(</span>id <span class="token operator">=</span> int<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'review id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>username<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>asin<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>title<span class="token operator">=</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'review title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>text<span class="token operator">=</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'review text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rating<span class="token operator">=</span>int<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'review rating'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>do_recommend<span class="token operator">=</span>eval<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'review do_recommend'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>num_helpful <span class="token operator">=</span> int<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'review num_helpful'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>date<span class="token operator">=</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'review date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                re<span class="token punctuation">.</span>append<span class="token punctuation">(</span>review<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                 <span class="token keyword">continue</span>        <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>            <span class="token keyword">continue</span>     j <span class="token operator">=</span> read_json<span class="token punctuation">(</span>jsonfile<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> j<span class="token punctuation">:</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> re<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">==</span> int<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                     <span class="token keyword">if</span> j<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span>None <span class="token operator">and</span> j<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span> None<span class="token punctuation">:</span>                        re<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> re<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>_replace<span class="token punctuation">(</span>username <span class="token operator">=</span> str<span class="token punctuation">(</span>j<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>asin<span class="token operator">=</span>str<span class="token punctuation">(</span>j<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">continue</span>                <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>                    <span class="token keyword">continue</span>     <span class="token keyword">return</span> re<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q11 What is produced by your function get_reviews('sample_reviews.csv', 'sample_reviews.json')?</span>get_reviews<span class="token punctuation">(</span><span class="token string">'sample_reviews.csv'</span><span class="token punctuation">,</span> <span class="token string">'sample_reviews.json'</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[Review(id=10101, username=&#39;Mikey123456789&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;A charger&#39;, text=&#39;It seems to work just like any other usb plug in charger.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2017-01-02&#39;), Review(id=99904, username=&#39;diamond&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;amazon power fast usb charger&#39;, text=&#39;got this for my kindle 7 tablet . Does an excellent job charging the kindle fire 7 a lot faster than the one it came with the kindle fire&#39;, rating=5, do_recommend=True, num_helpful=2, date=&#39;2016-06-03&#39;), Review(id=89604, username=&#39;Pat91&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;Amazon powerfast wall charger&#39;, text=&#39;Best kindle charger ever. Took 30 minutes to being my kindle back to life.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-11-21&#39;), Review(id=58704, username=&#39;Frank&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;correct plug for kindle&#39;, text=&#39;Quickly charges kindle so son can use it. Worked great right out of the package&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-10-14&#39;), Review(id=38104, username=&#39;LADYD92&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;Fast Charger&#39;, text=&#39;Bought this charger for the Kindle voyage and its great.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-09-30&#39;)]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q12 What are the first ten Review objects in the list produced by get_reviews('review1.csv', 'review1.json')?</span><span class="token keyword">def</span> <span class="token function">get_first_ten_rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    data <span class="token operator">=</span> get_reviews<span class="token punctuation">(</span><span class="token string">'review1.csv'</span><span class="token punctuation">,</span> <span class="token string">'review1.json'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> resget_first_ten_rows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[Review(id=10101, username=&#39;Mikey123456789&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;A charger&#39;, text=&#39;It seems to work just like any other usb plug in charger.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2017-01-02&#39;), Review(id=99904, username=&#39;diamond&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;amazon power fast usb charger&#39;, text=&#39;got this for my kindle 7 tablet . Does an excellent job charging the kindle fire 7 a lot faster than the one it came with the kindle fire&#39;, rating=5, do_recommend=True, num_helpful=2, date=&#39;2016-06-03&#39;), Review(id=89604, username=&#39;Pat91&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;Amazon powerfast wall charger&#39;, text=&#39;Best kindle charger ever. Took 30 minutes to being my kindle back to life.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-11-21&#39;), Review(id=58704, username=&#39;Frank&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;correct plug for kindle&#39;, text=&#39;Quickly charges kindle so son can use it. Worked great right out of the package&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-10-14&#39;), Review(id=38104, username=&#39;LADYD92&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;Fast Charger&#39;, text=&#39;Bought this charger for the Kindle voyage and its great.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-09-30&#39;), Review(id=76407, username=&#39;RobT&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;Good charger&#39;, text=&#39;This wall charger works exactly as described for the Kindle Paperwhite.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-07-22&#39;), Review(id=83810, username=&#39;Iodine&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;Great item&#39;, text=&#39;Have been using this item and it seems to be working quite well.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2017-03-15&#39;), Review(id=32310, username=&#39;Akki&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;Nice one&#39;, text=&#39;Good one and working without any issues. Slim and portable&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-06-24&#39;), Review(id=22010, username=&#39;STRIPYGOOSE&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;not any faster&#39;, text=&#39;it does not charge any faster than regular charger.&#39;, rating=3, do_recommend=False, num_helpful=0, date=&#39;2016-08-18&#39;), Review(id=1410, username=&#39;Jk60&#39;, asin=&#39;B00QFQRELG&#39;, title=&#39;Satisfied&#39;, text=&#39;It does what it is suppose to. No problems with it...&#39;, rating=4, do_recommend=True, num_helpful=0, date=&#39;2016-12-07&#39;)]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q13 What are the last ten Review objects in the list produced by get_reviews('review2.csv', 'review2.json')?</span>get_reviews<span class="token punctuation">(</span><span class="token string">'review2.csv'</span><span class="token punctuation">,</span> <span class="token string">'review2.json'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[Review(id=25136, username=&#39;Angrydagg&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;Nice features for the price.&#39;, text=&#39;For the price this tables does everything I need. so far.&#39;, rating=4, do_recommend=True, num_helpful=0, date=&#39;2015-12-30&#39;), Review(id=84039, username=&#39;Appman2015&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;Great for xmas&#39;, text=&#39;So far I have bought three of these of tablets and they love it&#39;, rating=4, do_recommend=True, num_helpful=1, date=&#39;2015-12-30&#39;), Review(id=22239, username=&#39;SuzieQ&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;great for pre teens&#39;, text=&#39;i am glad i got them for my grand children they r enjoying them&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2015-12-31&#39;), Review(id=70842, username=&#39;Gracie&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;Great kindle&#39;, text=&#39;Purchase was good. Very easy to set up and use. Clear screen. Easy to charge. Would like more storage.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2015-12-31&#39;), Review(id=60542, username=&#39;Jeremyjeepster&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;Good entry level tablet reader.&#39;, text=&#39;His is a very economical entry level tablet. Great for kids or for first time users.&#39;, rating=4, do_recommend=True, num_helpful=0, date=&#39;2015-12-31&#39;), Review(id=9042, username=&#39;kinglowe78&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;Good Deal&#39;, text=&#39;Real good deal. Nice present for those who want a tablet&#39;, rating=4, do_recommend=True, num_helpful=1, date=&#39;2016-01-01&#39;), Review(id=98845, username=&#39;jamal&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;good basic&#39;, text=&#39;Good gift for basic Internet use browsing emails .&#39;, rating=3, do_recommend=True, num_helpful=1, date=&#39;2016-01-01&#39;), Review(id=37045, username=&#39;CaOk&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;decent budget tablet that does what it suppose to&#39;, text=&#39;Nothing fancy. A good budget tablet that does what It suppose to do&#39;, rating=4, do_recommend=True, num_helpful=0, date=&#39;2016-01-01&#39;), Review(id=26745, username=&#39;Tablet2&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;Affordable tablet&#39;, text=&#39;Bought tablet for my five year old nephew. Is affordable and has good specs. Easy to use. Camera and video are good. My nephew has no problem using it&#39;, rating=4, do_recommend=True, num_helpful=0, date=&#39;2016-01-01&#39;), Review(id=3248, username=&#39;Tims54913&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;Great tablet&#39;, text=&#39;If your connected to amazon the tablet is great to use.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-01-02&#39;)]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q14 What is the Review object with review id 84713?</span><span class="token keyword">def</span> <span class="token function">get_object</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> get_reviews<span class="token punctuation">(</span>get_data<span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token string">'review title'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> get_data<span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token string">'review title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'.json'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token punctuation">.</span>id <span class="token operator">==</span> int<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> iget_object<span class="token punctuation">(</span><span class="token string">'84713'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Review(id=84713, username=&#39;mmolly1&#39;, asin=&#39;B01AHB9CN2&#39;, title=&#39;Great product&#39;, text=&#39;This product is very user friendly and it is very lightweight&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2017-01-08&#39;)</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q15 What is the Review object with review id 42931?</span>get_object<span class="token punctuation">(</span><span class="token string">'42931'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>Review(id=42931, username=&#39;tbistone&#39;, asin=&#39;B01BH83OOM&#39;, title=&#39;Amazing&#39;, text=&#39;I literally use this thing every single day. Love it.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-12-20&#39;)</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q16  List the first ten Review objects in the entire dataset, sorted by increasing order of their review ids.</span><span class="token keyword">def</span> <span class="token function">get_entire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        csv_file <span class="token operator">=</span> <span class="token string">'review'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.csv'</span>        json_file <span class="token operator">=</span> <span class="token string">'review'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.json'</span>                  <span class="token keyword">try</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> data <span class="token operator">+</span> get_reviews<span class="token punctuation">(</span>csv_file<span class="token punctuation">,</span>json_file<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>    <span class="token keyword">return</span> sorted<span class="token punctuation">(</span>data<span class="token punctuation">)</span>entire <span class="token operator">=</span> get_entire<span class="token punctuation">(</span><span class="token punctuation">)</span>entire<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[Review(id=74, username=&#39;Wayne&#39;, asin=&#39;B01AHB9CN2&#39;, title=&#39;Kindle upgrade&#39;, text=&#39;Gave this to my wife for Christmas. Upgraded from the original Kindle. She thoroughly enjoys it.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-12-31&#39;), Review(id=82, username=&#39;KKLORRAINE&#39;, asin=&#39;B01AHB9CN2&#39;, title=&#39;Good&#39;, text=&#39;Great for reading and Netflix. Fits nice in purse. Good price.&#39;, rating=4, do_recommend=True, num_helpful=0, date=&#39;2017-04-07&#39;), Review(id=110, username=&#39;nell&#39;, asin=&#39;B00IOY8XWQ&#39;, title=&#39;I love it&#39;, text=&#39;Prefect for all reading conditions and environments. I take it everywhere.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-07-09&#39;), Review(id=122, username=&#39;apple21man&#39;, asin=&#39;B01BH83OOM&#39;, title=&#39;A great assistant&#39;, text=&#39;It works well it takes time for it to know your vocabulary&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2017-01-23&#39;), Review(id=247, username=&#39;rockydon1&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;great&#39;, text=&#39;The Kindle fire is a great product. Will do so many things. Would recommend to anyone.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2015-12-29&#39;), Review(id=251, username=&#39;Cheechu821&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;Great product for its price&#39;, text=&#39;I purchased the tablet as a screen for my drink and it worked just fine&#39;, rating=3, do_recommend=True, num_helpful=0, date=&#39;2016-02-19&#39;), Review(id=263, username=&#39;aram58&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;love the tablet&#39;, text=&#39;I would recommend this tablet to anyone that is interested in one. It is just as good as a Samsung one and half the price.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-07-08&#39;), Review(id=271, username=&#39;NMGPRO&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;Good little tablet&#39;, text=&#39;I purchased this to have a smaller footprint tablet. Could use more popular apps but still great for keeping the library at the tip of the fingers and a camera to boot.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-01-21&#39;), Review(id=275, username=&#39;MikeGA&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;Great for Amazon&#39;, text=&#39;This product is a great entry level tablet. It is limited in both memory and function.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-01-05&#39;), Review(id=327, username=&#39;ritter6281&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;Awesome tablet.&#39;, text=&#39;This tablet is better than any other tablet of the same cost range. My son saved up to buy his own tablet and had similar priced tablets break or have software issues. This tablet has a nice quality screen and it is nice to be able to not be forced to do everything through Amazon despite it being an Amazon tablet. The option of a Best Buy replacement plan is handy when getting the tablet for kids.&#39;, rating=5, do_recommend=True, num_helpful=0, date=&#39;2016-04-09&#39;)]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q17 Output the number of review objects for the product, "Amazon Tap Smart Assistant Alexa enabled (black) Brand New".</span><span class="token keyword">def</span> <span class="token function">get_num</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>    product <span class="token operator">=</span> read_json<span class="token punctuation">(</span><span class="token string">'products.json'</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> entire<span class="token punctuation">:</span>        <span class="token keyword">if</span> product<span class="token punctuation">[</span>i<span class="token punctuation">.</span>asin<span class="token punctuation">]</span> <span class="token operator">==</span> sentence<span class="token punctuation">:</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> len<span class="token punctuation">(</span>res<span class="token punctuation">)</span>get_num<span class="token punctuation">(</span><span class="token string">'Amazon Tap Smart Assistant Alexa enabled (black) Brand New'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>165</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q18 Output the number of review objects for the product, "All-New Fire HD 8 Tablet, 8 HD Display, Wi-Fi, 32 GB - Includes Special Offers, Black".</span>get_num<span class="token punctuation">(</span><span class="token string">'All-New Fire HD 8 Tablet, 8 HD Display, Wi-Fi, 32 GB - Includes Special Offers, Black'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>12</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q19  Find the name of the product with most reviews.</span><span class="token keyword">def</span> <span class="token function">get_most_reviews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    product<span class="token operator">=</span>read_json<span class="token punctuation">(</span><span class="token string">'products.json'</span><span class="token punctuation">)</span>    pro <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> product<span class="token punctuation">:</span>        pro<span class="token punctuation">.</span>append<span class="token punctuation">(</span>product<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    max_num <span class="token operator">=</span> <span class="token number">0</span>    idx <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> get_num<span class="token punctuation">(</span>pro<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> max_num<span class="token punctuation">:</span>            max_num <span class="token operator">=</span> get_num<span class="token punctuation">(</span>pro<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            idx <span class="token operator">=</span> i    <span class="token keyword">return</span> pro<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>get_most_reviews<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;Fire Tablet, 7 Display, Wi-Fi, 8 GB - Includes Special Offers, Magenta&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_asin</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>    product<span class="token operator">=</span>read_json<span class="token punctuation">(</span><span class="token string">'products.json'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> product<span class="token punctuation">:</span>        <span class="token keyword">if</span> product<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> sentence<span class="token punctuation">:</span>            <span class="token keyword">return</span> i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q20 Find the most helpful review(s) of this product.</span><span class="token keyword">def</span> <span class="token function">get_help_review</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    most_help <span class="token operator">=</span> <span class="token number">0</span>    asin <span class="token operator">=</span> get_asin<span class="token punctuation">(</span>get_most_reviews<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> entire<span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token punctuation">.</span>asin <span class="token operator">==</span> asin <span class="token operator">and</span> i<span class="token punctuation">.</span>num_helpful <span class="token operator">></span> most_help<span class="token punctuation">:</span>            most_help <span class="token operator">=</span> i<span class="token punctuation">.</span>num_helpful    <span class="token keyword">for</span> i <span class="token keyword">in</span> entire<span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token punctuation">.</span>asin <span class="token operator">==</span> asin <span class="token operator">and</span> i<span class="token punctuation">.</span>num_helpful <span class="token operator">==</span> most_help<span class="token punctuation">:</span>            <span class="token keyword">return</span> iget_help_review<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Review(id=85969, username=&#39;Beninkc&#39;, asin=&#39;B018Y229OU&#39;, title=&#39;5 star device crippled by amazon&#39;, text=&#39;This device would be the best possible tablet for the money if it had Google Play. However Amazon chose to block access to it. This took their well made tablet with a beautiful screen and great performance from an amazing value to a waste of money. This is my last amazon branded product.If you use a lot of apps or want specific apps shop for another device.&#39;, rating=1, do_recommend=False, num_helpful=20, date=&#39;2016-02-14&#39;)</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q21 How many unique usernames appear in the dataset?</span><span class="token keyword">def</span> <span class="token function">get_unique_username</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> entire    name <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>username <span class="token operator">not</span> <span class="token keyword">in</span> name<span class="token punctuation">:</span>            name<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>username<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>    <span class="token keyword">return</span> len<span class="token punctuation">(</span>name<span class="token punctuation">)</span>get_unique_username<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>3798</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q22 Who are the top 30 prolific users in this dataset?</span><span class="token keyword">def</span> <span class="token function">get_top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name_reviews <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    data <span class="token operator">=</span> entire    reviews <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        reviews<span class="token punctuation">[</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>username<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    reviews <span class="token operator">=</span> dict<span class="token punctuation">(</span>reviews<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> reviews<span class="token punctuation">:</span>        name_reviews<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> len<span class="token punctuation">(</span>reviews<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    sorted_d <span class="token operator">=</span> sorted<span class="token punctuation">(</span>name_reviews<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span>operator<span class="token punctuation">.</span>itemgetter<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>reverse <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>    test_dict <span class="token operator">=</span> dict<span class="token punctuation">(</span>sorted_d<span class="token punctuation">)</span>    <span class="token keyword">return</span> dict<span class="token punctuation">(</span>list<span class="token punctuation">(</span>test_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  get_top<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>{&#39;Dave&#39;: 5, &#39;Steve&#39;: 4, &#39;Mike&#39;: 4, &#39;1234&#39;: 4, &#39;Susan&#39;: 4, &#39;Angie&#39;: 4, &#39;Chris&#39;: 4, &#39;Missy&#39;: 4, &#39;Pete&#39;: 3, &#39;Anonymous&#39;: 3, &#39;Josh&#39;: 3, &#39;Charles&#39;: 3, &#39;Rick&#39;: 3, &#39;Dani&#39;: 3, &#39;mike&#39;: 3, &#39;Bill&#39;: 3, &#39;John&#39;: 3, &#39;Jojo&#39;: 3, &#39;Kindle&#39;: 3, &#39;Bubba&#39;: 3, &#39;kcladyz&#39;: 3, &#39;Frank&#39;: 3, &#39;Grandma&#39;: 3, &#39;Mimi&#39;: 3, &#39;Richard&#39;: 3, &#39;Manny&#39;: 3, &#39;Susie&#39;: 3, &#39;Charlie&#39;: 3, &#39;Michael&#39;: 3, &#39;David&#39;: 3}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q23 Who are the users whose comments have been found helpful at least five times?</span><span class="token keyword">def</span> <span class="token function">get_help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> entire    name_help <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>username <span class="token keyword">in</span> name_help<span class="token punctuation">:</span>            name_help<span class="token punctuation">[</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>username<span class="token punctuation">]</span> <span class="token operator">+=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num_helpful        <span class="token keyword">else</span><span class="token punctuation">:</span>            name_help<span class="token punctuation">[</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>username<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num_helpful    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> name_help<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> value <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">:</span>            res<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">=</span>value    <span class="token keyword">return</span> resget_help<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>{&#39;Ellen&#39;: 10, &#39;Earthdog&#39;: 27, &#39;fenton&#39;: 6, &#39;Dick&#39;: 5, &#39;Junior&#39;: 7, &#39;AshT&#39;: 5, &#39;Stuartc&#39;: 8, &#39;safissad&#39;: 8, &#39;iMax&#39;: 5, &#39;trouble&#39;: 5, &#39;Roberto002007&#39;: 7, &#39;EricO&#39;: 7, &#39;stephfasc22&#39;: 5, &#39;LadyEsco702&#39;: 8, &#39;Karch&#39;: 5, &#39;TerrieT&#39;: 5, &#39;mysixpack&#39;: 6, &#39;Mark&#39;: 5, &#39;Rodge&#39;: 6, &#39;Deejay&#39;: 8, &#39;FrankW&#39;: 5, &#39;Beninkc&#39;: 20, &#39;CarlosEA&#39;: 10, &#39;1Briansapp&#39;: 5, &#39;Quasimodo&#39;: 5, &#39;Kime&#39;: 5}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q24 Find the average rating of each product.</span><span class="token keyword">def</span> <span class="token function">rating</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> entire    temp <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        temp<span class="token punctuation">[</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>asin<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rating<span class="token punctuation">)</span>    temp <span class="token operator">=</span> dict<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    temp_a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> temp<span class="token punctuation">:</span>        temp_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> float<span class="token punctuation">(</span>statistics<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    res <span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    product <span class="token operator">=</span>read_json<span class="token punctuation">(</span><span class="token string">'products.json'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> product<span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> temp_a<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> j<span class="token punctuation">:</span>                res<span class="token punctuation">[</span>product<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp_a<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> resrating<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>{&#39;Amazon 9W PowerFast Official OEM USB Charger and Power Adapter for Fire Tablets and Kindle eReaders&#39;: 4.7272727272727275, &#39;Amazon Tap Smart Assistant Alexa enabled (black) Brand New&#39;: 4.6909090909090905, &#39;All-New Kindle E-reader - Black, 6&quot; Glare-Free Touchscreen Display, Wi-Fi - Includes Special Offers&#39;: 4.590163934426229, &#39;Amazon Echo (2nd Generation) Smart Assistant Oak Finish Priority Shipping&#39;: 5.0, &#39;Kindle Voyage E-reader, 6 High-Resolution Display (300 ppi) with Adaptive Built-in Light, PagePress Sensors, Wi-Fi - Includes Special Offers&#39;: 4.666666666666667, &#39;All-new Echo (2nd Generation) with improved sound, powered by Dolby, and a new design Walnut Finish&#39;: 5.0, &#39;Fire Kids Edition Tablet, 7 Display, Wi-Fi, 16 GB, Pink Kid-Proof Case&#39;: 4.603448275862069, &#39;All-New Fire HD 8 Tablet, 8 HD Display, Wi-Fi, 32 GB - Includes Special Offers, Black&#39;: 4.583333333333333, &#39;All-New Fire HD 8 Tablet, 8 HD Display, Wi-Fi, 32 GB - Includes Special Offers, Magenta&#39;: 4.574468085106383, &#39;All-New Fire HD 8 Tablet, 8 HD Display, Wi-Fi, 16 GB - Includes Special Offers, Magenta&#39;: 4.6, &#39;Kindle Oasis E-reader with Leather Charging Cover - Merlot, 6 High-Resolution Display (300 ppi), Wi-Fi - Includes Special Offers&#39;: 4.866666666666666, &#39;Fire HD 8 Tablet with Alexa, 8 HD Display, 32 GB, Tangerine - with Special Offers&#39;: 3.8333333333333335, &#39;Fire Tablet, 7 Display, Wi-Fi, 8 GB - Includes Special Offers, Magenta&#39;: 4.490408673894913}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">scatter</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> xlabel<span class="token operator">=</span><span class="token string">"please label me!"</span><span class="token punctuation">,</span> ylabel<span class="token operator">=</span><span class="token string">"please label me!"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"x"</span><span class="token punctuation">:</span>x<span class="token punctuation">,</span> <span class="token string">"y"</span><span class="token punctuation">:</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span>    ax <span class="token operator">=</span> df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">"x"</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">"y"</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">"black"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> xlim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> ylim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span>xlabel<span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span>ylabel<span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>get_xaxis<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_major_formatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_scientific<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>get_yaxis<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_major_formatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_scientific<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q25 What is the relationship between the number of reviews and the average rating of a product?</span><span class="token keyword">def</span> <span class="token function">get_rating</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> entire    temp <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        temp<span class="token punctuation">[</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>asin<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rating<span class="token punctuation">)</span>    temp <span class="token operator">=</span> dict<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    temp_rating <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> temp<span class="token punctuation">:</span>        temp_rating<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> float<span class="token punctuation">(</span>statistics<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> temp_rating<span class="token keyword">def</span> <span class="token function">get_num_reviews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> entire    temp_num_reviews <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>asin <span class="token operator">not</span> <span class="token keyword">in</span> temp_num_reviews<span class="token punctuation">:</span>            temp_num_reviews<span class="token punctuation">[</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>asin<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            temp_num_reviews<span class="token punctuation">[</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>asin<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> temp_num_reviewsx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>temp_rating <span class="token operator">=</span> get_rating<span class="token punctuation">(</span><span class="token punctuation">)</span>temp_num_reviews <span class="token operator">=</span> get_num_reviews<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> temp_rating<span class="token punctuation">:</span>    x<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp_rating<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> j <span class="token keyword">in</span> temp_num_reviews<span class="token punctuation">:</span>    y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp_num_reviews<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>scatter<span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>xlabel<span class="token operator">=</span><span class="token string">"Number of reviews"</span><span class="token punctuation">,</span> ylabel<span class="token operator">=</span><span class="token string">"Average rating"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_32_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q26 Remove the outliers from the last plot.</span>temp_rating <span class="token operator">=</span> get_rating<span class="token punctuation">(</span><span class="token punctuation">)</span>temp_num_reviews <span class="token operator">=</span> get_num_reviews<span class="token punctuation">(</span><span class="token punctuation">)</span>res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> temp_rating<span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> temp_num_reviews<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> j<span class="token punctuation">:</span>            res<span class="token punctuation">[</span>temp_rating<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp_num_reviews<span class="token punctuation">[</span>j<span class="token punctuation">]</span>elements <span class="token operator">=</span> numpy<span class="token punctuation">.</span>array<span class="token punctuation">(</span>y<span class="token punctuation">)</span>mean <span class="token operator">=</span> numpy<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>elements<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>sd <span class="token operator">=</span> numpy<span class="token punctuation">.</span>std<span class="token punctuation">(</span>elements<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>final_list <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> y <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> mean <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> sd<span class="token punctuation">)</span><span class="token punctuation">]</span>final_list <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> final_list <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">]</span>re <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> j <span class="token keyword">in</span> final_list<span class="token punctuation">:</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> res<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> value <span class="token operator">==</span> j<span class="token punctuation">:</span>            re<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> valuex_new <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> re<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x_new<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>y_new <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> j <span class="token keyword">in</span> re<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    y_new<span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span>scatter<span class="token punctuation">(</span>y_new<span class="token punctuation">,</span>x_new<span class="token punctuation">,</span>xlabel<span class="token operator">=</span><span class="token string">"Number of reviews"</span><span class="token punctuation">,</span> ylabel<span class="token operator">=</span><span class="token string">"Average rating"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_33_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bucketize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    data <span class="token operator">=</span> entire    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rating <span class="token keyword">in</span> res<span class="token punctuation">:</span>            res<span class="token punctuation">[</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rating<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            res<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rating<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q27 What is the relationship between the rating and the average text length?</span>bucket<span class="token operator">=</span>bucketize<span class="token punctuation">(</span><span class="token punctuation">)</span>text_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> obj <span class="token keyword">in</span> bucket<span class="token punctuation">:</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> bucket<span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> obj <span class="token keyword">in</span> text_dict<span class="token punctuation">:</span>            text_dict<span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>len<span class="token punctuation">(</span>item<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            text_dict<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>len<span class="token punctuation">(</span>item<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>text_dictres <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> rate <span class="token keyword">in</span> text_dict<span class="token punctuation">:</span>    res<span class="token punctuation">[</span>rate<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">(</span>text_dict<span class="token punctuation">[</span>rate<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>len<span class="token punctuation">(</span>text_dict<span class="token punctuation">[</span>rate<span class="token punctuation">]</span><span class="token punctuation">)</span>resx<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> item <span class="token keyword">in</span> res<span class="token punctuation">:</span>    x<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>res<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>xlabel<span class="token operator">=</span><span class="token string">"Rating"</span><span class="token punctuation">,</span> ylabel<span class="token operator">=</span><span class="token string">"Average text length"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_35_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q28 What is the relationship between the rating and the likelihood of the review being helpful?</span>bucket<span class="token operator">=</span>bucketize<span class="token punctuation">(</span><span class="token punctuation">)</span>review <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> obj <span class="token keyword">in</span> bucket<span class="token punctuation">:</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> bucket<span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> obj <span class="token keyword">in</span> review<span class="token punctuation">:</span>            review<span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">.</span>num_helpful<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            review<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">.</span>num_helpful<span class="token punctuation">)</span>te <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> review<span class="token punctuation">:</span>    te<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> len<span class="token punctuation">(</span>review<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>temp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> review<span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> review<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token keyword">in</span> temp<span class="token punctuation">:</span>                temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                temp<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span>t <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> temp<span class="token punctuation">:</span>    t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> len<span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> a <span class="token keyword">in</span> te<span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> t<span class="token punctuation">:</span>        <span class="token keyword">if</span> a <span class="token operator">==</span> j<span class="token punctuation">:</span>            res<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">/</span>te<span class="token punctuation">[</span>j<span class="token punctuation">]</span>x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> item <span class="token keyword">in</span> res<span class="token punctuation">:</span>    x<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>res<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>xlabel<span class="token operator">=</span><span class="token string">"Rating"</span><span class="token punctuation">,</span> ylabel<span class="token operator">=</span><span class="token string">"Percentage of helpful reviews"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_36_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q29 What is the average rating of all reviews which recommend the corresponding products?</span><span class="token keyword">def</span> <span class="token function">get_avg_rating</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    bucket<span class="token operator">=</span>bucketize<span class="token punctuation">(</span><span class="token punctuation">)</span>    recommend <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> obj <span class="token keyword">in</span> bucket<span class="token punctuation">:</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> bucket<span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> item<span class="token punctuation">.</span>do_recommend <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> obj <span class="token keyword">in</span> recommend<span class="token punctuation">:</span>                    recommend<span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">.</span>do_recommend<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    recommend<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">.</span>do_recommend<span class="token punctuation">)</span>    temp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> recommend<span class="token punctuation">:</span>        temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> len<span class="token punctuation">(</span>recommend<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    denominator <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> temp<span class="token punctuation">:</span>        denominator <span class="token operator">+=</span> temp<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    numerator <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> temp<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        numerator <span class="token operator">+=</span> key <span class="token operator">*</span> value    <span class="token keyword">return</span> numerator<span class="token operator">/</span>denominatorget_avg_rating<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>4.607549120992761</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q30 What is the relationship between the rating and the likelihood of the product being recommended?</span>bucket<span class="token operator">=</span>bucketize<span class="token punctuation">(</span><span class="token punctuation">)</span>recommend <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> obj <span class="token keyword">in</span> bucket<span class="token punctuation">:</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> bucket<span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> item<span class="token punctuation">.</span>do_recommend <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> obj <span class="token keyword">in</span> recommend<span class="token punctuation">:</span>                recommend<span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">.</span>do_recommend<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                recommend<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">.</span>do_recommend<span class="token punctuation">)</span>temp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> recommend<span class="token punctuation">:</span>    temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> len<span class="token punctuation">(</span>recommend<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>all <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> obj <span class="token keyword">in</span> bucket<span class="token punctuation">:</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> bucket<span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> obj <span class="token keyword">in</span> all<span class="token punctuation">:</span>            all<span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">.</span>do_recommend<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            all<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">.</span>do_recommend<span class="token punctuation">)</span>tem <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> all<span class="token punctuation">:</span>    tem<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> len<span class="token punctuation">(</span>all<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>temres<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> a <span class="token keyword">in</span> temp<span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> tem<span class="token punctuation">:</span>        <span class="token keyword">if</span> a <span class="token operator">==</span> j<span class="token punctuation">:</span>            res<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">/</span>tem<span class="token punctuation">[</span>j<span class="token punctuation">]</span>x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> item <span class="token keyword">in</span> res<span class="token punctuation">:</span>    x<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>res<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>xlabel<span class="token operator">=</span><span class="token string">"Rating"</span><span class="token punctuation">,</span> ylabel<span class="token operator">=</span><span class="token string">"Percentage of helpful reviews"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_38_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q31 Which words appear most commonly in the text of reviews with rating 5. List only the words that appear more than 1000 times.</span><span class="token keyword">def</span> <span class="token function">get_commonly_text</span><span class="token punctuation">(</span>rate<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    bucket <span class="token operator">=</span> bucketize<span class="token punctuation">(</span><span class="token punctuation">)</span>    tex <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> bucket<span class="token punctuation">[</span>rate<span class="token punctuation">]</span><span class="token punctuation">:</span>        tex<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    res <span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> tex<span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> item<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> j <span class="token keyword">in</span> res<span class="token punctuation">:</span>                res<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                res<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    out <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> res<span class="token punctuation">:</span>        <span class="token keyword">if</span> res<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token operator">></span>num<span class="token punctuation">:</span>            out<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>word<span class="token punctuation">]</span>    <span class="token keyword">return</span> outget_commonly_text<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>{&#39;this&#39;: 1016, &#39;to&#39;: 1442, &#39;my&#39;: 1146, &#39;for&#39;: 1800, &#39;the&#39;: 1740, &#39;and&#39;: 1818, &#39;i&#39;: 1317, &#39;it&#39;: 1286, &#39;a&#39;: 1134}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q32 Which words appear most commonly in the title of reviews with rating 5. List only the words that appear more than 100 times.</span><span class="token keyword">def</span> <span class="token function">get_commonly_title</span><span class="token punctuation">(</span>rate<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    bucket <span class="token operator">=</span> bucketize<span class="token punctuation">(</span><span class="token punctuation">)</span>    tex <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> bucket<span class="token punctuation">[</span>rate<span class="token punctuation">]</span><span class="token punctuation">:</span>        tex<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">.</span>title<span class="token punctuation">)</span>    res <span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> tex<span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> item<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> j <span class="token keyword">in</span> res<span class="token punctuation">:</span>                res<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                res<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    out <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> res<span class="token punctuation">:</span>        <span class="token keyword">if</span> res<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token operator">></span>num<span class="token punctuation">:</span>            out<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>word<span class="token punctuation">]</span>    <span class="token keyword">return</span> outget_commonly_title<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>{&#39;kindle&#39;: 142, &#39;love&#39;: 158, &#39;it&#39;: 137, &#39;a&#39;: 143, &#39;great&#39;: 1093, &#39;the&#39;: 231, &#39;tablet&#39;: 681, &#39;good&#39;: 212, &#39;for&#39;: 617, &#39;awesome&#39;: 108, &#39;kids&#39;: 132, &#39;gift&#39;: 105, &#39;fire&#39;: 104, &#39;price&#39;: 149, &#39;product&#39;: 179, &#39;my&#39;: 138, &#39;to&#39;: 106}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q33 Which words appear most commonly in the title of reviews with rating 1. List only the words that appear more than once.</span>get_commonly_title<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>{&#39;poor&#39;: 2, &#39;tablet&#39;: 4, &#39;a&#39;: 5, &#39;great&#39;: 2, &#39;very&#39;: 3, &#39;disappointed&#39;: 2, &#39;use&#39;: 2, &#39;amazon&#39;: 5, &#39;not&#39;: 8, &#39;good&#39;: 2, &#39;5&#39;: 2, &#39;for&#39;: 2, &#39;with&#39;: 2, &#39;work&#39;: 2, &#39;really&#39;: 2, &#39;to&#39;: 2, &#39;and&#39;: 2, &#39;kindle&#39;: 2, &#39;does&#39;: 2}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q34 Which words appear most commonly in the title of reviews with rating 3 List only the words that appear more than 10 times.</span>get_commonly_title<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>{&#39;great&#39;: 37, &#39;for&#39;: 60, &#39;price&#39;: 18, &#39;ok&#39;: 18, &#39;tablet&#39;: 51, &#39;the&#39;: 18, &#39;good&#39;: 42, &#39;not&#39;: 13, &#39;a&#39;: 17}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_path</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    file_path_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> root<span class="token punctuation">,</span>dirs<span class="token punctuation">,</span>files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> files<span class="token punctuation">:</span>            <span class="token keyword">for</span> file <span class="token keyword">in</span> files<span class="token punctuation">:</span>                    file_path_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> sorted<span class="token punctuation">(</span>file_path_list<span class="token punctuation">,</span>reverse <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q35 List the paths in the helpful directory of rating5 of broken_file.</span>path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'broken_file'</span><span class="token punctuation">,</span><span class="token string">'rating5'</span><span class="token punctuation">,</span><span class="token string">'helpful'</span><span class="token punctuation">)</span>get_path<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;broken_file\\rating5\\helpful\\helpful.json&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q36 List the paths of all the files in the rating4 directory of broken_file.</span>path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'broken_file'</span><span class="token punctuation">,</span><span class="token string">'rating4'</span><span class="token punctuation">)</span>get_path<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;broken_file\\rating4\\very_helpful\\very_helpful.json&#39;, &#39;broken_file\\rating4\\others\\short\\short.json&#39;, &#39;broken_file\\rating4\\others\\others\\others.json&#39;, &#39;broken_file\\rating4\\not_helpful.json&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q37  List the paths of all the files in the broken_file directory.</span>path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'broken_file'</span><span class="token punctuation">)</span>get_path<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;broken_file\\rating5\\others.json&#39;, &#39;broken_file\\rating5\\helpful\\helpful.json&#39;, &#39;broken_file\\rating4\\very_helpful\\very_helpful.json&#39;, &#39;broken_file\\rating4\\others\\short\\short.json&#39;, &#39;broken_file\\rating4\\others\\others\\others.json&#39;, &#39;broken_file\\rating4\\not_helpful.json&#39;, &#39;broken_file\\rating3\\others\\others.json&#39;, &#39;broken_file\\rating3\\long\\long.json&#39;, &#39;broken_file\\others.json&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q38  Combine all the files in broken_file and find the number of unique products being reviewed in these files.</span><span class="token keyword">def</span> <span class="token function">read_broken_json</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span>    reader <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> reader<span class="token keyword">def</span> <span class="token function">get_product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    all_path<span class="token operator">=</span>get_path<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    broken_files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>     <span class="token keyword">for</span> file <span class="token keyword">in</span> all_path<span class="token punctuation">:</span>        broken_files<span class="token punctuation">.</span>append<span class="token punctuation">(</span>read_broken_json<span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span>    complete_list_broken_file <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> files <span class="token keyword">in</span> broken_files<span class="token punctuation">:</span>        <span class="token keyword">for</span> file <span class="token keyword">in</span> files<span class="token punctuation">:</span>            complete_list_broken_file<span class="token punctuation">[</span>file<span class="token punctuation">]</span> <span class="token operator">=</span> files<span class="token punctuation">[</span>file<span class="token punctuation">]</span>    complete_list_broken_file    list_broken_csv <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    review4 <span class="token operator">=</span> read_csv<span class="token punctuation">(</span><span class="token string">'review4.csv'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> review4<span class="token punctuation">:</span>        list_broken_csv<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dict<span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">)</span>    list_broken_csv     list_broken_review_object <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    Review <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span><span class="token string">"Review"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"asin"</span><span class="token punctuation">,</span> <span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"text"</span><span class="token punctuation">,</span> <span class="token string">"rating"</span><span class="token punctuation">,</span> <span class="token string">"do_recommend"</span><span class="token punctuation">,</span> <span class="token string">"num_helpful"</span><span class="token punctuation">,</span> <span class="token string">"date"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>list_broken_csv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         boolean <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> list_broken_csv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"review do_recommend"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"True"</span><span class="token punctuation">:</span>            boolean <span class="token operator">=</span> <span class="token boolean">True</span>        broken_review <span class="token operator">=</span> Review<span class="token punctuation">(</span>int<span class="token punctuation">(</span>list_broken_csv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"review id"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                           complete_list_broken_file<span class="token punctuation">[</span>list_broken_csv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"review id"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                            complete_list_broken_file<span class="token punctuation">[</span>list_broken_csv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"review id"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                           list_broken_csv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"review title"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                            list_broken_csv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"review text"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                            int<span class="token punctuation">(</span>list_broken_csv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"review rating"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                           boolean<span class="token punctuation">,</span>                           int<span class="token punctuation">(</span>list_broken_csv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"review num_helpful"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                           list_broken_csv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"review date"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        list_broken_review_object<span class="token punctuation">.</span>append<span class="token punctuation">(</span>broken_review<span class="token punctuation">)</span>      <span class="token keyword">return</span> list_broken_review_object<span class="token keyword">def</span> <span class="token function">get_num_product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    list_unique_products <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    list_broken_review_object <span class="token operator">=</span> get_product<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> review <span class="token keyword">in</span> list_broken_review_object<span class="token punctuation">:</span>        list_unique_products<span class="token punctuation">.</span>append<span class="token punctuation">(</span>review<span class="token punctuation">.</span>asin<span class="token punctuation">)</span>    <span class="token keyword">return</span> len<span class="token punctuation">(</span>set<span class="token punctuation">(</span>list_unique_products<span class="token punctuation">)</span><span class="token punctuation">)</span>get_num_product<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q39 Combine all the files in the directories data and broken_file, and find the total number of reviews.</span><span class="token keyword">def</span> <span class="token function">get_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    stage1_data <span class="token operator">=</span> entire    stage2_data<span class="token operator">=</span> get_product<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> len<span class="token punctuation">(</span>stage1_data<span class="token punctuation">)</span> <span class="token operator">+</span> len<span class="token punctuation">(</span>stage2_data<span class="token punctuation">)</span>get_num<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>4992</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q40 What is the percentage of change in the average rating changed for the product 'Fire Tablet, 7 Display, Wi-Fi, 8 GB - Includes Special Offers, Magenta', because of the addition of the new data?</span><span class="token keyword">def</span> <span class="token function">get_origin_avg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    products <span class="token operator">=</span> read_json<span class="token punctuation">(</span><span class="token string">"products.json"</span><span class="token punctuation">)</span>    total_grades <span class="token operator">=</span> <span class="token number">0</span>    n <span class="token operator">=</span> <span class="token number">0</span>    entire <span class="token operator">=</span> get_entire<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> review <span class="token keyword">in</span> entire<span class="token punctuation">:</span>        <span class="token keyword">if</span> products<span class="token punctuation">[</span>review<span class="token punctuation">.</span>asin<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Fire Tablet, 7 Display, Wi-Fi, 8 GB - Includes Special Offers, Magenta'</span><span class="token punctuation">:</span>            total_grades <span class="token operator">+=</span> review<span class="token punctuation">.</span>rating            n <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> total_grades <span class="token operator">/</span> n<span class="token keyword">def</span> <span class="token function">get_after_avg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    products <span class="token operator">=</span> read_json<span class="token punctuation">(</span><span class="token string">"products.json"</span><span class="token punctuation">)</span>    total_grades <span class="token operator">=</span> <span class="token number">0</span>    n <span class="token operator">=</span> <span class="token number">0</span>    entire <span class="token operator">=</span> get_entire<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> review <span class="token keyword">in</span> entire<span class="token punctuation">:</span>        <span class="token keyword">if</span> products<span class="token punctuation">[</span>review<span class="token punctuation">.</span>asin<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Fire Tablet, 7 Display, Wi-Fi, 8 GB - Includes Special Offers, Magenta'</span><span class="token punctuation">:</span>            total_grades <span class="token operator">+=</span> review<span class="token punctuation">.</span>rating            n <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true">#add broken files</span>    broken <span class="token operator">=</span> get_product<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">for</span> review <span class="token keyword">in</span> broken<span class="token punctuation">:</span>        <span class="token keyword">if</span> products<span class="token punctuation">[</span>review<span class="token punctuation">.</span>asin<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Fire Tablet, 7 Display, Wi-Fi, 8 GB - Includes Special Offers, Magenta'</span><span class="token punctuation">:</span>            total_grades <span class="token operator">+=</span> review<span class="token punctuation">.</span>rating            n <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> total_grades <span class="token operator">/</span> n<span class="token punctuation">(</span><span class="token punctuation">(</span>get_after_avg<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> get_origin_avg<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> get_origin_avg<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0.31190229022053717</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CS301-Proj9&quot;&gt;&lt;a href=&quot;#CS301-Proj9&quot; class=&quot;headerlink&quot; title=&quot;CS301_Proj9&quot;&gt;&lt;/a&gt;CS301_Proj9&lt;/h1&gt;&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Intro
      
    
    </summary>
    
      <category term="CS301Proj" scheme="http://naixinzhang.github.io/categories/CS301Proj/"/>
    
    
      <category term="CS301 Data Programming I" scheme="http://naixinzhang.github.io/tags/CS301-Data-Programming-I/"/>
    
  </entry>
  
  <entry>
    <title>CS301_Proj8</title>
    <link href="http://naixinzhang.github.io/2019/11/23/cs301/cs301-proj8/"/>
    <id>http://naixinzhang.github.io/2019/11/23/cs301/cs301-proj8/</id>
    <published>2019-11-23T18:32:09.000Z</published>
    <updated>2020-09-21T04:30:35.481Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CS301-Proj8"><a href="#CS301-Proj8" class="headerlink" title="CS301_Proj8"></a>CS301_Proj8</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Having worked our way through soccer and hurricanes, we are now goingto work on the IMDB Movies Dataset. A very exciting fortnight liesahead where we find out some cool facts about our favorite movies,actors, and directors.</p><p>You’ll hand in a <code>main.ipynb</code> file for this project; use the usual<code>#qN</code> format.  Start by downloading the following files: <code>test.py</code>,<code>small_mapping.csv</code>, <code>small_movies.csv</code>, <code>mapping.csv</code>, and<code>movies.csv</code>.</p><h2 id="The-Data"><a href="#The-Data" class="headerlink" title="The Data"></a>The Data</h2><p>By stage 2, you will be mostly working mainly with <code>movies.csv</code> and<code>mapping.csv</code>. The <code>small_movies.csv</code> and <code>small_mapping.csv</code> havebeen provided to help you get your core logic working in stage 1 withsome simpler data.</p><p><code>small_movies.csv</code> and <code>movies.csv</code> have 6 columns: <code>title</code>, <code>year</code>, <code>rating</code>, <code>directors</code>, <code>actors</code>, and <code>genres</code></p><p>Here are a few rows from <code>movies.csv</code>:</p><pre><code>title,year,rating,directors,actors,genrestt1931435,2013,5.6,nm0951698,nm0000134,&quot;Comedy,Drama,Romance&quot;tt0242252,2001,6.1,nm0796124,&quot;nm0048932,nm0000596,nm0004778&quot;,&quot;Drama,History,Romance&quot;tt0066811,1971,6.0,nm0125111,&quot;nm0000621,nm0283499,nm0604702,nm0185281&quot;,&quot;Comedy,Family&quot;</code></pre><p><code>small_mapping.csv</code> and <code>mapping.csv</code> have 2 columns: <code>id</code> and <code>name</code></p><p>Here are a few rows from <code>mapping.csv</code>:</p><pre><code>nm0000001,Fred Astairenm0000004,John Belushinm0000007,Humphrey Bogarttt0110997,The River Wild</code></pre><p>Each of those weird alphanumeric sequence is a unique identifier foreither an actor or a director or a movie title.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#project: p8</span><span class="token comment" spellcheck="true">#submitter: naixinzhang</span><span class="token comment" spellcheck="true">#partner: none</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> csv  <span class="token keyword">import</span> matplotlib<span class="token punctuation">,</span> pandas<span class="token keyword">import</span> copy<span class="token keyword">from</span> numpy <span class="token keyword">import</span> median<span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">process_csv</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    exampleFile <span class="token operator">=</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    exampleReader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>exampleFile<span class="token punctuation">)</span>    <span class="token keyword">return</span> list<span class="token punctuation">(</span>exampleReader<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_mapping</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    csv_data <span class="token operator">=</span> process_csv<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    newdict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> csv_data<span class="token punctuation">:</span>        newdict<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> newdict<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q1 what is returned by your get_mapping("small_mapping.csv") function?</span>mapping <span class="token operator">=</span> get_mapping<span class="token punctuation">(</span><span class="token string">"small_mapping.csv"</span><span class="token punctuation">)</span>mapping<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>{&#39;nm0000131&#39;: &#39;John Cusack&#39;, &#39;nm0000154&#39;: &#39;Mel Gibson&#39;, &#39;nm0000163&#39;: &#39;Dustin Hoffman&#39;, &#39;nm0000418&#39;: &#39;Danny Glover&#39;, &#39;nm0000432&#39;: &#39;Gene Hackman&#39;, &#39;nm0000997&#39;: &#39;Gary Busey&#39;, &#39;nm0001149&#39;: &#39;Richard Donner&#39;, &#39;nm0001219&#39;: &#39;Gary Fleder&#39;, &#39;nm0752751&#39;: &#39;Mitchell Ryan&#39;, &#39;tt0313542&#39;: &#39;Runaway Jury&#39;, &#39;tt0093409&#39;: &#39;Lethal Weapon&#39;}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q2 what is the value associated with the key "nm0752751"?</span>mapping<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'nm0752751'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>&#39;Mitchell Ryan&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q3 what are the values in the mapping associated with keys beginning with "nm"?</span><span class="token keyword">def</span> <span class="token function">get_values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> mapping<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> key<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'nm'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mapping<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> resget_values<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;John Cusack&#39;, &#39;Mel Gibson&#39;, &#39;Dustin Hoffman&#39;, &#39;Danny Glover&#39;, &#39;Gene Hackman&#39;, &#39;Gary Busey&#39;, &#39;Richard Donner&#39;, &#39;Gary Fleder&#39;, &#39;Mitchell Ryan&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q4:which keys in the mapping map to people with a first name of "Gary"?</span><span class="token keyword">def</span> <span class="token function">get_key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>values <span class="token keyword">in</span> mapping<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> values<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'Gary '</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">return</span> resget_key<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;nm0000997&#39;, &#39;nm0001219&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_raw_movies</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    csv_data <span class="token operator">=</span> process_csv<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    header <span class="token operator">=</span> csv_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> csv_data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> key <span class="token keyword">in</span> header<span class="token punctuation">:</span>            value <span class="token operator">=</span> i<span class="token punctuation">[</span>header<span class="token punctuation">.</span>index<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token string">'title'</span><span class="token punctuation">:</span>                dict<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>key<span class="token punctuation">:</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token string">'year'</span><span class="token punctuation">:</span>                   dict<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>key<span class="token punctuation">:</span>int<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token string">'rating'</span><span class="token punctuation">:</span>                dict<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>key<span class="token punctuation">:</span>float<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token string">'directors'</span> <span class="token operator">or</span> key <span class="token operator">==</span> <span class="token string">'actors'</span> <span class="token operator">or</span> key <span class="token operator">==</span><span class="token string">'genres'</span><span class="token punctuation">:</span>                value <span class="token operator">=</span> value<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>                dict<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>key<span class="token punctuation">:</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dict<span class="token punctuation">)</span>    <span class="token keyword">return</span> res <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q5 what does get_raw_movies("small_movies.csv") return?</span>small_movies <span class="token operator">=</span> get_raw_movies<span class="token punctuation">(</span><span class="token string">'small_movies.csv'</span><span class="token punctuation">)</span>small_movies<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[{&#39;title&#39;: &#39;tt0313542&#39;,  &#39;year&#39;: 2003,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;nm0001219&#39;],  &#39;actors&#39;: [&#39;nm0000131&#39;, &#39;nm0000432&#39;, &#39;nm0000163&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;tt0093409&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;nm0001149&#39;],  &#39;actors&#39;: [&#39;nm0000154&#39;, &#39;nm0000418&#39;, &#39;nm0000997&#39;, &#39;nm0752751&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q6 how many genres did the movie at index 0 have?</span><span class="token keyword">def</span> <span class="token function">get_num_genre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> small_movies<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'genres'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> numget_num_genre<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>3</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q7 what is the ID of the last actor listed for the move at index 1?</span><span class="token keyword">def</span> <span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> small_movies<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'actors'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>get_id<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;nm0752751&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_movies</span><span class="token punctuation">(</span>movies_path<span class="token punctuation">,</span> mapping_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    maps <span class="token operator">=</span> get_mapping<span class="token punctuation">(</span>mapping_path<span class="token punctuation">)</span>    mov <span class="token operator">=</span> get_raw_movies<span class="token punctuation">(</span>movies_path<span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>mov<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> maps<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> mov<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                mov<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> maps<span class="token punctuation">.</span>get<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">for</span> t <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>mov<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'actors'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> mov<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'actors'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">:</span>                    mov<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'actors'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span>  <span class="token operator">=</span> maps<span class="token punctuation">.</span>get<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">for</span> p <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>mov<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'directors'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> mov<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'directors'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">:</span>                    mov<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'directors'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span>  <span class="token operator">=</span> maps<span class="token punctuation">.</span>get<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> mov<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">small <span class="token operator">=</span> get_movies<span class="token punctuation">(</span><span class="token string">"small_movies.csv"</span><span class="token punctuation">,</span> <span class="token string">"small_mapping.csv"</span><span class="token punctuation">)</span>small<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[{&#39;title&#39;: &#39;Runaway Jury&#39;,  &#39;year&#39;: 2003,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Gary Fleder&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Gene Hackman&#39;, &#39;Dustin Hoffman&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Lethal Weapon&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Richard Donner&#39;],  &#39;actors&#39;: [&#39;Mel Gibson&#39;, &#39;Danny Glover&#39;, &#39;Gary Busey&#39;, &#39;Mitchell Ryan&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q8  what is small[0]["title"]?</span>small<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>&#39;Runaway Jury&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q9 what is small[1]["actors"]?</span>small<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"actors"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[&#39;Mel Gibson&#39;, &#39;Danny Glover&#39;, &#39;Gary Busey&#39;, &#39;Mitchell Ryan&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q10 what is small[-1]["directors"]?</span>small<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"directors"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[&#39;Richard Donner&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q11 what is small?</span>small<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[{&#39;title&#39;: &#39;Runaway Jury&#39;,  &#39;year&#39;: 2003,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Gary Fleder&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Gene Hackman&#39;, &#39;Dustin Hoffman&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Lethal Weapon&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Richard Donner&#39;],  &#39;actors&#39;: [&#39;Mel Gibson&#39;, &#39;Danny Glover&#39;, &#39;Gary Busey&#39;, &#39;Mitchell Ryan&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}]</code></pre><pre class="line-numbers language-python"><code class="language-python">movies <span class="token operator">=</span> get_movies<span class="token punctuation">(</span><span class="token string">"movies.csv"</span><span class="token punctuation">,</span> <span class="token string">"mapping.csv"</span><span class="token punctuation">)</span>movies<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[{&#39;title&#39;: &#39;The Big Wedding&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Justin Zackham&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Affair of the Necklace&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Charles Shyer&#39;],  &#39;actors&#39;: [&#39;Simon Baker&#39;, &#39;Jonathan Pryce&#39;, &#39;Adrien Brody&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Barefoot Executive&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Robert Butler&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Joe Flynn&#39;, &#39;Harry Morgan&#39;, &#39;Wally Cox&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;I Melt with You&#39;,  &#39;year&#39;: 2011,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Mark Pellington&#39;],  &#39;actors&#39;: [&#39;Thomas Jane&#39;, &#39;Rob Lowe&#39;, &#39;Jeremy Piven&#39;, &#39;Christian McKay&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Vision of Murder: The Story of Donielle&#39;,  &#39;year&#39;: 2000,  &#39;rating&#39;: 4.9,  &#39;directors&#39;: [&#39;Donald Wrye&#39;],  &#39;actors&#39;: [&#39;Thomas Ian Griffith&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Flying Tigers&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;David Miller&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;John Carroll&#39;, &#39;Paul Kelly&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Life Begins for Andy Hardy&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Lewis Stone&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Family&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Luc Besson&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &quot;John D&#39;Leo&quot;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Rachel and the Stranger&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Norman Foster&#39;],  &#39;actors&#39;: [&#39;William Holden&#39;, &#39;Robert Mitchum&#39;, &#39;Gary Gray&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Red River&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Arthur Rosson&#39;, &#39;Howard Hawks&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Montgomery Clift&#39;, &#39;Walter Brennan&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Person to Person&#39;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Dustin Guy Defa&#39;],  &#39;actors&#39;: [&#39;Michael Cera&#39;, &#39;Bene Coopersmith&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Wrong Man&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Alfred Hitchcock&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Anthony Quayle&#39;, &#39;Harold J. Stone&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Playing for Keeps&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 4.1,  &#39;directors&#39;: [&#39;Harvey Weinstein&#39;, &#39;Bob Weinstein&#39;],  &#39;actors&#39;: [&#39;Daniel Jordano&#39;, &#39;Matthew Penn&#39;, &#39;Leon W. Grant&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Doors&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Oliver Stone&#39;],  &#39;actors&#39;: [&#39;Val Kilmer&#39;, &#39;Kyle MacLachlan&#39;, &#39;Frank Whaley&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Shoot-Out at Medicine Bend&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Richard L. Bare&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;James Craig&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Watch the Birdie&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Jack Donohue&#39;],  &#39;actors&#39;: [&#39;Red Skelton&#39;, &#39;Leon Ames&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Rainbow Valley&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;Lloyd Ingraham&#39;,   &#39;John Wayne&#39;,   &quot;George &#39;Gabby&#39; Hayes&quot;,   &#39;LeRoy Mason&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Sexual Tension: Volatile&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Marcelo Briem Stamm&#39;, &#39;Marco Berger&#39;],  &#39;actors&#39;: [&#39;Lucas Lagré&#39;,   &#39;Mario Verón&#39;,   &#39;Javier De Pietro&#39;,   &#39;Lautaro Machaca&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Man from the Alamo&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Chill Wills&#39;, &quot;Hugh O&#39;Brian&quot;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;I Met My Love Again&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;George Cukor&#39;, &#39;Arthur Ripley&#39;, &#39;Joshua Logan&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Alan Marshal&#39;],  &#39;genres&#39;: [&#39;Romance&#39;]}, {&#39;title&#39;: &#39;Bad Company&#39;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Robert Benton&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Barry Brown&#39;, &#39;Jim Davis&#39;, &#39;David Huddleston&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Signed, Sealed, Delivered: One in a Million&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Kevin Fair&#39;],  &#39;actors&#39;: [&#39;Eric Mabius&#39;, &#39;Geoff Gustafson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Man Who Understood Women&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Nunnally Johnson&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Cesare Danova&#39;, &#39;Myron McCormick&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Floundering&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Peter McCarthy&#39;],  &#39;actors&#39;: [&#39;James Le Gros&#39;, &#39;Zander Schloss&#39;, &#39;John Cusack&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Lust Connection&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Jim Wynorski&#39;],  &#39;actors&#39;: [&#39;Frank Harper&#39;, &#39;John Henry Richardson&#39;, &#39;Kirk Flavious&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Another Man, Another Chance&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Claude Lelouch&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Francis Huster&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &quot;The Moon&#39;s Our Home&quot;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Charles Butterworth&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Modern Times&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 8.5,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;Al Ernest Garcia&#39;,   &#39;Charles Chaplin&#39;,   &#39;Henry Bergman&#39;,   &#39;Tiny Sandford&#39;,   &#39;Chester Conklin&#39;,   &#39;Hank Mann&#39;,   &#39;Stanley Blystone&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &quot;Santa Claus Is Comin&#39; to Town&quot;,  &#39;year&#39;: 1970,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Jules Bass&#39;, &#39;Arthur Rankin Jr.&#39;],  &#39;actors&#39;: [&#39;Fred Astaire&#39;, &#39;Mickey Rooney&#39;, &#39;Keenan Wynn&#39;, &#39;Paul Frees&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Small Apartments&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Jonas Åkerlund&#39;],  &#39;actors&#39;: [&#39;Matt Lucas&#39;, &#39;Peter Stormare&#39;, &#39;James Caan&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;What a Way to Go!&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;J. Lee Thompson&#39;],  &#39;actors&#39;: [&#39;Paul Newman&#39;, &#39;Robert Mitchum&#39;, &#39;Dean Martin&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Konrad&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Nell Cox&#39;],  &#39;actors&#39;: [&#39;Max Wright&#39;, &#39;Huckleberry Fox&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Out Cold&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Brendan Malloy&#39;, &#39;Emmett Malloy&#39;],  &#39;actors&#39;: [&#39;Flex Alexander&#39;, &#39;David Denman&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Interstate 60: Episodes of the Road&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Bob Gale&#39;],  &#39;actors&#39;: [&#39;James Marsden&#39;, &#39;Gary Oldman&#39;, &#39;Kurt Russell&#39;, &#39;Matthew Edison&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Comes a Horseman&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Alan J. Pakula&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Jason Robards&#39;, &#39;George Grizzard&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Righteous Kill&#39;,  &#39;year&#39;: 2008,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Jon Avnet&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Al Pacino&#39;, &#39;50 Cent&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Porco Rosso&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Hayao Miyazaki&#39;],  &#39;actors&#39;: [&#39;Shûichirô Moriyama&#39;, &#39;Bunshi Katsura Vi&#39;, &#39;Tsunehiko Kamijô&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;West of the Pecos&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Edward Killy&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Richard Martin&#39;, &#39;Thurston Hall&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Without Reservations&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Mervyn LeRoy&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Don DeFore&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Charley and the Angel&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Vincent McEveety&#39;],  &#39;actors&#39;: [&#39;Fred MacMurray&#39;, &#39;Harry Morgan&#39;, &#39;Kurt Russell&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Silk&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Cirio H. Santiago&#39;],  &#39;actors&#39;: [&#39;Bill McLaughlin&#39;, &#39;Joe Mari Avellana&#39;, &#39;Frederick Bailey&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;China Sky&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;His Private Secretary&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Phil Whitman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Reginald Barlow&#39;, &#39;Alec B. Francis&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Wake of the Red Witch&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Edward Ludwig&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Gig Young&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Legend of the Lost&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Rossano Brazzi&#39;, &#39;Kurt Kasznar&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Stealing Las Vegas&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Francisco Menéndez&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Antonio Fargas&#39;, &#39;Ethan Landry&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Computer Wore Tennis Shoes&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Robert Butler&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Cesar Romero&#39;, &#39;Joe Flynn&#39;, &#39;William Schallert&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Goodfellas&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 8.7,  &#39;directors&#39;: [&#39;Martin Scorsese&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Ray Liotta&#39;, &#39;Joe Pesci&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Better Off Dead...&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Savage Steve Holland&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;David Ogden Stiers&#39;, &#39;Demian Slade&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Go Toward the Light&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Mike Robe&#39;],  &#39;actors&#39;: [&#39;Joshua Harris&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Wagon Wheels&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Charles Barton&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Billy Lee&#39;, &#39;Monte Blue&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;They Were Expendable&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;John Ford&#39;, &#39;Robert Montgomery&#39;],  &#39;actors&#39;: [&#39;Robert Montgomery&#39;, &#39;John Wayne&#39;, &#39;Jack Holt&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &quot;This Man&#39;s Navy&quot;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;Wallace Beery&#39;, &#39;Tom Drake&#39;, &#39;James Gleason&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Santee&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Gary Nelson&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Michael Burns&#39;, &#39;Jay Silverheels&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Lawless Frontier&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;Gordon De Main&#39;,   &#39;John Wayne&#39;,   &quot;George &#39;Gabby&#39; Hayes&quot;,   &#39;Jack Rockwell&#39;,   &#39;Jay Wilsey&#39;,   &#39;Yakima Canutt&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Rio 70&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;Jesús Franco&#39;],  &#39;actors&#39;: [&#39;Richard Wyler&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;]}, {&#39;title&#39;: &#39;Spartacus&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Stanley Kubrick&#39;],  &#39;actors&#39;: [&#39;Kirk Douglas&#39;, &#39;Laurence Olivier&#39;, &#39;Charles Laughton&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Time Trackers&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Howard R. Cohen&#39;],  &#39;actors&#39;: [&#39;Wil Shriner&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Tale of the Princess Kaguya&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Isao Takahata&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;James Marsden&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Kid&#39;,  &#39;year&#39;: 1921,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;F. Blinn&#39;,   &#39;Charles Chaplin&#39;,   &#39;Jackie Coogan&#39;,   &#39;Carl Miller&#39;,   &#39;Albert Austin&#39;,   &#39;Henry Bergman&#39;,   &#39;Edward Biby&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;A Lady Takes a Chance&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Charles Winninger&#39;, &#39;Phil Silvers&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Pacific and Eddy&#39;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Matthew Nourse&#39;],  &#39;actors&#39;: [&#39;Ryan Donowho&#39;, &#39;James Duval&#39;, &#39;Nikki Sudden&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Undercover Blues&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Herbert Ross&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Stanley Tucci&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;The Wrong Boyfriend&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 4.1,  &#39;directors&#39;: [&#39;Anthony DiBlasi&#39;],  &#39;actors&#39;: [&#39;Andrew Jacobs&#39;, &#39;Matthew Boehm&#39;, &#39;James Caan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Ride, Vaquero!&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;Robert Taylor&#39;, &#39;Howard Keel&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Road to Wellville&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Alan Parker&#39;],  &#39;actors&#39;: [&#39;Anthony Hopkins&#39;, &#39;Matthew Broderick&#39;, &#39;John Cusack&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Night Has a Thousand Eyes&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;Edward G. Robinson&#39;, &#39;John Lund&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Graves End&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 8.8,  &#39;directors&#39;: [&#39;James Marlowe&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Steven Williams&#39;, &#39;Daniel Roebuck&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Mr. Muggs Rides Again&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Wallace Fox&#39;],  &#39;actors&#39;: [&#39;Leo Gorcey&#39;,   &#39;Huntz Hall&#39;,   &quot;William &#39;Billy&#39; Benedict&quot;,   &#39;Johnny Duncan&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Once Upon a Time in America&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 8.4,  &#39;directors&#39;: [&#39;Sergio Leone&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;James Woods&#39;, &#39;Treat Williams&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Regina Roma&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Jean-Yves Prate&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Ray Sharkey&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Domino One&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Nick Louvel&#39;],  &#39;actors&#39;: [&#39;Nick Garrison&#39;, &#39;Ken Cheeseman&#39;, &#39;Steve Guttenberg&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Love by Chance&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Gary Harvey&#39;],  &#39;actors&#39;: [&#39;Benjamin Ayres&#39;, &#39;Garwin Sanford&#39;, &#39;John Cassini&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Score&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Frank Oz&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Edward Norton&#39;, &#39;Marlon Brando&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Stranger Wore a Gun&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;André De Toth&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;George Macready&#39;],  &#39;genres&#39;: [&#39;War&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Both Sides of the Law&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Muriel Box&#39;],  &#39;actors&#39;: [&#39;Terence Morgan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Glass Key&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Stuart Heisler&#39;],  &#39;actors&#39;: [&#39;Alan Ladd&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Tennessee Waltz&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Nicolas Gessner&#39;],  &#39;actors&#39;: [&#39;Julian Sands&#39;, &#39;Ed Lauter&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Federal Protection&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Anthony Hickox&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;David Lipper&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &quot;Everybody&#39;s All-American&quot;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Taylor Hackford&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Timothy Hutton&#39;, &#39;John Goodman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Starcrossed&#39;,  &#39;year&#39;: 2014,  &#39;rating&#39;: 4.2,  &#39;directors&#39;: [&#39;Chase Mohseni&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Grant Harvey&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Buchanan Rides Alone&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Craig Stevens&#39;, &#39;Barry Kelley&#39;, &#39;Tol Avery&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Arizona&#39;,  &#39;year&#39;: 1931,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Forrest Stanley&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Yours, Mine and Ours&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Melville Shavelson&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Van Johnson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Romola&#39;,  &#39;year&#39;: 1924,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Henry King&#39;],  &#39;actors&#39;: [&#39;William Powell&#39;, &#39;Ronald Colman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Purple People Eater&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;Linda Shayne&#39;],  &#39;actors&#39;: [&#39;Ned Beatty&#39;, &#39;Bobby Porter&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Circus&#39;,  &#39;year&#39;: 1928,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;Steve Murphy&#39;,   &#39;Charles Chaplin&#39;,   &#39;Al Ernest Garcia&#39;,   &#39;Harry Crocker&#39;,   &#39;George Davis&#39;,   &#39;Henry Bergman&#39;,   &#39;Tiny Sandford&#39;,   &#39;John Rand&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Tycoon&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Richard Wallace&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Cedric Hardwicke&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;7th Cavalry&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Joseph H. Lewis&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Jay C. Flippen&#39;, &#39;Frank Faylen&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;7 Men from Now&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Lee Marvin&#39;, &#39;Walter Reed&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Analyze That&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Harold Ramis&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Billy Crystal&#39;, &#39;Joe Viterelli&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Albuquerque&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &quot;George &#39;Gabby&#39; Hayes&quot;, &#39;Lon Chaney Jr.&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Circus World&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Lloyd Nolan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Rednecks&#39;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;John Birmingham&#39;],  &#39;actors&#39;: [&#39;John Birmingham&#39;, &#39;Royce Hobson&#39;, &#39;Jeremy Ambler&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Dragonfly&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Siko Dolidze&#39;, &#39;Levan Khotivari&#39;],  &#39;actors&#39;: [&#39;Aleksandre Omiadze&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Virginia City&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Michael Curtiz&#39;],  &#39;actors&#39;: [&#39;Errol Flynn&#39;, &#39;Randolph Scott&#39;, &#39;Humphrey Bogart&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Luck of the Irish&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Paul Hoen&#39;],  &#39;actors&#39;: [&#39;Ryan Merriman&#39;, &#39;Henry Gibson&#39;, &#39;Glenndon Chatman&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;4th Man Out&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Andrew Nackman&#39;],  &#39;actors&#39;: [&#39;Parker Young&#39;, &#39;Evan Todd&#39;, &#39;Chord Overstreet&#39;, &#39;Jon Gabrus&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Dangerous Liaisons&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Stephen Frears&#39;],  &#39;actors&#39;: [&#39;John Malkovich&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Raw Nerve&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 4.3,  &#39;directors&#39;: [&#39;David A. Prior&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &quot;Randall &#39;Tex&#39; Cobb&quot;, &#39;Ted Prior&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Teahouse of the August Moon&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Daniel Mann&#39;],  &#39;actors&#39;: [&#39;Marlon Brando&#39;, &#39;Glenn Ford&#39;, &#39;Eddie Albert&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Monkey on My Back&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;André De Toth&#39;],  &#39;actors&#39;: [&#39;Cameron Mitchell&#39;, &#39;Paul Richards&#39;, &#39;Jack Albertson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Runaway Train&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Andrey Konchalovskiy&#39;],  &#39;actors&#39;: [&#39;Jon Voight&#39;, &#39;Eric Roberts&#39;, &#39;Kyle T. Heffner&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Sonny&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Nicolas Cage&#39;],  &#39;actors&#39;: [&#39;James Franco&#39;, &#39;Harry Dean Stanton&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Tall T&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Richard Boone&#39;, &#39;Arthur Hunnicutt&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Thriller&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &quot;She Couldn&#39;t Say No&quot;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Lloyd Bacon&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Arthur Hunnicutt&#39;, &#39;Edgar Buchanan&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Quality of Mercy&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Andreas Gruber&#39;],  &#39;actors&#39;: [&#39;Rainer Egger&#39;, &#39;Oliver Broumis&#39;, &#39;Merab Ninidze&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Stalked by My Doctor&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Doug Campbell&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Jon Briddell&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Eagles Over London&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Enzo G. Castellari&#39;],  &#39;actors&#39;: [&#39;Frederick Stafford&#39;, &#39;Van Johnson&#39;, &#39;Francisco Rabal&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Bopha!&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Morgan Freeman&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Malcolm McDowell&#39;, &#39;Marius Weyers&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Money for Nothing&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Ramón Menéndez&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Michael Madsen&#39;, &#39;Benicio Del Toro&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &quot;Andy Hardy&#39;s Blonde Trouble&quot;,  &#39;year&#39;: 1944,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Lewis Stone&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Billy the Kid&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;David Miller&#39;, &#39;Frank Borzage&#39;],  &#39;actors&#39;: [&#39;Robert Taylor&#39;, &#39;Brian Donlevy&#39;, &#39;Ian Hunter&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Belle Starr&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Irving Cummings&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Dana Andrews&#39;, &#39;Shepperd Strudwick&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Love Is All There Is&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Renée Taylor&#39;, &#39;Joseph Bologna&#39;],  &#39;actors&#39;: [&#39;Joseph Bologna&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Funny Lady&#39;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Herbert Ross&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Omar Sharif&#39;, &#39;Roddy McDowall&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Human Desire&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Fritz Lang&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Broderick Crawford&#39;, &#39;Edgar Buchanan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Dark Blue&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Ron Shelton&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Ving Rhames&#39;, &#39;Scott Speedman&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &quot;Boston Blackie&#39;s Chinese Venture&quot;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Seymour Friedman&#39;],  &#39;actors&#39;: [&#39;Chester Morris&#39;, &#39;Richard Lane&#39;, &#39;Don McGuire&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Intoxicating&#39;,  &#39;year&#39;: 2003,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Mark David&#39;],  &#39;actors&#39;: [&#39;Kirk Harris&#39;, &#39;John Savage&#39;, &#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Grace Is Gone&#39;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Jim Strouse&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Quality of Life&#39;,  &#39;year&#39;: 2004,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Benjamin Morgan&#39;],  &#39;actors&#39;: [&#39;Lane Garrison&#39;, &#39;Brian Burnam&#39;, &#39;Luis Saguar&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Naked Street&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Maxwell Shane&#39;],  &#39;actors&#39;: [&#39;Farley Granger&#39;, &#39;Anthony Quinn&#39;, &#39;Peter Graves&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Cop Car&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Jon Watts&#39;],  &#39;actors&#39;: [&#39;Kevin Bacon&#39;,   &#39;James Freedson-Jackson&#39;,   &#39;Hays Wellford&#39;,   &#39;Shea Whigham&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Texas Cyclone&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;D. Ross Lederman&#39;],  &#39;actors&#39;: [&#39;Wallace MacDonald&#39;, &#39;Tim McCoy&#39;, &#39;Wheeler Oakman&#39;, &#39;John Wayne&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Children of Wax&#39;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 4.2,  &#39;directors&#39;: [&#39;Ivan Nitchev&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;Udo Kier&#39;, &#39;Daniel Bernhardt&#39;, &#39;Hal Ozsan&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Max Havelaar&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Fons Rademakers&#39;],  &#39;actors&#39;: [&#39;Peter Faber&#39;, &#39;Adendu Soesilaningrat&#39;, &#39;Maruli Sitompul&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Back to You and Me&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;David S. Cass Sr.&#39;],  &#39;actors&#39;: [&#39;Dale Midkiff&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Haiku Tunnel&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Josh Kornbluth&#39;, &#39;Jacob Kornbluth&#39;],  &#39;actors&#39;: [&#39;Josh Kornbluth&#39;, &#39;Warren Keith&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Track of the Cat&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Tab Hunter&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Road to El Dorado&#39;,  &#39;year&#39;: 2000,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Jeffrey Katzenberg&#39;, &#39;Bibo Bergeron&#39;, &#39;Don Paul&#39;],  &#39;actors&#39;: [&#39;Kevin Kline&#39;, &#39;Kenneth Branagh&#39;, &#39;Armand Assante&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;For Better, for Worse&#39;,  &#39;year&#39;: 1919,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Cecil B. DeMille&#39;],  &#39;actors&#39;: [&#39;Elliott Dexter&#39;, &#39;Tom Forman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Broken Trust&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Geoffrey Sax&#39;],  &#39;actors&#39;: [&#39;Tom Selleck&#39;, &#39;William Atherton&#39;, &#39;Charles Haid&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Babylon 5: Thirdspace&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Jesús Salvador Treviño&#39;],  &#39;actors&#39;: [&#39;Bruce Boxleitner&#39;, &#39;Richard Biggs&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;7 Chinese Brothers&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Bob Byington&#39;],  &#39;actors&#39;: [&#39;Jason Schwartzman&#39;, &#39;Tunde Adebimpe&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Once Upon a Time in the West&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 8.5,  &#39;directors&#39;: [&#39;Sergio Leone&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Charles Bronson&#39;, &#39;Jason Robards&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Dreamgirls&#39;,  &#39;year&#39;: 2006,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Bill Condon&#39;],  &#39;actors&#39;: [&#39;Jamie Foxx&#39;, &#39;Eddie Murphy&#39;, &#39;Danny Glover&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;A Southern Yankee&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Edward Sedgwick&#39;],  &#39;actors&#39;: [&#39;Red Skelton&#39;, &#39;Brian Donlevy&#39;, &#39;George Coulouris&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;History&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Execution of Private Slovik&#39;,  &#39;year&#39;: 1974,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Lamont Johnson&#39;],  &#39;actors&#39;: [&#39;Martin Sheen&#39;, &#39;Ned Beatty&#39;, &#39;Gary Busey&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Alpha Caper&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Robert Michael Lewis&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Leonard Nimoy&#39;, &#39;James McEachin&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Crimes of the Past&#39;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Garrett Bennett&#39;],  &#39;actors&#39;: [&#39;David Rasche&#39;, &#39;Eric Roberts&#39;, &#39;Chad Lindberg&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Husband for Christmas&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;David DeCoteau&#39;],  &#39;actors&#39;: [&#39;Ricco Ross&#39;, &#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Gardens of Stone&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Francis Ford Coppola&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;James Earl Jones&#39;, &#39;D.B. Sweeney&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;To the Shores of Tripoli&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;H. Bruce Humberstone&#39;],  &#39;actors&#39;: [&#39;John Payne&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Thunderbolt and Lightfoot&#39;,  &#39;year&#39;: 1974,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Michael Cimino&#39;],  &#39;actors&#39;: [&#39;Clint Eastwood&#39;, &#39;Jeff Bridges&#39;, &#39;Geoffrey Lewis&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Gambler&#39;,  &#39;year&#39;: 1974,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Karel Reisz&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Paul Sorvino&#39;, &#39;Morris Carnovsky&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Shepherd of the Hills&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Harry Carey&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Last Tycoon&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Elia Kazan&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Tony Curtis&#39;, &#39;Robert Mitchum&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;R.I.P.D.&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Robert Schwentke&#39;],  &#39;actors&#39;: [&#39;Ryan Reynolds&#39;, &#39;Jeff Bridges&#39;, &#39;Kevin Bacon&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &quot;The Perfect Age of Rock &#39;n&#39; Roll&quot;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Scott D. Rosenbaum&#39;],  &#39;actors&#39;: [&#39;Lukas Haas&#39;, &#39;Kevin Zegers&#39;, &#39;Jason Ritter&#39;, &#39;Billy Morrison&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Advance to the Rear&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;George Marshall&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Melvyn Douglas&#39;, &#39;Jim Backus&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;War&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Cosmic Man&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 4.7,  &#39;directors&#39;: [&#39;Herbert S. Greene&#39;],  &#39;actors&#39;: [&#39;John Carradine&#39;, &#39;Bruce Bennett&#39;, &#39;Paul Langton&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Sci-Fi&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Memento&#39;,  &#39;year&#39;: 2000,  &#39;rating&#39;: 8.5,  &#39;directors&#39;: [&#39;Christopher Nolan&#39;],  &#39;actors&#39;: [&#39;Guy Pearce&#39;, &#39;Joe Pantoliano&#39;, &#39;Mark Boone Junior&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Revenge&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Tony Scott&#39;],  &#39;actors&#39;: [&#39;Kevin Costner&#39;, &#39;Anthony Quinn&#39;, &#39;Tomas Milian&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Morning Patrol&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Nikos Nikolaidis&#39;],  &#39;actors&#39;: [&#39;Takis Spiridakis&#39;, &#39;Nikos Hatzis&#39;],  &#39;genres&#39;: [&#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Vanity Fair&#39;,  &#39;year&#39;: 2004,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Mira Nair&#39;],  &#39;actors&#39;: [&#39;James Purefoy&#39;, &#39;Jonathan Rhys Meyers&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Courtship of Andy Hardy&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Lewis Stone&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Shooter&#39;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Antoine Fuqua&#39;],  &#39;actors&#39;: [&#39;Mark Wahlberg&#39;, &#39;Michael Peña&#39;, &#39;Danny Glover&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Heaven with a Gun&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Lee H. Katzin&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;John Anderson&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Set It Up&#39;,  &#39;year&#39;: 2018,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Claire Scanlon&#39;],  &#39;actors&#39;: [&#39;Glen Powell&#39;, &#39;Taye Diggs&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;We Are Not Animals&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Alejandro Agresti&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Paul Hipp&#39;, &#39;Kevin Morris&#39;, &#39;Alejandro Agresti&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Hide and Seek&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;John Polson&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Horror&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Wizard of Lies&#39;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Barry Levinson&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Alessandro Nivola&#39;, &#39;Nathan Darrow&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Strange Woman&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Douglas Sirk&#39;, &#39;Edgar G. Ulmer&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Louis Hayward&#39;, &#39;Gene Lockhart&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Dragon Ball Z: Bojack Unbound&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Yoshihiro Ueda&#39;],  &#39;actors&#39;: [&#39;Toshio Furukawa&#39;, &#39;Takeshi Kusao&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Animation&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Bullets Over Broadway&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Woody Allen&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Chazz Palminteri&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Enemy from Space&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Val Guest&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;John Longden&#39;, &#39;Sidney James&#39;, &#39;Bryan Forbes&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Lonely Trail&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Joseph Kane&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Cy Kendall&#39;, &#39;Bob Kortman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Lightning, the White Stallion&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;William A. Levey&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Billy Wesley&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Never a Dull Moment&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;George Marshall&#39;],  &#39;actors&#39;: [&#39;Fred MacMurray&#39;, &#39;William Demarest&#39;, &#39;Andy Devine&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Is Anybody There?&#39;,  &#39;year&#39;: 2008,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;John Crowley&#39;],  &#39;actors&#39;: [&#39;Michael Caine&#39;, &#39;Bill Milner&#39;, &#39;Ralph Riach&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Hateful Eight&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Quentin Tarantino&#39;],  &#39;actors&#39;: [&#39;Samuel L. Jackson&#39;, &#39;Kurt Russell&#39;, &#39;Walton Goggins&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Night Train&#39;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Brian King&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Steve Zahn&#39;, &#39;Matthias Schweighöfer&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Horror&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &quot;I&#39;m a Fool&quot;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Noel Black&#39;],  &#39;actors&#39;: [&#39;Ron Howard&#39;, &#39;Otis Calef&#39;, &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Johnny Got His Gun&#39;,  &#39;year&#39;: 2008,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Rowan Joseph&#39;],  &#39;actors&#39;: [&#39;Matty Ferraro&#39;, &#39;Rowan Joseph&#39;, &#39;Ben McKenzie&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Village Barbershop&#39;,  &#39;year&#39;: 2008,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Chris J. Ford&#39;],  &#39;actors&#39;: [&#39;John Ratzenberger&#39;, &#39;George McRae&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Mean Streets&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Martin Scorsese&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Harvey Keitel&#39;, &#39;David Proval&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Marcus-Nelson Murders&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;Joseph Sargent&#39;],  &#39;actors&#39;: [&#39;Telly Savalas&#39;, &#39;Marjoe Gortner&#39;, &#39;José Ferrer&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Hook Line and Sinker&#39;,  &#39;year&#39;: 1930,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Edward F. Cline&#39;],  &#39;actors&#39;: [&#39;Bert Wheeler&#39;, &#39;Robert Woolsey&#39;, &#39;Ralf Harolde&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Haunted Gold&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Mack V. Wright&#39;],  &#39;actors&#39;: [&#39;Otto Hoffman&#39;,   &#39;John Wayne&#39;,   &#39;Duke&#39;,   &#39;Harry Woods&#39;,   &#39;Erville Alderson&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Mystery&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Westward Ho&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Frank McGlynn Jr.&#39;, &#39;Jim Farley&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Pocketful of Miracles&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Frank Capra&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &quot;Arthur O&#39;Connell&quot;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Vanished Without a Trace&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Douglas Barr&#39;],  &#39;actors&#39;: [&#39;William R. Moses&#39;, &#39;Joshua Peace&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Phantom Love&#39;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Nina Menkes&#39;],  &#39;actors&#39;: [&#39;Michael Joseph Carr&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Good Shepherd&#39;,  &#39;year&#39;: 2006,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Robert De Niro&#39;],  &#39;actors&#39;: [&#39;Matt Damon&#39;, &#39;Robert De Niro&#39;, &#39;Alec Baldwin&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Command Decision&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Sam Wood&#39;],  &#39;actors&#39;: [&#39;Clark Gable&#39;, &#39;Walter Pidgeon&#39;, &#39;Van Johnson&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Coroner Creek&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;George Macready&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Dark Moon Rising&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Justin Price&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Billy Blanks&#39;],  &#39;genres&#39;: [&#39;Fantasy&#39;]}, {&#39;title&#39;: &quot;Maria&#39;s Lovers&quot;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Andrey Konchalovskiy&#39;],  &#39;actors&#39;: [&#39;John Savage&#39;, &#39;Keith Carradine&#39;, &#39;Robert Mitchum&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Butcher&#39;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Jesse V. Johnson&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Robert Davi&#39;, &#39;Keith David&#39;, &#39;Geoffrey Lewis&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Wag the Dog&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Barry Levinson&#39;],  &#39;actors&#39;: [&#39;Dustin Hoffman&#39;, &#39;Robert De Niro&#39;, &#39;Woody Harrelson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;While You Were Dating&#39;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;David Winning&#39;],  &#39;actors&#39;: [&#39;William Baldwin&#39;, &#39;Robert Moloney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Christmas Eve&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Edwin L. Marin&#39;],  &#39;actors&#39;: [&#39;George Raft&#39;, &#39;George Brent&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Schizopolis&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Steven Soderbergh&#39;],  &#39;actors&#39;: [&#39;Darrin Dickerson&#39;,   &#39;Steven Soderbergh&#39;,   &#39;Miles Hardy&#39;,   &#39;Scott Allen&#39;,   &#39;Marcus Lyle Brown&#39;,   &#39;Silas Cooper&#39;,   &#39;C.C. Courtney&#39;,   &#39;Sonny Cranch&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Fantasy&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Harimaya Bridge&#39;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Aaron Woolfolk&#39;],  &#39;actors&#39;: [&#39;Bennet Guillory&#39;, &#39;Danny Glover&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Son of Monte Cristo&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Rowland V. Lee&#39;],  &#39;actors&#39;: [&#39;Louis Hayward&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Love &amp; Mercy&#39;,  &#39;year&#39;: 2014,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Bill Pohlad&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Paul Dano&#39;, &#39;Paul Giamatti&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Tango &amp; Cash&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Albert Magnoli&#39;, &#39;Andrey Konchalovskiy&#39;],  &#39;actors&#39;: [&#39;Sylvester Stallone&#39;, &#39;Kurt Russell&#39;, &#39;Jack Palance&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Out of the Past&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Jacques Tourneur&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Kirk Douglas&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &quot;Soul&#39;s Midnight&quot;,  &#39;year&#39;: 2006,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Harry Basil&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;Robert Floyd&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;One Minute to Zero&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Tay Garnett&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;William Talman&#39;, &#39;Charles McGraw&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Iron Man&#39;,  &#39;year&#39;: 2008,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Jon Favreau&#39;],  &#39;actors&#39;: [&#39;Robert Downey Jr.&#39;, &#39;Terrence Howard&#39;, &#39;Jeff Bridges&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 8.4,  &#39;directors&#39;: [&#39;Stanley Kubrick&#39;],  &#39;actors&#39;: [&#39;Peter Sellers&#39;,   &#39;George C. Scott&#39;,   &#39;Sterling Hayden&#39;,   &#39;Keenan Wynn&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Dirty Grandpa&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Dan Mazer&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Zac Efron&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Last Mile&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Howard W. Koch&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;,   &#39;Frank Overton&#39;,   &#39;Michael Constantine&#39;,   &#39;John Vari&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Last Train from Gun Hill&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;John Sturges&#39;],  &#39;actors&#39;: [&#39;Kirk Douglas&#39;, &#39;Anthony Quinn&#39;, &#39;Earl Holliman&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Lethal Weapon 2&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Richard Donner&#39;],  &#39;actors&#39;: [&#39;Mel Gibson&#39;, &#39;Danny Glover&#39;, &#39;Joe Pesci&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Blizhniy Boy: The Ultimate Fighter&#39;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Erken Ialgashev&#39;],  &#39;actors&#39;: [&#39;Cung Le&#39;, &#39;David Carradine&#39;, &#39;Eric Roberts&#39;, &#39;Gary Busey&#39;],  &#39;genres&#39;: [&#39;Action&#39;]}, {&#39;title&#39;: &#39;Last Vegas&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Jon Turteltaub&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;,   &#39;Michael Douglas&#39;,   &#39;Morgan Freeman&#39;,   &#39;Kevin Kline&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Power 98&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;Jaime Hellman&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Jason Gedrick&#39;, &#39;Jack Betts&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Error in Judgment&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 4.7,  &#39;directors&#39;: [&#39;Scott P. Levy&#39;],  &#39;actors&#39;: [&#39;Joe Mantegna&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Everything That Rises&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Dennis Quaid&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Harve Presnell&#39;, &#39;Meat Loaf&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Simpatico&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Matthew Warchus&#39;],  &#39;actors&#39;: [&#39;Nick Nolte&#39;, &#39;Jeff Bridges&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Attila&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Pietro Francisci&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Henri Vidal&#39;, &#39;Claude Laydu&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Gazebo&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;George Marshall&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Carl Reiner&#39;, &#39;John McGiver&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;3:10 to Yuma&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Delmer Daves&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Van Heflin&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Return of Swamp Thing&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Jim Wynorski&#39;],  &#39;actors&#39;: [&#39;Dick Durock&#39;, &#39;Louis Jourdan&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Breaking Away&#39;,  &#39;year&#39;: 1979,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Peter Yates&#39;],  &#39;actors&#39;: [&#39;Paul Dooley&#39;,   &#39;Dennis Christopher&#39;,   &#39;Dennis Quaid&#39;,   &#39;Daniel Stern&#39;,   &#39;Jackie Earle Haley&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Barabbas&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Richard Fleischer&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Arthur Kennedy&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Kin&#39;,  &#39;year&#39;: 2018,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Josh Baker&#39;, &#39;Jonathan Baker&#39;],  &#39;actors&#39;: [&#39;Myles Truitt&#39;, &#39;Jack Reynor&#39;, &#39;Dennis Quaid&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Children on Their Birthdays&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Mark Medoff&#39;],  &#39;actors&#39;: [&#39;Christopher McDonald&#39;, &#39;Tom Arnold&#39;, &#39;Joe Pichler&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Kiss Me Goodbye&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Robert Mulligan&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Jeff Bridges&#39;, &#39;Paul Dooley&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Fantasy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;A Slight Case of Larceny&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Don Weis&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Eddie Bracken&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Baby Face Nelson&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Don Siegel&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Cedric Hardwicke&#39;, &#39;Leo Gordon&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;I Can Get It for You Wholesale&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Michael Gordon&#39;],  &#39;actors&#39;: [&#39;Dan Dailey&#39;, &#39;George Sanders&#39;, &#39;Sam Jaffe&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Paradise Canyon&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Carl Pierson&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Reed Howes&#39;, &#39;Earle Hodgins&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &quot;It Can&#39;t Be!&quot;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Leonid Gayday&#39;],  &#39;actors&#39;: [&#39;Mikhail Pugovkin&#39;, &#39;Vyacheslav Nevinnyy&#39;, &#39;Mikhail Svetin&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Long Voyage Home&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Thomas Mitchell&#39;, &#39;Ian Hunter&#39;, &#39;Ward Bond&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Leaves of the Tree&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Ante Novakovic&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Armand Assante&#39;, &#39;Federico Castelluccio&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Coco&#39;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 8.4,  &#39;directors&#39;: [&#39;Lee Unkrich&#39;, &#39;Adrian Molina&#39;],  &#39;actors&#39;: [&#39;Anthony Gonzalez&#39;, &#39;Gael García Bernal&#39;, &#39;Benjamin Bratt&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;From the Earth to the Moon&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Byron Haskin&#39;],  &#39;actors&#39;: [&#39;Joseph Cotten&#39;, &#39;George Sanders&#39;, &#39;Don Dubbins&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Fantasy&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Creeper&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Matthew Gunnoe&#39;],  &#39;actors&#39;: [&#39;Wilmar Frometta&#39;,   &#39;Darryl Baldwin&#39;,   &#39;David Vogel&#39;,   &#39;Ryan Charles&#39;,   &#39;Roy Knect&#39;,   &#39;Luis Reyes&#39;],  &#39;genres&#39;: [&#39;Horror&#39;]}, {&#39;title&#39;: &#39;Looking for an Echo&#39;,  &#39;year&#39;: 2000,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Martin Davidson&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;Joe Grifasi&#39;, &#39;Tom Mason&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Charles Bradley: Soul of America&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Poull Brien&#39;],  &#39;actors&#39;: [&#39;Alex Everett&#39;, &#39;Jonny Santos&#39;],  &#39;genres&#39;: [&#39;Music&#39;]}, {&#39;title&#39;: &#39;Soul Surfer&#39;,  &#39;year&#39;: 2011,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Sean McNamara&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Hondo&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ward Bond&#39;, &#39;Michael Pate&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Convoy&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Sam Peckinpah&#39;],  &#39;actors&#39;: [&#39;Kris Kristofferson&#39;, &#39;Ernest Borgnine&#39;, &#39;Burt Young&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &quot;Everything&#39;s Ducky&quot;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 4.7,  &#39;directors&#39;: [&#39;Don Taylor&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Buddy Hackett&#39;, &#39;Jackie Cooper&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Smith!&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&quot;Michael O&#39;Herlihy&quot;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Dean Jagger&#39;, &#39;Keenan Wynn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;True Colors&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Herbert Ross&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;James Spader&#39;, &#39;Mandy Patinkin&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Repossessed&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Bob Logan&#39;],  &#39;actors&#39;: [&#39;Leslie Nielsen&#39;, &#39;Ned Beatty&#39;, &#39;Anthony Starke&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Fantasy&#39;, &#39;Horror&#39;]}, {&#39;title&#39;: &#39;The Boston Strangler&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Richard Fleischer&#39;],  &#39;actors&#39;: [&#39;Tony Curtis&#39;, &#39;Henry Fonda&#39;, &#39;George Kennedy&#39;, &#39;Mike Kellin&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Diamond Arm&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 8.5,  &#39;directors&#39;: [&#39;Leonid Gayday&#39;],  &#39;actors&#39;: [&#39;Yuriy Nikulin&#39;, &#39;Andrey Mironov&#39;, &#39;Anatoliy Papanov&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Best of the Best&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Robert Radler&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;James Earl Jones&#39;, &#39;Phillip Rhee&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;The Mind Reader&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Roy Del Ruth&#39;],  &#39;actors&#39;: [&#39;Warren William&#39;, &#39;Allen Jenkins&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;War, Inc.&#39;,  &#39;year&#39;: 2008,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Joshua Seftel&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Hatari!&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Howard Hawks&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Hardy Krüger&#39;, &#39;Red Buttons&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Night Walker&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;William Castle&#39;],  &#39;actors&#39;: [&#39;Robert Taylor&#39;, &#39;Hayden Rorke&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Contender&#39;,  &#39;year&#39;: 2000,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Rod Lurie&#39;],  &#39;actors&#39;: [&#39;Gary Oldman&#39;, &#39;Jeff Bridges&#39;, &#39;Christian Slater&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Yamato Takeru&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Takao Okawara&#39;],  &#39;actors&#39;: [&#39;Masahiro Takashima&#39;, &#39;Hiroshi Fujioka&#39;, &#39;Hiroshi Abe&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Till the End of Time&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Edward Dmytryk&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Guy Madison&#39;, &#39;Bill Williams&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Telegraph Trail&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Tenny Wright&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Duke&#39;, &#39;Frank McHugh&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Pather Panchali&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 8.4,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Kanu Bannerjee&#39;, &#39;Subir Banerjee&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Lolly-Madonna XXX&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Richard C. Sarafian&#39;],  &#39;actors&#39;: [&#39;Rod Steiger&#39;, &#39;Robert Ryan&#39;, &#39;Jeff Bridges&#39;, &#39;Scott Wilson&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Reunion at Fairborough&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Herbert Wise&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Red Buttons&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;She Wore a Yellow Ribbon&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;John Agar&#39;, &#39;Ben Johnson&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Le Tigre se parfume à la dynamite&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Claude Chabrol&#39;],  &#39;actors&#39;: [&#39;Roger Hanin&#39;, &#39;Michel Bouquet&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;The Morning After&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Sidney Lumet&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Raul Julia&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Mystery&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Pop Star&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 5.0,  &#39;directors&#39;: [&#39;Carlos Portugal&#39;],  &#39;actors&#39;: [&#39;Ross Thomas&#39;, &#39;Robert Adamson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Last of the Mohicans&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Henry Wilcoxon&#39;, &#39;Bruce Cabot&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Beginning or the End&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Norman Taurog&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;Robert Walker&#39;, &#39;Tom Drake&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Radioland Murders&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Mel Smith&#39;],  &#39;actors&#39;: [&#39;Brian Benben&#39;, &#39;Ned Beatty&#39;, &#39;George Burns&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Girl Crazy&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;Bert Wheeler&#39;, &#39;Robert Woolsey&#39;, &#39;Eddie Quillan&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Zoe&#39;,  &#39;year&#39;: 2018,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Drake Doremus&#39;],  &#39;actors&#39;: [&#39;Ewan McGregor&#39;, &#39;Theo James&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Last Days in the Desert&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Rodrigo García&#39;],  &#39;actors&#39;: [&#39;Ewan McGregor&#39;, &#39;Ciarán Hinds&#39;, &#39;Tye Sheridan&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Popsy Pop&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;Jean Herman&#39;],  &#39;actors&#39;: [&#39;Stanley Baker&#39;, &#39;Henri Charrière&#39;, &#39;Georges Aminel&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;New York, New York&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Martin Scorsese&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Lionel Stander&#39;, &#39;Barry Primus&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;The Trail of the Lonesome Pine&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Fred MacMurray&#39;, &#39;Henry Fonda&#39;, &#39;Fred Stone&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Woman Who Sinned&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 5.0,  &#39;directors&#39;: [&#39;Michael Switzer&#39;],  &#39;actors&#39;: [&#39;Tim Matheson&#39;, &#39;Michael Dudikoff&#39;, &#39;John Vernon&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Ghost and Mrs. Muir&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Joseph L. Mankiewicz&#39;],  &#39;actors&#39;: [&#39;Rex Harrison&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Ambush Bay&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Ron Winston&#39;],  &#39;actors&#39;: [&quot;Hugh O&#39;Brian&quot;,   &#39;Mickey Rooney&#39;,   &#39;James Mitchum&#39;,   &#39;Peter Masterson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Operation Pacific&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;George Waggner&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ward Bond&#39;, &#39;Scott Forbes&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Balls Out&#39;,  &#39;year&#39;: 2014,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Andrew Disney&#39;],  &#39;actors&#39;: [&#39;Jake Lacy&#39;, &#39;Beck Bennett&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Flying Leathernecks&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Nicholas Ray&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Robert Ryan&#39;, &#39;Don Taylor&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Cape Fear&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Martin Scorsese&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Nick Nolte&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;11:59&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Jamin Winans&#39;],  &#39;actors&#39;: [&#39;Raymond Andrew Bailey&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Sci-Fi&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Darc&#39;,  &#39;year&#39;: 2018,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Julius R. Nasso&#39;],  &#39;actors&#39;: [&#39;Tony Schiena&#39;, &#39;Armand Assante&#39;, &#39;Kippei Shîna&#39;, &#39;Shô Ikushima&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Guns of Navarone&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;J. Lee Thompson&#39;],  &#39;actors&#39;: [&#39;David Niven&#39;, &#39;Gregory Peck&#39;, &#39;Anthony Quinn&#39;, &#39;Anthony Quayle&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &quot;Va&#39; dove ti porta il cuore&quot;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Cristina Comencini&#39;],  &#39;actors&#39;: [&#39;Massimo Ghini&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Switching Channels&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Ted Kotcheff&#39;],  &#39;actors&#39;: [&#39;Burt Reynolds&#39;, &#39;Christopher Reeve&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;No Reservations&#39;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Scott Hicks&#39;],  &#39;actors&#39;: [&#39;Aaron Eckhart&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;New Frontier&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;George Sherman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ray Corrigan&#39;, &#39;Raymond Hatton&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Long Wait&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Victor Saville&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Charles Coburn&#39;, &#39;Gene Evans&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Spy Kids 2: Island of Lost Dreams&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Robert Rodriguez&#39;],  &#39;actors&#39;: [&#39;Daryl Sabara&#39;, &#39;Antonio Banderas&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Treasure of the Silver Lake&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Harald Reinl&#39;],  &#39;actors&#39;: [&#39;Pierre Brice&#39;, &#39;Lex Barker&#39;, &#39;Herbert Lom&#39;, &#39;Götz George&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Something to Talk About&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Lasse Hallström&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Robert Duvall&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Men Who Stare at Goats&#39;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Grant Heslov&#39;],  &#39;actors&#39;: [&#39;Ewan McGregor&#39;,   &#39;George Clooney&#39;,   &#39;Kevin Spacey&#39;,   &#39;Jeff Bridges&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Blood Alley&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;John Wayne&#39;, &#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Paul Fix&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;]}, {&#39;title&#39;: &#39;Wyoming Outlaw&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;George Sherman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;,   &#39;Ray Corrigan&#39;,   &#39;Raymond Hatton&#39;,   &quot;Don &#39;Red&#39; Barry&quot;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Plunder of the Sun&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Francis L. Sullivan&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Sinbad, the Sailor&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Richard Wallace&#39;],  &#39;actors&#39;: [&#39;Douglas Fairbanks Jr.&#39;, &#39;Walter Slezak&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Fantasy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Godfather: Part II&#39;,  &#39;year&#39;: 1974,  &#39;rating&#39;: 9.0,  &#39;directors&#39;: [&#39;Francis Ford Coppola&#39;],  &#39;actors&#39;: [&#39;Al Pacino&#39;, &#39;Robert De Niro&#39;, &#39;Robert Duvall&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Runaway&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Michael Crichton&#39;],  &#39;actors&#39;: [&#39;Tom Selleck&#39;, &#39;Gene Simmons&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Locket&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;John Brahm&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Brian Aherne&#39;, &#39;Gene Raymond&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;TRON&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Steven Lisberger&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Bruce Boxleitner&#39;, &#39;David Warner&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Manderlay&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Lars von Trier&#39;],  &#39;actors&#39;: [&#39;Isaach De Bankolé&#39;, &#39;Danny Glover&#39;, &#39;Willem Dafoe&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Behold a Pale Horse&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Fred Zinnemann&#39;],  &#39;actors&#39;: [&#39;Gregory Peck&#39;,   &#39;Anthony Quinn&#39;,   &#39;Omar Sharif&#39;,   &#39;Raymond Pellegrin&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Racket&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Mel Ferrer&#39;,   &#39;John Cromwell&#39;,   &#39;Nicholas Ray&#39;,   &#39;Sherman Todd&#39;,   &#39;Tay Garnett&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Robert Ryan&#39;, &#39;William Talman&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Cowboy&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Delmer Daves&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Jack Lemmon&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The List of Adrian Messenger&#39;,  &#39;year&#39;: 1963,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;John Huston&#39;],  &#39;actors&#39;: [&#39;Kirk Douglas&#39;,   &#39;Robert Mitchum&#39;,   &#39;Tony Curtis&#39;,   &#39;Burt Lancaster&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Colossus of Rhodes&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Sergio Leone&#39;],  &#39;actors&#39;: [&#39;Rory Calhoun&#39;, &#39;Georges Marchal&#39;, &#39;Conrado San Martín&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Comancheros&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;John Wayne&#39;, &#39;Michael Curtiz&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Stuart Whitman&#39;, &#39;Nehemiah Persoff&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Fabulous Baker Boys&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Steve Kloves&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Beau Bridges&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Big City&#39;,  &#39;year&#39;: 1963,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Anil Chatterjee&#39;, &#39;Haren Chatterjee&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &quot;Don&#39;t Go Near the Water&quot;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Charles Walters&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Earl Holliman&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;What Would Jesus Do?&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Thomas Makowski&#39;],  &#39;actors&#39;: [&#39;John Schneider&#39;, &#39;Adam Gregory&#39;, &#39;Mark Arnold&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Somebody to Love&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Alexandre Rockwell&#39;],  &#39;actors&#39;: [&#39;Harvey Keitel&#39;, &#39;Anthony Quinn&#39;, &#39;Michael DeLorenzo&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Wild Party&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Harry Horner&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Arthur Franz&#39;, &#39;Jay Robinson&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Grifters&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Stephen Frears&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Jan Munroe&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Presenting Lily Mars&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Norman Taurog&#39;],  &#39;actors&#39;: [&#39;Van Heflin&#39;, &#39;Richard Carlson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Last of the Secret Agents?&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Norman Abbott&#39;],  &#39;actors&#39;: [&#39;Marty Allen&#39;, &#39;Steve Rossi&#39;, &#39;John Williams&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Changeling&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Peter Medak&#39;],  &#39;actors&#39;: [&#39;George C. Scott&#39;, &#39;Melvyn Douglas&#39;],  &#39;genres&#39;: [&#39;Horror&#39;]}, {&#39;title&#39;: &#39;Star Wars: Episode III - Revenge of the Sith&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;George Lucas&#39;],  &#39;actors&#39;: [&#39;Hayden Christensen&#39;, &#39;Ewan McGregor&#39;, &#39;Samuel L. Jackson&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Star Wars: Episode II - Attack of the Clones&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;George Lucas&#39;],  &#39;actors&#39;: [&#39;Hayden Christensen&#39;, &#39;Ewan McGregor&#39;, &#39;Christopher Lee&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Charulata&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Soumitra Chatterjee&#39;, &#39;Shailen Mukherjee&#39;, &#39;Shyamal Ghoshal&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Stars&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Konrad Wolf&#39;],  &#39;actors&#39;: [&#39;Jürgen Frohriep&#39;, &#39;Erik S. Klein&#39;, &#39;Stefan Pejchev&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Waco&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;R.G. Springsteen&#39;],  &#39;actors&#39;: [&#39;Howard Keel&#39;, &#39;Brian Donlevy&#39;, &#39;Wendell Corey&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;3 Strikes&#39;,  &#39;year&#39;: 2000,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;DJ Pooh&#39;],  &#39;actors&#39;: [&#39;Brian Hooks&#39;, &#39;Faizon Love&#39;, &#39;E-40&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Last Days of Frankie the Fly&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Peter Markle&#39;],  &#39;actors&#39;: [&#39;Dennis Hopper&#39;, &#39;Michael Madsen&#39;, &#39;Kiefer Sutherland&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Virginian&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Stuart Gilmore&#39;],  &#39;actors&#39;: [&#39;Joel McCrea&#39;, &#39;Brian Donlevy&#39;, &#39;Sonny Tufts&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Air I Breathe&#39;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Jieho Lee&#39;],  &#39;actors&#39;: [&#39;Brendan Fraser&#39;, &#39;Andy Garcia&#39;, &#39;Kevin Bacon&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Naughty Girl&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Michel Boisrond&#39;],  &#39;actors&#39;: [&#39;Jean Bretonnière&#39;, &#39;Mischa Auer&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Chimes at Midnight&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Orson Welles&#39;],  &#39;actors&#39;: [&#39;Orson Welles&#39;, &#39;John Gielgud&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Battle of the Bulge&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Ken Annakin&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Robert Shaw&#39;, &#39;Robert Ryan&#39;, &#39;Dana Andrews&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Night the Lights Went Out in Georgia&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Ron Maxwell&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Mark Hamill&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Our Winning Season&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Joseph Ruben&#39;],  &#39;actors&#39;: [&#39;Scott Jacoby&#39;, &#39;Dennis Quaid&#39;, &#39;Robert Wahler&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Hot Tub Time Machine&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Steve Pink&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Rob Corddry&#39;, &#39;Craig Robinson&#39;, &#39;Clark Duke&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Jack Bull&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;John Badham&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;John Goodman&#39;, &#39;L.Q. Jones&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Go West, Young Lady&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Frank R. Strayer&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Charles Ruggles&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Music&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;A Family Affair&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Lionel Barrymore&#39;, &#39;Eric Linden&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Flicka&#39;,  &#39;year&#39;: 2006,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Michael Mayer&#39;],  &#39;actors&#39;: [&#39;Tim McGraw&#39;, &#39;Ryan Kwanten&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;The Shootist&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Don Siegel&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ron Howard&#39;, &#39;James Stewart&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Girl Crazy&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Busby Berkeley&#39;, &#39;Norman Taurog&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Gil Stratton&#39;, &#39;Robert E. Strickland&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Sophia Loren: Her Own Story&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Mel Stuart&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;John Gavin&#39;, &#39;Rip Torn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;My Little Pony: The Movie&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Mike Joens&#39;],  &#39;actors&#39;: [&#39;Danny DeVito&#39;],  &#39;genres&#39;: [&#39;Animation&#39;, &#39;Family&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Singularity&#39;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Robert Kouba&#39;],  &#39;actors&#39;: [&#39;Julian Schaffner&#39;, &#39;John Cusack&#39;, &#39;Carmen Argenziano&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Body and Soul&#39;,  &#39;year&#39;: 2000,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Sam Henry Kass&#39;],  &#39;actors&#39;: [&quot;Ray &#39;Boom Boom&#39; Mancini&quot;, &#39;Michael Chiklis&#39;, &#39;Rod Steiger&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &quot;Dead Man&#39;s Revenge&quot;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Alan J. Levi&#39;],  &#39;actors&#39;: [&#39;Bruce Dern&#39;,   &#39;Michael Ironside&#39;,   &#39;Vondie Curtis-Hall&#39;,   &#39;Keith Coulouris&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Seven Cities of Gold&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Robert D. Webb&#39;],  &#39;actors&#39;: [&#39;Richard Egan&#39;,   &#39;Anthony Quinn&#39;,   &#39;Michael Rennie&#39;,   &#39;Jeffrey Hunter&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Macao&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Josef von Sternberg&#39;, &#39;Nicholas Ray&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;William Bendix&#39;, &#39;Thomas Gomez&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Lusty Men&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Robert Parrish&#39;, &#39;Nicholas Ray&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Arthur Kennedy&#39;, &#39;Arthur Hunnicutt&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Angel Face&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Otto Preminger&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Herbert Marshall&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Son of Fury: The Story of Benjamin Blake&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;John Cromwell&#39;],  &#39;actors&#39;: [&#39;Tyrone Power&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Digital Reaper&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;John Irvin&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;,   &#39;Sonny Marinelli&#39;,   &#39;Raffaello Degruttola&#39;,   &#39;Stanley Townsend&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Come See the Paradise&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Alan Parker&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Sab Shimono&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Peace, Love &amp; Misunderstanding&#39;,  &#39;year&#39;: 2011,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Bruce Beresford&#39;],  &#39;actors&#39;: [&#39;Nat Wolff&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Pit Stop&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Jack Hill&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;Richard Davalos&#39;, &#39;Sid Haig&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Born to the West&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Charles Barton&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Johnny Mack Brown&#39;, &#39;John Patterson&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &quot;California Dreamin&#39;&quot;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Cristian Nemescu&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;Jamie Elman&#39;, &#39;Razvan Vasilescu&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Killing Season&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Mark Steven Johnson&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;John Travolta&#39;, &#39;Milo Ventimiglia&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Comanche Station&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Rand Brooks&#39;,   &#39;Randolph Scott&#39;,   &#39;Claude Akins&#39;,   &#39;Skip Homeier&#39;,   &#39;Richard Rust&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Far from Heaven&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Todd Haynes&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Dennis Haysbert&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Wildflowers&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Melissa Painter&#39;],  &#39;actors&#39;: [&#39;Tomas Arana&#39;, &#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Magnificent Dope&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Walter Lang&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Don Ameche&#39;, &#39;Edward Everett Horton&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &quot;Heaven&#39;s Door&quot;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Craig Clyde&#39;],  &#39;actors&#39;: [&#39;Kaden Billin&#39;, &#39;Mark Brocksmith&#39;, &#39;Dean Cain&#39;],  &#39;genres&#39;: [&#39;Family&#39;]}, {&#39;title&#39;: &#39;The Cariboo Trail&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Edwin L. Marin&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &quot;George &#39;Gabby&#39; Hayes&quot;, &#39;Bill Williams&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Mr. Soft Touch&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Henry Levin&#39;, &#39;Gordon Douglas&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;John Ireland&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;My Neighbor Totoro&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Hayao Miyazaki&#39;],  &#39;actors&#39;: [&#39;Hitoshi Takagi&#39;, &#39;Shigesato Itoi&#39;],  &#39;genres&#39;: [&#39;Animation&#39;, &#39;Family&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;The Good Guys and the Bad Guys&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Burt Kennedy&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;,   &#39;George Kennedy&#39;,   &#39;Martin Balsam&#39;,   &#39;David Carradine&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;A Boy Called Hate&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Mitch Marcus&#39;],  &#39;actors&#39;: [&#39;Scott Caan&#39;,   &#39;Lee Nashold&#39;,   &#39;Kevin Michael Richardson&#39;,   &#39;James Caan&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Babyfever&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Victoria Foyt&#39;, &#39;Henry Jaglom&#39;],  &#39;actors&#39;: [&#39;Matt Salinger&#39;, &#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Stressed to Kill&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Mark Savage&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;Bill Oberst Jr.&#39;, &#39;Lance Tafelski&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Sky High&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Mike Mitchell&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Michael Angarano&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Superman II&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Richard Donner&#39;, &#39;Richard Lester&#39;],  &#39;actors&#39;: [&#39;Gene Hackman&#39;, &#39;Christopher Reeve&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Destructors&#39;,  &#39;year&#39;: 1974,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Robert Parrish&#39;],  &#39;actors&#39;: [&#39;Michael Caine&#39;, &#39;Anthony Quinn&#39;, &#39;James Mason&#39;, &#39;Maurice Ronet&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Run All Night&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Jaume Collet-Serra&#39;],  &#39;actors&#39;: [&#39;Liam Neeson&#39;, &#39;Ed Harris&#39;, &#39;Joel Kinnaman&#39;, &quot;Vincent D&#39;Onofrio&quot;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Sundown&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Bruce Cabot&#39;, &#39;George Sanders&#39;, &#39;Harry Carey&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Chapter Two&#39;,  &#39;year&#39;: 1979,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Robert Moore&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Joseph Bologna&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;12 Angry Men&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 8.9,  &#39;directors&#39;: [&#39;Sidney Lumet&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Lee J. Cobb&#39;, &#39;Martin Balsam&#39;, &#39;John Fiedler&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Barbarian and the Geisha&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;John Huston&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Sam Jaffe&#39;, &#39;Sô Yamamura&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;American Heart&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Martin Bell&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Edward Furlong&#39;, &#39;John Boylan&#39;, &#39;Greg Sevigny&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Little Ayse and the Magic Dwarfs in the Land of Dreams&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Tunç Basaran&#39;],  &#39;actors&#39;: [&#39;Süleyman Turan&#39;, &#39;Metin Serezli&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Family&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;80 Steps to Jonah&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Gerd Oswald&#39;],  &#39;actors&#39;: [&#39;Wayne Newton&#39;, &#39;Mickey Rooney&#39;, &#39;Keenan Wynn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Black Hawk Down&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Ridley Scott&#39;],  &#39;actors&#39;: [&#39;Josh Hartnett&#39;, &#39;Ewan McGregor&#39;, &#39;Tom Sizemore&#39;, &#39;Eric Bana&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Flight Lieutenant&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Sidney Salkow&#39;],  &#39;actors&#39;: [&quot;Pat O&#39;Brien&quot;, &#39;Glenn Ford&#39;, &#39;Jonathan Hale&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Night at the Golden Eagle&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Adam Rifkin&#39;],  &#39;actors&#39;: [&#39;Vinny Argiro&#39;, &#39;James Caan&#39;, &#39;Donnie Montemarano&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;1900&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Bernardo Bertolucci&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Gérard Depardieu&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Stalked by My Doctor: The Return&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Doug Campbell&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Mark Grossman&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Where Danger Lives&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Claude Rains&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Elvis&#39;,  &#39;year&#39;: 1979,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;John Carpenter&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Bing Russell&#39;, &#39;Robert Gray&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Return of the Bad Men&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Robert Ryan&#39;, &quot;George &#39;Gabby&#39; Hayes&quot;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Return of October&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Joseph H. Lewis&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Albert Sharpe&#39;, &#39;James Gleason&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Seventh Sin&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Ronald Neame&#39;, &#39;Vincente Minnelli&#39;],  &#39;actors&#39;: [&#39;Bill Travers&#39;, &#39;George Sanders&#39;, &#39;Jean-Pierre Aumont&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Summer Storm&#39;,  &#39;year&#39;: 1944,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Douglas Sirk&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Edward Everett Horton&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;High, Wide and Handsome&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Rouben Mamoulian&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Spoilers&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;John Wayne&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Winds of the Wasteland&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Mack V. Wright&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Lew Kelly&#39;, &#39;Douglas Cosgrove&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Follow the Fleet&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Mark Sandrich&#39;],  &#39;actors&#39;: [&#39;Fred Astaire&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Odyssey of the Pacific&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Fernando Arrabal&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Jonathan Starr&#39;, &#39;Ky Huot Uk&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;]}, {&#39;title&#39;: &quot;In Harm&#39;s Way&quot;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Otto Preminger&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Kirk Douglas&#39;, &#39;Tom Tryon&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Stroker Ace&#39;,  &#39;year&#39;: 1983,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Hal Needham&#39;],  &#39;actors&#39;: [&#39;Burt Reynolds&#39;, &#39;Ned Beatty&#39;, &#39;Jim Nabors&#39;, &#39;Parker Stevenson&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Garden of the Dead&#39;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;John Hayes&#39;],  &#39;actors&#39;: [&#39;Marland Proctor&#39;,   &#39;Philip Kenneally&#39;,   &#39;Duncan McLeod&#39;,   &#39;John Dullaghan&#39;,   &#39;John Dennis&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Sorry, Wrong Number&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Tony Wharmby&#39;],  &#39;actors&#39;: [&#39;Carl Weintraub&#39;, &#39;Patrick Macnee&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Dunkirk&#39;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Christopher Nolan&#39;],  &#39;actors&#39;: [&#39;Fionn Whitehead&#39;, &#39;Barry Keoghan&#39;, &#39;Mark Rylance&#39;, &#39;Tom Hardy&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Fan&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Otto Preminger&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Richard Greene&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Wyatt Earp&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Lawrence Kasdan&#39;],  &#39;actors&#39;: [&#39;Kevin Costner&#39;, &#39;Dennis Quaid&#39;, &#39;Gene Hackman&#39;, &#39;David Andrews&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Doctor Who&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Geoffrey Sax&#39;],  &#39;actors&#39;: [&#39;Paul McGann&#39;, &#39;Eric Roberts&#39;, &#39;Sylvester McCoy&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Huo yun chuan qi&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Woo-Ping Yuen&#39;],  &#39;actors&#39;: [&#39;Gang Wu&#39;, &#39;Siu Chung Mok&#39;, &#39;Joe Chu&#39;, &#39;Lap-Man Sinn&#39;],  &#39;genres&#39;: [&#39;Action&#39;]}, {&#39;title&#39;: &#39;Dragon Ball: The Path to Power&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Shigeyasu Yamauchi&#39;],  &#39;actors&#39;: [&#39;Naoki Tatsuta&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Animation&#39;]}, {&#39;title&#39;: &#39;Race Against Time&#39;,  &#39;year&#39;: 2000,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Geoff Murphy&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Cary Elwes&#39;, &#39;Chris Sarandon&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Quatermass Xperiment&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Val Guest&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;Jack Warner&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Found&#39;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Hrishikesh Mukherjee&#39;],  &#39;actors&#39;: [&#39;Amitabh Bachchan&#39;, &#39;Ashok Kumar&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;In Good Company&#39;,  &#39;year&#39;: 2004,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Paul Weitz&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Topher Grace&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Someone Special&#39;,  &#39;year&#39;: 2004,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Jin Jang&#39;],  &#39;actors&#39;: [&#39;Jae-yeong Jeong&#39;, &#39;Jin Jang&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Brothers&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Gary Hardwick&#39;],  &#39;actors&#39;: [&#39;Morris Chestnut&#39;,   &#39;Shemar Moore&#39;,   &#39;D.L. Hughley&#39;,   &#39;Bill Bellamy&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Shadows in Paradise&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 4.2,  &#39;directors&#39;: [&#39;J. Stephen Maunder&#39;],  &#39;actors&#39;: [&#39;Mark Dacascos&#39;,   &#39;Armand Assante&#39;,   &#39;Tom Sizemore&#39;,   &#39;Bruce Boxleitner&#39;],  &#39;genres&#39;: [&#39;Action&#39;]}, {&#39;title&#39;: &#39;Rio Lobo&#39;,  &#39;year&#39;: 1970,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Howard Hawks&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Jorge Rivero&#39;, &#39;Jack Elam&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Wild Bill&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Walter Hill&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;John Hurt&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Visitors of the Night&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Jorge Montesi&#39;],  &#39;actors&#39;: [&#39;Stephen McHattie&#39;, &#39;Dale Midkiff&#39;],  &#39;genres&#39;: [&#39;Sci-Fi&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Rancho Deluxe&#39;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Frank Perry&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Sam Waterston&#39;, &#39;Clifton James&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Bombardier&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Richard Wallace&#39;, &#39;Lambert Hillyer&#39;],  &#39;actors&#39;: [&quot;Pat O&#39;Brien&quot;, &#39;Randolph Scott&#39;, &#39;Eddie Albert&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Youth of the Son&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Masaki Kobayashi&#39;],  &#39;actors&#39;: [&#39;Akira Ishihama&#39;, &#39;Chishû Ryû&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Big Steal&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Don Siegel&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;William Bendix&#39;, &#39;Patric Knowles&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Red Pony&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Lewis Milestone&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Louis Calhern&#39;, &#39;Shepperd Strudwick&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Violent Men&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Rudolph Maté&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Edward G. Robinson&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Mad Miss Manton&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Leigh Jason&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Sam Levene&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Andy Hardy Gets Spring Fever&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;W.S. Van Dyke&#39;],  &#39;actors&#39;: [&#39;Lewis Stone&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Destruction Los Angeles&#39;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Tibor Takács&#39;],  &#39;actors&#39;: [&#39;Craig Sheffer&#39;, &#39;Romeo Miller&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;]}, {&#39;title&#39;: &#39;Babe: Pig in the City&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;George Miller&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;James Cromwell&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Beyond the Ring&#39;,  &#39;year&#39;: 2008,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Gerson Sanginitto&#39;],  &#39;actors&#39;: [&#39;André Lima&#39;, &#39;Martin Kove&#39;, &#39;Gary Busey&#39;, &#39;Brye Cooper&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Every Afternoon&#39;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Joseph W. Sarno&#39;],  &#39;actors&#39;: [&#39;Peder Kinberg&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;I Wanted Wings&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Mitchell Leisen&#39;],  &#39;actors&#39;: [&#39;Ray Milland&#39;, &#39;William Holden&#39;, &#39;Wayne Morris&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Pittsburgh&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Lewis Seiler&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Randolph Scott&#39;, &#39;Frank Craven&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Fear and Desire&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Stanley Kubrick&#39;],  &#39;actors&#39;: [&#39;Frank Silvera&#39;, &#39;Kenneth Harp&#39;, &#39;Paul Mazursky&#39;, &#39;Stephen Coit&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Impact&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Arthur Lubin&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;Charles Coburn&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Farmer Takes a Wife&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Victor Fleming&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Charles Bickford&#39;, &#39;Slim Summerville&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Showtime&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Tom Dey&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Eddie Murphy&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Eight Men Out&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;John Sayles&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;,   &#39;Clifton James&#39;,   &#39;Michael Lerner&#39;,   &#39;Christopher Lloyd&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Requiem for a Heavyweight&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Ralph Nelson&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Jackie Gleason&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Almost Christmas&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;David E. Talbert&#39;],  &#39;actors&#39;: [&#39;Omar Epps&#39;, &#39;Danny Glover&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Losing Control&#39;,  &#39;year&#39;: 2011,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Valerie Weiss&#39;],  &#39;actors&#39;: [&#39;Reid Scott&#39;, &#39;Theo Alexander&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Captain from Köpenick&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Helmut Käutner&#39;],  &#39;actors&#39;: [&#39;Heinz Rühmann&#39;, &#39;Martin Held&#39;, &#39;Willy A. Kleinau&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Watch Me When I Kill&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Antonio Bido&#39;],  &#39;actors&#39;: [&#39;Corrado Pani&#39;, &#39;Franco Citti&#39;, &#39;Fernando Cerulli&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Solstice&#39;,  &#39;year&#39;: 2008,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Daniel Myrick&#39;],  &#39;actors&#39;: [&#39;Shawn Ashmore&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Horror&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;White Girl&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Elizabeth Wood&#39;],  &#39;actors&#39;: [&#39;Brian Marc&#39;, &#39;Justin Bartha&#39;, &#39;Adrian Martinez&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Fugitive&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Emilio Fernández&#39;, &#39;John Ford&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Pedro Armendáriz&#39;, &#39;J. Carrol Naish&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Gallant Journey&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Charles Ruggles&#39;, &#39;Henry Travers&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Wonderful Country&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Robert Parrish&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Gary Merrill&#39;, &#39;Albert Dekker&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Murder, Inc.&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Burt Balaban&#39;, &#39;Stuart Rosenberg&#39;],  &#39;actors&#39;: [&#39;Stuart Whitman&#39;, &#39;Henry Morgan&#39;, &#39;Peter Falk&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Vanilla Sky&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Cameron Crowe&#39;],  &#39;actors&#39;: [&#39;Tom Cruise&#39;, &#39;Kurt Russell&#39;],  &#39;genres&#39;: [&#39;Fantasy&#39;, &#39;Mystery&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Slow Burn&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Matthew Chapman&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Dennis Lipscomb&#39;, &#39;Raymond J. Barry&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Sheepman&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;George Marshall&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Leslie Nielsen&#39;, &#39;Mickey Shaughnessy&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Love Is a Gun&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;David Hartwell&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;R. Lee Ermey&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Captain Kidd&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Rowland V. Lee&#39;],  &#39;actors&#39;: [&#39;Charles Laughton&#39;, &#39;Randolph Scott&#39;, &#39;Reginald Owen&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Final Analysis&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Phil Joanou&#39;],  &#39;actors&#39;: [&#39;Richard Gere&#39;, &#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;A Lawless Street&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Joseph H. Lewis&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Warner Anderson&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Serpent&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Henri Verneuil&#39;],  &#39;actors&#39;: [&#39;Yul Brynner&#39;, &#39;Henry Fonda&#39;, &#39;Dirk Bogarde&#39;, &#39;Philippe Noiret&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Magic of Lassie&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Don Chaffey&#39;],  &#39;actors&#39;: [&#39;James Stewart&#39;, &#39;Mickey Rooney&#39;, &#39;Pernell Roberts&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Call Me Madam&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Walter Lang&#39;],  &#39;actors&#39;: [&quot;Donald O&#39;Connor&quot;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;La Strada&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Federico Fellini&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Richard Basehart&#39;, &#39;Aldo Silvani&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Falling in Love&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Ulu Grosbard&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Harvey Keitel&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;John Dies at the End&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Don Coscarelli&#39;],  &#39;actors&#39;: [&#39;Chase Williamson&#39;, &#39;Rob Mayes&#39;, &#39;Paul Giamatti&#39;, &#39;Clancy Brown&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Escape from L.A.&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;John Carpenter&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Steve Buscemi&#39;, &#39;Stacy Keach&#39;, &#39;Peter Fonda&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Project Solitude&#39;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Rustam Branaman&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Richard Riehle&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Going Home&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Herbert B. Leonard&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Jan-Michael Vincent&#39;, &#39;Jason Bernard&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;One in a Million: The Ron LeFlore Story&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;William A. Graham&#39;],  &#39;actors&#39;: [&#39;LeVar Burton&#39;, &#39;Paul Benjamin&#39;, &#39;James Luisi&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Shoulder Arms&#39;,  &#39;year&#39;: 1918,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;L.A. Blaisdell&#39;,   &#39;Charles Chaplin&#39;,   &#39;Syd Chaplin&#39;,   &#39;Loyal Underwood&#39;,   &#39;Henry Bergman&#39;,   &#39;Tom Wilson&#39;,   &#39;Albert Austin&#39;,   &#39;Jack Wilson&#39;,   &#39;W.J. Allen&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Down by Law&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Jim Jarmusch&#39;],  &#39;actors&#39;: [&#39;Tom Waits&#39;, &#39;John Lurie&#39;, &#39;Roberto Benigni&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Rounders&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Burt Kennedy&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Untouchables&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Brian De Palma&#39;],  &#39;actors&#39;: [&#39;Kevin Costner&#39;,   &#39;Sean Connery&#39;,   &#39;Robert De Niro&#39;,   &#39;Charles Martin Smith&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Birth of the Blues&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Victor Schertzinger&#39;],  &#39;actors&#39;: [&#39;Bing Crosby&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Music&#39;]}, {&#39;title&#39;: &quot;Thompson&#39;s Last Run&quot;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Jerrold Freedman&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Wilford Brimley&#39;, &#39;Guy Boyd&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Lara Croft: Tomb Raider&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Simon West&#39;],  &#39;actors&#39;: [&#39;Jon Voight&#39;, &#39;Iain Glen&#39;, &#39;Noah Taylor&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Grosse Pointe Blank&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;George Armitage&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Dan Aykroyd&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Abilene Town&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Edwin L. Marin&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Edgar Buchanan&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Rude Awakening&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Aaron Russo&#39;, &#39;David Greenwalt&#39;],  &#39;actors&#39;: [&#39;Cheech Marin&#39;, &#39;Eric Roberts&#39;, &#39;Robert Carradine&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;I Spit on Your Grave: Vengeance is Mine&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;R.D. Braunstein&#39;],  &#39;actors&#39;: [&#39;Doug McKeon&#39;, &#39;Gabriel Hogan&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Night and the City&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Irwin Winkler&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Cliff Gorman&#39;, &#39;Alan King&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Machete&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Ethan Maniquis&#39;, &#39;Robert Rodriguez&#39;],  &#39;actors&#39;: [&#39;Danny Trejo&#39;, &#39;Robert De Niro&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;What Just Happened&#39;,  &#39;year&#39;: 2008,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Barry Levinson&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;John Turturro&#39;, &#39;Stanley Tucci&#39;, &#39;Sean Penn&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Iceman Cometh&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;John Frankenheimer&#39;],  &#39;actors&#39;: [&#39;Lee Marvin&#39;, &#39;Fredric March&#39;, &#39;Robert Ryan&#39;, &#39;Jeff Bridges&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;My Name Is Nobody&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Tonino Valerii&#39;],  &#39;actors&#39;: [&#39;Terence Hill&#39;, &#39;Henry Fonda&#39;, &#39;Jean Martin&#39;, &#39;R.G. Armstrong&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Jersey Justice&#39;,  &#39;year&#39;: 2014,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;John Charles Hunt&#39;],  &#39;actors&#39;: [&#39;Bo Svenson&#39;, &#39;Christopher Mann&#39;, &#39;Sal Mazzotta&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Return of Frank James&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Fritz Lang&#39;],  &#39;actors&#39;: [&#39;John Carradine&#39;, &#39;Henry Fonda&#39;, &#39;Jackie Cooper&#39;, &#39;Henry Hull&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;History&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Proud Family Movie&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Bruce W. Smith&#39;],  &#39;actors&#39;: [&#39;Tommy Davidson&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Throwaways&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Tony Bui&#39;],  &#39;actors&#39;: [&#39;Peter Brooke&#39;, &#39;James Caan&#39;, &#39;Noel Clarke&#39;, &#39;Kevin Dillon&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Killing&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;Stanley Kubrick&#39;],  &#39;actors&#39;: [&#39;Sterling Hayden&#39;, &#39;Vince Edwards&#39;, &#39;Jay C. Flippen&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Convicted&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Henry Levin&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Broderick Crawford&#39;, &#39;Millard Mitchell&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Nous sommes tous des assassins&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;André Cayatte&#39;],  &#39;actors&#39;: [&#39;Marcel Mouloudji&#39;,   &#39;Raymond Pellegrin&#39;,   &#39;Antoine Balpêtré&#39;,   &#39;Julien Verdier&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Lust for Gold&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;S. Sylvan Simon&#39;, &#39;George Marshall&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Gig Young&#39;, &#39;William Prince&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Crime&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Midway&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Jack Smight&#39;],  &#39;actors&#39;: [&#39;Charlton Heston&#39;, &#39;Henry Fonda&#39;, &#39;James Coburn&#39;, &#39;Glenn Ford&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Message&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Moustapha Akkad&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Michael Ansara&#39;, &#39;Johnny Sekka&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Hide in Plain Sight&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;James Caan&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Robert Viharo&#39;, &#39;Joe Grifasi&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;West of the Divide&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;Lafe McKee&#39;,   &#39;John Wayne&#39;,   &quot;George &#39;Gabby&#39; Hayes&quot;,   &#39;Lloyd Whitlock&#39;,   &#39;Yakima Canutt&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;I Cover the War!&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Arthur Lubin&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Don Barclay&#39;, &#39;Charles Brokaw&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Dick Tracy&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Alan James&#39;, &#39;Ray Taylor&#39;],  &#39;actors&#39;: [&#39;Ralph Byrd&#39;, &#39;Smiley Burnette&#39;, &#39;Lee Van Atta&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Paras-Pathar&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Tulsi Chakraborty&#39;, &#39;Kali Bannerjee&#39;, &#39;Gangapada Basu&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Redskin&#39;,  &#39;year&#39;: 1929,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Victor Schertzinger&#39;],  &#39;actors&#39;: [&#39;Richard Dix&#39;, &#39;Tully Marshall&#39;, &#39;George Regas&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;HouseSitter&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Frank Oz&#39;],  &#39;actors&#39;: [&#39;Steve Martin&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Unknown Cyclist&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Bernard Salzmann&#39;],  &#39;actors&#39;: [&#39;Vincent Spano&#39;, &#39;Danny Nucci&#39;, &#39;Stephen Spinella&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Desire Me&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Victor Saville&#39;,   &#39;Jack Conway&#39;,   &#39;George Cukor&#39;,   &#39;Mervyn LeRoy&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Richard Hart&#39;, &#39;Morris Ankrum&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Raggedy Man&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Jack Fisk&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Sam Shepard&#39;, &#39;William Sanderson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Big Wheel&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Edward Ludwig&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Thomas Mitchell&#39;, &quot;Michael O&#39;Shea&quot;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Year of the Dog&#39;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Mike White&#39;],  &#39;actors&#39;: [&#39;John C. Reilly&#39;, &#39;Peter Sarsgaard&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Tex&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Tim Hunter&#39;],  &#39;actors&#39;: [&#39;Matt Dillon&#39;, &#39;Jim Metzler&#39;, &#39;Bill McKinney&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;That Championship Season&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Jason Miller&#39;],  &#39;actors&#39;: [&#39;Bruce Dern&#39;, &#39;Stacy Keach&#39;, &#39;Robert Mitchum&#39;, &#39;Martin Sheen&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Shakespeare in... and Out&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Peter Shushtari&#39;],  &#39;actors&#39;: [&#39;Roger Shank&#39;,   &#39;Lawrence Trilling&#39;,   &#39;J.D. Smith&#39;,   &#39;William Neenan&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Enemy Mine&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Wolfgang Petersen&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;,   &#39;Louis Gossett Jr.&#39;,   &#39;Brion James&#39;,   &#39;Richard Marcus&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;American Violence&#39;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Timothy Woodward Jr.&#39;],  &#39;actors&#39;: [&#39;Kaiwi Lyman&#39;, &#39;Bruce Dern&#39;, &#39;Columbus Short&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Best of Times&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Roger Spottiswoode&#39;],  &#39;actors&#39;: [&#39;Robin Williams&#39;, &#39;Kurt Russell&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Our Very Own&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Cameron Watson&#39;],  &#39;actors&#39;: [&#39;Keith Carradine&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Souls at Sea&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Gary Cooper&#39;, &#39;George Raft&#39;, &#39;Henry Wilcoxon&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;]}, {&#39;title&#39;: &#39;Horatio Hornblower: The Duchess and the Devil&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;Andrew Grieve&#39;],  &#39;actors&#39;: [&#39;Ioan Gruffudd&#39;, &#39;Robert Lindsay&#39;, &#39;Christopher Fulford&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Horatio Hornblower: The Fire Ship&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Andrew Grieve&#39;],  &#39;actors&#39;: [&#39;Ioan Gruffudd&#39;, &#39;Robert Lindsay&#39;, &#39;Denis Lawson&#39;, &#39;Ian McNeice&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Horatio Hornblower: The Wrong War&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Andrew Grieve&#39;],  &#39;actors&#39;: [&#39;John Shrapnel&#39;,   &#39;Ioan Gruffudd&#39;,   &#39;Robert Lindsay&#39;,   &#39;Antony Sher&#39;,   &#39;Samuel West&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Man Hunt&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Fritz Lang&#39;],  &#39;actors&#39;: [&#39;Walter Pidgeon&#39;, &#39;George Sanders&#39;, &#39;John Carradine&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;A Man Betrayed&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;John H. Auer&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Edward Ellis&#39;, &#39;Wallace Ford&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Shaft in Africa&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;John Guillermin&#39;],  &#39;actors&#39;: [&#39;Richard Roundtree&#39;, &#39;Frank Finlay&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Bad Times at the El Royale&#39;,  &#39;year&#39;: 2018,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Drew Goddard&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Jon Hamm&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Rollercoaster&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;James Goldstone&#39;],  &#39;actors&#39;: [&#39;George Segal&#39;,   &#39;Timothy Bottoms&#39;,   &#39;Richard Widmark&#39;,   &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Shoes of the Fisherman&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Michael Anderson&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;,   &#39;Laurence Olivier&#39;,   &#39;Oskar Werner&#39;,   &#39;David Janssen&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Blockade&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;William Dieterle&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Leo Carrillo&#39;, &#39;John Halliday&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Eddie Cantor Story&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Alfred E. Green&#39;],  &#39;actors&#39;: [&#39;Keefe Brasselle&#39;, &#39;Arthur Franz&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;The Savage Innocents&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Nicholas Ray&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Carlo Giustini&#39;, &quot;Peter O&#39;Toole&quot;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Marine Story&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Ned Farr&#39;],  &#39;actors&#39;: [&#39;Anthony Michael Jones&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Betty and Coretta&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Yves Simoneau&#39;],  &#39;actors&#39;: [&#39;Malik Yoba&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Comrades of Summer&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Tommy Lee Wallace&#39;],  &#39;actors&#39;: [&#39;Joe Mantegna&#39;, &#39;Michael Lerner&#39;, &#39;Mark Rolston&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &quot;It&#39;s My Party&quot;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Randal Kleiser&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Gregory Harrison&#39;, &#39;Bruce Davison&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Southern Baptist Sissies&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Del Shores&#39;],  &#39;actors&#39;: [&#39;Emerson Collins&#39;, &#39;Leslie Jordan&#39;, &#39;Willam Belli&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Love Is a Ball&#39;,  &#39;year&#39;: 1963,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;David Swift&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Charles Boyer&#39;, &#39;Ricardo Montalban&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Roberta&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;Fred Astaire&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;War and Peace&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;King Vidor&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Mel Ferrer&#39;, &#39;Vittorio Gassman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Exonerated&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Bob Balaban&#39;],  &#39;actors&#39;: [&#39;Brian Dennehy&#39;, &#39;Danny Glover&#39;, &#39;Delroy Lindo&#39;, &#39;Aidan Quinn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Stranded&#39;,  &#39;year&#39;: 2006,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Kern Konwiser&#39;],  &#39;actors&#39;: [&#39;Jack Hartnett&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Savior&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Predrag Antonijevic&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Pascal Rollin&#39;, &#39;Catlin Foster&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Good Fences&#39;,  &#39;year&#39;: 2003,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Ernest R. Dickerson&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Zachary Simmons Glover&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Dear Heart&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Delbert Mann&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Michael Anderson Jr.&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Freak Talks About Sex&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Paul Todisco&#39;],  &#39;actors&#39;: [&#39;Steve Zahn&#39;, &#39;Josh Hamilton&#39;, &#39;David Kinney&#39;, &#39;Wayne Federman&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Pearls and Swine&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Óskar Jónasson&#39;],  &#39;actors&#39;: [&#39;Ingvar Eggert Sigurðsson&#39;,   &#39;Jóhann Sigurðarson&#39;,   &#39;Ólafur Darri Ólafsson&#39;,   &#39;Þröstur Leó Gunnarsson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Destroyer&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;William A. Seiter&#39;, &#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Edward G. Robinson&#39;, &#39;Glenn Ford&#39;, &#39;Edgar Buchanan&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;A Stolen Life&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Curtis Bernhardt&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Dane Clark&#39;, &#39;Walter Brennan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Love, Cheat &amp; Steal&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;William Curran&#39;],  &#39;actors&#39;: [&#39;John Lithgow&#39;, &#39;Eric Roberts&#39;, &#39;Richard Edson&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;White Banners&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Edmund Goulding&#39;],  &#39;actors&#39;: [&#39;Claude Rains&#39;, &#39;Jackie Cooper&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Snow Queen&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Päivi Hartzell&#39;],  &#39;actors&#39;: [&#39;Sebastian Kaatrasalo&#39;],  &#39;genres&#39;: [&#39;Family&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;The Fisher King&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Terry Gilliam&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Robin Williams&#39;, &#39;Adam Bryant&#39;, &#39;Paul Lombardi&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;The Joneses&#39;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Derrick Borte&#39;],  &#39;actors&#39;: [&#39;David Duchovny&#39;, &#39;Benjamin Hollingsworth&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The River Wild&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Curtis Hanson&#39;],  &#39;actors&#39;: [&#39;Kevin Bacon&#39;, &#39;David Strathairn&#39;, &#39;Joseph Mazzello&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &quot;Thoroughbreds Don&#39;t Cry&quot;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Alfred E. Green&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;C. Aubrey Smith&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Curse of the Fly&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Don Sharp&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;George Baker&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Horror&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;This Is My Affair&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;Robert Taylor&#39;, &#39;Victor McLaglen&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Star Wars: Episode I - The Phantom Menace&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;George Lucas&#39;],  &#39;actors&#39;: [&#39;Ewan McGregor&#39;, &#39;Liam Neeson&#39;, &#39;Jake Lloyd&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Toy Story 3&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Lee Unkrich&#39;],  &#39;actors&#39;: [&#39;Tom Hanks&#39;, &#39;Tim Allen&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Captain Ron&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Thom Eberhardt&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Martin Short&#39;, &#39;Benjamin Salisbury&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Angel and the Badman&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;James Edward Grant&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Harry Carey&#39;, &#39;Bruce Cabot&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Men of Honor&#39;,  &#39;year&#39;: 2000,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;George Tillman Jr.&#39;],  &#39;actors&#39;: [&#39;Cuba Gooding Jr.&#39;, &#39;Robert De Niro&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Last American Hero&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Lamont Johnson&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Hot Saturday&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;Cary Grant&#39;, &#39;Randolph Scott&#39;, &#39;Edward Woods&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;A Remarkable Life&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Vohn Regensburger&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Matrix Reloaded&#39;,  &#39;year&#39;: 2003,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Lilly Wachowski&#39;, &#39;Lana Wachowski&#39;],  &#39;actors&#39;: [&#39;Keanu Reeves&#39;, &#39;Laurence Fishburne&#39;, &#39;Hugo Weaving&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Alambrista!&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Robert M. Young&#39;],  &#39;actors&#39;: [&#39;Domingo Ambriz&#39;, &#39;Trinidad Silva&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Bang the Drum Slowly&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;John D. Hancock&#39;],  &#39;actors&#39;: [&#39;Michael Moriarty&#39;,   &#39;Robert De Niro&#39;,   &#39;Vincent Gardenia&#39;,   &#39;Phil Foster&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Andy Hardy Meets Debutante&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Lewis Stone&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;June Bride&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Bretaigne Windust&#39;],  &#39;actors&#39;: [&#39;Robert Montgomery&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &quot;The People Against O&#39;Hara&quot;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;John Sturges&#39;],  &#39;actors&#39;: [&#39;Spencer Tracy&#39;, &quot;Pat O&#39;Brien&quot;, &#39;John Hodiak&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Dream of Kings&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Daniel Mann&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Sam Levene&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Strangler of the Swamp&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Frank Wisbar&#39;],  &#39;actors&#39;: [&#39;Robert Barrat&#39;, &#39;Blake Edwards&#39;, &#39;Charles Middleton&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Fantasy&#39;, &#39;Horror&#39;]}, {&#39;title&#39;: &#39;Story of G.I. Joe&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;Burgess Meredith&#39;,   &#39;Robert Mitchum&#39;,   &#39;Freddie Steele&#39;,   &#39;Wally Cassell&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Beneath the Darkness&#39;,  &#39;year&#39;: 2011,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Martin Guigui&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Tony Oller&#39;, &#39;Stephen Ford&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &quot;Everybody&#39;s Fine&quot;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Kirk Jones&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Sam Rockwell&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Daisy Kenyon&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Otto Preminger&#39;],  &#39;actors&#39;: [&#39;Dana Andrews&#39;, &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Snow Queen 3: Fire and Ice&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Aleksey Tsitsilin&#39;],  &#39;actors&#39;: [&#39;Jason Griffith&#39;, &#39;Dee Bradley Baker&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Ryde&#39;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Brian Frank Visciglia&#39;],  &#39;actors&#39;: [&#39;David Wachs&#39;, &#39;Ronnie Alvarez&#39;, &#39;Kyle Thomas Schmidt&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Stowaway to the Moon&#39;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Andrew V. McLaglen&#39;],  &#39;actors&#39;: [&#39;Lloyd Bridges&#39;, &#39;Jeremy Slate&#39;, &#39;Jim McMullan&#39;, &#39;Morgan Paull&#39;],  &#39;genres&#39;: [&#39;Family&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Spirited Away&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 8.6,  &#39;directors&#39;: [&#39;Hayao Miyazaki&#39;, &#39;Kirk Wise&#39;],  &#39;actors&#39;: [&#39;Miyu Irino&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Red Sheep&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Amos McKay&#39;],  &#39;actors&#39;: [&#39;George Katt&#39;, &#39;Jonathan Regier&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &quot;Hitman&#39;s Run&quot;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Mark L. Lester&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Esteban Powell&#39;, &#39;C. Thomas Howell&#39;],  &#39;genres&#39;: [&#39;Action&#39;]}, {&#39;title&#39;: &#39;Wiped-Out Footprints&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Enrique Gabriel&#39;],  &#39;actors&#39;: [&#39;Federico Luppi&#39;, &#39;Sergi Calleja&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &quot;Donovan&#39;s Reef&quot;,  &#39;year&#39;: 1963,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Lee Marvin&#39;, &#39;Jack Warden&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Enemy of the World&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Tabrez Hashmi&#39;, &#39;Mehmood&#39;],  &#39;actors&#39;: [&#39;Mehmood&#39;, &#39;Manzoor Ali&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Killer in the Family&#39;,  &#39;year&#39;: 1983,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Richard T. Heffron&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;James Spader&#39;, &#39;Lance Kerwin&#39;, &#39;Eric Stoltz&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The King of Comedy&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Martin Scorsese&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Jerry Lewis&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Hold That Kiss&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Edwin L. Marin&#39;],  &#39;actors&#39;: [&quot;Dennis O&#39;Keefe&quot;, &#39;Mickey Rooney&#39;, &#39;George Barbier&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Playing for Keeps&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Gabriele Muccino&#39;],  &#39;actors&#39;: [&#39;Gerard Butler&#39;, &#39;Dennis Quaid&#39;, &#39;Noah Lomax&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Nest of Vipers&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Tonino Cervi&#39;],  &#39;actors&#39;: [&#39;Paolo Bonacelli&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &quot;A Dog&#39;s Purpose&quot;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Lasse Hallström&#39;],  &#39;actors&#39;: [&#39;Josh Gad&#39;, &#39;Dennis Quaid&#39;, &#39;Bryce Gheisar&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &quot;What to Expect When You&#39;re Expecting&quot;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Kirk Jones&#39;],  &#39;actors&#39;: [&#39;Matthew Morrison&#39;, &#39;J. Todd Smith&#39;, &#39;Dennis Quaid&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Mexican Sunrise&#39;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 4.1,  &#39;directors&#39;: [&#39;Rowdy Stovall&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;,   &#39;Jordan Belfi&#39;,   &#39;William Gregory Lee&#39;,   &#39;Reed Frerichs&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Action in Arabia&#39;,  &#39;year&#39;: 1944,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Léonide Moguy&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Gene Lockhart&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Riders of Destiny&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;Heinie Conklin&#39;,   &#39;John Wayne&#39;,   &#39;Forrest Taylor&#39;,   &quot;George &#39;Gabby&#39; Hayes&quot;,   &#39;Al St. John&#39;],  &#39;genres&#39;: [&#39;Music&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &quot;We Can&#39;t Go Home Again&quot;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Nicholas Ray&#39;],  &#39;actors&#39;: [&#39;Richard Bock&#39;, &#39;Tom Farrell&#39;, &#39;Danny Fisher&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &quot;America&#39;s Sweethearts&quot;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Joe Roth&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Billy Crystal&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &quot;Cutter&#39;s Way&quot;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Ivan Passer&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;John Heard&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;One Christmas Eve&#39;,  &#39;year&#39;: 2014,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Jay Russell&#39;],  &#39;actors&#39;: [&#39;Kevin Daniels&#39;, &#39;Carlos Gómez&#39;, &#39;Griffin Kane&#39;],  &#39;genres&#39;: [&#39;Family&#39;]}, {&#39;title&#39;: &#39;I Love Melvin&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Don Weis&#39;],  &#39;actors&#39;: [&quot;Donald O&#39;Connor&quot;, &#39;Richard Anderson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Luck of the Draw&#39;,  &#39;year&#39;: 2000,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Luca Bercovici&#39;],  &#39;actors&#39;: [&#39;James Marshall&#39;,   &#39;Dennis Hopper&#39;,   &#39;Michael Madsen&#39;,   &#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;How the West Was Won&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;John Ford&#39;,   &#39;Richard Thorpe&#39;,   &#39;George Marshall&#39;,   &#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;James Stewart&#39;, &#39;John Wayne&#39;, &#39;Gregory Peck&#39;, &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Groove&#39;,  &#39;year&#39;: 2000,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Greg Harrison&#39;],  &#39;actors&#39;: [&#39;Chris Ferreira&#39;, &#39;Steve Van Wormer&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;The Lucky Texan&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;Gordon De Main&#39;,   &#39;John Wayne&#39;,   &quot;George &#39;Gabby&#39; Hayes&quot;,   &#39;Lloyd Whitlock&#39;,   &#39;Yakima Canutt&#39;,   &#39;Eddie Parker&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Solomon and Sheba&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;King Vidor&#39;],  &#39;actors&#39;: [&#39;Yul Brynner&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Q &amp; A&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Sidney Lumet&#39;],  &#39;actors&#39;: [&#39;Nick Nolte&#39;,   &#39;Timothy Hutton&#39;,   &#39;Armand Assante&#39;,   &quot;Patrick O&#39;Neal&quot;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;This Land Is Mine&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Jean Renoir&#39;],  &#39;actors&#39;: [&#39;Charles Laughton&#39;, &#39;George Sanders&#39;, &#39;Walter Slezak&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Back to Bataan&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Edward Dmytryk&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Saint of Fort Washington&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Tim Hunter&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Matt Dillon&#39;, &#39;Rick Aviles&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Rage in Heaven&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Richard Thorpe&#39;, &#39;Robert B. Sinclair&#39;, &#39;W.S. Van Dyke&#39;],  &#39;actors&#39;: [&#39;Robert Montgomery&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Not as a Stranger&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Stanley Kramer&#39;],  &#39;actors&#39;: [&#39;Frank Sinatra&#39;, &#39;Robert Mitchum&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Slither&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Howard Zieff&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Peter Boyle&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Late George Apley&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Joseph L. Mankiewicz&#39;],  &#39;actors&#39;: [&#39;Ronald Colman&#39;, &#39;Richard Haydn&#39;, &#39;Charles Russell&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The American Success Company&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;William Richert&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Ned Beatty&#39;, &#39;Steven Keats&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Young Man with Ideas&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Mitchell Leisen&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Hunley&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;John Gray&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;,   &#39;Donald Sutherland&#39;,   &#39;Alex Jennings&#39;,   &#39;Chris Bauer&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Beloved&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Jonathan Demme&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Emil Pinnock&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Horror&#39;]}, {&#39;title&#39;: &#39;Being John Malkovich&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Spike Jonze&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;John Malkovich&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Capricorn One&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Peter Hyams&#39;],  &#39;actors&#39;: [&#39;Elliott Gould&#39;, &#39;James Brolin&#39;, &#39;Sam Waterston&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Santa Fe Stampede&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;George Sherman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ray Corrigan&#39;, &#39;Max Terhune&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Great Balls of Fire!&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Jim McBride&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;John Doe&#39;, &#39;Stephen Tobolowsky&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Hope Springs&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;David Frankel&#39;],  &#39;actors&#39;: [&#39;Tommy Lee Jones&#39;, &#39;Steve Carell&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Supernatural&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Victor Halperin&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Alan Dinehart&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;El kárate, el Colt y el impostor&#39;,  &#39;year&#39;: 1974,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Antonio Margheriti&#39;],  &#39;actors&#39;: [&#39;Lee Van Cleef&#39;, &#39;Lieh Lo&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Scugnizzi&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Nanni Loy&#39;],  &#39;actors&#39;: [&#39;Leo Gullotta&#39;,   &#39;Francesco Allocca&#39;,   &#39;Gaetano Amato&#39;,   &#39;Pino Ammendola&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Generation Gap&#39;,  &#39;year&#39;: 2008,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Bill Norton&#39;],  &#39;actors&#39;: [&#39;Edward Asner&#39;, &#39;Alex Black&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;The Return of the Living Dead&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&quot;Dan O&#39;Bannon&quot;],  &#39;actors&#39;: [&#39;Clu Gulager&#39;, &#39;James Karen&#39;, &#39;Don Calfa&#39;, &#39;Thom Mathews&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Lethal Weapon 4&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Richard Donner&#39;],  &#39;actors&#39;: [&#39;Mel Gibson&#39;, &#39;Danny Glover&#39;, &#39;Joe Pesci&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The World of Apu&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Soumitra Chatterjee&#39;, &#39;Alok Chakravarty&#39;, &#39;Swapan Mukherjee&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Kampf um Rom II - Der Verrat&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Robert Siodmak&#39;, &#39;Sergiu Nicolaescu&#39;, &#39;Andrew Marton&#39;],  &#39;actors&#39;: [&#39;Laurence Harvey&#39;, &#39;Orson Welles&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Another Face&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Christy Cabanne&#39;],  &#39;actors&#39;: [&#39;Wallace Ford&#39;, &#39;Brian Donlevy&#39;, &#39;Erik Rhodes&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Lawless Nineties&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Joseph Kane&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Harry Woods&#39;, &quot;George &#39;Gabby&#39; Hayes&quot;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Breakdown&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Jonathan Mostow&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;J.T. Walsh&#39;, &#39;M.C. Gainey&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Nowhere Land&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 4.3,  &#39;directors&#39;: [&#39;Rupert Hitzig&#39;],  &#39;actors&#39;: [&#39;Peter Dobson&#39;, &#39;Jon Polito&#39;, &#39;Francesco Quinn&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;We Need to Talk About Kevin&#39;,  &#39;year&#39;: 2011,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Lynne Ramsay&#39;],  &#39;actors&#39;: [&#39;John C. Reilly&#39;, &#39;Ezra Miller&#39;, &#39;Jasper Newell&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Tequila Sunrise&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Robert Towne&#39;],  &#39;actors&#39;: [&#39;Mel Gibson&#39;, &#39;Kurt Russell&#39;, &#39;Raul Julia&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Fatal Desire&#39;,  &#39;year&#39;: 2006,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Ralph Hemecker&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Vantage Point&#39;,  &#39;year&#39;: 2008,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Pete Travis&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Forest Whitaker&#39;, &#39;Matthew Fox&#39;, &#39;Bruce McGill&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Greetings&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Brian De Palma&#39;],  &#39;actors&#39;: [&#39;Jonathan Warden&#39;,   &#39;Robert De Niro&#39;,   &#39;Gerrit Graham&#39;,   &#39;Richard Hamilton&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Blue-Eyed Butcher&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Stephen Kay&#39;],  &#39;actors&#39;: [&#39;Justin Bruening&#39;, &#39;W. Earl Brown&#39;, &#39;Michael Gross&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Good Catholic&#39;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Paul Shoulberg&#39;],  &#39;actors&#39;: [&#39;Zachary Spicer&#39;, &#39;Danny Glover&#39;, &#39;John C. McGinley&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Dark Angel&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Robert Iscove&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Linden Ashby&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Trainspotting&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Danny Boyle&#39;],  &#39;actors&#39;: [&#39;Ewan McGregor&#39;,   &#39;Ewen Bremner&#39;,   &#39;Jonny Lee Miller&#39;,   &#39;Kevin McKidd&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Man from Del Rio&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Harry Horner&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Peter Whitney&#39;, &#39;Douglas Fowley&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Ten Wanted Men&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;H. Bruce Humberstone&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Richard Boone&#39;, &#39;Alfonso Bedoya&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Return of Joe Rich&#39;,  &#39;year&#39;: 2011,  &#39;rating&#39;: 4.1,  &#39;directors&#39;: [&#39;Sam Auster&#39;],  &#39;actors&#39;: [&#39;Sam Witwer&#39;, &#39;Armand Assante&#39;, &#39;Tim Kazurinsky&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Carson City&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;André De Toth&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Raymond Massey&#39;, &#39;Richard Webb&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;One Shoe Makes It Murder&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;William Hale&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Mel Ferrer&#39;, &#39;José Pérez&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Promises in the Dark&#39;,  &#39;year&#39;: 1979,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Jerome Hellman&#39;],  &#39;actors&#39;: [&#39;Ned Beatty&#39;, &#39;Michael Brandon&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Beyond the Lights&#39;,  &#39;year&#39;: 2014,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Gina Prince-Bythewood&#39;],  &#39;actors&#39;: [&#39;Nate Parker&#39;, &#39;Danny Glover&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Sweet Bird of Youth&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Richard Brooks&#39;],  &#39;actors&#39;: [&#39;Paul Newman&#39;, &#39;Ed Begley&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Feu Mathias Pascal&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Pierre Chenal&#39;],  &#39;actors&#39;: [&#39;Pierre Blanchar&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Down to the Sea in Ships&#39;,  &#39;year&#39;: 1922,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Elmer Clifton&#39;],  &#39;actors&#39;: [&#39;Leigh Smith&#39;,   &#39;Raymond McKee&#39;,   &#39;William Walcott&#39;,   &#39;James Turfler&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &quot;Lee Daniels&#39; The Butler&quot;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Lee Daniels&#39;],  &#39;actors&#39;: [&#39;Forest Whitaker&#39;, &#39;John Cusack&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Dead Man Out&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Richard Pearce&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Tom Atkins&#39;, &#39;Rubén Blades&#39;, &#39;Larry Block&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Illusions&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Victor Kulle&#39;],  &#39;actors&#39;: [&#39;Robert Carradine&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Deer Hunter&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Michael Cimino&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;,   &#39;Christopher Walken&#39;,   &#39;John Cazale&#39;,   &#39;John Savage&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Island in the Sky&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Lloyd Nolan&#39;, &#39;Walter Abel&#39;, &#39;James Arness&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Walking Hills&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;John Sturges&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;William Bishop&#39;, &#39;Edgar Buchanan&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Thriller&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Her Cardboard Lover&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;George Cukor&#39;],  &#39;actors&#39;: [&#39;Robert Taylor&#39;, &#39;George Sanders&#39;, &#39;Frank McHugh&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Rope of Sand&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;William Dieterle&#39;],  &#39;actors&#39;: [&#39;Burt Lancaster&#39;, &#39;Paul Henreid&#39;, &#39;Claude Rains&#39;, &#39;Peter Lorre&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;]}, {&#39;title&#39;: &#39;Barnyard&#39;,  &#39;year&#39;: 2006,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Steve Oedekerk&#39;],  &#39;actors&#39;: [&#39;Kevin James&#39;, &#39;Danny Glover&#39;, &#39;Sam Elliott&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &quot;A Children&#39;s Story&quot;,  &#39;year&#39;: 2004,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Andrea Frazzi&#39;, &#39;Antonio Frazzi&#39;],  &#39;actors&#39;: [&#39;Gianluca Di Gennaro&#39;,   &#39;Carmine Recano&#39;,   &#39;Arturo Paglia&#39;,   &#39;Sergio Solli&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Class&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;David S. Cass Sr.&#39;],  &#39;actors&#39;: [&#39;Justin Bruening&#39;, &#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Stage Struck&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Sidney Lumet&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Herbert Marshall&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Third Wish&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Shelley Jensen&#39;],  &#39;actors&#39;: [&#39;Sean Maguire&#39;, &#39;Armand Assante&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Great Gatsby&#39;,  &#39;year&#39;: 1974,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Jack Clayton&#39;],  &#39;actors&#39;: [&#39;Robert Redford&#39;, &#39;Bruce Dern&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Jagged Edge&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Richard Marquand&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Peter Coyote&#39;, &#39;Robert Loggia&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Blood of the Condor&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Jorge Sanjinés&#39;],  &#39;actors&#39;: [&#39;Marcelino Yanahuaya&#39;, &#39;Vicente Verneros Salinas&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;D.C. Cab&#39;,  &#39;year&#39;: 1983,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Joel Schumacher&#39;],  &#39;actors&#39;: [&#39;Max Gail&#39;, &#39;Adam Baldwin&#39;, &#39;Mr. T&#39;, &#39;Charlie Barnett&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Jesse James&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Henry King&#39;, &#39;Irving Cummings&#39;],  &#39;actors&#39;: [&#39;Tyrone Power&#39;, &#39;Henry Fonda&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;I Accuse&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Abel Gance&#39;],  &#39;actors&#39;: [&#39;Victor Francen&#39;, &#39;Marcel Delaître&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Fat Man and Little Boy&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Roland Joffé&#39;],  &#39;actors&#39;: [&#39;Paul Newman&#39;, &#39;Dwight Schultz&#39;, &#39;John Cusack&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Flight of the Phoenix&#39;,  &#39;year&#39;: 2004,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;John Moore&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Giovanni Ribisi&#39;, &#39;Tyrese Gibson&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;While the City Sleeps&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Fritz Lang&#39;],  &#39;actors&#39;: [&#39;Dana Andrews&#39;, &#39;George Sanders&#39;, &#39;Howard Duff&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Ox-Bow Incident&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Dana Andrews&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Second Chance&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Rudolph Maté&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Jack Palance&#39;, &#39;Sandro Giglio&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Shark Tale&#39;,  &#39;year&#39;: 2004,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Vicky Jenson&#39;, &#39;Bibo Bergeron&#39;, &#39;Rob Letterman&#39;],  &#39;actors&#39;: [&#39;Will Smith&#39;, &#39;Robert De Niro&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;A Country Wedding&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Anne Wheeler&#39;],  &#39;actors&#39;: [&#39;Jesse Metcalfe&#39;, &#39;Aaron Craven&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &quot;Marvin&#39;s Room&quot;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Jerry Zaks&#39;],  &#39;actors&#39;: [&#39;Leonardo DiCaprio&#39;, &#39;Robert De Niro&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;3 A.M.&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Lee Davis&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Sergej Trifunovic&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Mystery&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The First of May&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Paul Sirmons&#39;],  &#39;actors&#39;: [&#39;Dan Byrd&#39;, &#39;Mickey Rooney&#39;, &#39;Charles Nelson Reilly&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;In Search of the Castaways&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Robert Stevenson&#39;],  &#39;actors&#39;: [&#39;Maurice Chevalier&#39;, &#39;George Sanders&#39;, &#39;Wilfrid Hyde-White&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Family&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Johnny Belinda&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Anthony Page&#39;],  &#39;actors&#39;: [&#39;Richard Thomas&#39;, &#39;Dennis Quaid&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Blood and Sweat&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Rakesh Kumar&#39;],  &#39;actors&#39;: [&#39;Amitabh Bachchan&#39;, &#39;Vinod Khanna&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Jungle Book&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Stephen Sommers&#39;],  &#39;actors&#39;: [&#39;Jason Scott Lee&#39;, &#39;Cary Elwes&#39;, &#39;Sam Neill&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Family&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;At Any Price&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Ramin Bahrani&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Zac Efron&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Paradise Alley&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Sylvester Stallone&#39;],  &#39;actors&#39;: [&#39;Sylvester Stallone&#39;,   &#39;Lee Canalito&#39;,   &#39;Armand Assante&#39;,   &#39;Frank McRae&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Superdad&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Vincent McEveety&#39;],  &#39;actors&#39;: [&#39;Bob Crane&#39;, &#39;Kurt Russell&#39;, &#39;Joe Flynn&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Drum&#39;,  &#39;year&#39;: 2004,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Zola Maseko&#39;],  &#39;actors&#39;: [&#39;Taye Diggs&#39;, &#39;Gabriel Mann&#39;, &#39;Tumisho Masha&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Waffle Street&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Ian Nelms&#39;, &#39;Eshom Nelms&#39;],  &#39;actors&#39;: [&#39;James Lafferty&#39;, &#39;Danny Glover&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Bill&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;Anthony Page&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Dennis Quaid&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &quot;&#39;Gung Ho!&#39;: The Story of Carlson&#39;s Makin Island Raiders&quot;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;,   &#39;Alan Curtis&#39;,   &#39;Noah Beery Jr.&#39;,   &#39;J. Carrol Naish&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Smokey and the Bandit II&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Hal Needham&#39;],  &#39;actors&#39;: [&#39;Burt Reynolds&#39;, &#39;Jackie Gleason&#39;, &#39;Jerry Reed&#39;, &#39;Dom DeLuise&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Honeydripper&#39;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;John Sayles&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Charles S. Dutton&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Diving Bell and the Butterfly&#39;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;Julian Schnabel&#39;],  &#39;actors&#39;: [&#39;Mathieu Amalric&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Se7en&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 8.6,  &#39;directors&#39;: [&#39;David Fincher&#39;],  &#39;actors&#39;: [&#39;Morgan Freeman&#39;,   &#39;Brad Pitt&#39;,   &#39;Kevin Spacey&#39;,   &#39;Andrew Kevin Walker&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Ruby Gentry&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;King Vidor&#39;],  &#39;actors&#39;: [&#39;Charlton Heston&#39;, &#39;Karl Malden&#39;, &#39;Tom Tully&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Two for the Seesaw&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Robert Wise&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Edmon Ryan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Right Stuff&#39;,  &#39;year&#39;: 1983,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Philip Kaufman&#39;],  &#39;actors&#39;: [&#39;Sam Shepard&#39;, &#39;Scott Glenn&#39;, &#39;Ed Harris&#39;, &#39;Dennis Quaid&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Visitor&#39;,  &#39;year&#39;: 1979,  &#39;rating&#39;: 4.9,  &#39;directors&#39;: [&#39;Giulio Paradisi&#39;],  &#39;actors&#39;: [&#39;Mel Ferrer&#39;, &#39;Glenn Ford&#39;, &#39;Lance Henriksen&#39;, &#39;John Huston&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Yards&#39;,  &#39;year&#39;: 2000,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;James Gray&#39;],  &#39;actors&#39;: [&#39;Mark Wahlberg&#39;, &#39;Joaquin Phoenix&#39;, &#39;James Caan&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Tombstone&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;George P. Cosmatos&#39;, &#39;Kevin Jarre&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Val Kilmer&#39;, &#39;Sam Elliott&#39;, &#39;Bill Paxton&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Poltergeist&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 4.9,  &#39;directors&#39;: [&#39;Gil Kenan&#39;],  &#39;actors&#39;: [&#39;Sam Rockwell&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Stone&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;John Curran&#39;],  &#39;actors&#39;: [&#39;Edward Norton&#39;, &#39;Robert De Niro&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Deaden&#39;,  &#39;year&#39;: 2006,  &#39;rating&#39;: 4.3,  &#39;directors&#39;: [&#39;Christian Viel&#39;],  &#39;actors&#39;: [&#39;John Fallon&#39;, &#39;Deke Richards&#39;, &#39;Neil Napier&#39;],  &#39;genres&#39;: [&#39;Action&#39;]}, {&#39;title&#39;: &#39;Dopamine&#39;,  &#39;year&#39;: 2003,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Mark Decena&#39;],  &#39;actors&#39;: [&#39;John Livingston&#39;, &#39;Bruno Campos&#39;, &#39;Rueben Grundy&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Fort Apache&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Henry Fonda&#39;, &#39;Pedro Armendáriz&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;A Fine Step&#39;,  &#39;year&#39;: 2014,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Jonathan Meyers&#39;],  &#39;actors&#39;: [&#39;Luke Perry&#39;, &#39;Armand Assante&#39;, &#39;Cameron Daddo&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Door in the Floor&#39;,  &#39;year&#39;: 2004,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Tod Williams&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Jon Foster&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Fox and the Hound&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Art Stevens&#39;, &#39;Richard Rich&#39;, &#39;Ted Berman&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Kurt Russell&#39;, &#39;Jack Albertson&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Limelight&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;Charles Chaplin&#39;, &#39;Nigel Bruce&#39;, &#39;Buster Keaton&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Big Bad John&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Burt Kennedy&#39;],  &#39;actors&#39;: [&#39;Jimmy Dean&#39;, &#39;Jack Elam&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Maps to the Stars&#39;,  &#39;year&#39;: 2014,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;David Cronenberg&#39;],  &#39;actors&#39;: [&#39;Robert Pattinson&#39;, &#39;John Cusack&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Git Along Little Dogies&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Joseph Kane&#39;],  &#39;actors&#39;: [&#39;Weldon Heyburn&#39;,   &#39;Gene Autry&#39;,   &#39;Smiley Burnette&#39;,   &#39;Maple City Four&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Last Picture Show&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Peter Bogdanovich&#39;],  &#39;actors&#39;: [&#39;Timothy Bottoms&#39;, &#39;Jeff Bridges&#39;, &#39;Ben Johnson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Endangered Species&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 4.3,  &#39;directors&#39;: [&#39;Kevin Tenney&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;,   &#39;Arnold Vosloo&#39;,   &#39;John Rhys-Davies&#39;,   &#39;Tony Lo Bianco&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Sci-Fi&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;City of Ghosts&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Matt Dillon&#39;],  &#39;actors&#39;: [&#39;Matt Dillon&#39;, &#39;James Caan&#39;, &#39;Gérard Depardieu&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &quot;Gideon&#39;s Trumpet&quot;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Robert L. Collins&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;José Ferrer&#39;, &#39;John Houseman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Train Robbers&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Burt Kennedy&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Rod Taylor&#39;, &#39;Ben Johnson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Flapper&#39;,  &#39;year&#39;: 1920,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Alan Crosland&#39;],  &#39;actors&#39;: [&#39;Arthur Housman&#39;,   &#39;Theodore Westman Jr.&#39;,   &#39;William P. Carleton&#39;,   &#39;Warren Cook&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Comedian&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Taylor Hackford&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Danny DeVito&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;City Beneath the Sea&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Robert Ryan&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Soldier&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Paul W.S. Anderson&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Jason Scott Lee&#39;, &#39;Jason Isaacs&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Francesco&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Michele Soavi&#39;],  &#39;actors&#39;: [&#39;Raoul Bova&#39;, &#39;Gianmarco Tognazzi&#39;, &#39;Claudio Gioè&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Hell or High Water&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;David Mackenzie&#39;],  &#39;actors&#39;: [&#39;Chris Pine&#39;, &#39;Ben Foster&#39;, &#39;Jeff Bridges&#39;, &#39;Gil Birmingham&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Rio Bravo&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;Howard Hawks&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Dean Martin&#39;, &#39;Ricky Nelson&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Ride Lonesome&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Pernell Roberts&#39;, &#39;James Best&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Betrayal&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Jack Topalian&#39;],  &#39;actors&#39;: [&#39;Jack Topalian&#39;,   &#39;Eric Roberts&#39;,   &#39;Oleg Taktarov&#39;,   &#39;Scott L. Schwartz&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Guns for San Sebastian&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Henri Verneuil&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Charles Bronson&#39;, &#39;Sam Jaffe&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Winter Wedding&#39;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Jake Helgren&#39;],  &#39;actors&#39;: [&#39;Nick Bateman&#39;, &#39;Adam Senn&#39;],  &#39;genres&#39;: [&#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Lady in Question&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Charles Vidor&#39;],  &#39;actors&#39;: [&#39;Brian Aherne&#39;, &#39;Glenn Ford&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;In Search of America&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Paul Bogart&#39;],  &#39;actors&#39;: [&#39;Carl Betz&#39;, &#39;Jeff Bridges&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Slaughter Trail&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;Irving Allen&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;Gig Young&#39;, &#39;Andy Devine&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Union City&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Marcus Reichert&#39;],  &#39;actors&#39;: [&#39;Dennis Lipscomb&#39;, &#39;Sam McMurray&#39;, &#39;Terry Walsh&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &quot;Jake&#39;s Road&quot;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Mike Mayhall&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Garrett Hines&#39;, &#39;Patrick Flanagan&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Horror&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;A Woman of Paris: A Drama of Fate&#39;,  &#39;year&#39;: 1923,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;Clarence Geldart&#39;,   &#39;Carl Miller&#39;,   &#39;Charles K. French&#39;,   &#39;Adolphe Menjou&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Mr. North&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Danny Huston&#39;],  &#39;actors&#39;: [&#39;Anthony Edwards&#39;, &#39;Robert Mitchum&#39;, &#39;Harry Dean Stanton&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Moving&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Alan Metter&#39;],  &#39;actors&#39;: [&#39;Richard Pryor&#39;, &#39;Raphael Harris&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Union Square&#39;,  &#39;year&#39;: 2011,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Nancy Savoca&#39;],  &#39;actors&#39;: [&#39;Michael Sirow&#39;, &#39;Murray&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;King Kong&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;John Guillermin&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Charles Grodin&#39;, &#39;John Randolph&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Horror&#39;]}, {&#39;title&#39;: &#39;Henry Goes Arizona&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Edwin L. Marin&#39;],  &#39;actors&#39;: [&#39;Frank Morgan&#39;, &#39;Guy Kibbee&#39;, &#39;Slim Summerville&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Happening&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Elliot Silverstein&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;,   &#39;George Maharis&#39;,   &#39;Michael Parks&#39;,   &#39;Robert Walker Jr.&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Boys Town&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Norman Taurog&#39;],  &#39;actors&#39;: [&#39;Spencer Tracy&#39;, &#39;Mickey Rooney&#39;, &#39;Henry Hull&#39;, &#39;Leslie Fenton&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Moonfleet&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Fritz Lang&#39;],  &#39;actors&#39;: [&#39;Stewart Granger&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Mister Roberts&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Joshua Logan&#39;, &#39;John Ford&#39;, &#39;Mervyn LeRoy&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;James Cagney&#39;, &#39;William Powell&#39;, &#39;Jack Lemmon&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Ransom!&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Alex Segal&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Leslie Nielsen&#39;, &#39;Juano Hernandez&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Facade&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 4.7,  &#39;directors&#39;: [&#39;Carl Colpaert&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Angus Macfadyen&#39;, &#39;Brad Garrett&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Escape from New York&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;John Carpenter&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;,   &#39;Lee Van Cleef&#39;,   &#39;Ernest Borgnine&#39;,   &#39;Donald Pleasence&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Express&#39;,  &#39;year&#39;: 2008,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Gary Fleder&#39;],  &#39;actors&#39;: [&#39;Rob Brown&#39;,   &#39;Dennis Quaid&#39;,   &#39;Clancy Brown&#39;,   &#39;Darrin Dewitt Henson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Cahill U.S. Marshal&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Andrew V. McLaglen&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;George Kennedy&#39;, &#39;Gary Grimes&#39;, &#39;Neville Brand&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Inception&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 8.8,  &#39;directors&#39;: [&#39;Christopher Nolan&#39;],  &#39;actors&#39;: [&#39;Leonardo DiCaprio&#39;, &#39;Joseph Gordon-Levitt&#39;, &#39;Ken Watanabe&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;La Cucaracha&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Jack Perez&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;,   &#39;Joaquim de Almeida&#39;,   &#39;Victor Rivers&#39;,   &#39;James McManus&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Last Unicorn&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Arthur Rankin Jr.&#39;, &#39;Jules Bass&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Alan Arkin&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Heat&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Michael Mann&#39;],  &#39;actors&#39;: [&#39;Al Pacino&#39;, &#39;Robert De Niro&#39;, &#39;Val Kilmer&#39;, &#39;Jon Voight&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &quot;Joe&#39;s War&quot;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 4.3,  &#39;directors&#39;: [&#39;Phil Falcone&#39;],  &#39;actors&#39;: [&#39;Michael Markiewicz&#39;,   &#39;Armand Assante&#39;,   &#39;Tom Sizemore&#39;,   &#39;Edward Asner&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &quot;Heaven&#39;s Prisoners&quot;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Phil Joanou&#39;],  &#39;actors&#39;: [&#39;Alec Baldwin&#39;, &#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Way Down East&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Henry King&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Slim Summerville&#39;, &#39;Edward Trevor&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Hellfighters&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Andrew V. McLaglen&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Jim Hutton&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Search for the Gods&#39;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Jud Taylor&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Stephen McHattie&#39;, &#39;Raymond St. Jacques&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Trouble Along the Way&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Michael Curtiz&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Charles Coburn&#39;, &#39;Tom Tully&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Abstraction&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Prince Bagdasarian&#39;],  &#39;actors&#39;: [&#39;Hunter Ives&#39;, &#39;Ken Davitian&#39;, &#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;The Heir Apparent: Largo Winch&#39;,  &#39;year&#39;: 2008,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Jérôme Salle&#39;],  &#39;actors&#39;: [&#39;Tomer Sisley&#39;, &quot;Predrag &#39;Miki&#39; Manojlovic&quot;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Lodger&#39;,  &#39;year&#39;: 1944,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;John Brahm&#39;],  &#39;actors&#39;: [&#39;Laird Cregar&#39;, &#39;George Sanders&#39;, &#39;Cedric Hardwicke&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Horror&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Fade to Black&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Vernon Zimmerman&#39;],  &#39;actors&#39;: [&#39;Dennis Christopher&#39;, &#39;Tim Thomerson&#39;, &#39;Norman Burton&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Horror&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Where Pigeons Go to Die&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Michael Landon&#39;],  &#39;actors&#39;: [&#39;Michael Faustino&#39;,   &#39;Richard Bull&#39;,   &#39;Art Carney&#39;,   &#39;Cliff De Young&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Chisum&#39;,  &#39;year&#39;: 1970,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Andrew V. McLaglen&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;,   &#39;Forrest Tucker&#39;,   &#39;Christopher George&#39;,   &#39;Ben Johnson&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Cheyenne Social Club&#39;,  &#39;year&#39;: 1970,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Gene Kelly&#39;],  &#39;actors&#39;: [&#39;James Stewart&#39;, &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Searchers&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Jeffrey Hunter&#39;, &#39;Ward Bond&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Secrets of Life&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;James Algar&#39;],  &#39;actors&#39;: [&#39;Winston Hibler&#39;],  &#39;genres&#39;: [&#39;Family&#39;]}, {&#39;title&#39;: &#39;Gang Related&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Jim Kouf&#39;],  &#39;actors&#39;: [&#39;Jim Belushi&#39;, &#39;Tupac Shakur&#39;, &#39;Dennis Quaid&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Hearst and Davies Affair&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;David Lowell Rich&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Fritz Weaver&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Samurai Wolf II&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Hideo Gosha&#39;],  &#39;actors&#39;: [&#39;Isao Natsuyagi&#39;, &#39;Ichirô Nakatani&#39;, &#39;Bin Amatsu&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Lord Jeff&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Sam Wood&#39;],  &#39;actors&#39;: [&#39;Freddie Bartholomew&#39;,   &#39;Mickey Rooney&#39;,   &#39;Charles Coburn&#39;,   &#39;Herbert Mundin&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Love Is a Headache&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Richard Thorpe&#39;],  &#39;actors&#39;: [&#39;Franchot Tone&#39;, &#39;Ted Healy&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Love Finds Andy Hardy&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Lewis Stone&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Rocky Mountain Mystery&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Charles Barton&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &quot;Charles &#39;Chic&#39; Sale&quot;, &#39;George F. Marion&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Allegheny Uprising&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;George Sanders&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;History&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Quiet Man&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Barry Fitzgerald&#39;, &#39;Ward Bond&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Against All Flags&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;George Sherman&#39;],  &#39;actors&#39;: [&#39;Errol Flynn&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Affair in Trinidad&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Vincent Sherman&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Alexander Scourby&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Cast a Giant Shadow&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Melville Shavelson&#39;],  &#39;actors&#39;: [&#39;Kirk Douglas&#39;, &#39;John Wayne&#39;, &#39;Frank Sinatra&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Summer Solstice&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Ralph Rosenblum&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Stephen Collins&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Lone Ranger and the Lost City of Gold&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Lesley Selander&#39;],  &#39;actors&#39;: [&#39;Clayton Moore&#39;,   &#39;Jay Silverheels&#39;,   &#39;Douglas Kennedy&#39;,   &#39;Charles Watts&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Man of the Forest&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Barton MacLane&#39;, &#39;Randolph Scott&#39;, &#39;Harry Carey&#39;, &#39;Noah Beery&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Dog Year&#39;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;George LaVoo&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Domhnall Gleeson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;DragonHeart&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Rob Cohen&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Sean Connery&#39;, &#39;Pete Postlethwaite&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Pushing Dead&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Tom E. Brown&#39;],  &#39;actors&#39;: [&#39;James Roday&#39;, &#39;Danny Glover&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Mooz-Lum&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Qasim Basir&#39;],  &#39;actors&#39;: [&#39;Evan Ross&#39;, &#39;Roger Guenveur Smith&#39;, &#39;Danny Glover&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;The Affair&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Paul Seed&#39;],  &#39;actors&#39;: [&#39;Courtney B. Vance&#39;, &#39;Leland Gantt&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &quot;Now You See Him, Now You Don&#39;t&quot;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Robert Butler&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Cesar Romero&#39;, &#39;Joe Flynn&#39;, &#39;Jim Backus&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;White Lightning&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Joseph Sargent&#39;],  &#39;actors&#39;: [&#39;Burt Reynolds&#39;, &#39;Ned Beatty&#39;, &#39;Bo Hopkins&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Mask of the Avenger&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Phil Karlson&#39;],  &#39;actors&#39;: [&#39;John Derek&#39;, &#39;Anthony Quinn&#39;, &#39;Arnold Moss&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;On Our Merry Way&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;George Stevens&#39;,   &#39;Leslie Fenton&#39;,   &#39;King Vidor&#39;,   &#39;John Huston&#39;],  &#39;actors&#39;: [&#39;Burgess Meredith&#39;, &#39;James Stewart&#39;, &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Music&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Legendary&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Mel Damski&#39;],  &#39;actors&#39;: [&#39;John Cena&#39;, &#39;Danny Glover&#39;, &#39;Devon Graye&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Living with the Dead&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Stephen Gyllenhaal&#39;],  &#39;actors&#39;: [&#39;Ted Danson&#39;, &#39;Michael Moriarty&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Used Cars&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Robert Zemeckis&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Jack Warden&#39;, &#39;Gerrit Graham&#39;, &#39;Frank McRae&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Gammera the Invincible&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Noriaki Yuasa&#39;, &#39;Sandy Howard&#39;],  &#39;actors&#39;: [&#39;Albert Dekker&#39;, &#39;Brian Donlevy&#39;, &#39;John Baragrey&#39;],  &#39;genres&#39;: [&#39;Family&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Song of Scheherazade&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Walter Reisch&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;Jean-Pierre Aumont&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Ride the High Country&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Sam Peckinpah&#39;],  &#39;actors&#39;: [&#39;Joel McCrea&#39;, &#39;Randolph Scott&#39;, &#39;Ron Starr&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Good Neighbor&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Kasra Farahani&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Logan Miller&#39;, &#39;Keir Gilchrist&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Horror&#39;]}, {&#39;title&#39;: &quot;Siren&#39;s Kiss&quot;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Edward Holzman&#39;],  &#39;actors&#39;: [&#39;Bobby Johnston&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Saint Strikes Back&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Jonathan Hale&#39;, &#39;Jerome Cowan&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Saint in London&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;John Paddy Carstairs&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;David Burns&#39;, &#39;Gordon McLeod&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;2001: A Space Odyssey&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Stanley Kubrick&#39;],  &#39;actors&#39;: [&#39;Keir Dullea&#39;,   &#39;Gary Lockwood&#39;,   &#39;William Sylvester&#39;,   &#39;Daniel Richter&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;5 Card Stud&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Dean Martin&#39;, &#39;Robert Mitchum&#39;, &#39;Roddy McDowall&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Five Minarets in New York&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Mahsun Kirmizigül&#39;],  &#39;actors&#39;: [&#39;Haluk Bilginer&#39;, &#39;Danny Glover&#39;, &#39;Mahsun Kirmizigül&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Nausicaä of the Valley of the Wind&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Hayao Miyazaki&#39;],  &#39;actors&#39;: [&#39;Mahito Tsujimura&#39;, &#39;Gorô Naya&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;I, the Jury&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Richard T. Heffron&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;Alan King&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Great Diamond Robbery&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Robert Z. Leonard&#39;],  &#39;actors&#39;: [&#39;Red Skelton&#39;, &#39;James Whitmore&#39;, &#39;Kurt Kasznar&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Amelia&#39;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Mira Nair&#39;],  &#39;actors&#39;: [&#39;Richard Gere&#39;, &#39;Ewan McGregor&#39;, &#39;Christopher Eccleston&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Pilgrim&#39;,  &#39;year&#39;: 1923,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;Loyal Underwood&#39;,   &#39;Charles Chaplin&#39;,   &#39;Syd Chaplin&#39;,   &#39;Dean Riesner&#39;,   &#39;Charles Reisner&#39;,   &#39;Tom Murray&#39;,   &#39;Mack Swain&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Watch Out for the Automobile&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Eldar Ryazanov&#39;],  &#39;actors&#39;: [&#39;Innokentiy Smoktunovskiy&#39;, &#39;Oleg Efremov&#39;, &#39;Anatoliy Papanov&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;A Big Hand for the Little Lady&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Fielder Cook&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Jason Robards&#39;, &#39;Paul Ford&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Mister Moses&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Ronald Neame&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Ian Bannen&#39;, &#39;Alexander Knox&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;]}, {&#39;title&#39;: &#39;The Immortals&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Brian Grant&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Joe Pantoliano&#39;, &#39;Tony Curtis&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Quicksand&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Irving Pichel&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Peter Lorre&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Halálos tavasz&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;László Kalmár&#39;],  &#39;actors&#39;: [&#39;Pál Jávor&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Green Glove&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Rudolph Maté&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Cedric Hardwicke&#39;, &#39;George Macready&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Trouble with Spies&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Burt Kennedy&#39;],  &#39;actors&#39;: [&#39;Donald Sutherland&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;I Love You, Alice B. Toklas!&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Hy Averback&#39;],  &#39;actors&#39;: [&#39;Peter Sellers&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Misery&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Rob Reiner&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Richard Farnsworth&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Igor&#39;,  &#39;year&#39;: 2008,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Tony Leondis&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Steve Buscemi&#39;],  &#39;genres&#39;: [&#39;Animation&#39;, &#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;TRON: Legacy&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Joseph Kosinski&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Garrett Hedlund&#39;, &#39;Bruce Boxleitner&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;The Americano&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;William Castle&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Frank Lovejoy&#39;, &#39;Cesar Romero&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;In Montauk&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Kim Cummings&#39;],  &#39;actors&#39;: [&#39;Lukas Hassel&#39;, &#39;George Katt&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Duck, You Sucker&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Sergio Leone&#39;],  &#39;actors&#39;: [&#39;Rod Steiger&#39;, &#39;James Coburn&#39;, &#39;Romolo Valli&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Kansas Raiders&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Tony Curtis&#39;, &#39;Audie Murphy&#39;, &#39;Brian Donlevy&#39;, &#39;Scott Brady&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Guilty by Suspicion&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Irwin Winkler&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;George Wendt&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;To the Last Man&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Noah Beery&#39;,   &#39;Randolph Scott&#39;,   &#39;Jack La Rue&#39;,   &#39;Buster Crabbe&#39;,   &#39;Barton MacLane&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Crimson Ghost&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;William Witney&#39;, &#39;Fred C. Brannon&#39;],  &#39;actors&#39;: [&#39;Charles Quigley&#39;, &#39;Clayton Moore&#39;, &#39;I. Stanford Jolley&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Fatal Instinct&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Carl Reiner&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Sleepers&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Barry Levinson&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Kevin Bacon&#39;, &#39;Brad Pitt&#39;, &#39;Jason Patric&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Dreamer: Inspired by a True Story&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;John Gatins&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Oded Fehr&#39;, &#39;Kris Kristofferson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Mikey and Nicky&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Elaine May&#39;],  &#39;actors&#39;: [&#39;Peter Falk&#39;, &#39;John Cassavetes&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;City Lights&#39;,  &#39;year&#39;: 1931,  &#39;rating&#39;: 8.5,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;Charles Chaplin&#39;, &#39;Harry Myers&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Lonely Guy&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Arthur Hiller&#39;],  &#39;actors&#39;: [&#39;Steve Martin&#39;, &#39;Charles Grodin&#39;, &#39;Steve Lawrence&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;T.R. Baskin&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Herbert Ross&#39;],  &#39;actors&#39;: [&#39;Peter Boyle&#39;, &#39;James Caan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Against Her Will: The Carrie Buck Story&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;John David Coles&#39;],  &#39;actors&#39;: [&#39;Peter Frechette&#39;, &#39;Pat Hingle&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Lillian Russell&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Irving Cummings&#39;],  &#39;actors&#39;: [&#39;Leo Carrillo&#39;,   &#39;Don Ameche&#39;,   &#39;Henry Fonda&#39;,   &#39;Edward Arnold&#39;,   &#39;Warren William&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Lucy &amp; Desi: Before the Laughter&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Charles Jarrott&#39;],  &#39;actors&#39;: [&#39;Maurice Benard&#39;, &#39;John Wheeler&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Blackboard Jungle&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Richard Brooks&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Louis Calhern&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Transatlantic Tunnel&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Maurice Elvey&#39;],  &#39;actors&#39;: [&#39;Richard Dix&#39;, &#39;Leslie Banks&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Dawn Rider&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Dennis Moore&#39;, &#39;Reed Howes&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &quot;Judge Hardy&#39;s Children&quot;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Lewis Stone&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Ash Wednesday&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Larry Peerce&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Helmut Berger&#39;, &#39;Keith Baxter&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Distant Thunder&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Soumitra Chatterjee&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Drums in the Deep South&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;William Cameron Menzies&#39;],  &#39;actors&#39;: [&#39;James Craig&#39;, &#39;Guy Madison&#39;, &#39;Barton MacLane&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Strange Deception&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Curzio Malaparte&#39;],  &#39;actors&#39;: [&#39;Raf Vallone&#39;, &#39;Alain Cuny&#39;, &#39;Gino Cervi&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Man from Colorado&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Henry Levin&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;William Holden&#39;, &#39;Ray Collins&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Words&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Lee Sternthal&#39;, &#39;Brian Klugman&#39;],  &#39;actors&#39;: [&#39;Bradley Cooper&#39;, &#39;Dennis Quaid&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;To Each, Her Own&#39;,  &#39;year&#39;: 2018,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Myriam Aziza&#39;],  &#39;actors&#39;: [&#39;Jean-Christophe Folly&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Flame of Barbary Coast&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Joseph Kane&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Joseph Schildkraut&#39;, &#39;William Frawley&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Last Time I Saw Archie&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Jack Webb&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Jack Webb&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Thief&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Michael Mann&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Willie Nelson&#39;, &#39;Jim Belushi&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Idol of the Crowds&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Arthur Lubin&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Charles Brokaw&#39;, &#39;Bill Burrud&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Ransom&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Ron Howard&#39;],  &#39;actors&#39;: [&#39;Mel Gibson&#39;, &#39;Gary Sinise&#39;, &#39;Brawley Nolte&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Cold and Dark&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 4.1,  &#39;directors&#39;: [&#39;Andrew Goth&#39;],  &#39;actors&#39;: [&#39;Luke Goss&#39;, &#39;Kevin Howarth&#39;, &#39;Matt Lucas&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Horror&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Holiday Affair&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Don Hartman&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Wendell Corey&#39;, &#39;Gordon Gebert&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Hoffa&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Danny DeVito&#39;],  &#39;actors&#39;: [&#39;Jack Nicholson&#39;, &#39;Danny DeVito&#39;, &#39;Armand Assante&#39;, &#39;J.T. Walsh&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;High Rollers&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Sergio Corbucci&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Adriano Celentano&#39;, &#39;Ugo Bologna&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;The Great Bank Hoax&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 5.0,  &#39;directors&#39;: [&#39;Joseph Jacoby&#39;],  &#39;actors&#39;: [&#39;Richard Basehart&#39;, &#39;Ned Beatty&#39;, &#39;Burgess Meredith&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;So Ends Our Night&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;John Cromwell&#39;],  &#39;actors&#39;: [&#39;Fredric March&#39;, &#39;Glenn Ford&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Scared Stiff&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 4.9,  &#39;directors&#39;: [&#39;Frank McDonald&#39;],  &#39;actors&#39;: [&#39;Jack Haley&#39;, &#39;Barton MacLane&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Serenity&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Joss Whedon&#39;],  &#39;actors&#39;: [&#39;Nathan Fillion&#39;, &#39;Chiwetel Ejiofor&#39;, &#39;Alan Tudyk&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Death Proof&#39;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Quentin Tarantino&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Music Room&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Chhabi Biswas&#39;, &#39;Gangapada Basu&#39;, &#39;Bismillah Khan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Sagebrush Trail&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Armand Schaefer&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Lane Chandler&#39;, &#39;Yakima Canutt&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Full Metal Jacket&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Stanley Kubrick&#39;],  &#39;actors&#39;: [&#39;Matthew Modine&#39;,   &#39;R. Lee Ermey&#39;,   &quot;Vincent D&#39;Onofrio&quot;,   &#39;Adam Baldwin&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Madness&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Fernando Di Leo&#39;],  &#39;actors&#39;: [&#39;Joe Dallesandro&#39;, &#39;Gianni Macchia&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Hostage Flight&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Steven Hilliard Stern&#39;],  &#39;actors&#39;: [&#39;Ned Beatty&#39;, &#39;René Enríquez&#39;, &#39;Jack Gilford&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;American Dreamz&#39;,  &#39;year&#39;: 2006,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Paul Weitz&#39;],  &#39;actors&#39;: [&#39;Hugh Grant&#39;, &#39;Dennis Quaid&#39;, &#39;Willem Dafoe&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;The Paperboy&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Lee Daniels&#39;],  &#39;actors&#39;: [&#39;Matthew McConaughey&#39;, &#39;John Cusack&#39;, &#39;Zac Efron&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Young Billy Young&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Burt Kennedy&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Robert Walker Jr.&#39;, &#39;David Carradine&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Show-Off&#39;,  &#39;year&#39;: 1926,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Malcolm St. Clair&#39;],  &#39;actors&#39;: [&#39;Gregory Kelly&#39;, &#39;Ford Sterling&#39;, &#39;Charles Goodrich&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Judge Hardy and Son&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Lewis Stone&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Shift&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Lee Cipolla&#39;],  &#39;actors&#39;: [&#39;Leo Oliva&#39;, &#39;Danny Glover&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Flight of the Intruder&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;John Milius&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Willem Dafoe&#39;, &#39;Brad Johnson&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;A Date with the Falcon&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Irving Reis&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;James Gleason&#39;, &#39;Allen Jenkins&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;My Favorite Wife&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Garson Kanin&#39;],  &#39;actors&#39;: [&#39;Cary Grant&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &quot;You Can&#39;t Escape Forever&quot;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Jo Graham&#39;],  &#39;actors&#39;: [&#39;George Brent&#39;, &#39;Gene Lockhart&#39;, &#39;Roscoe Karns&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Christmas Miracle in Caufield, U.S.A.&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Jud Taylor&#39;],  &#39;actors&#39;: [&#39;Mitchell Ryan&#39;,   &#39;Kurt Russell&#39;,   &#39;Andrew Prine&#39;,   &#39;John Carradine&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;2 Bedroom 1 Bath&#39;,  &#39;year&#39;: 2014,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Stanley Yung&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Andrew W. Walker&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;A Cry in the Night&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Frank Tuttle&#39;],  &#39;actors&#39;: [&quot;Edmond O&#39;Brien&quot;, &#39;Brian Donlevy&#39;, &#39;Raymond Burr&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Skin Traffik&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;Ara Paiaya&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Mickey Rourke&#39;],  &#39;genres&#39;: [&#39;Action&#39;]}, {&#39;title&#39;: &#39;OSS 117: Cairo, Nest of Spies&#39;,  &#39;year&#39;: 2006,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Michel Hazanavicius&#39;],  &#39;actors&#39;: [&#39;Jean Dujardin&#39;,   &#39;François Damiens&#39;,   &#39;Khalid Maadour&#39;,   &#39;Youssef Hamid&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Freefall&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;John Irvin&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Jeff Fahey&#39;, &#39;Ron Smerczak&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Best of the Best II&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Robert Radler&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Phillip Rhee&#39;, &#39;Chris Penn&#39;, &#39;Edan Gross&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Girl in the Show&#39;,  &#39;year&#39;: 1929,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Edgar Selwyn&#39;],  &#39;actors&#39;: [&#39;Raymond Hackett&#39;, &#39;Edward J. Nugent&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Girl-Getters&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Michael Winner&#39;],  &#39;actors&#39;: [&#39;Oliver Reed&#39;, &#39;Harry Andrews&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Elf&#39;,  &#39;year&#39;: 2003,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Jon Favreau&#39;],  &#39;actors&#39;: [&#39;Will Ferrell&#39;, &#39;James Caan&#39;, &#39;Bob Newhart&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Bone Tomahawk&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;S. Craig Zahler&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;,   &#39;Patrick Wilson&#39;,   &#39;Matthew Fox&#39;,   &#39;Richard Jenkins&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Horror&#39;]}, {&#39;title&#39;: &#39;Augustine: The Decline of the Roman Empire&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Christian Duguay&#39;],  &#39;actors&#39;: [&#39;Alessandro Preziosi&#39;, &#39;Alexander Held&#39;, &#39;Johannes Brandrup&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Adult World&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Scott Coffey&#39;],  &#39;actors&#39;: [&#39;Evan Peters&#39;, &#39;John Cusack&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Runaway Jury&#39;,  &#39;year&#39;: 2003,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Gary Fleder&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Gene Hackman&#39;, &#39;Dustin Hoffman&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Swing Shift&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Jonathan Demme&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Fred Ward&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Raging Bull&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Martin Scorsese&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Joe Pesci&#39;, &#39;Frank Vincent&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;The Lost Capone&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;John Gray&#39;],  &#39;actors&#39;: [&#39;Adrian Pasdar&#39;, &#39;Eric Roberts&#39;, &#39;Titus Welliver&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Child Lost Forever: The Jerry Sherwood Story&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Claudia Weill&#39;],  &#39;actors&#39;: [&#39;Michael McGrady&#39;, &#39;Max Gail&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Raven&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;James McTeigue&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Luke Evans&#39;, &#39;Brendan Gleeson&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Fukrey Returns&#39;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Mrighdeep Lamba&#39;],  &#39;actors&#39;: [&#39;Pulkit Samrat&#39;, &#39;Manjot Singh&#39;, &#39;Ali Fazal&#39;, &#39;Varun Sharma&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;American Sniper&#39;,  &#39;year&#39;: 2014,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Clint Eastwood&#39;],  &#39;actors&#39;: [&#39;Bradley Cooper&#39;, &#39;Kyle Gallner&#39;, &#39;Cole Konis&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Cloudy Sunday&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Manousos Manousakis&#39;],  &#39;actors&#39;: [&#39;Andreas Konstantinou&#39;, &#39;Haris Fragoulis&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Blood Vows: The Story of a Mafia Wife&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Paul Wendkos&#39;],  &#39;actors&#39;: [&#39;Joe Penny&#39;, &#39;Anthony Franciosa&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Shattered Dreams&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Robert Iscove&#39;],  &#39;actors&#39;: [&#39;Michael Nouri&#39;, &#39;James Karen&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &quot;Satan&#39;s Black Wedding&quot;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 4.7,  &#39;directors&#39;: [&#39;Nick Millard&#39;],  &#39;actors&#39;: [&#39;Greg Braddock&#39;, &#39;Ray Myles&#39;, &#39;Barrett Cooper&#39;],  &#39;genres&#39;: [&#39;Horror&#39;]}, {&#39;title&#39;: &#39;El Dorado&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Howard Hawks&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Robert Mitchum&#39;, &#39;James Caan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Terror on a Train&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Ted Tetzlaff&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Maurice Denham&#39;, &#39;Harcourt Williams&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Luckytown&#39;,  &#39;year&#39;: 2000,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Paul Nicholas&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Vincent Kartheiser&#39;, &#39;Luis Guzmán&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Cradle Will Rock&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Tim Robbins&#39;],  &#39;actors&#39;: [&#39;Hank Azaria&#39;, &#39;Rubén Blades&#39;, &#39;John Cusack&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Fail-Safe&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;Sidney Lumet&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Walter Matthau&#39;, &#39;Fritz Weaver&#39;, &quot;Dan O&#39;Herlihy&quot;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Fastest&#39;,  &#39;year&#39;: 2011,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Mark Neale&#39;],  &#39;actors&#39;: [&#39;Ewan McGregor&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;300&#39;,  &#39;year&#39;: 2006,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Zack Snyder&#39;],  &#39;actors&#39;: [&#39;Gerard Butler&#39;, &#39;David Wenham&#39;, &#39;Dominic West&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Blood Money&#39;,  &#39;year&#39;: 2017,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Lucky McKee&#39;],  &#39;actors&#39;: [&#39;Ellar Coltrane&#39;, &#39;Jacob Artist&#39;, &#39;John Cusack&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;To Sleep with Anger&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Charles Burnett&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Paul Butler&#39;, &#39;DeVaughn Nixon&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Cairo&#39;,  &#39;year&#39;: 1963,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Wolf Rilla&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Richard Johnson&#39;, &#39;John Meillon&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Beau Geste&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;Gary Cooper&#39;, &#39;Ray Milland&#39;, &#39;Robert Preston&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Reason to Live, a Reason to Die&#39;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Tonino Valerii&#39;],  &#39;actors&#39;: [&#39;James Coburn&#39;, &#39;Telly Savalas&#39;, &#39;Bud Spencer&#39;, &#39;Georges Géret&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;WW 3&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 5.0,  &#39;directors&#39;: [&#39;Robert Mandel&#39;],  &#39;actors&#39;: [&#39;Timothy Hutton&#39;, &#39;Lane Smith&#39;, &#39;Michael Constantine&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Crossfire&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Edward Dmytryk&#39;],  &#39;actors&#39;: [&#39;Robert Young&#39;, &#39;Robert Mitchum&#39;, &#39;Robert Ryan&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &quot;Before You Say &#39;I Do&#39;&quot;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Paul Fox&#39;],  &#39;actors&#39;: [&#39;David Sutcliffe&#39;, &#39;Brad Borbridge&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;The Saint Takes Over&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Jack Hively&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Jonathan Hale&#39;, &#39;Paul Guilfoyle&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &quot;The Saint&#39;s Double Trouble&quot;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Jack Hively&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Jonathan Hale&#39;, &#39;Bela Lugosi&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Seminole&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Rock Hudson&#39;, &#39;Anthony Quinn&#39;, &#39;Richard Carlson&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Freelancers&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;Jessy Terrero&#39;],  &#39;actors&#39;: [&#39;50 Cent&#39;,   &#39;Robert De Niro&#39;,   &#39;Forest Whitaker&#39;,   &#39;Malcolm Goodwin&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Ghost Writer&#39;,  &#39;year&#39;: 2010,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Roman Polanski&#39;],  &#39;actors&#39;: [&#39;Ewan McGregor&#39;, &#39;Pierce Brosnan&#39;, &#39;Jon Bernthal&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Bad Sister&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Doug Campbell&#39;],  &#39;actors&#39;: [&#39;Devon Werkheiser&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Island&#39;,  &#39;year&#39;: 2005,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Michael Bay&#39;],  &#39;actors&#39;: [&#39;Ewan McGregor&#39;, &#39;Djimon Hounsou&#39;, &#39;Steve Buscemi&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Strongest Man in the World&#39;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Vincent McEveety&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Joe Flynn&#39;, &#39;Cesar Romero&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Apache Drums&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Hugo Fregonese&#39;],  &#39;actors&#39;: [&#39;Stephen McNally&#39;, &#39;Willard Parker&#39;, &#39;Arthur Shields&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The 25th Hour&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Henri Verneuil&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Grégoire Aslan&#39;, &#39;Michael Redgrave&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Dinner with Friends&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Norman Jewison&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Greg Kinnear&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Fallen Angel&#39;,  &#39;year&#39;: 2003,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Michael Switzer&#39;],  &#39;actors&#39;: [&#39;Gary Sinise&#39;, &#39;Gordon Pinsent&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Dragonfly&#39;,  &#39;year&#39;: 2016,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Cara Greene&#39;, &#39;Maribeth Romslo&#39;],  &#39;actors&#39;: [&#39;David Greene&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Winston Affair&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Guy Hamilton&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Barry Sullivan&#39;, &#39;Trevor Howard&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;See This Movie&#39;,  &#39;year&#39;: 2004,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;David M. Rosenthal&#39;],  &#39;actors&#39;: [&#39;John Cho&#39;, &#39;Seth Meyers&#39;, &quot;Raymond O&#39;Connor&quot;, &#39;Jim Piddock&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Skirts Ahoy!&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Sidney Lanfield&#39;],  &#39;actors&#39;: [&#39;Keefe Brasselle&#39;, &#39;Barry Sullivan&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;A Twist of the Knife&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Jerry London&#39;],  &#39;actors&#39;: [&#39;Dick Van Dyke&#39;, &#39;Stephen Caffrey&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Roulette&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Erik Kristopher Myers&#39;],  &#39;actors&#39;: [&#39;Mike Baldwin&#39;, &#39;Will Haza&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;East of Sumatra&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Jeff Chandler&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Fixer&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 5.0,  &#39;directors&#39;: [&#39;Charles Robert Carner&#39;],  &#39;actors&#39;: [&#39;Jon Voight&#39;, &#39;J.J. Johnston&#39;, &#39;Miguel Sandoval&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Avenging Angelo&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Martyn Burke&#39;],  &#39;actors&#39;: [&#39;Sylvester Stallone&#39;, &#39;Anthony Quinn&#39;, &#39;Raoul Bova&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Arlington Road&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Mark Pellington&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Tim Robbins&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Go West Young Man&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Warren William&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Little Darlings&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Ron Maxwell&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;Matt Dillon&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &quot;We&#39;re No Angels&quot;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Neil Jordan&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Sean Penn&#39;, &#39;Hoyt Axton&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Thunder Road&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Arthur Ripley&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Gene Barry&#39;, &#39;Jacques Aubuchon&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;When the Daltons Rode&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;George Marshall&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Brian Donlevy&#39;, &#39;George Bancroft&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &quot;Nobody&#39;s Fool&quot;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Evelyn Purcell&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Jim Youngs&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Bad Ass 3: Bad Asses on the Bayou&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Craig Moss&#39;],  &#39;actors&#39;: [&#39;Danny Trejo&#39;, &#39;Danny Glover&#39;, &#39;John Amos&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Lost Command&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Mark Robson&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Alain Delon&#39;, &#39;George Segal&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Anzio&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Edward Dmytryk&#39;, &#39;Duilio Coletti&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Peter Falk&#39;, &#39;Robert Ryan&#39;, &#39;Earl Holliman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Fifty Pills&#39;,  &#39;year&#39;: 2006,  &#39;rating&#39;: 5.0,  &#39;directors&#39;: [&#39;Theo Avgerinos&#39;],  &#39;actors&#39;: [&#39;Michael Masini&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Glory Guys&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Arnold Laven&#39;],  &#39;actors&#39;: [&#39;Tom Tryon&#39;, &#39;Harve Presnell&#39;, &#39;James Caan&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Pushing Tin&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Mike Newell&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Billy Bob Thornton&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Seniors&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Rod Amateau&#39;],  &#39;actors&#39;: [&#39;Jeffrey Byron&#39;, &#39;Gary Imhoff&#39;, &#39;Dennis Quaid&#39;, &#39;Lou Richards&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Cruzando&#39;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Michael Ray Escamilla&#39;, &#39;Mando Alvarado&#39;],  &#39;actors&#39;: [&#39;Mando Alvarado&#39;, &#39;David Barrera&#39;, &#39;Tony Campisi&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Friendly Fire&#39;,  &#39;year&#39;: 1979,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;David Greene&#39;],  &#39;actors&#39;: [&#39;Ned Beatty&#39;, &#39;Sam Waterston&#39;, &#39;Dennis Erdman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Mad Max: Fury Road&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;George Miller&#39;],  &#39;actors&#39;: [&#39;Tom Hardy&#39;, &#39;Nicholas Hoult&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Man from Utah&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Edward Peil Sr.&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Crime&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;I Aim at the Stars&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;J. Lee Thompson&#39;],  &#39;actors&#39;: [&#39;Curd Jürgens&#39;, &#39;Herbert Lom&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Eyes of Laura Mars&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Irvin Kershner&#39;],  &#39;actors&#39;: [&#39;Tommy Lee Jones&#39;, &#39;Brad Dourif&#39;, &#39;Rene Auberjonois&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Starman&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;John Carpenter&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Charles Martin Smith&#39;, &#39;Richard Jaeckel&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Home, Sweet Homicide&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Lloyd Bacon&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Dean Stockwell&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &quot;Hangman&#39;s Knot&quot;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Roy Huggins&#39;],  &#39;actors&#39;: [&#39;Richard Denning&#39;,   &#39;Randolph Scott&#39;,   &#39;Claude Jarman Jr.&#39;,   &#39;Frank Faylen&#39;,   &#39;Glenn Langan&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The World in His Arms&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Raoul Walsh&#39;],  &#39;actors&#39;: [&#39;Gregory Peck&#39;, &#39;Anthony Quinn&#39;, &#39;John McIntire&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Lonely Hearts&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Andrew Lane&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Ride Back&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Oscar Rudolph&#39;, &#39;Allen H. Miner&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;William Conrad&#39;, &#39;Victor Millan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Hot Pursuit&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Steven Lisberger&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Robert Loggia&#39;, &#39;Jerry Stiller&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Sidekicks&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 5.0,  &#39;directors&#39;: [&#39;Aaron Norris&#39;],  &#39;actors&#39;: [&#39;Chuck Norris&#39;, &#39;Beau Bridges&#39;, &#39;Jonathan Brandis&#39;, &#39;Mako&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Heist&#39;,  &#39;year&#39;: 2015,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Scott Mann&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Jeffrey Dean Morgan&#39;, &#39;Dave Bautista&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Tall in the Saddle&#39;,  &#39;year&#39;: 1944,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Edwin L. Marin&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ward Bond&#39;, &quot;George &#39;Gabby&#39; Hayes&quot;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Good Times&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;William Friedkin&#39;],  &#39;actors&#39;: [&#39;Sonny Bono&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Doctor and the Girl&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Curtis Bernhardt&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Charles Coburn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Finding Nemo&#39;,  &#39;year&#39;: 2003,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Andrew Stanton&#39;, &#39;Lee Unkrich&#39;],  &#39;actors&#39;: [&#39;Albert Brooks&#39;, &#39;Alexander Gould&#39;, &#39;Willem Dafoe&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Lady and Gent&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Stephen Roberts&#39;],  &#39;actors&#39;: [&#39;Morgan Wallace&#39;,   &#39;George Bancroft&#39;,   &#39;Charles Starrett&#39;,   &#39;James Gleason&#39;,   &#39;John Wayne&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;The Rice People&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Rithy Panh&#39;],  &#39;actors&#39;: [&#39;Mom Soth&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Stagecoach&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Andy Devine&#39;, &#39;John Carradine&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Hamlet Goes Business&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Aki Kaurismäki&#39;],  &#39;actors&#39;: [&#39;Pirkka-Pekka Petelius&#39;, &#39;Esko Salminen&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Batwoman&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;René Cardona&#39;],  &#39;actors&#39;: [&#39;Roberto Cañedo&#39;, &#39;Héctor Godoy&#39;, &#39;David Silva&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Sands of Iwo Jima&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Allan Dwan&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;John Agar&#39;, &#39;Forrest Tucker&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Down with Love&#39;,  &#39;year&#39;: 2003,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Peyton Reed&#39;],  &#39;actors&#39;: [&#39;Ewan McGregor&#39;, &#39;David Hyde Pierce&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Desert Trail&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Lewis D. Collins&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Paul Fix&#39;, &#39;Eddy Chandler&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;King of the Pecos&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Joseph Kane&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Cy Kendall&#39;, &#39;Jack Rube Clifford&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &quot;Pete&#39;s Dragon&quot;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Don Chaffey&#39;],  &#39;actors&#39;: [&#39;Sean Marshall&#39;, &#39;Jim Dale&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Tall Man Riding&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Lesley Selander&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;William Ching&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Pursued&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Raoul Walsh&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Dean Jagger&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Private Affairs of Bel Ami&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Albert Lewin&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;John Carradine&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Randy Rides Alone&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Harry L. Fraser&#39;],  &#39;actors&#39;: [&#39;Artie Ortego&#39;,   &#39;John Wayne&#39;,   &quot;George &#39;Gabby&#39; Hayes&quot;,   &#39;Yakima Canutt&#39;,   &#39;Earl Dwire&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;A Matter of Resistance&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Jean-Paul Rappeneau&#39;],  &#39;actors&#39;: [&#39;Pierre Brasseur&#39;, &#39;Philippe Noiret&#39;, &#39;Henri Garcin&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Black Gold&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Phil Karlson&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &quot;&#39;Ducky&#39; Louie&quot;, &#39;Raymond Hatton&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Max&#39;,  &#39;year&#39;: 2002,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Menno Meyjes&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Noah Taylor&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Crack-Up&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Malcolm St. Clair&#39;],  &#39;actors&#39;: [&#39;Peter Lorre&#39;, &#39;Brian Donlevy&#39;, &#39;Ralph Morgan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The House of the Seven Gables&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Joe May&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Vincent Price&#39;, &#39;Dick Foran&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Angels &amp; Demons&#39;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Ron Howard&#39;],  &#39;actors&#39;: [&#39;Tom Hanks&#39;, &#39;Ewan McGregor&#39;, &#39;Stellan Skarsgård&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &quot;Kiki&#39;s Delivery Service&quot;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Hayao Miyazaki&#39;],  &#39;actors&#39;: [&#39;Kappei Yamaguchi&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Rover&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Terence Young&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Richard Johnson&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;8 Million Ways to Die&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Hal Ashby&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Randy Brooks&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Sensation&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Brian Grant&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Ron Perlman&#39;, &#39;Paul Le Mat&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Alamo&#39;,  &#39;year&#39;: 2004,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;John Lee Hancock&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;,   &#39;Billy Bob Thornton&#39;,   &#39;Emilio Echevarría&#39;,   &#39;Jason Patric&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Last Run&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 5.0,  &#39;directors&#39;: [&#39;Anthony Hickox&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;,   &#39;Corey Johnson&#39;,   &#39;Barna Illyés&#39;,   &#39;Anthony Hickox&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Why Me?&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Fielder Cook&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;Craig Wasson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Loves of Carmen&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Charles Vidor&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Ron Randell&#39;, &#39;Victor Jory&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Down for Life&#39;,  &#39;year&#39;: 2009,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Alan Jacobs&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Snoop Dogg&#39;, &#39;Laz Alonso&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Saw&#39;,  &#39;year&#39;: 2004,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;James Wan&#39;],  &#39;actors&#39;: [&#39;Cary Elwes&#39;, &#39;Leigh Whannell&#39;, &#39;Danny Glover&#39;, &#39;Ken Leung&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Tapeheads&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Bill Fishman&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Tim Robbins&#39;, &#39;Clu Gulager&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;A Question of Love&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Jerry Thorpe&#39;],  &#39;actors&#39;: [&#39;Ned Beatty&#39;, &#39;Clu Gulager&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &quot;Surf&#39;s Up&quot;,  &#39;year&#39;: 2007,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Chris Buck&#39;, &#39;Ash Brannon&#39;],  &#39;actors&#39;: [&#39;Shia LaBeouf&#39;, &#39;Jon Heder&#39;, &#39;Jeff Bridges&#39;],  &#39;genres&#39;: [&#39;Animation&#39;, &#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Hot Spell&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;George Cukor&#39;, &#39;Daniel Mann&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Earl Holliman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;So Red the Rose&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;King Vidor&#39;],  &#39;actors&#39;: [&#39;Walter Connolly&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Man of Passion&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;José Antonio de la Loma&#39;],  &#39;actors&#39;: [&#39;R.J. Williams&#39;, &#39;Anthony Quinn&#39;, &#39;Ramon Estevez&#39;, &#39;Ray Walston&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Violation of Sarah McDavid&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;John Llewellyn Moxey&#39;],  &#39;actors&#39;: [&#39;Ned Beatty&#39;, &#39;James Sloyan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Long Ride Home&#39;,  &#39;year&#39;: 2003,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Robert Marcarelli&#39;],  &#39;actors&#39;: [&#39;Randy Travis&#39;, &#39;Eric Roberts&#39;, &#39;Ernest Borgnine&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Bandido!&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Richard Fleischer&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Gilbert Roland&#39;, &#39;Zachary Scott&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Undefeated&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Andrew V. McLaglen&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Rock Hudson&#39;, &#39;Antonio Aguilar&#39;, &#39;Roman Gabriel&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Nature of the Beast&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Victor Salva&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Lance Henriksen&#39;, &#39;Brion James&#39;, &#39;Frank Novak&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Horror&#39;, &#39;Mystery&#39;]}, ...]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q12 what are the first 3 rows in movies?</span><span class="token keyword">def</span> <span class="token function">get_first_rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    new_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        new_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>movies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> new_listget_first_rows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[{&#39;title&#39;: &#39;The Big Wedding&#39;,  &#39;year&#39;: 2013,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Justin Zackham&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Affair of the Necklace&#39;,  &#39;year&#39;: 2001,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Charles Shyer&#39;],  &#39;actors&#39;: [&#39;Simon Baker&#39;, &#39;Jonathan Pryce&#39;, &#39;Adrien Brody&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Barefoot Executive&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Robert Butler&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Joe Flynn&#39;, &#39;Harry Morgan&#39;, &#39;Wally Cox&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;]}]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q13 what are the last 3 rows in movies?</span><span class="token keyword">def</span> <span class="token function">get_last_rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>movies<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>movies<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>movies<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>get_last_rows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[{&#39;title&#39;: &#39;Fortitude and Glory: Angelo Dundee and His Fighters&#39;,  &#39;year&#39;: 2012,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Chris Tasara&#39;],  &#39;actors&#39;: [&#39;Angelo Dundee&#39;, &#39;George Foreman&#39;, &#39;Freddie Roach&#39;],  &#39;genres&#39;: [&#39;Sport&#39;]}, {&#39;title&#39;: &#39;Ivanhoe&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Richard Thorpe&#39;],  &#39;actors&#39;: [&#39;Robert Taylor&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Great Gatsby&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Elliott Nugent&#39;],  &#39;actors&#39;: [&#39;Alan Ladd&#39;, &#39;Macdonald Carey&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># you are not allowed to change this function</span><span class="token keyword">def</span> <span class="token function">filter_movies_by_year</span><span class="token punctuation">(</span>movies<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>movies<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> movies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"year"</span><span class="token punctuation">]</span> <span class="token operator">!=</span> year<span class="token punctuation">:</span>            movies<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> movies<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q14 what are the movies from 1931?</span>movies_14 <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>movies<span class="token punctuation">)</span>filter_movies_by_year<span class="token punctuation">(</span>movies_14<span class="token punctuation">,</span><span class="token number">1931</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[{&#39;title&#39;: &#39;Arizona&#39;,  &#39;year&#39;: 1931,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Forrest Stanley&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;City Lights&#39;,  &#39;year&#39;: 1931,  &#39;rating&#39;: 8.5,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;Charles Chaplin&#39;, &#39;Harry Myers&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Range Feud&#39;,  &#39;year&#39;: 1931,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;D. Ross Lederman&#39;],  &#39;actors&#39;: [&#39;Buck Jones&#39;, &#39;John Wayne&#39;, &#39;Edward LeSaint&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Western&#39;]}]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q15 what are the movies from 1932?</span>movies_15 <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>movies<span class="token punctuation">)</span>filter_movies_by_year<span class="token punctuation">(</span>movies_15<span class="token punctuation">,</span><span class="token number">1932</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[{&#39;title&#39;: &#39;Texas Cyclone&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;D. Ross Lederman&#39;],  &#39;actors&#39;: [&#39;Wallace MacDonald&#39;, &#39;Tim McCoy&#39;, &#39;Wheeler Oakman&#39;, &#39;John Wayne&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Haunted Gold&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Mack V. Wright&#39;],  &#39;actors&#39;: [&#39;Otto Hoffman&#39;,   &#39;John Wayne&#39;,   &#39;Duke&#39;,   &#39;Harry Woods&#39;,   &#39;Erville Alderson&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Mystery&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Girl Crazy&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;Bert Wheeler&#39;, &#39;Robert Woolsey&#39;, &#39;Eddie Quillan&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Hot Saturday&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;Cary Grant&#39;, &#39;Randolph Scott&#39;, &#39;Edward Woods&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Lady and Gent&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Stephen Roberts&#39;],  &#39;actors&#39;: [&#39;Morgan Wallace&#39;,   &#39;George Bancroft&#39;,   &#39;Charles Starrett&#39;,   &#39;James Gleason&#39;,   &#39;John Wayne&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;The Big Stampede&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Tenny Wright&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Noah Beery&#39;, &#39;Paul Hurst&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Shadow of the Eagle&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;B. Reeves Eason&#39;, &#39;Ford Beebe&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Walter Miller&#39;, &#39;Kenneth Harlan&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Ride Him, Cowboy&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Fred Allen&#39;],  &#39;actors&#39;: [&#39;Otis Harlan&#39;, &#39;John Wayne&#39;, &#39;Duke&#39;, &#39;Henry B. Walthall&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &quot;Smilin&#39; Through&quot;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Sidney Franklin&#39;],  &#39;actors&#39;: [&#39;Fredric March&#39;, &#39;Leslie Howard&#39;, &#39;O.P. Heggie&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Hurricane Express&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;J.P. McGowan&#39;, &#39;Armand Schaefer&#39;],  &#39;actors&#39;: [&#39;Tully Marshall&#39;, &#39;Conway Tearle&#39;, &#39;John Wayne&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Crime&#39;]}]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q16 how many unique genres are there in the dataset?</span><span class="token keyword">def</span> <span class="token function">get_unique</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token number">0</span>    temp <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>movies<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> movies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">:</span>            temp<span class="token punctuation">.</span>add<span class="token punctuation">(</span>j<span class="token punctuation">)</span>        i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> len<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>get_unique<span class="token punctuation">(</span><span class="token string">'genres'</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>18</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q17 how many unique director names are there in the dataset?</span>get_unique<span class="token punctuation">(</span><span class="token string">'directors'</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>1247</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q18 which movie has the highest number of actors? Output should be the movie title in string format.</span><span class="token keyword">def</span> <span class="token function">find_highest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token number">0</span>    highest <span class="token operator">=</span> <span class="token number">0</span>    row <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>movies<span class="token punctuation">)</span><span class="token punctuation">:</span>        num <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> movies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'actors'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">if</span> highest <span class="token operator">&lt;</span> num<span class="token punctuation">:</span>            highest <span class="token operator">=</span> num            row <span class="token operator">=</span> i        i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">return</span> movies<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>find_highest<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;Shoulder Arms&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q19 what is the average movie rating?</span><span class="token keyword">def</span> <span class="token function">avg_rating</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sum <span class="token operator">=</span> <span class="token number">0</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>movies<span class="token punctuation">)</span><span class="token punctuation">:</span>        sum <span class="token operator">=</span> sum <span class="token operator">+</span> movies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'rating'</span><span class="token punctuation">]</span>        i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> sum<span class="token operator">/</span>len<span class="token punctuation">(</span>movies<span class="token punctuation">)</span>avg_rating<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>6.401659528907912</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q20 what is the longest movie title in the dataset (in terms of most characters)?</span><span class="token keyword">def</span> <span class="token function">get_longest_title</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    longest <span class="token operator">=</span> <span class="token number">0</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>movies<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> longest <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>movies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            longest <span class="token operator">=</span> len<span class="token punctuation">(</span>movies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            title <span class="token operator">=</span> movies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>        i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> titleget_longest_title<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb&#39;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#works for non-list</span><span class="token keyword">def</span> <span class="token function">bucketize_non</span><span class="token punctuation">(</span>movie_list<span class="token punctuation">,</span> movie_key<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>movie_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> key <span class="token keyword">in</span> movie_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> key <span class="token operator">==</span> movie_key<span class="token punctuation">:</span>                <span class="token keyword">if</span> movie_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token keyword">in</span> res<span class="token punctuation">:</span>                    res<span class="token punctuation">[</span>movie_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>movie_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    res<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>movie_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>movie_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># works for list</span><span class="token keyword">def</span> <span class="token function">bucketize_li</span><span class="token punctuation">(</span>movie_list<span class="token punctuation">,</span> movie_key<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>movie_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> key <span class="token keyword">in</span> movie_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> key <span class="token operator">==</span> movie_key<span class="token punctuation">:</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> movie_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> j <span class="token keyword">in</span> res<span class="token punctuation">:</span>                        res<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>movie_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        res<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>movie_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bucketize</span><span class="token punctuation">(</span>movie_list<span class="token punctuation">,</span> movie_key<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> type<span class="token punctuation">(</span>movie_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>movie_key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> list<span class="token punctuation">:</span>        <span class="token keyword">return</span> bucketize_li<span class="token punctuation">(</span>movie_list<span class="token punctuation">,</span> movie_key<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> bucketize_non<span class="token punctuation">(</span>movie_list<span class="token punctuation">,</span> movie_key<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">test_movies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"year"</span><span class="token punctuation">:</span> <span class="token number">2018</span><span class="token punctuation">,</span> <span class="token string">"style"</span><span class="token punctuation">:</span> <span class="token string">"short"</span><span class="token punctuation">,</span> <span class="token string">"genres"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"g1"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"year"</span><span class="token punctuation">:</span> <span class="token number">2018</span><span class="token punctuation">,</span> <span class="token string">"style"</span><span class="token punctuation">:</span> <span class="token string">"long"</span><span class="token punctuation">,</span>  <span class="token string">"genres"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"g2"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"year"</span><span class="token punctuation">:</span> <span class="token number">2019</span><span class="token punctuation">,</span> <span class="token string">"style"</span><span class="token punctuation">:</span> <span class="token string">"short"</span><span class="token punctuation">,</span> <span class="token string">"genres"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"g3"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"year"</span><span class="token punctuation">:</span> <span class="token number">2019</span><span class="token punctuation">,</span> <span class="token string">"style"</span><span class="token punctuation">:</span> <span class="token string">"long"</span><span class="token punctuation">,</span> <span class="token string">"genres"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"g1"</span><span class="token punctuation">,</span> <span class="token string">"g2"</span><span class="token punctuation">,</span> <span class="token string">"g3"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q21 what is bucketize(test_movies, "year")?</span>bucketize<span class="token punctuation">(</span>test_movies<span class="token punctuation">,</span> <span class="token string">"year"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>{2018: [{&#39;title&#39;: &#39;A&#39;, &#39;year&#39;: 2018, &#39;style&#39;: &#39;short&#39;, &#39;genres&#39;: [&#39;g1&#39;]},  {&#39;title&#39;: &#39;B&#39;, &#39;year&#39;: 2018, &#39;style&#39;: &#39;long&#39;, &#39;genres&#39;: [&#39;g2&#39;]}], 2019: [{&#39;title&#39;: &#39;C&#39;, &#39;year&#39;: 2019, &#39;style&#39;: &#39;short&#39;, &#39;genres&#39;: [&#39;g3&#39;]},  {&#39;title&#39;: &#39;D&#39;, &#39;year&#39;: 2019, &#39;style&#39;: &#39;long&#39;, &#39;genres&#39;: [&#39;g1&#39;, &#39;g2&#39;, &#39;g3&#39;]}]}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q22 what is bucketize(test_movies, "style")?</span>bucketize<span class="token punctuation">(</span>test_movies<span class="token punctuation">,</span> <span class="token string">"style"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>{&#39;short&#39;: [{&#39;title&#39;: &#39;A&#39;, &#39;year&#39;: 2018, &#39;style&#39;: &#39;short&#39;, &#39;genres&#39;: [&#39;g1&#39;]},  {&#39;title&#39;: &#39;C&#39;, &#39;year&#39;: 2019, &#39;style&#39;: &#39;short&#39;, &#39;genres&#39;: [&#39;g3&#39;]}], &#39;long&#39;: [{&#39;title&#39;: &#39;B&#39;, &#39;year&#39;: 2018, &#39;style&#39;: &#39;long&#39;, &#39;genres&#39;: [&#39;g2&#39;]},  {&#39;title&#39;: &#39;D&#39;, &#39;year&#39;: 2019, &#39;style&#39;: &#39;long&#39;, &#39;genres&#39;: [&#39;g1&#39;, &#39;g2&#39;, &#39;g3&#39;]}]}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q23 what is bucketize(test_movies, "genres")?</span>bucketize<span class="token punctuation">(</span>test_movies<span class="token punctuation">,</span> <span class="token string">"genres"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>{&#39;g1&#39;: [{&#39;title&#39;: &#39;A&#39;, &#39;year&#39;: 2018, &#39;style&#39;: &#39;short&#39;, &#39;genres&#39;: [&#39;g1&#39;]},  {&#39;title&#39;: &#39;D&#39;, &#39;year&#39;: 2019, &#39;style&#39;: &#39;long&#39;, &#39;genres&#39;: [&#39;g1&#39;, &#39;g2&#39;, &#39;g3&#39;]}], &#39;g2&#39;: [{&#39;title&#39;: &#39;B&#39;, &#39;year&#39;: 2018, &#39;style&#39;: &#39;long&#39;, &#39;genres&#39;: [&#39;g2&#39;]},  {&#39;title&#39;: &#39;D&#39;, &#39;year&#39;: 2019, &#39;style&#39;: &#39;long&#39;, &#39;genres&#39;: [&#39;g1&#39;, &#39;g2&#39;, &#39;g3&#39;]}], &#39;g3&#39;: [{&#39;title&#39;: &#39;C&#39;, &#39;year&#39;: 2019, &#39;style&#39;: &#39;short&#39;, &#39;genres&#39;: [&#39;g3&#39;]},  {&#39;title&#39;: &#39;D&#39;, &#39;year&#39;: 2019, &#39;style&#39;: &#39;long&#39;, &#39;genres&#39;: [&#39;g1&#39;, &#39;g2&#39;, &#39;g3&#39;]}]}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q24 what is bucketize(small, "genres")?</span>bucketize<span class="token punctuation">(</span>small<span class="token punctuation">,</span> <span class="token string">"genres"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>{&#39;Crime&#39;: [{&#39;title&#39;: &#39;Runaway Jury&#39;,   &#39;year&#39;: 2003,   &#39;rating&#39;: 7.1,   &#39;directors&#39;: [&#39;Gary Fleder&#39;],   &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Gene Hackman&#39;, &#39;Dustin Hoffman&#39;],   &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]},  {&#39;title&#39;: &#39;Lethal Weapon&#39;,   &#39;year&#39;: 1987,   &#39;rating&#39;: 7.6,   &#39;directors&#39;: [&#39;Richard Donner&#39;],   &#39;actors&#39;: [&#39;Mel Gibson&#39;, &#39;Danny Glover&#39;, &#39;Gary Busey&#39;, &#39;Mitchell Ryan&#39;],   &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}], &#39;Drama&#39;: [{&#39;title&#39;: &#39;Runaway Jury&#39;,   &#39;year&#39;: 2003,   &#39;rating&#39;: 7.1,   &#39;directors&#39;: [&#39;Gary Fleder&#39;],   &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Gene Hackman&#39;, &#39;Dustin Hoffman&#39;],   &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}], &#39;Thriller&#39;: [{&#39;title&#39;: &#39;Runaway Jury&#39;,   &#39;year&#39;: 2003,   &#39;rating&#39;: 7.1,   &#39;directors&#39;: [&#39;Gary Fleder&#39;],   &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Gene Hackman&#39;, &#39;Dustin Hoffman&#39;],   &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]},  {&#39;title&#39;: &#39;Lethal Weapon&#39;,   &#39;year&#39;: 1987,   &#39;rating&#39;: 7.6,   &#39;directors&#39;: [&#39;Richard Donner&#39;],   &#39;actors&#39;: [&#39;Mel Gibson&#39;, &#39;Danny Glover&#39;, &#39;Gary Busey&#39;, &#39;Mitchell Ryan&#39;],   &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}], &#39;Action&#39;: [{&#39;title&#39;: &#39;Lethal Weapon&#39;,   &#39;year&#39;: 1987,   &#39;rating&#39;: 7.6,   &#39;directors&#39;: [&#39;Richard Donner&#39;],   &#39;actors&#39;: [&#39;Mel Gibson&#39;, &#39;Danny Glover&#39;, &#39;Gary Busey&#39;, &#39;Mitchell Ryan&#39;],   &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}]}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q25 how many different unique actors appear in the small dataset?</span>len<span class="token punctuation">(</span>bucketize<span class="token punctuation">(</span>small<span class="token punctuation">,</span> <span class="token string">"actors"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>7</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q26 how many unique actors appear in the full dataset?</span>len<span class="token punctuation">(</span>bucketize<span class="token punctuation">(</span>movies<span class="token punctuation">,</span> <span class="token string">"actors"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>2605</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q27 how many movies are there of each genre?</span><span class="token keyword">def</span> <span class="token function">get_num_movies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> bucketize<span class="token punctuation">(</span>movies<span class="token punctuation">,</span><span class="token string">'genres'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>len<span class="token punctuation">(</span>bucketize<span class="token punctuation">(</span>movies<span class="token punctuation">,</span><span class="token string">'genres'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> resget_num_movies<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>{&#39;Comedy&#39;: 485, &#39;Drama&#39;: 1094, &#39;Romance&#39;: 352, &#39;History&#39;: 73, &#39;Family&#39;: 85, &#39;Mystery&#39;: 121, &#39;Thriller&#39;: 250, &#39;Action&#39;: 299, &#39;Crime&#39;: 357, &#39;Adventure&#39;: 283, &#39;Western&#39;: 226, &#39;Music&#39;: 38, &#39;Animation&#39;: 45, &#39;Sport&#39;: 48, &#39;Fantasy&#39;: 59, &#39;War&#39;: 99, &#39;Sci-Fi&#39;: 69, &#39;Horror&#39;: 85}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q28 how many movies are there of each genre? (plot your answer)</span><span class="token keyword">def</span> <span class="token function">plot_dict</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"Please Label Me!!!"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ax <span class="token operator">=</span> pandas<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>plot<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>color<span class="token operator">=</span><span class="token string">"black"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span>label<span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>plot_dict<span class="token punctuation">(</span>get_num_movies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Number of Movies"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_40_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">filter_year</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> movies<span class="token punctuation">:</span>        <span class="token keyword">if</span> start <span class="token operator">!=</span> None <span class="token operator">and</span> end <span class="token operator">!=</span> None <span class="token operator">and</span> i<span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">]</span> <span class="token operator">></span> start <span class="token operator">and</span> i<span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> end<span class="token punctuation">:</span>            temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">elif</span> start <span class="token operator">==</span> None <span class="token operator">and</span> end <span class="token operator">!=</span> None <span class="token operator">and</span> i<span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> end<span class="token punctuation">:</span>            temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">elif</span> start <span class="token operator">!=</span> None <span class="token operator">and</span> end <span class="token operator">==</span> None <span class="token operator">and</span> i<span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">]</span> <span class="token operator">>=</span> start<span class="token punctuation">:</span>            temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> tempfilter_year<span class="token punctuation">(</span>movies<span class="token punctuation">,</span> None<span class="token punctuation">,</span> <span class="token number">1999</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[{&#39;title&#39;: &#39;The Barefoot Executive&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Robert Butler&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Joe Flynn&#39;, &#39;Harry Morgan&#39;, &#39;Wally Cox&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Flying Tigers&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;David Miller&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;John Carroll&#39;, &#39;Paul Kelly&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Life Begins for Andy Hardy&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Lewis Stone&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Rachel and the Stranger&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Norman Foster&#39;],  &#39;actors&#39;: [&#39;William Holden&#39;, &#39;Robert Mitchum&#39;, &#39;Gary Gray&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Red River&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Arthur Rosson&#39;, &#39;Howard Hawks&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Montgomery Clift&#39;, &#39;Walter Brennan&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Wrong Man&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Alfred Hitchcock&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Anthony Quayle&#39;, &#39;Harold J. Stone&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Playing for Keeps&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 4.1,  &#39;directors&#39;: [&#39;Harvey Weinstein&#39;, &#39;Bob Weinstein&#39;],  &#39;actors&#39;: [&#39;Daniel Jordano&#39;, &#39;Matthew Penn&#39;, &#39;Leon W. Grant&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Doors&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Oliver Stone&#39;],  &#39;actors&#39;: [&#39;Val Kilmer&#39;, &#39;Kyle MacLachlan&#39;, &#39;Frank Whaley&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Shoot-Out at Medicine Bend&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Richard L. Bare&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;James Craig&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Watch the Birdie&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Jack Donohue&#39;],  &#39;actors&#39;: [&#39;Red Skelton&#39;, &#39;Leon Ames&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Rainbow Valley&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;Lloyd Ingraham&#39;,   &#39;John Wayne&#39;,   &quot;George &#39;Gabby&#39; Hayes&quot;,   &#39;LeRoy Mason&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Man from the Alamo&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Chill Wills&#39;, &quot;Hugh O&#39;Brian&quot;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;I Met My Love Again&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;George Cukor&#39;, &#39;Arthur Ripley&#39;, &#39;Joshua Logan&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Alan Marshal&#39;],  &#39;genres&#39;: [&#39;Romance&#39;]}, {&#39;title&#39;: &#39;Bad Company&#39;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Robert Benton&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Barry Brown&#39;, &#39;Jim Davis&#39;, &#39;David Huddleston&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Man Who Understood Women&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Nunnally Johnson&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Cesare Danova&#39;, &#39;Myron McCormick&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Floundering&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Peter McCarthy&#39;],  &#39;actors&#39;: [&#39;James Le Gros&#39;, &#39;Zander Schloss&#39;, &#39;John Cusack&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Another Man, Another Chance&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Claude Lelouch&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Francis Huster&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &quot;The Moon&#39;s Our Home&quot;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Charles Butterworth&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Modern Times&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 8.5,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;Al Ernest Garcia&#39;,   &#39;Charles Chaplin&#39;,   &#39;Henry Bergman&#39;,   &#39;Tiny Sandford&#39;,   &#39;Chester Conklin&#39;,   &#39;Hank Mann&#39;,   &#39;Stanley Blystone&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &quot;Santa Claus Is Comin&#39; to Town&quot;,  &#39;year&#39;: 1970,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Jules Bass&#39;, &#39;Arthur Rankin Jr.&#39;],  &#39;actors&#39;: [&#39;Fred Astaire&#39;, &#39;Mickey Rooney&#39;, &#39;Keenan Wynn&#39;, &#39;Paul Frees&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;What a Way to Go!&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;J. Lee Thompson&#39;],  &#39;actors&#39;: [&#39;Paul Newman&#39;, &#39;Robert Mitchum&#39;, &#39;Dean Martin&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Konrad&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Nell Cox&#39;],  &#39;actors&#39;: [&#39;Max Wright&#39;, &#39;Huckleberry Fox&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Comes a Horseman&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Alan J. Pakula&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Jason Robards&#39;, &#39;George Grizzard&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Porco Rosso&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Hayao Miyazaki&#39;],  &#39;actors&#39;: [&#39;Shûichirô Moriyama&#39;, &#39;Bunshi Katsura Vi&#39;, &#39;Tsunehiko Kamijô&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;West of the Pecos&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Edward Killy&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Richard Martin&#39;, &#39;Thurston Hall&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Without Reservations&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Mervyn LeRoy&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Don DeFore&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Charley and the Angel&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Vincent McEveety&#39;],  &#39;actors&#39;: [&#39;Fred MacMurray&#39;, &#39;Harry Morgan&#39;, &#39;Kurt Russell&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Silk&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Cirio H. Santiago&#39;],  &#39;actors&#39;: [&#39;Bill McLaughlin&#39;, &#39;Joe Mari Avellana&#39;, &#39;Frederick Bailey&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;China Sky&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;His Private Secretary&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Phil Whitman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Reginald Barlow&#39;, &#39;Alec B. Francis&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Wake of the Red Witch&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Edward Ludwig&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Gig Young&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Legend of the Lost&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Rossano Brazzi&#39;, &#39;Kurt Kasznar&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Computer Wore Tennis Shoes&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Robert Butler&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Cesar Romero&#39;, &#39;Joe Flynn&#39;, &#39;William Schallert&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Goodfellas&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 8.7,  &#39;directors&#39;: [&#39;Martin Scorsese&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Ray Liotta&#39;, &#39;Joe Pesci&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Better Off Dead...&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Savage Steve Holland&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;David Ogden Stiers&#39;, &#39;Demian Slade&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Go Toward the Light&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Mike Robe&#39;],  &#39;actors&#39;: [&#39;Joshua Harris&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Wagon Wheels&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Charles Barton&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Billy Lee&#39;, &#39;Monte Blue&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;They Were Expendable&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;John Ford&#39;, &#39;Robert Montgomery&#39;],  &#39;actors&#39;: [&#39;Robert Montgomery&#39;, &#39;John Wayne&#39;, &#39;Jack Holt&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &quot;This Man&#39;s Navy&quot;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;Wallace Beery&#39;, &#39;Tom Drake&#39;, &#39;James Gleason&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Santee&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Gary Nelson&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Michael Burns&#39;, &#39;Jay Silverheels&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Lawless Frontier&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;Gordon De Main&#39;,   &#39;John Wayne&#39;,   &quot;George &#39;Gabby&#39; Hayes&quot;,   &#39;Jack Rockwell&#39;,   &#39;Jay Wilsey&#39;,   &#39;Yakima Canutt&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Rio 70&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;Jesús Franco&#39;],  &#39;actors&#39;: [&#39;Richard Wyler&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;]}, {&#39;title&#39;: &#39;Spartacus&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Stanley Kubrick&#39;],  &#39;actors&#39;: [&#39;Kirk Douglas&#39;, &#39;Laurence Olivier&#39;, &#39;Charles Laughton&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Time Trackers&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Howard R. Cohen&#39;],  &#39;actors&#39;: [&#39;Wil Shriner&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Kid&#39;,  &#39;year&#39;: 1921,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;F. Blinn&#39;,   &#39;Charles Chaplin&#39;,   &#39;Jackie Coogan&#39;,   &#39;Carl Miller&#39;,   &#39;Albert Austin&#39;,   &#39;Henry Bergman&#39;,   &#39;Edward Biby&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;A Lady Takes a Chance&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Charles Winninger&#39;, &#39;Phil Silvers&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Undercover Blues&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Herbert Ross&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Stanley Tucci&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Ride, Vaquero!&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;Robert Taylor&#39;, &#39;Howard Keel&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Road to Wellville&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Alan Parker&#39;],  &#39;actors&#39;: [&#39;Anthony Hopkins&#39;, &#39;Matthew Broderick&#39;, &#39;John Cusack&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Night Has a Thousand Eyes&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;Edward G. Robinson&#39;, &#39;John Lund&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Mr. Muggs Rides Again&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Wallace Fox&#39;],  &#39;actors&#39;: [&#39;Leo Gorcey&#39;,   &#39;Huntz Hall&#39;,   &quot;William &#39;Billy&#39; Benedict&quot;,   &#39;Johnny Duncan&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Once Upon a Time in America&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 8.4,  &#39;directors&#39;: [&#39;Sergio Leone&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;James Woods&#39;, &#39;Treat Williams&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Regina Roma&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Jean-Yves Prate&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Ray Sharkey&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Stranger Wore a Gun&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;André De Toth&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;George Macready&#39;],  &#39;genres&#39;: [&#39;War&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Both Sides of the Law&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Muriel Box&#39;],  &#39;actors&#39;: [&#39;Terence Morgan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Glass Key&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Stuart Heisler&#39;],  &#39;actors&#39;: [&#39;Alan Ladd&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Tennessee Waltz&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Nicolas Gessner&#39;],  &#39;actors&#39;: [&#39;Julian Sands&#39;, &#39;Ed Lauter&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &quot;Everybody&#39;s All-American&quot;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Taylor Hackford&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Timothy Hutton&#39;, &#39;John Goodman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Buchanan Rides Alone&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Craig Stevens&#39;, &#39;Barry Kelley&#39;, &#39;Tol Avery&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Arizona&#39;,  &#39;year&#39;: 1931,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Forrest Stanley&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Yours, Mine and Ours&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Melville Shavelson&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Van Johnson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Romola&#39;,  &#39;year&#39;: 1924,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Henry King&#39;],  &#39;actors&#39;: [&#39;William Powell&#39;, &#39;Ronald Colman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Purple People Eater&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;Linda Shayne&#39;],  &#39;actors&#39;: [&#39;Ned Beatty&#39;, &#39;Bobby Porter&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Circus&#39;,  &#39;year&#39;: 1928,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;Steve Murphy&#39;,   &#39;Charles Chaplin&#39;,   &#39;Al Ernest Garcia&#39;,   &#39;Harry Crocker&#39;,   &#39;George Davis&#39;,   &#39;Henry Bergman&#39;,   &#39;Tiny Sandford&#39;,   &#39;John Rand&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Tycoon&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Richard Wallace&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Cedric Hardwicke&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;7th Cavalry&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Joseph H. Lewis&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Jay C. Flippen&#39;, &#39;Frank Faylen&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;7 Men from Now&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Lee Marvin&#39;, &#39;Walter Reed&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Albuquerque&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &quot;George &#39;Gabby&#39; Hayes&quot;, &#39;Lon Chaney Jr.&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Circus World&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Lloyd Nolan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Dragonfly&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Siko Dolidze&#39;, &#39;Levan Khotivari&#39;],  &#39;actors&#39;: [&#39;Aleksandre Omiadze&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Virginia City&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Michael Curtiz&#39;],  &#39;actors&#39;: [&#39;Errol Flynn&#39;, &#39;Randolph Scott&#39;, &#39;Humphrey Bogart&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Dangerous Liaisons&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Stephen Frears&#39;],  &#39;actors&#39;: [&#39;John Malkovich&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Raw Nerve&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 4.3,  &#39;directors&#39;: [&#39;David A. Prior&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &quot;Randall &#39;Tex&#39; Cobb&quot;, &#39;Ted Prior&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Teahouse of the August Moon&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Daniel Mann&#39;],  &#39;actors&#39;: [&#39;Marlon Brando&#39;, &#39;Glenn Ford&#39;, &#39;Eddie Albert&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Monkey on My Back&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;André De Toth&#39;],  &#39;actors&#39;: [&#39;Cameron Mitchell&#39;, &#39;Paul Richards&#39;, &#39;Jack Albertson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Runaway Train&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Andrey Konchalovskiy&#39;],  &#39;actors&#39;: [&#39;Jon Voight&#39;, &#39;Eric Roberts&#39;, &#39;Kyle T. Heffner&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Tall T&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Richard Boone&#39;, &#39;Arthur Hunnicutt&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Thriller&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &quot;She Couldn&#39;t Say No&quot;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Lloyd Bacon&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Arthur Hunnicutt&#39;, &#39;Edgar Buchanan&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Quality of Mercy&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Andreas Gruber&#39;],  &#39;actors&#39;: [&#39;Rainer Egger&#39;, &#39;Oliver Broumis&#39;, &#39;Merab Ninidze&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Eagles Over London&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Enzo G. Castellari&#39;],  &#39;actors&#39;: [&#39;Frederick Stafford&#39;, &#39;Van Johnson&#39;, &#39;Francisco Rabal&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Bopha!&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Morgan Freeman&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Malcolm McDowell&#39;, &#39;Marius Weyers&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Money for Nothing&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Ramón Menéndez&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Michael Madsen&#39;, &#39;Benicio Del Toro&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &quot;Andy Hardy&#39;s Blonde Trouble&quot;,  &#39;year&#39;: 1944,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Lewis Stone&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Billy the Kid&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;David Miller&#39;, &#39;Frank Borzage&#39;],  &#39;actors&#39;: [&#39;Robert Taylor&#39;, &#39;Brian Donlevy&#39;, &#39;Ian Hunter&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Belle Starr&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Irving Cummings&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Dana Andrews&#39;, &#39;Shepperd Strudwick&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Love Is All There Is&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Renée Taylor&#39;, &#39;Joseph Bologna&#39;],  &#39;actors&#39;: [&#39;Joseph Bologna&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Funny Lady&#39;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Herbert Ross&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Omar Sharif&#39;, &#39;Roddy McDowall&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Human Desire&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Fritz Lang&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Broderick Crawford&#39;, &#39;Edgar Buchanan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &quot;Boston Blackie&#39;s Chinese Venture&quot;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Seymour Friedman&#39;],  &#39;actors&#39;: [&#39;Chester Morris&#39;, &#39;Richard Lane&#39;, &#39;Don McGuire&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Naked Street&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Maxwell Shane&#39;],  &#39;actors&#39;: [&#39;Farley Granger&#39;, &#39;Anthony Quinn&#39;, &#39;Peter Graves&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Texas Cyclone&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;D. Ross Lederman&#39;],  &#39;actors&#39;: [&#39;Wallace MacDonald&#39;, &#39;Tim McCoy&#39;, &#39;Wheeler Oakman&#39;, &#39;John Wayne&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Max Havelaar&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Fons Rademakers&#39;],  &#39;actors&#39;: [&#39;Peter Faber&#39;, &#39;Adendu Soesilaningrat&#39;, &#39;Maruli Sitompul&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Track of the Cat&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Tab Hunter&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;For Better, for Worse&#39;,  &#39;year&#39;: 1919,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Cecil B. DeMille&#39;],  &#39;actors&#39;: [&#39;Elliott Dexter&#39;, &#39;Tom Forman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Broken Trust&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Geoffrey Sax&#39;],  &#39;actors&#39;: [&#39;Tom Selleck&#39;, &#39;William Atherton&#39;, &#39;Charles Haid&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Babylon 5: Thirdspace&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Jesús Salvador Treviño&#39;],  &#39;actors&#39;: [&#39;Bruce Boxleitner&#39;, &#39;Richard Biggs&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Once Upon a Time in the West&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 8.5,  &#39;directors&#39;: [&#39;Sergio Leone&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Charles Bronson&#39;, &#39;Jason Robards&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;A Southern Yankee&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Edward Sedgwick&#39;],  &#39;actors&#39;: [&#39;Red Skelton&#39;, &#39;Brian Donlevy&#39;, &#39;George Coulouris&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;History&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Execution of Private Slovik&#39;,  &#39;year&#39;: 1974,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Lamont Johnson&#39;],  &#39;actors&#39;: [&#39;Martin Sheen&#39;, &#39;Ned Beatty&#39;, &#39;Gary Busey&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Alpha Caper&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Robert Michael Lewis&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Leonard Nimoy&#39;, &#39;James McEachin&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Gardens of Stone&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Francis Ford Coppola&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;James Earl Jones&#39;, &#39;D.B. Sweeney&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;To the Shores of Tripoli&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;H. Bruce Humberstone&#39;],  &#39;actors&#39;: [&#39;John Payne&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Thunderbolt and Lightfoot&#39;,  &#39;year&#39;: 1974,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Michael Cimino&#39;],  &#39;actors&#39;: [&#39;Clint Eastwood&#39;, &#39;Jeff Bridges&#39;, &#39;Geoffrey Lewis&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Gambler&#39;,  &#39;year&#39;: 1974,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Karel Reisz&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Paul Sorvino&#39;, &#39;Morris Carnovsky&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Shepherd of the Hills&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Harry Carey&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Last Tycoon&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Elia Kazan&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Tony Curtis&#39;, &#39;Robert Mitchum&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Advance to the Rear&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;George Marshall&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Melvyn Douglas&#39;, &#39;Jim Backus&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;War&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Cosmic Man&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 4.7,  &#39;directors&#39;: [&#39;Herbert S. Greene&#39;],  &#39;actors&#39;: [&#39;John Carradine&#39;, &#39;Bruce Bennett&#39;, &#39;Paul Langton&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Sci-Fi&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Revenge&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Tony Scott&#39;],  &#39;actors&#39;: [&#39;Kevin Costner&#39;, &#39;Anthony Quinn&#39;, &#39;Tomas Milian&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Morning Patrol&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Nikos Nikolaidis&#39;],  &#39;actors&#39;: [&#39;Takis Spiridakis&#39;, &#39;Nikos Hatzis&#39;],  &#39;genres&#39;: [&#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Courtship of Andy Hardy&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Lewis Stone&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Heaven with a Gun&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Lee H. Katzin&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;John Anderson&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Strange Woman&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Douglas Sirk&#39;, &#39;Edgar G. Ulmer&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Louis Hayward&#39;, &#39;Gene Lockhart&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Dragon Ball Z: Bojack Unbound&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Yoshihiro Ueda&#39;],  &#39;actors&#39;: [&#39;Toshio Furukawa&#39;, &#39;Takeshi Kusao&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Animation&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Bullets Over Broadway&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Woody Allen&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Chazz Palminteri&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Enemy from Space&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Val Guest&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;John Longden&#39;, &#39;Sidney James&#39;, &#39;Bryan Forbes&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Lonely Trail&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Joseph Kane&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Cy Kendall&#39;, &#39;Bob Kortman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Lightning, the White Stallion&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;William A. Levey&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Billy Wesley&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Never a Dull Moment&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;George Marshall&#39;],  &#39;actors&#39;: [&#39;Fred MacMurray&#39;, &#39;William Demarest&#39;, &#39;Andy Devine&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &quot;I&#39;m a Fool&quot;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Noel Black&#39;],  &#39;actors&#39;: [&#39;Ron Howard&#39;, &#39;Otis Calef&#39;, &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Mean Streets&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Martin Scorsese&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Harvey Keitel&#39;, &#39;David Proval&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Marcus-Nelson Murders&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;Joseph Sargent&#39;],  &#39;actors&#39;: [&#39;Telly Savalas&#39;, &#39;Marjoe Gortner&#39;, &#39;José Ferrer&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Hook Line and Sinker&#39;,  &#39;year&#39;: 1930,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Edward F. Cline&#39;],  &#39;actors&#39;: [&#39;Bert Wheeler&#39;, &#39;Robert Woolsey&#39;, &#39;Ralf Harolde&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Haunted Gold&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Mack V. Wright&#39;],  &#39;actors&#39;: [&#39;Otto Hoffman&#39;,   &#39;John Wayne&#39;,   &#39;Duke&#39;,   &#39;Harry Woods&#39;,   &#39;Erville Alderson&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Mystery&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Westward Ho&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Frank McGlynn Jr.&#39;, &#39;Jim Farley&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Pocketful of Miracles&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Frank Capra&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &quot;Arthur O&#39;Connell&quot;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Vanished Without a Trace&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Douglas Barr&#39;],  &#39;actors&#39;: [&#39;William R. Moses&#39;, &#39;Joshua Peace&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Command Decision&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Sam Wood&#39;],  &#39;actors&#39;: [&#39;Clark Gable&#39;, &#39;Walter Pidgeon&#39;, &#39;Van Johnson&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Coroner Creek&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;George Macready&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &quot;Maria&#39;s Lovers&quot;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Andrey Konchalovskiy&#39;],  &#39;actors&#39;: [&#39;John Savage&#39;, &#39;Keith Carradine&#39;, &#39;Robert Mitchum&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Wag the Dog&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Barry Levinson&#39;],  &#39;actors&#39;: [&#39;Dustin Hoffman&#39;, &#39;Robert De Niro&#39;, &#39;Woody Harrelson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Christmas Eve&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Edwin L. Marin&#39;],  &#39;actors&#39;: [&#39;George Raft&#39;, &#39;George Brent&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Schizopolis&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Steven Soderbergh&#39;],  &#39;actors&#39;: [&#39;Darrin Dickerson&#39;,   &#39;Steven Soderbergh&#39;,   &#39;Miles Hardy&#39;,   &#39;Scott Allen&#39;,   &#39;Marcus Lyle Brown&#39;,   &#39;Silas Cooper&#39;,   &#39;C.C. Courtney&#39;,   &#39;Sonny Cranch&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Fantasy&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Son of Monte Cristo&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Rowland V. Lee&#39;],  &#39;actors&#39;: [&#39;Louis Hayward&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Tango &amp; Cash&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Albert Magnoli&#39;, &#39;Andrey Konchalovskiy&#39;],  &#39;actors&#39;: [&#39;Sylvester Stallone&#39;, &#39;Kurt Russell&#39;, &#39;Jack Palance&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Out of the Past&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Jacques Tourneur&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Kirk Douglas&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;One Minute to Zero&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Tay Garnett&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;William Talman&#39;, &#39;Charles McGraw&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 8.4,  &#39;directors&#39;: [&#39;Stanley Kubrick&#39;],  &#39;actors&#39;: [&#39;Peter Sellers&#39;,   &#39;George C. Scott&#39;,   &#39;Sterling Hayden&#39;,   &#39;Keenan Wynn&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Last Mile&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Howard W. Koch&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;,   &#39;Frank Overton&#39;,   &#39;Michael Constantine&#39;,   &#39;John Vari&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Last Train from Gun Hill&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;John Sturges&#39;],  &#39;actors&#39;: [&#39;Kirk Douglas&#39;, &#39;Anthony Quinn&#39;, &#39;Earl Holliman&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Lethal Weapon 2&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Richard Donner&#39;],  &#39;actors&#39;: [&#39;Mel Gibson&#39;, &#39;Danny Glover&#39;, &#39;Joe Pesci&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Power 98&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;Jaime Hellman&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Jason Gedrick&#39;, &#39;Jack Betts&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Error in Judgment&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 4.7,  &#39;directors&#39;: [&#39;Scott P. Levy&#39;],  &#39;actors&#39;: [&#39;Joe Mantegna&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Everything That Rises&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Dennis Quaid&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Harve Presnell&#39;, &#39;Meat Loaf&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Simpatico&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Matthew Warchus&#39;],  &#39;actors&#39;: [&#39;Nick Nolte&#39;, &#39;Jeff Bridges&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Attila&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Pietro Francisci&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Henri Vidal&#39;, &#39;Claude Laydu&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Gazebo&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;George Marshall&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Carl Reiner&#39;, &#39;John McGiver&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;3:10 to Yuma&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Delmer Daves&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Van Heflin&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Return of Swamp Thing&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Jim Wynorski&#39;],  &#39;actors&#39;: [&#39;Dick Durock&#39;, &#39;Louis Jourdan&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Breaking Away&#39;,  &#39;year&#39;: 1979,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Peter Yates&#39;],  &#39;actors&#39;: [&#39;Paul Dooley&#39;,   &#39;Dennis Christopher&#39;,   &#39;Dennis Quaid&#39;,   &#39;Daniel Stern&#39;,   &#39;Jackie Earle Haley&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Barabbas&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Richard Fleischer&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Arthur Kennedy&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Kiss Me Goodbye&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Robert Mulligan&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Jeff Bridges&#39;, &#39;Paul Dooley&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Fantasy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;A Slight Case of Larceny&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Don Weis&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Eddie Bracken&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Baby Face Nelson&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Don Siegel&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Cedric Hardwicke&#39;, &#39;Leo Gordon&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;I Can Get It for You Wholesale&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Michael Gordon&#39;],  &#39;actors&#39;: [&#39;Dan Dailey&#39;, &#39;George Sanders&#39;, &#39;Sam Jaffe&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Paradise Canyon&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Carl Pierson&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Reed Howes&#39;, &#39;Earle Hodgins&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &quot;It Can&#39;t Be!&quot;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Leonid Gayday&#39;],  &#39;actors&#39;: [&#39;Mikhail Pugovkin&#39;, &#39;Vyacheslav Nevinnyy&#39;, &#39;Mikhail Svetin&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Long Voyage Home&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Thomas Mitchell&#39;, &#39;Ian Hunter&#39;, &#39;Ward Bond&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;From the Earth to the Moon&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Byron Haskin&#39;],  &#39;actors&#39;: [&#39;Joseph Cotten&#39;, &#39;George Sanders&#39;, &#39;Don Dubbins&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Fantasy&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Hondo&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ward Bond&#39;, &#39;Michael Pate&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Convoy&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Sam Peckinpah&#39;],  &#39;actors&#39;: [&#39;Kris Kristofferson&#39;, &#39;Ernest Borgnine&#39;, &#39;Burt Young&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &quot;Everything&#39;s Ducky&quot;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 4.7,  &#39;directors&#39;: [&#39;Don Taylor&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Buddy Hackett&#39;, &#39;Jackie Cooper&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Smith!&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&quot;Michael O&#39;Herlihy&quot;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Dean Jagger&#39;, &#39;Keenan Wynn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;True Colors&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Herbert Ross&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;James Spader&#39;, &#39;Mandy Patinkin&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Repossessed&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Bob Logan&#39;],  &#39;actors&#39;: [&#39;Leslie Nielsen&#39;, &#39;Ned Beatty&#39;, &#39;Anthony Starke&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Fantasy&#39;, &#39;Horror&#39;]}, {&#39;title&#39;: &#39;The Boston Strangler&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Richard Fleischer&#39;],  &#39;actors&#39;: [&#39;Tony Curtis&#39;, &#39;Henry Fonda&#39;, &#39;George Kennedy&#39;, &#39;Mike Kellin&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Diamond Arm&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 8.5,  &#39;directors&#39;: [&#39;Leonid Gayday&#39;],  &#39;actors&#39;: [&#39;Yuriy Nikulin&#39;, &#39;Andrey Mironov&#39;, &#39;Anatoliy Papanov&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Best of the Best&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Robert Radler&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;James Earl Jones&#39;, &#39;Phillip Rhee&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;The Mind Reader&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Roy Del Ruth&#39;],  &#39;actors&#39;: [&#39;Warren William&#39;, &#39;Allen Jenkins&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Hatari!&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Howard Hawks&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Hardy Krüger&#39;, &#39;Red Buttons&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Night Walker&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;William Castle&#39;],  &#39;actors&#39;: [&#39;Robert Taylor&#39;, &#39;Hayden Rorke&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Yamato Takeru&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Takao Okawara&#39;],  &#39;actors&#39;: [&#39;Masahiro Takashima&#39;, &#39;Hiroshi Fujioka&#39;, &#39;Hiroshi Abe&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Till the End of Time&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Edward Dmytryk&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Guy Madison&#39;, &#39;Bill Williams&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Telegraph Trail&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Tenny Wright&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Duke&#39;, &#39;Frank McHugh&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Pather Panchali&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 8.4,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Kanu Bannerjee&#39;, &#39;Subir Banerjee&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Lolly-Madonna XXX&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Richard C. Sarafian&#39;],  &#39;actors&#39;: [&#39;Rod Steiger&#39;, &#39;Robert Ryan&#39;, &#39;Jeff Bridges&#39;, &#39;Scott Wilson&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Reunion at Fairborough&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Herbert Wise&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Red Buttons&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;She Wore a Yellow Ribbon&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;John Agar&#39;, &#39;Ben Johnson&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Le Tigre se parfume à la dynamite&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Claude Chabrol&#39;],  &#39;actors&#39;: [&#39;Roger Hanin&#39;, &#39;Michel Bouquet&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;The Morning After&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Sidney Lumet&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Raul Julia&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Mystery&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Last of the Mohicans&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Henry Wilcoxon&#39;, &#39;Bruce Cabot&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Beginning or the End&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Norman Taurog&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;Robert Walker&#39;, &#39;Tom Drake&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Radioland Murders&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Mel Smith&#39;],  &#39;actors&#39;: [&#39;Brian Benben&#39;, &#39;Ned Beatty&#39;, &#39;George Burns&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Girl Crazy&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;Bert Wheeler&#39;, &#39;Robert Woolsey&#39;, &#39;Eddie Quillan&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Popsy Pop&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;Jean Herman&#39;],  &#39;actors&#39;: [&#39;Stanley Baker&#39;, &#39;Henri Charrière&#39;, &#39;Georges Aminel&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;New York, New York&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Martin Scorsese&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Lionel Stander&#39;, &#39;Barry Primus&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;The Trail of the Lonesome Pine&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Fred MacMurray&#39;, &#39;Henry Fonda&#39;, &#39;Fred Stone&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Woman Who Sinned&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 5.0,  &#39;directors&#39;: [&#39;Michael Switzer&#39;],  &#39;actors&#39;: [&#39;Tim Matheson&#39;, &#39;Michael Dudikoff&#39;, &#39;John Vernon&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Ghost and Mrs. Muir&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Joseph L. Mankiewicz&#39;],  &#39;actors&#39;: [&#39;Rex Harrison&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Ambush Bay&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Ron Winston&#39;],  &#39;actors&#39;: [&quot;Hugh O&#39;Brian&quot;,   &#39;Mickey Rooney&#39;,   &#39;James Mitchum&#39;,   &#39;Peter Masterson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Operation Pacific&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;George Waggner&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ward Bond&#39;, &#39;Scott Forbes&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Flying Leathernecks&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Nicholas Ray&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Robert Ryan&#39;, &#39;Don Taylor&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Cape Fear&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Martin Scorsese&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Nick Nolte&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Guns of Navarone&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;J. Lee Thompson&#39;],  &#39;actors&#39;: [&#39;David Niven&#39;, &#39;Gregory Peck&#39;, &#39;Anthony Quinn&#39;, &#39;Anthony Quayle&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &quot;Va&#39; dove ti porta il cuore&quot;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Cristina Comencini&#39;],  &#39;actors&#39;: [&#39;Massimo Ghini&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Switching Channels&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Ted Kotcheff&#39;],  &#39;actors&#39;: [&#39;Burt Reynolds&#39;, &#39;Christopher Reeve&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;New Frontier&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;George Sherman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ray Corrigan&#39;, &#39;Raymond Hatton&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Long Wait&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Victor Saville&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Charles Coburn&#39;, &#39;Gene Evans&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Treasure of the Silver Lake&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Harald Reinl&#39;],  &#39;actors&#39;: [&#39;Pierre Brice&#39;, &#39;Lex Barker&#39;, &#39;Herbert Lom&#39;, &#39;Götz George&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Something to Talk About&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Lasse Hallström&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Robert Duvall&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Blood Alley&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;John Wayne&#39;, &#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Paul Fix&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;]}, {&#39;title&#39;: &#39;Wyoming Outlaw&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;George Sherman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;,   &#39;Ray Corrigan&#39;,   &#39;Raymond Hatton&#39;,   &quot;Don &#39;Red&#39; Barry&quot;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Plunder of the Sun&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Francis L. Sullivan&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Sinbad, the Sailor&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Richard Wallace&#39;],  &#39;actors&#39;: [&#39;Douglas Fairbanks Jr.&#39;, &#39;Walter Slezak&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Fantasy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Godfather: Part II&#39;,  &#39;year&#39;: 1974,  &#39;rating&#39;: 9.0,  &#39;directors&#39;: [&#39;Francis Ford Coppola&#39;],  &#39;actors&#39;: [&#39;Al Pacino&#39;, &#39;Robert De Niro&#39;, &#39;Robert Duvall&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Runaway&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Michael Crichton&#39;],  &#39;actors&#39;: [&#39;Tom Selleck&#39;, &#39;Gene Simmons&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Locket&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;John Brahm&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Brian Aherne&#39;, &#39;Gene Raymond&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;TRON&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Steven Lisberger&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Bruce Boxleitner&#39;, &#39;David Warner&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Behold a Pale Horse&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Fred Zinnemann&#39;],  &#39;actors&#39;: [&#39;Gregory Peck&#39;,   &#39;Anthony Quinn&#39;,   &#39;Omar Sharif&#39;,   &#39;Raymond Pellegrin&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Racket&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Mel Ferrer&#39;,   &#39;John Cromwell&#39;,   &#39;Nicholas Ray&#39;,   &#39;Sherman Todd&#39;,   &#39;Tay Garnett&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Robert Ryan&#39;, &#39;William Talman&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Cowboy&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Delmer Daves&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Jack Lemmon&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The List of Adrian Messenger&#39;,  &#39;year&#39;: 1963,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;John Huston&#39;],  &#39;actors&#39;: [&#39;Kirk Douglas&#39;,   &#39;Robert Mitchum&#39;,   &#39;Tony Curtis&#39;,   &#39;Burt Lancaster&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Colossus of Rhodes&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Sergio Leone&#39;],  &#39;actors&#39;: [&#39;Rory Calhoun&#39;, &#39;Georges Marchal&#39;, &#39;Conrado San Martín&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Comancheros&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;John Wayne&#39;, &#39;Michael Curtiz&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Stuart Whitman&#39;, &#39;Nehemiah Persoff&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Fabulous Baker Boys&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Steve Kloves&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Beau Bridges&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Big City&#39;,  &#39;year&#39;: 1963,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Anil Chatterjee&#39;, &#39;Haren Chatterjee&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &quot;Don&#39;t Go Near the Water&quot;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Charles Walters&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Earl Holliman&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Somebody to Love&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Alexandre Rockwell&#39;],  &#39;actors&#39;: [&#39;Harvey Keitel&#39;, &#39;Anthony Quinn&#39;, &#39;Michael DeLorenzo&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Wild Party&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Harry Horner&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Arthur Franz&#39;, &#39;Jay Robinson&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Grifters&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Stephen Frears&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Jan Munroe&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Presenting Lily Mars&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Norman Taurog&#39;],  &#39;actors&#39;: [&#39;Van Heflin&#39;, &#39;Richard Carlson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Last of the Secret Agents?&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Norman Abbott&#39;],  &#39;actors&#39;: [&#39;Marty Allen&#39;, &#39;Steve Rossi&#39;, &#39;John Williams&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Changeling&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Peter Medak&#39;],  &#39;actors&#39;: [&#39;George C. Scott&#39;, &#39;Melvyn Douglas&#39;],  &#39;genres&#39;: [&#39;Horror&#39;]}, {&#39;title&#39;: &#39;Charulata&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Soumitra Chatterjee&#39;, &#39;Shailen Mukherjee&#39;, &#39;Shyamal Ghoshal&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Stars&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Konrad Wolf&#39;],  &#39;actors&#39;: [&#39;Jürgen Frohriep&#39;, &#39;Erik S. Klein&#39;, &#39;Stefan Pejchev&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Waco&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;R.G. Springsteen&#39;],  &#39;actors&#39;: [&#39;Howard Keel&#39;, &#39;Brian Donlevy&#39;, &#39;Wendell Corey&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Last Days of Frankie the Fly&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Peter Markle&#39;],  &#39;actors&#39;: [&#39;Dennis Hopper&#39;, &#39;Michael Madsen&#39;, &#39;Kiefer Sutherland&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Virginian&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Stuart Gilmore&#39;],  &#39;actors&#39;: [&#39;Joel McCrea&#39;, &#39;Brian Donlevy&#39;, &#39;Sonny Tufts&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Naughty Girl&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Michel Boisrond&#39;],  &#39;actors&#39;: [&#39;Jean Bretonnière&#39;, &#39;Mischa Auer&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Chimes at Midnight&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Orson Welles&#39;],  &#39;actors&#39;: [&#39;Orson Welles&#39;, &#39;John Gielgud&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Battle of the Bulge&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Ken Annakin&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Robert Shaw&#39;, &#39;Robert Ryan&#39;, &#39;Dana Andrews&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Night the Lights Went Out in Georgia&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Ron Maxwell&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Mark Hamill&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Our Winning Season&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Joseph Ruben&#39;],  &#39;actors&#39;: [&#39;Scott Jacoby&#39;, &#39;Dennis Quaid&#39;, &#39;Robert Wahler&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Jack Bull&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;John Badham&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;John Goodman&#39;, &#39;L.Q. Jones&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Go West, Young Lady&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Frank R. Strayer&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Charles Ruggles&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Music&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;A Family Affair&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Lionel Barrymore&#39;, &#39;Eric Linden&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Shootist&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Don Siegel&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ron Howard&#39;, &#39;James Stewart&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Girl Crazy&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Busby Berkeley&#39;, &#39;Norman Taurog&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Gil Stratton&#39;, &#39;Robert E. Strickland&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Sophia Loren: Her Own Story&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Mel Stuart&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;John Gavin&#39;, &#39;Rip Torn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;My Little Pony: The Movie&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Mike Joens&#39;],  &#39;actors&#39;: [&#39;Danny DeVito&#39;],  &#39;genres&#39;: [&#39;Animation&#39;, &#39;Family&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &quot;Dead Man&#39;s Revenge&quot;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Alan J. Levi&#39;],  &#39;actors&#39;: [&#39;Bruce Dern&#39;,   &#39;Michael Ironside&#39;,   &#39;Vondie Curtis-Hall&#39;,   &#39;Keith Coulouris&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Seven Cities of Gold&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Robert D. Webb&#39;],  &#39;actors&#39;: [&#39;Richard Egan&#39;,   &#39;Anthony Quinn&#39;,   &#39;Michael Rennie&#39;,   &#39;Jeffrey Hunter&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Macao&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Josef von Sternberg&#39;, &#39;Nicholas Ray&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;William Bendix&#39;, &#39;Thomas Gomez&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Lusty Men&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Robert Parrish&#39;, &#39;Nicholas Ray&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Arthur Kennedy&#39;, &#39;Arthur Hunnicutt&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Angel Face&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Otto Preminger&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Herbert Marshall&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Son of Fury: The Story of Benjamin Blake&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;John Cromwell&#39;],  &#39;actors&#39;: [&#39;Tyrone Power&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Come See the Paradise&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Alan Parker&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Sab Shimono&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Pit Stop&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Jack Hill&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;Richard Davalos&#39;, &#39;Sid Haig&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Born to the West&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Charles Barton&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Johnny Mack Brown&#39;, &#39;John Patterson&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Comanche Station&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Rand Brooks&#39;,   &#39;Randolph Scott&#39;,   &#39;Claude Akins&#39;,   &#39;Skip Homeier&#39;,   &#39;Richard Rust&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Wildflowers&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Melissa Painter&#39;],  &#39;actors&#39;: [&#39;Tomas Arana&#39;, &#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Magnificent Dope&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Walter Lang&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Don Ameche&#39;, &#39;Edward Everett Horton&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Cariboo Trail&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Edwin L. Marin&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &quot;George &#39;Gabby&#39; Hayes&quot;, &#39;Bill Williams&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Mr. Soft Touch&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Henry Levin&#39;, &#39;Gordon Douglas&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;John Ireland&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;My Neighbor Totoro&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Hayao Miyazaki&#39;],  &#39;actors&#39;: [&#39;Hitoshi Takagi&#39;, &#39;Shigesato Itoi&#39;],  &#39;genres&#39;: [&#39;Animation&#39;, &#39;Family&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;The Good Guys and the Bad Guys&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Burt Kennedy&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;,   &#39;George Kennedy&#39;,   &#39;Martin Balsam&#39;,   &#39;David Carradine&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;A Boy Called Hate&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Mitch Marcus&#39;],  &#39;actors&#39;: [&#39;Scott Caan&#39;,   &#39;Lee Nashold&#39;,   &#39;Kevin Michael Richardson&#39;,   &#39;James Caan&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Babyfever&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Victoria Foyt&#39;, &#39;Henry Jaglom&#39;],  &#39;actors&#39;: [&#39;Matt Salinger&#39;, &#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Superman II&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Richard Donner&#39;, &#39;Richard Lester&#39;],  &#39;actors&#39;: [&#39;Gene Hackman&#39;, &#39;Christopher Reeve&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Destructors&#39;,  &#39;year&#39;: 1974,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Robert Parrish&#39;],  &#39;actors&#39;: [&#39;Michael Caine&#39;, &#39;Anthony Quinn&#39;, &#39;James Mason&#39;, &#39;Maurice Ronet&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Sundown&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Bruce Cabot&#39;, &#39;George Sanders&#39;, &#39;Harry Carey&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Chapter Two&#39;,  &#39;year&#39;: 1979,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Robert Moore&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Joseph Bologna&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;12 Angry Men&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 8.9,  &#39;directors&#39;: [&#39;Sidney Lumet&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Lee J. Cobb&#39;, &#39;Martin Balsam&#39;, &#39;John Fiedler&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Barbarian and the Geisha&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;John Huston&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Sam Jaffe&#39;, &#39;Sô Yamamura&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;American Heart&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Martin Bell&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Edward Furlong&#39;, &#39;John Boylan&#39;, &#39;Greg Sevigny&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Little Ayse and the Magic Dwarfs in the Land of Dreams&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Tunç Basaran&#39;],  &#39;actors&#39;: [&#39;Süleyman Turan&#39;, &#39;Metin Serezli&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Family&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;80 Steps to Jonah&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Gerd Oswald&#39;],  &#39;actors&#39;: [&#39;Wayne Newton&#39;, &#39;Mickey Rooney&#39;, &#39;Keenan Wynn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Flight Lieutenant&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Sidney Salkow&#39;],  &#39;actors&#39;: [&quot;Pat O&#39;Brien&quot;, &#39;Glenn Ford&#39;, &#39;Jonathan Hale&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;1900&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Bernardo Bertolucci&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Gérard Depardieu&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Where Danger Lives&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Claude Rains&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Elvis&#39;,  &#39;year&#39;: 1979,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;John Carpenter&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Bing Russell&#39;, &#39;Robert Gray&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Return of the Bad Men&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Robert Ryan&#39;, &quot;George &#39;Gabby&#39; Hayes&quot;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Return of October&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Joseph H. Lewis&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Albert Sharpe&#39;, &#39;James Gleason&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Seventh Sin&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Ronald Neame&#39;, &#39;Vincente Minnelli&#39;],  &#39;actors&#39;: [&#39;Bill Travers&#39;, &#39;George Sanders&#39;, &#39;Jean-Pierre Aumont&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Summer Storm&#39;,  &#39;year&#39;: 1944,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Douglas Sirk&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Edward Everett Horton&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;High, Wide and Handsome&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Rouben Mamoulian&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Spoilers&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;John Wayne&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Winds of the Wasteland&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Mack V. Wright&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Lew Kelly&#39;, &#39;Douglas Cosgrove&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Follow the Fleet&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Mark Sandrich&#39;],  &#39;actors&#39;: [&#39;Fred Astaire&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Odyssey of the Pacific&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Fernando Arrabal&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Jonathan Starr&#39;, &#39;Ky Huot Uk&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;]}, {&#39;title&#39;: &quot;In Harm&#39;s Way&quot;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Otto Preminger&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Kirk Douglas&#39;, &#39;Tom Tryon&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Stroker Ace&#39;,  &#39;year&#39;: 1983,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Hal Needham&#39;],  &#39;actors&#39;: [&#39;Burt Reynolds&#39;, &#39;Ned Beatty&#39;, &#39;Jim Nabors&#39;, &#39;Parker Stevenson&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Garden of the Dead&#39;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;John Hayes&#39;],  &#39;actors&#39;: [&#39;Marland Proctor&#39;,   &#39;Philip Kenneally&#39;,   &#39;Duncan McLeod&#39;,   &#39;John Dullaghan&#39;,   &#39;John Dennis&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Sorry, Wrong Number&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Tony Wharmby&#39;],  &#39;actors&#39;: [&#39;Carl Weintraub&#39;, &#39;Patrick Macnee&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Fan&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Otto Preminger&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Richard Greene&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Wyatt Earp&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Lawrence Kasdan&#39;],  &#39;actors&#39;: [&#39;Kevin Costner&#39;, &#39;Dennis Quaid&#39;, &#39;Gene Hackman&#39;, &#39;David Andrews&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Doctor Who&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Geoffrey Sax&#39;],  &#39;actors&#39;: [&#39;Paul McGann&#39;, &#39;Eric Roberts&#39;, &#39;Sylvester McCoy&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Huo yun chuan qi&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Woo-Ping Yuen&#39;],  &#39;actors&#39;: [&#39;Gang Wu&#39;, &#39;Siu Chung Mok&#39;, &#39;Joe Chu&#39;, &#39;Lap-Man Sinn&#39;],  &#39;genres&#39;: [&#39;Action&#39;]}, {&#39;title&#39;: &#39;Dragon Ball: The Path to Power&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Shigeyasu Yamauchi&#39;],  &#39;actors&#39;: [&#39;Naoki Tatsuta&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Animation&#39;]}, {&#39;title&#39;: &#39;The Quatermass Xperiment&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Val Guest&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;Jack Warner&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Found&#39;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Hrishikesh Mukherjee&#39;],  &#39;actors&#39;: [&#39;Amitabh Bachchan&#39;, &#39;Ashok Kumar&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Rio Lobo&#39;,  &#39;year&#39;: 1970,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Howard Hawks&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Jorge Rivero&#39;, &#39;Jack Elam&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Wild Bill&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Walter Hill&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;John Hurt&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Visitors of the Night&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Jorge Montesi&#39;],  &#39;actors&#39;: [&#39;Stephen McHattie&#39;, &#39;Dale Midkiff&#39;],  &#39;genres&#39;: [&#39;Sci-Fi&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Rancho Deluxe&#39;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Frank Perry&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Sam Waterston&#39;, &#39;Clifton James&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Bombardier&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Richard Wallace&#39;, &#39;Lambert Hillyer&#39;],  &#39;actors&#39;: [&quot;Pat O&#39;Brien&quot;, &#39;Randolph Scott&#39;, &#39;Eddie Albert&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Youth of the Son&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Masaki Kobayashi&#39;],  &#39;actors&#39;: [&#39;Akira Ishihama&#39;, &#39;Chishû Ryû&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Big Steal&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Don Siegel&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;William Bendix&#39;, &#39;Patric Knowles&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Red Pony&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Lewis Milestone&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Louis Calhern&#39;, &#39;Shepperd Strudwick&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Violent Men&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Rudolph Maté&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Edward G. Robinson&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Mad Miss Manton&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Leigh Jason&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Sam Levene&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Andy Hardy Gets Spring Fever&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;W.S. Van Dyke&#39;],  &#39;actors&#39;: [&#39;Lewis Stone&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Babe: Pig in the City&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;George Miller&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;James Cromwell&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Every Afternoon&#39;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Joseph W. Sarno&#39;],  &#39;actors&#39;: [&#39;Peder Kinberg&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;I Wanted Wings&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Mitchell Leisen&#39;],  &#39;actors&#39;: [&#39;Ray Milland&#39;, &#39;William Holden&#39;, &#39;Wayne Morris&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Pittsburgh&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Lewis Seiler&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Randolph Scott&#39;, &#39;Frank Craven&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Fear and Desire&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Stanley Kubrick&#39;],  &#39;actors&#39;: [&#39;Frank Silvera&#39;, &#39;Kenneth Harp&#39;, &#39;Paul Mazursky&#39;, &#39;Stephen Coit&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Impact&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Arthur Lubin&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;Charles Coburn&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Farmer Takes a Wife&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Victor Fleming&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Charles Bickford&#39;, &#39;Slim Summerville&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Eight Men Out&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;John Sayles&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;,   &#39;Clifton James&#39;,   &#39;Michael Lerner&#39;,   &#39;Christopher Lloyd&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Requiem for a Heavyweight&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Ralph Nelson&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Jackie Gleason&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;The Captain from Köpenick&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Helmut Käutner&#39;],  &#39;actors&#39;: [&#39;Heinz Rühmann&#39;, &#39;Martin Held&#39;, &#39;Willy A. Kleinau&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Watch Me When I Kill&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Antonio Bido&#39;],  &#39;actors&#39;: [&#39;Corrado Pani&#39;, &#39;Franco Citti&#39;, &#39;Fernando Cerulli&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Fugitive&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Emilio Fernández&#39;, &#39;John Ford&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Pedro Armendáriz&#39;, &#39;J. Carrol Naish&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Gallant Journey&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Charles Ruggles&#39;, &#39;Henry Travers&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Wonderful Country&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Robert Parrish&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Gary Merrill&#39;, &#39;Albert Dekker&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Murder, Inc.&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Burt Balaban&#39;, &#39;Stuart Rosenberg&#39;],  &#39;actors&#39;: [&#39;Stuart Whitman&#39;, &#39;Henry Morgan&#39;, &#39;Peter Falk&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Slow Burn&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Matthew Chapman&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Dennis Lipscomb&#39;, &#39;Raymond J. Barry&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Sheepman&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;George Marshall&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Leslie Nielsen&#39;, &#39;Mickey Shaughnessy&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Love Is a Gun&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;David Hartwell&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;R. Lee Ermey&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Captain Kidd&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Rowland V. Lee&#39;],  &#39;actors&#39;: [&#39;Charles Laughton&#39;, &#39;Randolph Scott&#39;, &#39;Reginald Owen&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Final Analysis&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Phil Joanou&#39;],  &#39;actors&#39;: [&#39;Richard Gere&#39;, &#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;A Lawless Street&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Joseph H. Lewis&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Warner Anderson&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Serpent&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Henri Verneuil&#39;],  &#39;actors&#39;: [&#39;Yul Brynner&#39;, &#39;Henry Fonda&#39;, &#39;Dirk Bogarde&#39;, &#39;Philippe Noiret&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Magic of Lassie&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Don Chaffey&#39;],  &#39;actors&#39;: [&#39;James Stewart&#39;, &#39;Mickey Rooney&#39;, &#39;Pernell Roberts&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Call Me Madam&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Walter Lang&#39;],  &#39;actors&#39;: [&quot;Donald O&#39;Connor&quot;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;La Strada&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Federico Fellini&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Richard Basehart&#39;, &#39;Aldo Silvani&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Falling in Love&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Ulu Grosbard&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Harvey Keitel&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Escape from L.A.&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;John Carpenter&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Steve Buscemi&#39;, &#39;Stacy Keach&#39;, &#39;Peter Fonda&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Going Home&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Herbert B. Leonard&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Jan-Michael Vincent&#39;, &#39;Jason Bernard&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;One in a Million: The Ron LeFlore Story&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;William A. Graham&#39;],  &#39;actors&#39;: [&#39;LeVar Burton&#39;, &#39;Paul Benjamin&#39;, &#39;James Luisi&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Shoulder Arms&#39;,  &#39;year&#39;: 1918,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;L.A. Blaisdell&#39;,   &#39;Charles Chaplin&#39;,   &#39;Syd Chaplin&#39;,   &#39;Loyal Underwood&#39;,   &#39;Henry Bergman&#39;,   &#39;Tom Wilson&#39;,   &#39;Albert Austin&#39;,   &#39;Jack Wilson&#39;,   &#39;W.J. Allen&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Down by Law&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Jim Jarmusch&#39;],  &#39;actors&#39;: [&#39;Tom Waits&#39;, &#39;John Lurie&#39;, &#39;Roberto Benigni&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Rounders&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Burt Kennedy&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Untouchables&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Brian De Palma&#39;],  &#39;actors&#39;: [&#39;Kevin Costner&#39;,   &#39;Sean Connery&#39;,   &#39;Robert De Niro&#39;,   &#39;Charles Martin Smith&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Birth of the Blues&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Victor Schertzinger&#39;],  &#39;actors&#39;: [&#39;Bing Crosby&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Music&#39;]}, {&#39;title&#39;: &quot;Thompson&#39;s Last Run&quot;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Jerrold Freedman&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Wilford Brimley&#39;, &#39;Guy Boyd&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Grosse Pointe Blank&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;George Armitage&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Dan Aykroyd&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Abilene Town&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Edwin L. Marin&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Edgar Buchanan&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Rude Awakening&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Aaron Russo&#39;, &#39;David Greenwalt&#39;],  &#39;actors&#39;: [&#39;Cheech Marin&#39;, &#39;Eric Roberts&#39;, &#39;Robert Carradine&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Night and the City&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Irwin Winkler&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Cliff Gorman&#39;, &#39;Alan King&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Iceman Cometh&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;John Frankenheimer&#39;],  &#39;actors&#39;: [&#39;Lee Marvin&#39;, &#39;Fredric March&#39;, &#39;Robert Ryan&#39;, &#39;Jeff Bridges&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;My Name Is Nobody&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Tonino Valerii&#39;],  &#39;actors&#39;: [&#39;Terence Hill&#39;, &#39;Henry Fonda&#39;, &#39;Jean Martin&#39;, &#39;R.G. Armstrong&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Return of Frank James&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Fritz Lang&#39;],  &#39;actors&#39;: [&#39;John Carradine&#39;, &#39;Henry Fonda&#39;, &#39;Jackie Cooper&#39;, &#39;Henry Hull&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;History&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Killing&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;Stanley Kubrick&#39;],  &#39;actors&#39;: [&#39;Sterling Hayden&#39;, &#39;Vince Edwards&#39;, &#39;Jay C. Flippen&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Convicted&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Henry Levin&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Broderick Crawford&#39;, &#39;Millard Mitchell&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Nous sommes tous des assassins&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;André Cayatte&#39;],  &#39;actors&#39;: [&#39;Marcel Mouloudji&#39;,   &#39;Raymond Pellegrin&#39;,   &#39;Antoine Balpêtré&#39;,   &#39;Julien Verdier&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Lust for Gold&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;S. Sylvan Simon&#39;, &#39;George Marshall&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Gig Young&#39;, &#39;William Prince&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Crime&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Midway&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Jack Smight&#39;],  &#39;actors&#39;: [&#39;Charlton Heston&#39;, &#39;Henry Fonda&#39;, &#39;James Coburn&#39;, &#39;Glenn Ford&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Message&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Moustapha Akkad&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Michael Ansara&#39;, &#39;Johnny Sekka&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Hide in Plain Sight&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;James Caan&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Robert Viharo&#39;, &#39;Joe Grifasi&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;West of the Divide&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;Lafe McKee&#39;,   &#39;John Wayne&#39;,   &quot;George &#39;Gabby&#39; Hayes&quot;,   &#39;Lloyd Whitlock&#39;,   &#39;Yakima Canutt&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;I Cover the War!&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Arthur Lubin&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Don Barclay&#39;, &#39;Charles Brokaw&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Dick Tracy&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Alan James&#39;, &#39;Ray Taylor&#39;],  &#39;actors&#39;: [&#39;Ralph Byrd&#39;, &#39;Smiley Burnette&#39;, &#39;Lee Van Atta&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Paras-Pathar&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Tulsi Chakraborty&#39;, &#39;Kali Bannerjee&#39;, &#39;Gangapada Basu&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Redskin&#39;,  &#39;year&#39;: 1929,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Victor Schertzinger&#39;],  &#39;actors&#39;: [&#39;Richard Dix&#39;, &#39;Tully Marshall&#39;, &#39;George Regas&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;HouseSitter&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Frank Oz&#39;],  &#39;actors&#39;: [&#39;Steve Martin&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Unknown Cyclist&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Bernard Salzmann&#39;],  &#39;actors&#39;: [&#39;Vincent Spano&#39;, &#39;Danny Nucci&#39;, &#39;Stephen Spinella&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Desire Me&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Victor Saville&#39;,   &#39;Jack Conway&#39;,   &#39;George Cukor&#39;,   &#39;Mervyn LeRoy&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Richard Hart&#39;, &#39;Morris Ankrum&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Raggedy Man&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Jack Fisk&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Sam Shepard&#39;, &#39;William Sanderson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Big Wheel&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Edward Ludwig&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Thomas Mitchell&#39;, &quot;Michael O&#39;Shea&quot;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Tex&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Tim Hunter&#39;],  &#39;actors&#39;: [&#39;Matt Dillon&#39;, &#39;Jim Metzler&#39;, &#39;Bill McKinney&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;That Championship Season&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Jason Miller&#39;],  &#39;actors&#39;: [&#39;Bruce Dern&#39;, &#39;Stacy Keach&#39;, &#39;Robert Mitchum&#39;, &#39;Martin Sheen&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Shakespeare in... and Out&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Peter Shushtari&#39;],  &#39;actors&#39;: [&#39;Roger Shank&#39;,   &#39;Lawrence Trilling&#39;,   &#39;J.D. Smith&#39;,   &#39;William Neenan&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Enemy Mine&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Wolfgang Petersen&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;,   &#39;Louis Gossett Jr.&#39;,   &#39;Brion James&#39;,   &#39;Richard Marcus&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Best of Times&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Roger Spottiswoode&#39;],  &#39;actors&#39;: [&#39;Robin Williams&#39;, &#39;Kurt Russell&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Souls at Sea&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Gary Cooper&#39;, &#39;George Raft&#39;, &#39;Henry Wilcoxon&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;]}, {&#39;title&#39;: &#39;Horatio Hornblower: The Duchess and the Devil&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;Andrew Grieve&#39;],  &#39;actors&#39;: [&#39;Ioan Gruffudd&#39;, &#39;Robert Lindsay&#39;, &#39;Christopher Fulford&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Horatio Hornblower: The Fire Ship&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Andrew Grieve&#39;],  &#39;actors&#39;: [&#39;Ioan Gruffudd&#39;, &#39;Robert Lindsay&#39;, &#39;Denis Lawson&#39;, &#39;Ian McNeice&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Horatio Hornblower: The Wrong War&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Andrew Grieve&#39;],  &#39;actors&#39;: [&#39;John Shrapnel&#39;,   &#39;Ioan Gruffudd&#39;,   &#39;Robert Lindsay&#39;,   &#39;Antony Sher&#39;,   &#39;Samuel West&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Man Hunt&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Fritz Lang&#39;],  &#39;actors&#39;: [&#39;Walter Pidgeon&#39;, &#39;George Sanders&#39;, &#39;John Carradine&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;A Man Betrayed&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;John H. Auer&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Edward Ellis&#39;, &#39;Wallace Ford&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Shaft in Africa&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;John Guillermin&#39;],  &#39;actors&#39;: [&#39;Richard Roundtree&#39;, &#39;Frank Finlay&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Rollercoaster&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;James Goldstone&#39;],  &#39;actors&#39;: [&#39;George Segal&#39;,   &#39;Timothy Bottoms&#39;,   &#39;Richard Widmark&#39;,   &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Shoes of the Fisherman&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Michael Anderson&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;,   &#39;Laurence Olivier&#39;,   &#39;Oskar Werner&#39;,   &#39;David Janssen&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Blockade&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;William Dieterle&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Leo Carrillo&#39;, &#39;John Halliday&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Eddie Cantor Story&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Alfred E. Green&#39;],  &#39;actors&#39;: [&#39;Keefe Brasselle&#39;, &#39;Arthur Franz&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;The Savage Innocents&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Nicholas Ray&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Carlo Giustini&#39;, &quot;Peter O&#39;Toole&quot;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Comrades of Summer&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Tommy Lee Wallace&#39;],  &#39;actors&#39;: [&#39;Joe Mantegna&#39;, &#39;Michael Lerner&#39;, &#39;Mark Rolston&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &quot;It&#39;s My Party&quot;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Randal Kleiser&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Gregory Harrison&#39;, &#39;Bruce Davison&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Love Is a Ball&#39;,  &#39;year&#39;: 1963,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;David Swift&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Charles Boyer&#39;, &#39;Ricardo Montalban&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Roberta&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;Fred Astaire&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;War and Peace&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;King Vidor&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Mel Ferrer&#39;, &#39;Vittorio Gassman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Savior&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Predrag Antonijevic&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Pascal Rollin&#39;, &#39;Catlin Foster&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Dear Heart&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Delbert Mann&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Michael Anderson Jr.&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Freak Talks About Sex&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Paul Todisco&#39;],  &#39;actors&#39;: [&#39;Steve Zahn&#39;, &#39;Josh Hamilton&#39;, &#39;David Kinney&#39;, &#39;Wayne Federman&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Pearls and Swine&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Óskar Jónasson&#39;],  &#39;actors&#39;: [&#39;Ingvar Eggert Sigurðsson&#39;,   &#39;Jóhann Sigurðarson&#39;,   &#39;Ólafur Darri Ólafsson&#39;,   &#39;Þröstur Leó Gunnarsson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Destroyer&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;William A. Seiter&#39;, &#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Edward G. Robinson&#39;, &#39;Glenn Ford&#39;, &#39;Edgar Buchanan&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;A Stolen Life&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Curtis Bernhardt&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Dane Clark&#39;, &#39;Walter Brennan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Love, Cheat &amp; Steal&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;William Curran&#39;],  &#39;actors&#39;: [&#39;John Lithgow&#39;, &#39;Eric Roberts&#39;, &#39;Richard Edson&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;White Banners&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Edmund Goulding&#39;],  &#39;actors&#39;: [&#39;Claude Rains&#39;, &#39;Jackie Cooper&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Snow Queen&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Päivi Hartzell&#39;],  &#39;actors&#39;: [&#39;Sebastian Kaatrasalo&#39;],  &#39;genres&#39;: [&#39;Family&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;The Fisher King&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Terry Gilliam&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Robin Williams&#39;, &#39;Adam Bryant&#39;, &#39;Paul Lombardi&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;The River Wild&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Curtis Hanson&#39;],  &#39;actors&#39;: [&#39;Kevin Bacon&#39;, &#39;David Strathairn&#39;, &#39;Joseph Mazzello&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &quot;Thoroughbreds Don&#39;t Cry&quot;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Alfred E. Green&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;C. Aubrey Smith&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Curse of the Fly&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Don Sharp&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;George Baker&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Horror&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;This Is My Affair&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;Robert Taylor&#39;, &#39;Victor McLaglen&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Star Wars: Episode I - The Phantom Menace&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;George Lucas&#39;],  &#39;actors&#39;: [&#39;Ewan McGregor&#39;, &#39;Liam Neeson&#39;, &#39;Jake Lloyd&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Captain Ron&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Thom Eberhardt&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Martin Short&#39;, &#39;Benjamin Salisbury&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Angel and the Badman&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;James Edward Grant&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Harry Carey&#39;, &#39;Bruce Cabot&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Last American Hero&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Lamont Johnson&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Hot Saturday&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;Cary Grant&#39;, &#39;Randolph Scott&#39;, &#39;Edward Woods&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Alambrista!&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Robert M. Young&#39;],  &#39;actors&#39;: [&#39;Domingo Ambriz&#39;, &#39;Trinidad Silva&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Bang the Drum Slowly&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;John D. Hancock&#39;],  &#39;actors&#39;: [&#39;Michael Moriarty&#39;,   &#39;Robert De Niro&#39;,   &#39;Vincent Gardenia&#39;,   &#39;Phil Foster&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Andy Hardy Meets Debutante&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Lewis Stone&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;June Bride&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Bretaigne Windust&#39;],  &#39;actors&#39;: [&#39;Robert Montgomery&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &quot;The People Against O&#39;Hara&quot;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;John Sturges&#39;],  &#39;actors&#39;: [&#39;Spencer Tracy&#39;, &quot;Pat O&#39;Brien&quot;, &#39;John Hodiak&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Dream of Kings&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Daniel Mann&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Sam Levene&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Strangler of the Swamp&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Frank Wisbar&#39;],  &#39;actors&#39;: [&#39;Robert Barrat&#39;, &#39;Blake Edwards&#39;, &#39;Charles Middleton&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Fantasy&#39;, &#39;Horror&#39;]}, {&#39;title&#39;: &#39;Story of G.I. Joe&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;Burgess Meredith&#39;,   &#39;Robert Mitchum&#39;,   &#39;Freddie Steele&#39;,   &#39;Wally Cassell&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Daisy Kenyon&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Otto Preminger&#39;],  &#39;actors&#39;: [&#39;Dana Andrews&#39;, &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Stowaway to the Moon&#39;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Andrew V. McLaglen&#39;],  &#39;actors&#39;: [&#39;Lloyd Bridges&#39;, &#39;Jeremy Slate&#39;, &#39;Jim McMullan&#39;, &#39;Morgan Paull&#39;],  &#39;genres&#39;: [&#39;Family&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &quot;Hitman&#39;s Run&quot;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Mark L. Lester&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Esteban Powell&#39;, &#39;C. Thomas Howell&#39;],  &#39;genres&#39;: [&#39;Action&#39;]}, {&#39;title&#39;: &#39;Wiped-Out Footprints&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Enrique Gabriel&#39;],  &#39;actors&#39;: [&#39;Federico Luppi&#39;, &#39;Sergi Calleja&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &quot;Donovan&#39;s Reef&quot;,  &#39;year&#39;: 1963,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Lee Marvin&#39;, &#39;Jack Warden&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Enemy of the World&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Tabrez Hashmi&#39;, &#39;Mehmood&#39;],  &#39;actors&#39;: [&#39;Mehmood&#39;, &#39;Manzoor Ali&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Killer in the Family&#39;,  &#39;year&#39;: 1983,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Richard T. Heffron&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;James Spader&#39;, &#39;Lance Kerwin&#39;, &#39;Eric Stoltz&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The King of Comedy&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Martin Scorsese&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Jerry Lewis&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Hold That Kiss&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Edwin L. Marin&#39;],  &#39;actors&#39;: [&quot;Dennis O&#39;Keefe&quot;, &#39;Mickey Rooney&#39;, &#39;George Barbier&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Nest of Vipers&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Tonino Cervi&#39;],  &#39;actors&#39;: [&#39;Paolo Bonacelli&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Action in Arabia&#39;,  &#39;year&#39;: 1944,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Léonide Moguy&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Gene Lockhart&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Riders of Destiny&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;Heinie Conklin&#39;,   &#39;John Wayne&#39;,   &#39;Forrest Taylor&#39;,   &quot;George &#39;Gabby&#39; Hayes&quot;,   &#39;Al St. John&#39;],  &#39;genres&#39;: [&#39;Music&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &quot;We Can&#39;t Go Home Again&quot;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Nicholas Ray&#39;],  &#39;actors&#39;: [&#39;Richard Bock&#39;, &#39;Tom Farrell&#39;, &#39;Danny Fisher&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &quot;Cutter&#39;s Way&quot;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Ivan Passer&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;John Heard&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;I Love Melvin&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Don Weis&#39;],  &#39;actors&#39;: [&quot;Donald O&#39;Connor&quot;, &#39;Richard Anderson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;How the West Was Won&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;John Ford&#39;,   &#39;Richard Thorpe&#39;,   &#39;George Marshall&#39;,   &#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;James Stewart&#39;, &#39;John Wayne&#39;, &#39;Gregory Peck&#39;, &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Lucky Texan&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;Gordon De Main&#39;,   &#39;John Wayne&#39;,   &quot;George &#39;Gabby&#39; Hayes&quot;,   &#39;Lloyd Whitlock&#39;,   &#39;Yakima Canutt&#39;,   &#39;Eddie Parker&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Solomon and Sheba&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;King Vidor&#39;],  &#39;actors&#39;: [&#39;Yul Brynner&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Q &amp; A&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Sidney Lumet&#39;],  &#39;actors&#39;: [&#39;Nick Nolte&#39;,   &#39;Timothy Hutton&#39;,   &#39;Armand Assante&#39;,   &quot;Patrick O&#39;Neal&quot;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;This Land Is Mine&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Jean Renoir&#39;],  &#39;actors&#39;: [&#39;Charles Laughton&#39;, &#39;George Sanders&#39;, &#39;Walter Slezak&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Back to Bataan&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Edward Dmytryk&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Saint of Fort Washington&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Tim Hunter&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Matt Dillon&#39;, &#39;Rick Aviles&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Rage in Heaven&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Richard Thorpe&#39;, &#39;Robert B. Sinclair&#39;, &#39;W.S. Van Dyke&#39;],  &#39;actors&#39;: [&#39;Robert Montgomery&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Not as a Stranger&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Stanley Kramer&#39;],  &#39;actors&#39;: [&#39;Frank Sinatra&#39;, &#39;Robert Mitchum&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Slither&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Howard Zieff&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Peter Boyle&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Late George Apley&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Joseph L. Mankiewicz&#39;],  &#39;actors&#39;: [&#39;Ronald Colman&#39;, &#39;Richard Haydn&#39;, &#39;Charles Russell&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The American Success Company&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;William Richert&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Ned Beatty&#39;, &#39;Steven Keats&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Young Man with Ideas&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Mitchell Leisen&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Hunley&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;John Gray&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;,   &#39;Donald Sutherland&#39;,   &#39;Alex Jennings&#39;,   &#39;Chris Bauer&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Beloved&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Jonathan Demme&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Emil Pinnock&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Horror&#39;]}, {&#39;title&#39;: &#39;Being John Malkovich&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Spike Jonze&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;John Malkovich&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Capricorn One&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Peter Hyams&#39;],  &#39;actors&#39;: [&#39;Elliott Gould&#39;, &#39;James Brolin&#39;, &#39;Sam Waterston&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Santa Fe Stampede&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;George Sherman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ray Corrigan&#39;, &#39;Max Terhune&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Great Balls of Fire!&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Jim McBride&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;John Doe&#39;, &#39;Stephen Tobolowsky&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Supernatural&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Victor Halperin&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Alan Dinehart&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;El kárate, el Colt y el impostor&#39;,  &#39;year&#39;: 1974,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Antonio Margheriti&#39;],  &#39;actors&#39;: [&#39;Lee Van Cleef&#39;, &#39;Lieh Lo&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Scugnizzi&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Nanni Loy&#39;],  &#39;actors&#39;: [&#39;Leo Gullotta&#39;,   &#39;Francesco Allocca&#39;,   &#39;Gaetano Amato&#39;,   &#39;Pino Ammendola&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Return of the Living Dead&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&quot;Dan O&#39;Bannon&quot;],  &#39;actors&#39;: [&#39;Clu Gulager&#39;, &#39;James Karen&#39;, &#39;Don Calfa&#39;, &#39;Thom Mathews&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Lethal Weapon 4&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Richard Donner&#39;],  &#39;actors&#39;: [&#39;Mel Gibson&#39;, &#39;Danny Glover&#39;, &#39;Joe Pesci&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The World of Apu&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Soumitra Chatterjee&#39;, &#39;Alok Chakravarty&#39;, &#39;Swapan Mukherjee&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Kampf um Rom II - Der Verrat&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Robert Siodmak&#39;, &#39;Sergiu Nicolaescu&#39;, &#39;Andrew Marton&#39;],  &#39;actors&#39;: [&#39;Laurence Harvey&#39;, &#39;Orson Welles&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Another Face&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Christy Cabanne&#39;],  &#39;actors&#39;: [&#39;Wallace Ford&#39;, &#39;Brian Donlevy&#39;, &#39;Erik Rhodes&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Lawless Nineties&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Joseph Kane&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Harry Woods&#39;, &quot;George &#39;Gabby&#39; Hayes&quot;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Breakdown&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Jonathan Mostow&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;J.T. Walsh&#39;, &#39;M.C. Gainey&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Nowhere Land&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 4.3,  &#39;directors&#39;: [&#39;Rupert Hitzig&#39;],  &#39;actors&#39;: [&#39;Peter Dobson&#39;, &#39;Jon Polito&#39;, &#39;Francesco Quinn&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Tequila Sunrise&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Robert Towne&#39;],  &#39;actors&#39;: [&#39;Mel Gibson&#39;, &#39;Kurt Russell&#39;, &#39;Raul Julia&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Greetings&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Brian De Palma&#39;],  &#39;actors&#39;: [&#39;Jonathan Warden&#39;,   &#39;Robert De Niro&#39;,   &#39;Gerrit Graham&#39;,   &#39;Richard Hamilton&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Dark Angel&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Robert Iscove&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Linden Ashby&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Trainspotting&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Danny Boyle&#39;],  &#39;actors&#39;: [&#39;Ewan McGregor&#39;,   &#39;Ewen Bremner&#39;,   &#39;Jonny Lee Miller&#39;,   &#39;Kevin McKidd&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Man from Del Rio&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Harry Horner&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Peter Whitney&#39;, &#39;Douglas Fowley&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Ten Wanted Men&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;H. Bruce Humberstone&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Richard Boone&#39;, &#39;Alfonso Bedoya&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Carson City&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;André De Toth&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Raymond Massey&#39;, &#39;Richard Webb&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;One Shoe Makes It Murder&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;William Hale&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Mel Ferrer&#39;, &#39;José Pérez&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Promises in the Dark&#39;,  &#39;year&#39;: 1979,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Jerome Hellman&#39;],  &#39;actors&#39;: [&#39;Ned Beatty&#39;, &#39;Michael Brandon&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Sweet Bird of Youth&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Richard Brooks&#39;],  &#39;actors&#39;: [&#39;Paul Newman&#39;, &#39;Ed Begley&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Feu Mathias Pascal&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Pierre Chenal&#39;],  &#39;actors&#39;: [&#39;Pierre Blanchar&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Down to the Sea in Ships&#39;,  &#39;year&#39;: 1922,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Elmer Clifton&#39;],  &#39;actors&#39;: [&#39;Leigh Smith&#39;,   &#39;Raymond McKee&#39;,   &#39;William Walcott&#39;,   &#39;James Turfler&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Dead Man Out&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Richard Pearce&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Tom Atkins&#39;, &#39;Rubén Blades&#39;, &#39;Larry Block&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Illusions&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Victor Kulle&#39;],  &#39;actors&#39;: [&#39;Robert Carradine&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Deer Hunter&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Michael Cimino&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;,   &#39;Christopher Walken&#39;,   &#39;John Cazale&#39;,   &#39;John Savage&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Island in the Sky&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Lloyd Nolan&#39;, &#39;Walter Abel&#39;, &#39;James Arness&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Walking Hills&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;John Sturges&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;William Bishop&#39;, &#39;Edgar Buchanan&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Thriller&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Her Cardboard Lover&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;George Cukor&#39;],  &#39;actors&#39;: [&#39;Robert Taylor&#39;, &#39;George Sanders&#39;, &#39;Frank McHugh&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Rope of Sand&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;William Dieterle&#39;],  &#39;actors&#39;: [&#39;Burt Lancaster&#39;, &#39;Paul Henreid&#39;, &#39;Claude Rains&#39;, &#39;Peter Lorre&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;]}, {&#39;title&#39;: &#39;Stage Struck&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Sidney Lumet&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Herbert Marshall&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Great Gatsby&#39;,  &#39;year&#39;: 1974,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Jack Clayton&#39;],  &#39;actors&#39;: [&#39;Robert Redford&#39;, &#39;Bruce Dern&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Jagged Edge&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Richard Marquand&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Peter Coyote&#39;, &#39;Robert Loggia&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Blood of the Condor&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Jorge Sanjinés&#39;],  &#39;actors&#39;: [&#39;Marcelino Yanahuaya&#39;, &#39;Vicente Verneros Salinas&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;D.C. Cab&#39;,  &#39;year&#39;: 1983,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Joel Schumacher&#39;],  &#39;actors&#39;: [&#39;Max Gail&#39;, &#39;Adam Baldwin&#39;, &#39;Mr. T&#39;, &#39;Charlie Barnett&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Jesse James&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Henry King&#39;, &#39;Irving Cummings&#39;],  &#39;actors&#39;: [&#39;Tyrone Power&#39;, &#39;Henry Fonda&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;I Accuse&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Abel Gance&#39;],  &#39;actors&#39;: [&#39;Victor Francen&#39;, &#39;Marcel Delaître&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Fat Man and Little Boy&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Roland Joffé&#39;],  &#39;actors&#39;: [&#39;Paul Newman&#39;, &#39;Dwight Schultz&#39;, &#39;John Cusack&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;While the City Sleeps&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Fritz Lang&#39;],  &#39;actors&#39;: [&#39;Dana Andrews&#39;, &#39;George Sanders&#39;, &#39;Howard Duff&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Ox-Bow Incident&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Dana Andrews&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Second Chance&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Rudolph Maté&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Jack Palance&#39;, &#39;Sandro Giglio&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &quot;Marvin&#39;s Room&quot;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Jerry Zaks&#39;],  &#39;actors&#39;: [&#39;Leonardo DiCaprio&#39;, &#39;Robert De Niro&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The First of May&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Paul Sirmons&#39;],  &#39;actors&#39;: [&#39;Dan Byrd&#39;, &#39;Mickey Rooney&#39;, &#39;Charles Nelson Reilly&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;In Search of the Castaways&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Robert Stevenson&#39;],  &#39;actors&#39;: [&#39;Maurice Chevalier&#39;, &#39;George Sanders&#39;, &#39;Wilfrid Hyde-White&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Family&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Johnny Belinda&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Anthony Page&#39;],  &#39;actors&#39;: [&#39;Richard Thomas&#39;, &#39;Dennis Quaid&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Blood and Sweat&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Rakesh Kumar&#39;],  &#39;actors&#39;: [&#39;Amitabh Bachchan&#39;, &#39;Vinod Khanna&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Jungle Book&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Stephen Sommers&#39;],  &#39;actors&#39;: [&#39;Jason Scott Lee&#39;, &#39;Cary Elwes&#39;, &#39;Sam Neill&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Family&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Paradise Alley&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Sylvester Stallone&#39;],  &#39;actors&#39;: [&#39;Sylvester Stallone&#39;,   &#39;Lee Canalito&#39;,   &#39;Armand Assante&#39;,   &#39;Frank McRae&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Superdad&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Vincent McEveety&#39;],  &#39;actors&#39;: [&#39;Bob Crane&#39;, &#39;Kurt Russell&#39;, &#39;Joe Flynn&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Bill&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;Anthony Page&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Dennis Quaid&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &quot;&#39;Gung Ho!&#39;: The Story of Carlson&#39;s Makin Island Raiders&quot;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;,   &#39;Alan Curtis&#39;,   &#39;Noah Beery Jr.&#39;,   &#39;J. Carrol Naish&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Smokey and the Bandit II&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Hal Needham&#39;],  &#39;actors&#39;: [&#39;Burt Reynolds&#39;, &#39;Jackie Gleason&#39;, &#39;Jerry Reed&#39;, &#39;Dom DeLuise&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Se7en&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 8.6,  &#39;directors&#39;: [&#39;David Fincher&#39;],  &#39;actors&#39;: [&#39;Morgan Freeman&#39;,   &#39;Brad Pitt&#39;,   &#39;Kevin Spacey&#39;,   &#39;Andrew Kevin Walker&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Ruby Gentry&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;King Vidor&#39;],  &#39;actors&#39;: [&#39;Charlton Heston&#39;, &#39;Karl Malden&#39;, &#39;Tom Tully&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Two for the Seesaw&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Robert Wise&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Edmon Ryan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Right Stuff&#39;,  &#39;year&#39;: 1983,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Philip Kaufman&#39;],  &#39;actors&#39;: [&#39;Sam Shepard&#39;, &#39;Scott Glenn&#39;, &#39;Ed Harris&#39;, &#39;Dennis Quaid&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Visitor&#39;,  &#39;year&#39;: 1979,  &#39;rating&#39;: 4.9,  &#39;directors&#39;: [&#39;Giulio Paradisi&#39;],  &#39;actors&#39;: [&#39;Mel Ferrer&#39;, &#39;Glenn Ford&#39;, &#39;Lance Henriksen&#39;, &#39;John Huston&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Tombstone&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;George P. Cosmatos&#39;, &#39;Kevin Jarre&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Val Kilmer&#39;, &#39;Sam Elliott&#39;, &#39;Bill Paxton&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Fort Apache&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Henry Fonda&#39;, &#39;Pedro Armendáriz&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Fox and the Hound&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Art Stevens&#39;, &#39;Richard Rich&#39;, &#39;Ted Berman&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Kurt Russell&#39;, &#39;Jack Albertson&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Limelight&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;Charles Chaplin&#39;, &#39;Nigel Bruce&#39;, &#39;Buster Keaton&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Big Bad John&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Burt Kennedy&#39;],  &#39;actors&#39;: [&#39;Jimmy Dean&#39;, &#39;Jack Elam&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Git Along Little Dogies&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Joseph Kane&#39;],  &#39;actors&#39;: [&#39;Weldon Heyburn&#39;,   &#39;Gene Autry&#39;,   &#39;Smiley Burnette&#39;,   &#39;Maple City Four&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Last Picture Show&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Peter Bogdanovich&#39;],  &#39;actors&#39;: [&#39;Timothy Bottoms&#39;, &#39;Jeff Bridges&#39;, &#39;Ben Johnson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &quot;Gideon&#39;s Trumpet&quot;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Robert L. Collins&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;José Ferrer&#39;, &#39;John Houseman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Train Robbers&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Burt Kennedy&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Rod Taylor&#39;, &#39;Ben Johnson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Flapper&#39;,  &#39;year&#39;: 1920,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Alan Crosland&#39;],  &#39;actors&#39;: [&#39;Arthur Housman&#39;,   &#39;Theodore Westman Jr.&#39;,   &#39;William P. Carleton&#39;,   &#39;Warren Cook&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;City Beneath the Sea&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Robert Ryan&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Soldier&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Paul W.S. Anderson&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Jason Scott Lee&#39;, &#39;Jason Isaacs&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Rio Bravo&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;Howard Hawks&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Dean Martin&#39;, &#39;Ricky Nelson&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Ride Lonesome&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Pernell Roberts&#39;, &#39;James Best&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Guns for San Sebastian&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Henri Verneuil&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Charles Bronson&#39;, &#39;Sam Jaffe&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Lady in Question&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Charles Vidor&#39;],  &#39;actors&#39;: [&#39;Brian Aherne&#39;, &#39;Glenn Ford&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;In Search of America&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Paul Bogart&#39;],  &#39;actors&#39;: [&#39;Carl Betz&#39;, &#39;Jeff Bridges&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Slaughter Trail&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;Irving Allen&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;Gig Young&#39;, &#39;Andy Devine&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Union City&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Marcus Reichert&#39;],  &#39;actors&#39;: [&#39;Dennis Lipscomb&#39;, &#39;Sam McMurray&#39;, &#39;Terry Walsh&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;A Woman of Paris: A Drama of Fate&#39;,  &#39;year&#39;: 1923,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;Clarence Geldart&#39;,   &#39;Carl Miller&#39;,   &#39;Charles K. French&#39;,   &#39;Adolphe Menjou&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Mr. North&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Danny Huston&#39;],  &#39;actors&#39;: [&#39;Anthony Edwards&#39;, &#39;Robert Mitchum&#39;, &#39;Harry Dean Stanton&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Moving&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Alan Metter&#39;],  &#39;actors&#39;: [&#39;Richard Pryor&#39;, &#39;Raphael Harris&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;King Kong&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;John Guillermin&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Charles Grodin&#39;, &#39;John Randolph&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Horror&#39;]}, {&#39;title&#39;: &#39;Henry Goes Arizona&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Edwin L. Marin&#39;],  &#39;actors&#39;: [&#39;Frank Morgan&#39;, &#39;Guy Kibbee&#39;, &#39;Slim Summerville&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Happening&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;Elliot Silverstein&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;,   &#39;George Maharis&#39;,   &#39;Michael Parks&#39;,   &#39;Robert Walker Jr.&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Boys Town&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Norman Taurog&#39;],  &#39;actors&#39;: [&#39;Spencer Tracy&#39;, &#39;Mickey Rooney&#39;, &#39;Henry Hull&#39;, &#39;Leslie Fenton&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Moonfleet&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Fritz Lang&#39;],  &#39;actors&#39;: [&#39;Stewart Granger&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Mister Roberts&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Joshua Logan&#39;, &#39;John Ford&#39;, &#39;Mervyn LeRoy&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;James Cagney&#39;, &#39;William Powell&#39;, &#39;Jack Lemmon&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Ransom!&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Alex Segal&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Leslie Nielsen&#39;, &#39;Juano Hernandez&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Facade&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 4.7,  &#39;directors&#39;: [&#39;Carl Colpaert&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Angus Macfadyen&#39;, &#39;Brad Garrett&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Escape from New York&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;John Carpenter&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;,   &#39;Lee Van Cleef&#39;,   &#39;Ernest Borgnine&#39;,   &#39;Donald Pleasence&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Cahill U.S. Marshal&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Andrew V. McLaglen&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;George Kennedy&#39;, &#39;Gary Grimes&#39;, &#39;Neville Brand&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;La Cucaracha&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Jack Perez&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;,   &#39;Joaquim de Almeida&#39;,   &#39;Victor Rivers&#39;,   &#39;James McManus&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Last Unicorn&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Arthur Rankin Jr.&#39;, &#39;Jules Bass&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Alan Arkin&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Heat&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Michael Mann&#39;],  &#39;actors&#39;: [&#39;Al Pacino&#39;, &#39;Robert De Niro&#39;, &#39;Val Kilmer&#39;, &#39;Jon Voight&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &quot;Heaven&#39;s Prisoners&quot;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Phil Joanou&#39;],  &#39;actors&#39;: [&#39;Alec Baldwin&#39;, &#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Way Down East&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Henry King&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Slim Summerville&#39;, &#39;Edward Trevor&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Hellfighters&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Andrew V. McLaglen&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Jim Hutton&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Search for the Gods&#39;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Jud Taylor&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Stephen McHattie&#39;, &#39;Raymond St. Jacques&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Trouble Along the Way&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Michael Curtiz&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Charles Coburn&#39;, &#39;Tom Tully&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Lodger&#39;,  &#39;year&#39;: 1944,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;John Brahm&#39;],  &#39;actors&#39;: [&#39;Laird Cregar&#39;, &#39;George Sanders&#39;, &#39;Cedric Hardwicke&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Horror&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Fade to Black&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Vernon Zimmerman&#39;],  &#39;actors&#39;: [&#39;Dennis Christopher&#39;, &#39;Tim Thomerson&#39;, &#39;Norman Burton&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Horror&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Where Pigeons Go to Die&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Michael Landon&#39;],  &#39;actors&#39;: [&#39;Michael Faustino&#39;,   &#39;Richard Bull&#39;,   &#39;Art Carney&#39;,   &#39;Cliff De Young&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Chisum&#39;,  &#39;year&#39;: 1970,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Andrew V. McLaglen&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;,   &#39;Forrest Tucker&#39;,   &#39;Christopher George&#39;,   &#39;Ben Johnson&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Cheyenne Social Club&#39;,  &#39;year&#39;: 1970,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Gene Kelly&#39;],  &#39;actors&#39;: [&#39;James Stewart&#39;, &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Searchers&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Jeffrey Hunter&#39;, &#39;Ward Bond&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Secrets of Life&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;James Algar&#39;],  &#39;actors&#39;: [&#39;Winston Hibler&#39;],  &#39;genres&#39;: [&#39;Family&#39;]}, {&#39;title&#39;: &#39;Gang Related&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Jim Kouf&#39;],  &#39;actors&#39;: [&#39;Jim Belushi&#39;, &#39;Tupac Shakur&#39;, &#39;Dennis Quaid&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Hearst and Davies Affair&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;David Lowell Rich&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Fritz Weaver&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Samurai Wolf II&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Hideo Gosha&#39;],  &#39;actors&#39;: [&#39;Isao Natsuyagi&#39;, &#39;Ichirô Nakatani&#39;, &#39;Bin Amatsu&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Lord Jeff&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Sam Wood&#39;],  &#39;actors&#39;: [&#39;Freddie Bartholomew&#39;,   &#39;Mickey Rooney&#39;,   &#39;Charles Coburn&#39;,   &#39;Herbert Mundin&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Love Is a Headache&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Richard Thorpe&#39;],  &#39;actors&#39;: [&#39;Franchot Tone&#39;, &#39;Ted Healy&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Love Finds Andy Hardy&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Lewis Stone&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Rocky Mountain Mystery&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Charles Barton&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &quot;Charles &#39;Chic&#39; Sale&quot;, &#39;George F. Marion&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Allegheny Uprising&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;William A. Seiter&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;George Sanders&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;History&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Quiet Man&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Barry Fitzgerald&#39;, &#39;Ward Bond&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Against All Flags&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;George Sherman&#39;],  &#39;actors&#39;: [&#39;Errol Flynn&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Affair in Trinidad&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Vincent Sherman&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Alexander Scourby&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Cast a Giant Shadow&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Melville Shavelson&#39;],  &#39;actors&#39;: [&#39;Kirk Douglas&#39;, &#39;John Wayne&#39;, &#39;Frank Sinatra&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Summer Solstice&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Ralph Rosenblum&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Stephen Collins&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Lone Ranger and the Lost City of Gold&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Lesley Selander&#39;],  &#39;actors&#39;: [&#39;Clayton Moore&#39;,   &#39;Jay Silverheels&#39;,   &#39;Douglas Kennedy&#39;,   &#39;Charles Watts&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Man of the Forest&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Barton MacLane&#39;, &#39;Randolph Scott&#39;, &#39;Harry Carey&#39;, &#39;Noah Beery&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;DragonHeart&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Rob Cohen&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Sean Connery&#39;, &#39;Pete Postlethwaite&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;The Affair&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Paul Seed&#39;],  &#39;actors&#39;: [&#39;Courtney B. Vance&#39;, &#39;Leland Gantt&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &quot;Now You See Him, Now You Don&#39;t&quot;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Robert Butler&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Cesar Romero&#39;, &#39;Joe Flynn&#39;, &#39;Jim Backus&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;White Lightning&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Joseph Sargent&#39;],  &#39;actors&#39;: [&#39;Burt Reynolds&#39;, &#39;Ned Beatty&#39;, &#39;Bo Hopkins&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Mask of the Avenger&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Phil Karlson&#39;],  &#39;actors&#39;: [&#39;John Derek&#39;, &#39;Anthony Quinn&#39;, &#39;Arnold Moss&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;On Our Merry Way&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;George Stevens&#39;,   &#39;Leslie Fenton&#39;,   &#39;King Vidor&#39;,   &#39;John Huston&#39;],  &#39;actors&#39;: [&#39;Burgess Meredith&#39;, &#39;James Stewart&#39;, &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Music&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Used Cars&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Robert Zemeckis&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Jack Warden&#39;, &#39;Gerrit Graham&#39;, &#39;Frank McRae&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Gammera the Invincible&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Noriaki Yuasa&#39;, &#39;Sandy Howard&#39;],  &#39;actors&#39;: [&#39;Albert Dekker&#39;, &#39;Brian Donlevy&#39;, &#39;John Baragrey&#39;],  &#39;genres&#39;: [&#39;Family&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Song of Scheherazade&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Walter Reisch&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;Jean-Pierre Aumont&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Ride the High Country&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Sam Peckinpah&#39;],  &#39;actors&#39;: [&#39;Joel McCrea&#39;, &#39;Randolph Scott&#39;, &#39;Ron Starr&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &quot;Siren&#39;s Kiss&quot;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Edward Holzman&#39;],  &#39;actors&#39;: [&#39;Bobby Johnston&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Saint Strikes Back&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Jonathan Hale&#39;, &#39;Jerome Cowan&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Saint in London&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;John Paddy Carstairs&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;David Burns&#39;, &#39;Gordon McLeod&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;2001: A Space Odyssey&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Stanley Kubrick&#39;],  &#39;actors&#39;: [&#39;Keir Dullea&#39;,   &#39;Gary Lockwood&#39;,   &#39;William Sylvester&#39;,   &#39;Daniel Richter&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;5 Card Stud&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Dean Martin&#39;, &#39;Robert Mitchum&#39;, &#39;Roddy McDowall&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Nausicaä of the Valley of the Wind&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Hayao Miyazaki&#39;],  &#39;actors&#39;: [&#39;Mahito Tsujimura&#39;, &#39;Gorô Naya&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;I, the Jury&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Richard T. Heffron&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;Alan King&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Great Diamond Robbery&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Robert Z. Leonard&#39;],  &#39;actors&#39;: [&#39;Red Skelton&#39;, &#39;James Whitmore&#39;, &#39;Kurt Kasznar&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;The Pilgrim&#39;,  &#39;year&#39;: 1923,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;Loyal Underwood&#39;,   &#39;Charles Chaplin&#39;,   &#39;Syd Chaplin&#39;,   &#39;Dean Riesner&#39;,   &#39;Charles Reisner&#39;,   &#39;Tom Murray&#39;,   &#39;Mack Swain&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Watch Out for the Automobile&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Eldar Ryazanov&#39;],  &#39;actors&#39;: [&#39;Innokentiy Smoktunovskiy&#39;, &#39;Oleg Efremov&#39;, &#39;Anatoliy Papanov&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;A Big Hand for the Little Lady&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Fielder Cook&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Jason Robards&#39;, &#39;Paul Ford&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Mister Moses&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Ronald Neame&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Ian Bannen&#39;, &#39;Alexander Knox&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;]}, {&#39;title&#39;: &#39;The Immortals&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Brian Grant&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Joe Pantoliano&#39;, &#39;Tony Curtis&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Quicksand&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Irving Pichel&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Peter Lorre&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Halálos tavasz&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;László Kalmár&#39;],  &#39;actors&#39;: [&#39;Pál Jávor&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Green Glove&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Rudolph Maté&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Cedric Hardwicke&#39;, &#39;George Macready&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Trouble with Spies&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Burt Kennedy&#39;],  &#39;actors&#39;: [&#39;Donald Sutherland&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;I Love You, Alice B. Toklas!&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Hy Averback&#39;],  &#39;actors&#39;: [&#39;Peter Sellers&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Misery&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Rob Reiner&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Richard Farnsworth&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Americano&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;William Castle&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Frank Lovejoy&#39;, &#39;Cesar Romero&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Duck, You Sucker&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Sergio Leone&#39;],  &#39;actors&#39;: [&#39;Rod Steiger&#39;, &#39;James Coburn&#39;, &#39;Romolo Valli&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Kansas Raiders&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Tony Curtis&#39;, &#39;Audie Murphy&#39;, &#39;Brian Donlevy&#39;, &#39;Scott Brady&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Guilty by Suspicion&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Irwin Winkler&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;George Wendt&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;To the Last Man&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Noah Beery&#39;,   &#39;Randolph Scott&#39;,   &#39;Jack La Rue&#39;,   &#39;Buster Crabbe&#39;,   &#39;Barton MacLane&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Crimson Ghost&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;William Witney&#39;, &#39;Fred C. Brannon&#39;],  &#39;actors&#39;: [&#39;Charles Quigley&#39;, &#39;Clayton Moore&#39;, &#39;I. Stanford Jolley&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Fatal Instinct&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Carl Reiner&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Sleepers&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Barry Levinson&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Kevin Bacon&#39;, &#39;Brad Pitt&#39;, &#39;Jason Patric&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Mikey and Nicky&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Elaine May&#39;],  &#39;actors&#39;: [&#39;Peter Falk&#39;, &#39;John Cassavetes&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;City Lights&#39;,  &#39;year&#39;: 1931,  &#39;rating&#39;: 8.5,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;Charles Chaplin&#39;, &#39;Harry Myers&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Lonely Guy&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Arthur Hiller&#39;],  &#39;actors&#39;: [&#39;Steve Martin&#39;, &#39;Charles Grodin&#39;, &#39;Steve Lawrence&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;T.R. Baskin&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Herbert Ross&#39;],  &#39;actors&#39;: [&#39;Peter Boyle&#39;, &#39;James Caan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Against Her Will: The Carrie Buck Story&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;John David Coles&#39;],  &#39;actors&#39;: [&#39;Peter Frechette&#39;, &#39;Pat Hingle&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Lillian Russell&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Irving Cummings&#39;],  &#39;actors&#39;: [&#39;Leo Carrillo&#39;,   &#39;Don Ameche&#39;,   &#39;Henry Fonda&#39;,   &#39;Edward Arnold&#39;,   &#39;Warren William&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Lucy &amp; Desi: Before the Laughter&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Charles Jarrott&#39;],  &#39;actors&#39;: [&#39;Maurice Benard&#39;, &#39;John Wheeler&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Blackboard Jungle&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Richard Brooks&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Louis Calhern&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Transatlantic Tunnel&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Maurice Elvey&#39;],  &#39;actors&#39;: [&#39;Richard Dix&#39;, &#39;Leslie Banks&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Dawn Rider&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Dennis Moore&#39;, &#39;Reed Howes&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &quot;Judge Hardy&#39;s Children&quot;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Lewis Stone&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Ash Wednesday&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Larry Peerce&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Helmut Berger&#39;, &#39;Keith Baxter&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Distant Thunder&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Soumitra Chatterjee&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Drums in the Deep South&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;William Cameron Menzies&#39;],  &#39;actors&#39;: [&#39;James Craig&#39;, &#39;Guy Madison&#39;, &#39;Barton MacLane&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Strange Deception&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Curzio Malaparte&#39;],  &#39;actors&#39;: [&#39;Raf Vallone&#39;, &#39;Alain Cuny&#39;, &#39;Gino Cervi&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Man from Colorado&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Henry Levin&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;William Holden&#39;, &#39;Ray Collins&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Flame of Barbary Coast&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Joseph Kane&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Joseph Schildkraut&#39;, &#39;William Frawley&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Last Time I Saw Archie&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Jack Webb&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Jack Webb&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Thief&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Michael Mann&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Willie Nelson&#39;, &#39;Jim Belushi&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Idol of the Crowds&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Arthur Lubin&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Charles Brokaw&#39;, &#39;Bill Burrud&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Ransom&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Ron Howard&#39;],  &#39;actors&#39;: [&#39;Mel Gibson&#39;, &#39;Gary Sinise&#39;, &#39;Brawley Nolte&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Holiday Affair&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Don Hartman&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Wendell Corey&#39;, &#39;Gordon Gebert&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Hoffa&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Danny DeVito&#39;],  &#39;actors&#39;: [&#39;Jack Nicholson&#39;, &#39;Danny DeVito&#39;, &#39;Armand Assante&#39;, &#39;J.T. Walsh&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;High Rollers&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Sergio Corbucci&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Adriano Celentano&#39;, &#39;Ugo Bologna&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;The Great Bank Hoax&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 5.0,  &#39;directors&#39;: [&#39;Joseph Jacoby&#39;],  &#39;actors&#39;: [&#39;Richard Basehart&#39;, &#39;Ned Beatty&#39;, &#39;Burgess Meredith&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;So Ends Our Night&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;John Cromwell&#39;],  &#39;actors&#39;: [&#39;Fredric March&#39;, &#39;Glenn Ford&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Scared Stiff&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 4.9,  &#39;directors&#39;: [&#39;Frank McDonald&#39;],  &#39;actors&#39;: [&#39;Jack Haley&#39;, &#39;Barton MacLane&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Music Room&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Chhabi Biswas&#39;, &#39;Gangapada Basu&#39;, &#39;Bismillah Khan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Sagebrush Trail&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Armand Schaefer&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Lane Chandler&#39;, &#39;Yakima Canutt&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Full Metal Jacket&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Stanley Kubrick&#39;],  &#39;actors&#39;: [&#39;Matthew Modine&#39;,   &#39;R. Lee Ermey&#39;,   &quot;Vincent D&#39;Onofrio&quot;,   &#39;Adam Baldwin&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Madness&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Fernando Di Leo&#39;],  &#39;actors&#39;: [&#39;Joe Dallesandro&#39;, &#39;Gianni Macchia&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Hostage Flight&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Steven Hilliard Stern&#39;],  &#39;actors&#39;: [&#39;Ned Beatty&#39;, &#39;René Enríquez&#39;, &#39;Jack Gilford&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Young Billy Young&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Burt Kennedy&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Robert Walker Jr.&#39;, &#39;David Carradine&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Show-Off&#39;,  &#39;year&#39;: 1926,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Malcolm St. Clair&#39;],  &#39;actors&#39;: [&#39;Gregory Kelly&#39;, &#39;Ford Sterling&#39;, &#39;Charles Goodrich&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Judge Hardy and Son&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Lewis Stone&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Flight of the Intruder&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;John Milius&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Willem Dafoe&#39;, &#39;Brad Johnson&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;A Date with the Falcon&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Irving Reis&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;James Gleason&#39;, &#39;Allen Jenkins&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;My Favorite Wife&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Garson Kanin&#39;],  &#39;actors&#39;: [&#39;Cary Grant&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &quot;You Can&#39;t Escape Forever&quot;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Jo Graham&#39;],  &#39;actors&#39;: [&#39;George Brent&#39;, &#39;Gene Lockhart&#39;, &#39;Roscoe Karns&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Christmas Miracle in Caufield, U.S.A.&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Jud Taylor&#39;],  &#39;actors&#39;: [&#39;Mitchell Ryan&#39;,   &#39;Kurt Russell&#39;,   &#39;Andrew Prine&#39;,   &#39;John Carradine&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Cry in the Night&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Frank Tuttle&#39;],  &#39;actors&#39;: [&quot;Edmond O&#39;Brien&quot;, &#39;Brian Donlevy&#39;, &#39;Raymond Burr&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Freefall&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;John Irvin&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Jeff Fahey&#39;, &#39;Ron Smerczak&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Best of the Best II&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Robert Radler&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Phillip Rhee&#39;, &#39;Chris Penn&#39;, &#39;Edan Gross&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Girl in the Show&#39;,  &#39;year&#39;: 1929,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Edgar Selwyn&#39;],  &#39;actors&#39;: [&#39;Raymond Hackett&#39;, &#39;Edward J. Nugent&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Girl-Getters&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Michael Winner&#39;],  &#39;actors&#39;: [&#39;Oliver Reed&#39;, &#39;Harry Andrews&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Swing Shift&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Jonathan Demme&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Fred Ward&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Raging Bull&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Martin Scorsese&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Joe Pesci&#39;, &#39;Frank Vincent&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;The Lost Capone&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;John Gray&#39;],  &#39;actors&#39;: [&#39;Adrian Pasdar&#39;, &#39;Eric Roberts&#39;, &#39;Titus Welliver&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Child Lost Forever: The Jerry Sherwood Story&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Claudia Weill&#39;],  &#39;actors&#39;: [&#39;Michael McGrady&#39;, &#39;Max Gail&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Blood Vows: The Story of a Mafia Wife&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Paul Wendkos&#39;],  &#39;actors&#39;: [&#39;Joe Penny&#39;, &#39;Anthony Franciosa&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Shattered Dreams&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Robert Iscove&#39;],  &#39;actors&#39;: [&#39;Michael Nouri&#39;, &#39;James Karen&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &quot;Satan&#39;s Black Wedding&quot;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 4.7,  &#39;directors&#39;: [&#39;Nick Millard&#39;],  &#39;actors&#39;: [&#39;Greg Braddock&#39;, &#39;Ray Myles&#39;, &#39;Barrett Cooper&#39;],  &#39;genres&#39;: [&#39;Horror&#39;]}, {&#39;title&#39;: &#39;El Dorado&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Howard Hawks&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Robert Mitchum&#39;, &#39;James Caan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Terror on a Train&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Ted Tetzlaff&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Maurice Denham&#39;, &#39;Harcourt Williams&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Cradle Will Rock&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Tim Robbins&#39;],  &#39;actors&#39;: [&#39;Hank Azaria&#39;, &#39;Rubén Blades&#39;, &#39;John Cusack&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Fail-Safe&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;Sidney Lumet&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Walter Matthau&#39;, &#39;Fritz Weaver&#39;, &quot;Dan O&#39;Herlihy&quot;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;To Sleep with Anger&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Charles Burnett&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Paul Butler&#39;, &#39;DeVaughn Nixon&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Cairo&#39;,  &#39;year&#39;: 1963,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Wolf Rilla&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Richard Johnson&#39;, &#39;John Meillon&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Beau Geste&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;Gary Cooper&#39;, &#39;Ray Milland&#39;, &#39;Robert Preston&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Reason to Live, a Reason to Die&#39;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Tonino Valerii&#39;],  &#39;actors&#39;: [&#39;James Coburn&#39;, &#39;Telly Savalas&#39;, &#39;Bud Spencer&#39;, &#39;Georges Géret&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Crossfire&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Edward Dmytryk&#39;],  &#39;actors&#39;: [&#39;Robert Young&#39;, &#39;Robert Mitchum&#39;, &#39;Robert Ryan&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Saint Takes Over&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Jack Hively&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Jonathan Hale&#39;, &#39;Paul Guilfoyle&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &quot;The Saint&#39;s Double Trouble&quot;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Jack Hively&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Jonathan Hale&#39;, &#39;Bela Lugosi&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Seminole&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Rock Hudson&#39;, &#39;Anthony Quinn&#39;, &#39;Richard Carlson&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Strongest Man in the World&#39;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Vincent McEveety&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Joe Flynn&#39;, &#39;Cesar Romero&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Apache Drums&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Hugo Fregonese&#39;],  &#39;actors&#39;: [&#39;Stephen McNally&#39;, &#39;Willard Parker&#39;, &#39;Arthur Shields&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The 25th Hour&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Henri Verneuil&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Grégoire Aslan&#39;, &#39;Michael Redgrave&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Winston Affair&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Guy Hamilton&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Barry Sullivan&#39;, &#39;Trevor Howard&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Skirts Ahoy!&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Sidney Lanfield&#39;],  &#39;actors&#39;: [&#39;Keefe Brasselle&#39;, &#39;Barry Sullivan&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;A Twist of the Knife&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Jerry London&#39;],  &#39;actors&#39;: [&#39;Dick Van Dyke&#39;, &#39;Stephen Caffrey&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;East of Sumatra&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Jeff Chandler&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Fixer&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 5.0,  &#39;directors&#39;: [&#39;Charles Robert Carner&#39;],  &#39;actors&#39;: [&#39;Jon Voight&#39;, &#39;J.J. Johnston&#39;, &#39;Miguel Sandoval&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Arlington Road&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Mark Pellington&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Tim Robbins&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Go West Young Man&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Warren William&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Little Darlings&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Ron Maxwell&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;Matt Dillon&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &quot;We&#39;re No Angels&quot;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Neil Jordan&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Sean Penn&#39;, &#39;Hoyt Axton&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Thunder Road&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Arthur Ripley&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Gene Barry&#39;, &#39;Jacques Aubuchon&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;When the Daltons Rode&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;George Marshall&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Brian Donlevy&#39;, &#39;George Bancroft&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &quot;Nobody&#39;s Fool&quot;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Evelyn Purcell&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Jim Youngs&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Lost Command&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Mark Robson&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Alain Delon&#39;, &#39;George Segal&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Anzio&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Edward Dmytryk&#39;, &#39;Duilio Coletti&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Peter Falk&#39;, &#39;Robert Ryan&#39;, &#39;Earl Holliman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Glory Guys&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Arnold Laven&#39;],  &#39;actors&#39;: [&#39;Tom Tryon&#39;, &#39;Harve Presnell&#39;, &#39;James Caan&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Pushing Tin&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Mike Newell&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Billy Bob Thornton&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Seniors&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Rod Amateau&#39;],  &#39;actors&#39;: [&#39;Jeffrey Byron&#39;, &#39;Gary Imhoff&#39;, &#39;Dennis Quaid&#39;, &#39;Lou Richards&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Friendly Fire&#39;,  &#39;year&#39;: 1979,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;David Greene&#39;],  &#39;actors&#39;: [&#39;Ned Beatty&#39;, &#39;Sam Waterston&#39;, &#39;Dennis Erdman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Man from Utah&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Edward Peil Sr.&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Crime&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;I Aim at the Stars&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;J. Lee Thompson&#39;],  &#39;actors&#39;: [&#39;Curd Jürgens&#39;, &#39;Herbert Lom&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Eyes of Laura Mars&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Irvin Kershner&#39;],  &#39;actors&#39;: [&#39;Tommy Lee Jones&#39;, &#39;Brad Dourif&#39;, &#39;Rene Auberjonois&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Starman&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;John Carpenter&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Charles Martin Smith&#39;, &#39;Richard Jaeckel&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Home, Sweet Homicide&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Lloyd Bacon&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Dean Stockwell&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &quot;Hangman&#39;s Knot&quot;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Roy Huggins&#39;],  &#39;actors&#39;: [&#39;Richard Denning&#39;,   &#39;Randolph Scott&#39;,   &#39;Claude Jarman Jr.&#39;,   &#39;Frank Faylen&#39;,   &#39;Glenn Langan&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The World in His Arms&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Raoul Walsh&#39;],  &#39;actors&#39;: [&#39;Gregory Peck&#39;, &#39;Anthony Quinn&#39;, &#39;John McIntire&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Lonely Hearts&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Andrew Lane&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Ride Back&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Oscar Rudolph&#39;, &#39;Allen H. Miner&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;William Conrad&#39;, &#39;Victor Millan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Hot Pursuit&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Steven Lisberger&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Robert Loggia&#39;, &#39;Jerry Stiller&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Sidekicks&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 5.0,  &#39;directors&#39;: [&#39;Aaron Norris&#39;],  &#39;actors&#39;: [&#39;Chuck Norris&#39;, &#39;Beau Bridges&#39;, &#39;Jonathan Brandis&#39;, &#39;Mako&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Tall in the Saddle&#39;,  &#39;year&#39;: 1944,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Edwin L. Marin&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ward Bond&#39;, &quot;George &#39;Gabby&#39; Hayes&quot;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Good Times&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;William Friedkin&#39;],  &#39;actors&#39;: [&#39;Sonny Bono&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Doctor and the Girl&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Curtis Bernhardt&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Charles Coburn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Lady and Gent&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Stephen Roberts&#39;],  &#39;actors&#39;: [&#39;Morgan Wallace&#39;,   &#39;George Bancroft&#39;,   &#39;Charles Starrett&#39;,   &#39;James Gleason&#39;,   &#39;John Wayne&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;The Rice People&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Rithy Panh&#39;],  &#39;actors&#39;: [&#39;Mom Soth&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Stagecoach&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Andy Devine&#39;, &#39;John Carradine&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Hamlet Goes Business&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Aki Kaurismäki&#39;],  &#39;actors&#39;: [&#39;Pirkka-Pekka Petelius&#39;, &#39;Esko Salminen&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Batwoman&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;René Cardona&#39;],  &#39;actors&#39;: [&#39;Roberto Cañedo&#39;, &#39;Héctor Godoy&#39;, &#39;David Silva&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Sands of Iwo Jima&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Allan Dwan&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;John Agar&#39;, &#39;Forrest Tucker&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Desert Trail&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Lewis D. Collins&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Paul Fix&#39;, &#39;Eddy Chandler&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;King of the Pecos&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Joseph Kane&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Cy Kendall&#39;, &#39;Jack Rube Clifford&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &quot;Pete&#39;s Dragon&quot;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Don Chaffey&#39;],  &#39;actors&#39;: [&#39;Sean Marshall&#39;, &#39;Jim Dale&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Tall Man Riding&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Lesley Selander&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;William Ching&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Pursued&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Raoul Walsh&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Dean Jagger&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Private Affairs of Bel Ami&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Albert Lewin&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;John Carradine&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Randy Rides Alone&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Harry L. Fraser&#39;],  &#39;actors&#39;: [&#39;Artie Ortego&#39;,   &#39;John Wayne&#39;,   &quot;George &#39;Gabby&#39; Hayes&quot;,   &#39;Yakima Canutt&#39;,   &#39;Earl Dwire&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;A Matter of Resistance&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Jean-Paul Rappeneau&#39;],  &#39;actors&#39;: [&#39;Pierre Brasseur&#39;, &#39;Philippe Noiret&#39;, &#39;Henri Garcin&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Black Gold&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Phil Karlson&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &quot;&#39;Ducky&#39; Louie&quot;, &#39;Raymond Hatton&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Crack-Up&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Malcolm St. Clair&#39;],  &#39;actors&#39;: [&#39;Peter Lorre&#39;, &#39;Brian Donlevy&#39;, &#39;Ralph Morgan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The House of the Seven Gables&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Joe May&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Vincent Price&#39;, &#39;Dick Foran&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &quot;Kiki&#39;s Delivery Service&quot;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Hayao Miyazaki&#39;],  &#39;actors&#39;: [&#39;Kappei Yamaguchi&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Rover&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Terence Young&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Richard Johnson&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;8 Million Ways to Die&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Hal Ashby&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Randy Brooks&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Sensation&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Brian Grant&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Ron Perlman&#39;, &#39;Paul Le Mat&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Why Me?&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Fielder Cook&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;Craig Wasson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Loves of Carmen&#39;,  &#39;year&#39;: 1948,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Charles Vidor&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Ron Randell&#39;, &#39;Victor Jory&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Tapeheads&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Bill Fishman&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;Tim Robbins&#39;, &#39;Clu Gulager&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;A Question of Love&#39;,  &#39;year&#39;: 1978,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Jerry Thorpe&#39;],  &#39;actors&#39;: [&#39;Ned Beatty&#39;, &#39;Clu Gulager&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Hot Spell&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;George Cukor&#39;, &#39;Daniel Mann&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Earl Holliman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;So Red the Rose&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;King Vidor&#39;],  &#39;actors&#39;: [&#39;Walter Connolly&#39;, &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Man of Passion&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;José Antonio de la Loma&#39;],  &#39;actors&#39;: [&#39;R.J. Williams&#39;, &#39;Anthony Quinn&#39;, &#39;Ramon Estevez&#39;, &#39;Ray Walston&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Violation of Sarah McDavid&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;John Llewellyn Moxey&#39;],  &#39;actors&#39;: [&#39;Ned Beatty&#39;, &#39;James Sloyan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Bandido!&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Richard Fleischer&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Gilbert Roland&#39;, &#39;Zachary Scott&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Undefeated&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Andrew V. McLaglen&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Rock Hudson&#39;, &#39;Antonio Aguilar&#39;, &#39;Roman Gabriel&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Nature of the Beast&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Victor Salva&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Lance Henriksen&#39;, &#39;Brion James&#39;, &#39;Frank Novak&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Horror&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Sunset Boys&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Leidulv Risan&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;,   &#39;Cliff Robertson&#39;,   &#39;Erland Josephson&#39;,   &#39;Espen Skjønberg&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;My Darling Clementine&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Victor Mature&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Toy&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Richard Donner&#39;],  &#39;actors&#39;: [&#39;Richard Pryor&#39;,   &#39;Jackie Gleason&#39;,   &#39;Ned Beatty&#39;,   &#39;Scott Schwartz&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The Shadow Men&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 4.2,  &#39;directors&#39;: [&#39;Timothy Bond&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Dean Stockwell&#39;, &#39;Brendon Ryan Barrett&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Sci-Fi&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;How to Stuff a Wild Bikini&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;William Asher&#39;],  &#39;actors&#39;: [&#39;Dwayne Hickman&#39;, &#39;Brian Donlevy&#39;, &#39;Harvey Lembeck&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Cry for Happy&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;George Marshall&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &quot;Donald O&#39;Connor&quot;, &#39;James Shigeta&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Portrait in Black&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Michael Gordon&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Richard Basehart&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Cape Fear&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;J. Lee Thompson&#39;],  &#39;actors&#39;: [&#39;Gregory Peck&#39;, &#39;Robert Mitchum&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;A Colt Is My Passport&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Takashi Nomura&#39;],  &#39;actors&#39;: [&#39;Jô Shishido&#39;, &#39;Jerry Fujio&#39;, &#39;Ryôtarô Sugi&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;She&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Irving Pichel&#39;, &#39;Lansing C. Holden&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Nigel Bruce&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Fantasy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Vengeance is Mine&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Giovanni Fago&#39;],  &#39;actors&#39;: [&#39;Gianni Garko&#39;, &#39;Carlo Gaddi&#39;, &#39;Claudio Camaso&#39;, &#39;Piero Lulli&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Wake Island&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;,   &#39;Robert Preston&#39;,   &#39;Macdonald Carey&#39;,   &#39;William Bendix&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Interrupted Melody&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Curtis Bernhardt&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Roger Moore&#39;, &#39;Cecil Kellaway&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Blowing Wild&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Hugo Fregonese&#39;],  &#39;actors&#39;: [&#39;Gary Cooper&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;D.O.A.&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Annabel Jankel&#39;, &#39;Rocky Morton&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Daniel Stern&#39;],  &#39;genres&#39;: [&#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Tears of the Yang-Tse&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Chusheng Cai&#39;, &#39;Junli Zheng&#39;],  &#39;actors&#39;: [&#39;Tao Jin&#39;, &#39;Yang Nai&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Hercules and the Amazon Women&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Bill Norton&#39;],  &#39;actors&#39;: [&#39;Kevin Sorbo&#39;, &#39;Anthony Quinn&#39;, &#39;Michael Hurst&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Gotham&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Lloyd Fonvielle&#39;],  &#39;actors&#39;: [&#39;Tommy Lee Jones&#39;, &#39;Colin Bruce&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Journey to Shiloh&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;William Hale&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Michael Sarrazin&#39;, &#39;Don Stroud&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Gilda&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Charles Vidor&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;George Macready&#39;, &#39;Joseph Calleia&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Scarlet Coat&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;John Sturges&#39;],  &#39;actors&#39;: [&#39;Cornel Wilde&#39;, &#39;Michael Wilding&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Against All Odds&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Taylor Hackford&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;James Woods&#39;, &#39;Alex Karras&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Striptease&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Andrew Bergman&#39;],  &#39;actors&#39;: [&#39;Burt Reynolds&#39;, &#39;Armand Assante&#39;, &#39;Ving Rhames&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Two Years Before the Mast&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;Alan Ladd&#39;,   &#39;Brian Donlevy&#39;,   &#39;William Bendix&#39;,   &#39;Barry Fitzgerald&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Last Challenge&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Richard Thorpe&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Chad Everett&#39;, &#39;Gary Merrill&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Another You&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Maurice Phillips&#39;],  &#39;actors&#39;: [&#39;Richard Pryor&#39;, &#39;Gene Wilder&#39;, &#39;Stephen Lang&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Confessions of a Nazi Spy&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Anatole Litvak&#39;],  &#39;actors&#39;: [&#39;Edward G. Robinson&#39;,   &#39;George Sanders&#39;,   &#39;Francis Lederer&#39;,   &#39;Paul Lukas&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Hangmen Also Die!&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Fritz Lang&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;Walter Brennan&#39;, &#39;Gene Lockhart&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Little Mermaid&#39;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Tomoharu Katsumata&#39;, &#39;Tim Reid&#39;],  &#39;actors&#39;: [&#39;Tarô Shigaki&#39;, &#39;Hideki Shibata&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;A Forgotten Tune for the Flute&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Eldar Ryazanov&#39;],  &#39;actors&#39;: [&#39;Leonid Filatov&#39;, &#39;Valentin Gaft&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Nevadan&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Gordon Douglas&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Forrest Tucker&#39;, &#39;Frank Faylen&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Unfaithfully Yours&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Howard Zieff&#39;],  &#39;actors&#39;: [&#39;Dudley Moore&#39;, &#39;Armand Assante&#39;, &#39;Albert Brooks&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Music&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Lancer Spy&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Gregory Ratoff&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Peter Lorre&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Big Stampede&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Tenny Wright&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Noah Beery&#39;, &#39;Paul Hurst&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Deliverance&#39;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;John Boorman&#39;],  &#39;actors&#39;: [&#39;Jon Voight&#39;, &#39;Burt Reynolds&#39;, &#39;Ned Beatty&#39;, &#39;Ronny Cox&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Moon and Sixpence&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Albert Lewin&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Herbert Marshall&#39;, &#39;Eric Blore&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Bold and the Brave&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Lewis R. Foster&#39;, &#39;Mickey Rooney&#39;],  &#39;actors&#39;: [&#39;Wendell Corey&#39;, &#39;Mickey Rooney&#39;, &#39;Don Taylor&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Comanche Territory&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;George Sherman&#39;],  &#39;actors&#39;: [&#39;Macdonald Carey&#39;, &#39;Will Geer&#39;, &#39;Charles Drake&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Colt .45&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Edwin L. Marin&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Zachary Scott&#39;, &#39;Lloyd Bridges&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Affair in Havana&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Laslo Benedek&#39;],  &#39;actors&#39;: [&#39;John Cassavetes&#39;, &#39;Raymond Burr&#39;],  &#39;genres&#39;: [&#39;Crime&#39;]}, {&#39;title&#39;: &#39;Marco the Magnificent&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Noël Howard&#39;, &#39;Denys de La Patellière&#39;, &#39;Raoul Lévy&#39;],  &#39;actors&#39;: [&#39;Horst Buchholz&#39;, &#39;Anthony Quinn&#39;, &#39;Akim Tamiroff&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;]}, {&#39;title&#39;: &#39;Kidnapped&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 4.9,  &#39;directors&#39;: [&#39;Howard Avedis&#39;],  &#39;actors&#39;: [&#39;David Naughton&#39;, &#39;Lance LeGault&#39;, &#39;Chick Vennera&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Hangover Square&#39;,  &#39;year&#39;: 1945,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;John Brahm&#39;],  &#39;actors&#39;: [&#39;Laird Cregar&#39;, &#39;George Sanders&#39;, &#39;Glenn Langan&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Francis in the Haunted House&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;Charles Lamont&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;James Flavin&#39;, &#39;Paul Cavanagh&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Fantasy&#39;, &#39;Horror&#39;]}, {&#39;title&#39;: &#39;Jezebel&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;William Wyler&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;George Brent&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Shadow of the Eagle&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;B. Reeves Eason&#39;, &#39;Ford Beebe&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Walter Miller&#39;, &#39;Kenneth Harlan&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Big Jim McLain&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Edward Ludwig&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;James Arness&#39;, &#39;Alan Napier&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Attack of the Crab Monsters&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Roger Corman&#39;],  &#39;actors&#39;: [&#39;Richard Garland&#39;, &#39;Russell Johnson&#39;, &#39;Leslie Bradley&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Texas&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;George Marshall&#39;],  &#39;actors&#39;: [&#39;William Holden&#39;, &#39;Glenn Ford&#39;, &#39;George Bancroft&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Amber Waves&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Joseph Sargent&#39;],  &#39;actors&#39;: [&#39;Dennis Weaver&#39;, &#39;Kurt Russell&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Man Who Shot Liberty Valance&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;James Stewart&#39;, &#39;John Wayne&#39;, &#39;Lee Marvin&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Evil Roy Slade&#39;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Jerry Paris&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Dick Shawn&#39;, &#39;Henry Gibson&#39;, &#39;Dom DeLuise&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Executive Decision&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Stuart Baird&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Steven Seagal&#39;, &#39;John Leguizamo&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Fastest Gun Alive&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Russell Rouse&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Broderick Crawford&#39;, &#39;Russ Tamblyn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Ride Him, Cowboy&#39;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Fred Allen&#39;],  &#39;actors&#39;: [&#39;Otis Harlan&#39;, &#39;John Wayne&#39;, &#39;Duke&#39;, &#39;Henry B. Walthall&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Overboard&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Garry Marshall&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Edward Herrmann&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Brotherhood of the Bell&#39;,  &#39;year&#39;: 1970,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Paul Wendkos&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Dean Jagger&#39;, &#39;Maurice Evans&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Falcon Takes Over&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Irving Reis&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;James Gleason&#39;, &#39;Allen Jenkins&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &quot;The Falcon&#39;s Brother&quot;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Stanley Logan&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Tom Conway&#39;, &#39;Don Barclay&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;The Four Horsemen of the Apocalypse&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Vincente Minnelli&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Charles Boyer&#39;, &#39;Lee J. Cobb&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &quot;&#39;Neath the Arizona Skies&quot;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Harry L. Fraser&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Jack Rockwell&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Thing&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;John Carpenter&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;,   &#39;Wilford Brimley&#39;,   &#39;Keith David&#39;,   &#39;Richard Masur&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Mystery&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Predator 2&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Stephen Hopkins&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Gary Busey&#39;, &#39;Kevin Peter Hall&#39;, &#39;Rubén Blades&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Restraining Order&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 4.7,  &#39;directors&#39;: [&#39;Lee H. Katzin&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Hannes Jaenicke&#39;, &#39;Dean Stockwell&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;A Cruel Romance&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Eldar Ryazanov&#39;],  &#39;actors&#39;: [&#39;Nikita Mikhalkov&#39;, &#39;Andrey Myagkov&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Silkwood&#39;,  &#39;year&#39;: 1983,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Mike Nichols&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Craig T. Nelson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;The Last Voyage&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Andrew L. Stone&#39;],  &#39;actors&#39;: [&#39;Joel Marston&#39;,   &#39;Robert Stack&#39;,   &#39;George Sanders&#39;,   &quot;Edmond O&#39;Brien&quot;,   &#39;Woody Strode&#39;,   &#39;Jack Kruschen&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Belizaire the Cajun&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Glen Pitre&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;, &#39;Michael Schoeffling&#39;, &#39;Stephen McHattie&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Heaven with a Barbed Wire Fence&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Ricardo Cortez&#39;],  &#39;actors&#39;: [&#39;Raymond Walburn&#39;, &#39;Glenn Ford&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Hardys Ride High&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;George B. Seitz&#39;],  &#39;actors&#39;: [&#39;Lewis Stone&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Backdraft&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Ron Howard&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;,   &#39;William Baldwin&#39;,   &#39;Robert De Niro&#39;,   &#39;Donald Sutherland&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Three Musketeers&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Armand Schaefer&#39;, &#39;Colbert Clark&#39;],  &#39;actors&#39;: [&#39;Jack Mulhall&#39;,   &#39;Raymond Hatton&#39;,   &#39;Francis X. Bushman Jr.&#39;,   &#39;John Wayne&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Undercurrent&#39;,  &#39;year&#39;: 1946,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Vincente Minnelli&#39;],  &#39;actors&#39;: [&#39;Robert Taylor&#39;, &#39;Robert Mitchum&#39;, &#39;Edmund Gwenn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;An American Romance&#39;,  &#39;year&#39;: 1944,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;King Vidor&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;Walter Abel&#39;, &#39;John Qualen&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Chad Hanna&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Henry King&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Guy Kibbee&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Godfather&#39;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 9.2,  &#39;directors&#39;: [&#39;Francis Ford Coppola&#39;],  &#39;actors&#39;: [&#39;Marlon Brando&#39;, &#39;Al Pacino&#39;, &#39;James Caan&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;True Grit&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Glen Campbell&#39;, &#39;Jeremy Slate&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Rage at Dawn&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Tim Whelan&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Forrest Tucker&#39;, &#39;J. Carrol Naish&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Samson and Delilah&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Cecil B. DeMille&#39;],  &#39;actors&#39;: [&#39;Victor Mature&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;History&#39;]}, {&#39;title&#39;: &#39;Mexico in Flames&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Sergey Bondarchuk&#39;],  &#39;actors&#39;: [&#39;Franco Nero&#39;, &#39;Jorge Luke&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &quot;Bluebeard&#39;s 10 Honeymoons&quot;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;W. Lee Wilder&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Suspect&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Peter Yates&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;Liam Neeson&#39;, &#39;John Mahoney&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Grand Canyon&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Lawrence Kasdan&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Kevin Kline&#39;, &#39;Steve Martin&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Rebecca of Sunnybrook Farm&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Allan Dwan&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Jack Haley&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Babe Ruth&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Mark Tinker&#39;],  &#39;actors&#39;: [&#39;Stephen Lang&#39;, &#39;Brian Doyle-Murray&#39;, &#39;Donald Moffat&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Horatio Hornblower: The Duel&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Andrew Grieve&#39;],  &#39;actors&#39;: [&#39;Ioan Gruffudd&#39;,   &#39;Robert Lindsay&#39;,   &#39;Dorian Healy&#39;,   &#39;Michael Byrne&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Dollar for the Dead&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Gene Quintano&#39;],  &#39;actors&#39;: [&#39;Emilio Estevez&#39;,   &#39;William Forsythe&#39;,   &#39;Jordi Mollà&#39;,   &#39;Joaquim de Almeida&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &quot;Rudolph and Frosty&#39;s Christmas in July&quot;,  &#39;year&#39;: 1979,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Jules Bass&#39;, &#39;Arthur Rankin Jr.&#39;],  &#39;actors&#39;: [&#39;Red Buttons&#39;, &#39;Mickey Rooney&#39;, &#39;Alan Sues&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;The New Frontier&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Carl Pierson&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Warner Richmond&#39;, &#39;Al Bridge&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Remarkable Andrew&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Stuart Heisler&#39;],  &#39;actors&#39;: [&#39;Brian Donlevy&#39;, &#39;William Holden&#39;, &#39;Montagu Love&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Stranger on the Run&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Don Siegel&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Michael Parks&#39;, &#39;Dan Duryea&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Poodle Springs&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Bob Rafelson&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;David Keith&#39;, &#39;Tom Bower&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Camp Followers&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Valerio Zurlini&#39;],  &#39;actors&#39;: [&#39;Mario Adorf&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &quot;She&#39;s All That&quot;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Robert Iscove&#39;],  &#39;actors&#39;: [&#39;Freddie Prinze Jr.&#39;, &#39;Matthew Lillard&#39;, &#39;Paul Walker&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Victim of Desire&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Jim Wynorski&#39;],  &#39;actors&#39;: [&#39;Marc Singer&#39;, &#39;Johnny Williams&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Trial&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Mark Robson&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Arthur Kennedy&#39;, &#39;John Hodiak&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Brassed Off&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Mark Herman&#39;],  &#39;actors&#39;: [&#39;Pete Postlethwaite&#39;, &#39;Ewan McGregor&#39;, &#39;Stephen Tompkinson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Adventures of Huckleberry Finn&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Richard Thorpe&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;,   &#39;Walter Connolly&#39;,   &#39;William Frawley&#39;,   &#39;Rex Ingram&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;The Pope of Greenwich Village&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Stuart Rosenberg&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Mickey Rourke&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Africa Screams&#39;,  &#39;year&#39;: 1949,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Charles Barton&#39;],  &#39;actors&#39;: [&#39;Bud Abbott&#39;, &#39;Lou Costello&#39;, &#39;Clyde Beatty&#39;, &#39;Frank Buck&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Star Trek III: The Search for Spock&#39;,  &#39;year&#39;: 1984,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Leonard Nimoy&#39;],  &#39;actors&#39;: [&#39;William Shatner&#39;,   &#39;Leonard Nimoy&#39;,   &#39;DeForest Kelley&#39;,   &#39;James Doohan&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &quot;Spencer&#39;s Mountain&quot;,  &#39;year&#39;: 1963,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Delmer Daves&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;James MacArthur&#39;, &#39;Donald Crisp&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;This World, Then the Fireworks&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Michael Oblowitz&#39;],  &#39;actors&#39;: [&#39;Philip Loch&#39;, &#39;Christian Durango&#39;, &#39;Sloan Cobb&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Night Riders&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;George Sherman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ray Corrigan&#39;, &#39;Max Terhune&#39;],  &#39;genres&#39;: [&#39;History&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &quot;Smilin&#39; Through&quot;,  &#39;year&#39;: 1932,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Sidney Franklin&#39;],  &#39;actors&#39;: [&#39;Fredric March&#39;, &#39;Leslie Howard&#39;, &#39;O.P. Heggie&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Secrets of Sweet Sixteen&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 4.2,  &#39;directors&#39;: [&#39;Ernst Hofbauer&#39;],  &#39;actors&#39;: [&#39;Werner Abrolat&#39;, &#39;Ekkehardt Belle&#39;, &#39;Arthur Brauss&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Hex&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Leo Garen&#39;],  &#39;actors&#39;: [&#39;Keith Carradine&#39;, &#39;Scott Glenn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Horror&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &quot;Jacqueline Susann&#39;s Valley of the Dolls&quot;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Walter Grauman&#39;],  &#39;actors&#39;: [&#39;David Birney&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Dog Tags&#39;,  &#39;year&#39;: 1987,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;Romano Scavolini&#39;],  &#39;actors&#39;: [&#39;Clive Wood&#39;,   &#39;Baird Stafford&#39;,   &#39;Robert Haufrecht&#39;,   &#39;Peter Elich&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Full Moon&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Fredi M. Murer&#39;],  &#39;actors&#39;: [&#39;Hanspeter Müller&#39;, &#39;Benedict Freitag&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;When Strangers Marry&#39;,  &#39;year&#39;: 1944,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;William Castle&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Dean Jagger&#39;, &#39;Neil Hamilton&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Halls of Anger&#39;,  &#39;year&#39;: 1970,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Paul Bogart&#39;],  &#39;actors&#39;: [&#39;Calvin Lockhart&#39;, &#39;Jeff Bridges&#39;, &#39;James A. Watson Jr.&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Alien Nation&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Graham Baker&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;,   &#39;Mandy Patinkin&#39;,   &#39;Terence Stamp&#39;,   &#39;Kevyn Major Howard&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Warlock&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Edward Dmytryk&#39;],  &#39;actors&#39;: [&#39;Richard Widmark&#39;, &#39;Henry Fonda&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Three Texas Steers&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;George Sherman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ray Corrigan&#39;, &#39;Max Terhune&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Rio Grande&#39;,  &#39;year&#39;: 1950,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;John Ford&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Ben Johnson&#39;, &#39;Claude Jarman Jr.&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Calling All Police Cars&#39;,  &#39;year&#39;: 1975,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Mario Caiano&#39;],  &#39;actors&#39;: [&#39;Antonio Sabato&#39;, &#39;Enrico Maria Salerno&#39;, &#39;Gabriele Ferzetti&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Horror&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Teen Kanya&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Satyajit Ray&#39;],  &#39;actors&#39;: [&#39;Anil Chatterjee&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Panic in the Skies&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Paul Ziller&#39;],  &#39;actors&#39;: [&#39;Ed Marinaro&#39;, &#39;Erik Estrada&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Big Operator&#39;,  &#39;year&#39;: 1959,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Charles F. Haas&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Steve Cochran&#39;, &#39;Mel Tormé&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Midnight Ride&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Bob Bralver&#39;],  &#39;actors&#39;: [&#39;Michael Dudikoff&#39;, &#39;Mark Hamill&#39;, &#39;Robert Mitchum&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Horror&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Big Trail&#39;,  &#39;year&#39;: 1930,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Raoul Walsh&#39;, &#39;Louis R. Loeffler&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;El Brendel&#39;, &#39;Tully Marshall&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Devil Is a Sissy&#39;,  &#39;year&#39;: 1936,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Rowland Brown&#39;, &#39;W.S. Van Dyke&#39;],  &#39;actors&#39;: [&#39;Freddie Bartholomew&#39;,   &#39;Jackie Cooper&#39;,   &#39;Mickey Rooney&#39;,   &#39;Ian Hunter&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Rebecca&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Alfred Hitchcock&#39;],  &#39;actors&#39;: [&#39;Laurence Olivier&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Red Line 7000&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Howard Hawks&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;A Walk in the Spring Rain&#39;,  &#39;year&#39;: 1970,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Guy Green&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Fritz Weaver&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;A Cry in the Wild&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Mark Griffiths&#39;],  &#39;actors&#39;: [&#39;Jared Rushton&#39;, &#39;Ned Beatty&#39;, &#39;Stephen Meadows&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;1492: Conquest of Paradise&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Ridley Scott&#39;],  &#39;actors&#39;: [&#39;Gérard Depardieu&#39;, &#39;Armand Assante&#39;, &#39;Loren Dean&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Twice in a Lifetime&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Bud Yorkin&#39;],  &#39;actors&#39;: [&#39;Gene Hackman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Incident at Deception Ridge&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;John McPherson&#39;],  &#39;actors&#39;: [&quot;Michael O&#39;Keefe&quot;, &#39;Ed Begley Jr.&#39;, &#39;Miguel Ferrer&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Legend of Suram Fortress&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Sergei Parajanov&#39;, &#39;Dodo Abashidze&#39;],  &#39;actors&#39;: [&#39;Dodo Abashidze&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Last of the Cowboys&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;John Leone&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Austin Pendleton&#39;, &#39;Robert Englund&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Past Perfect&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 4.8,  &#39;directors&#39;: [&#39;Jonathan Heap&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Nick Mancuso&#39;, &#39;Saul Rubinek&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Come Back Charleston Blue&#39;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Mark Warren&#39;],  &#39;actors&#39;: [&#39;Godfrey Cambridge&#39;,   &#39;Raymond St. Jacques&#39;,   &#39;Peter De Anda&#39;,   &#39;Percy Rodrigues&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Ivan Vasilievich: Back to the Future&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 8.4,  &#39;directors&#39;: [&#39;Leonid Gayday&#39;],  &#39;actors&#39;: [&#39;Yuriy Yakovlev&#39;,   &#39;Leonid Kuravlyov&#39;,   &#39;Aleksandr Demyanenko&#39;,   &#39;Saveliy Kramarov&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Twins&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Ivan Reitman&#39;],  &#39;actors&#39;: [&#39;Arnold Schwarzenegger&#39;, &#39;Danny DeVito&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Woman of Desire&#39;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Robert Ginty&#39;],  &#39;actors&#39;: [&#39;Jeff Fahey&#39;, &#39;Steven Bauer&#39;, &#39;Robert Mitchum&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Without Warning: Terror in the Towers&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 4.4,  &#39;directors&#39;: [&#39;Alan J. Levi&#39;],  &#39;actors&#39;: [&#39;James Avery&#39;, &#39;Andre Braugher&#39;, &#39;George Clooney&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Kiss of Death&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Victor Mature&#39;, &#39;Brian Donlevy&#39;, &#39;Richard Widmark&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Journey to Italy&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Roberto Rossellini&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Witness to Murder&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Roy Rowland&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Gary Merrill&#39;, &#39;Jesse White&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;A Distant Cry from Spring&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Yôji Yamada&#39;],  &#39;actors&#39;: [&#39;Ken Takakura&#39;, &#39;Hidetaka Yoshioka&#39;, &#39;Tetsuya Takeda&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Tonka&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Lewis R. Foster&#39;],  &#39;actors&#39;: [&#39;Sal Mineo&#39;, &#39;Philip Carey&#39;, &#39;Jerome Courtland&#39;, &#39;H.M. Wynant&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Torpedo Run&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Joseph Pevney&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Ernest Borgnine&#39;, &#39;Dean Jones&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Music of the Heart&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Wes Craven&#39;],  &#39;actors&#39;: [&#39;Henry Dinhofer&#39;, &#39;Michael Angarano&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Voices Within: The Lives of Truddi Chase&#39;,  &#39;year&#39;: 1990,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Lamont Johnson&#39;],  &#39;actors&#39;: [&#39;Tom Conti&#39;, &#39;Jon Beshara&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;True Confessions&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Ulu Grosbard&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;,   &#39;Robert Duvall&#39;,   &#39;Charles Durning&#39;,   &#39;Kenneth McMillan&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Big Jake&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;George Sherman&#39;, &#39;John Wayne&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Richard Boone&#39;, &#39;Patrick Wayne&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Con Air&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Simon West&#39;],  &#39;actors&#39;: [&#39;Nicolas Cage&#39;, &#39;John Cusack&#39;, &#39;John Malkovich&#39;, &#39;Colm Meaney&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Cop Land&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;James Mangold&#39;],  &#39;actors&#39;: [&#39;Sylvester Stallone&#39;,   &#39;Harvey Keitel&#39;,   &#39;Ray Liotta&#39;,   &#39;Robert De Niro&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;City Hall&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Harold Becker&#39;],  &#39;actors&#39;: [&#39;Al Pacino&#39;, &#39;John Cusack&#39;, &#39;Danny Aiello&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Tales of Manhattan&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Julien Duvivier&#39;],  &#39;actors&#39;: [&#39;Charles Boyer&#39;, &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Slaves in Bondage&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 4.5,  &#39;directors&#39;: [&#39;Elmer Clifton&#39;],  &#39;actors&#39;: [&#39;John Merton&#39;, &#39;Donald Reed&#39;, &#39;Wheeler Oakman&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Slim&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Dick Purcell&#39;,   &quot;Pat O&#39;Brien&quot;,   &#39;Henry Fonda&#39;,   &#39;Stuart Erwin&#39;,   &#39;J. Farrell MacDonald&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Slave Ship&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Tay Garnett&#39;],  &#39;actors&#39;: [&#39;Warner Baxter&#39;, &#39;Wallace Beery&#39;, &#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Hoosier Schoolboy&#39;,  &#39;year&#39;: 1937,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;William Nigh&#39;],  &#39;actors&#39;: [&#39;William Gould&#39;,   &#39;Mickey Rooney&#39;,   &#39;Frank Shields&#39;,   &#39;Edward Pawley&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Deaf Smith &amp; Johnny Ears&#39;,  &#39;year&#39;: 1973,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Paolo Cavara&#39;],  &#39;actors&#39;: [&#39;Franco Nero&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Giving It Up&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 4.2,  &#39;directors&#39;: [&#39;Christopher Kublan&#39;],  &#39;actors&#39;: [&#39;Mark Feuerstein&#39;, &#39;Dabney Coleman&#39;, &#39;Ben Weber&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Physical Evidence&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Michael Crichton&#39;],  &#39;actors&#39;: [&#39;Burt Reynolds&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Mystery&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Guns of Diablo&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Boris Sagal&#39;],  &#39;actors&#39;: [&#39;Charles Bronson&#39;, &#39;Kurt Russell&#39;, &#39;Jan Merlin&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;The Secret of Convict Lake&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Michael Gordon&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Zachary Scott&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Big Lebowski&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Joel Coen&#39;, &#39;Ethan Coen&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;John Goodman&#39;, &#39;Steve Buscemi&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;The Strip&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;László Kardos&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;William Demarest&#39;, &#39;James Craig&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Sugarfoot&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Edwin L. Marin&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Raymond Massey&#39;, &#39;S.Z. Sakall&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Crime Against Joe&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Lee Sholem&#39;],  &#39;actors&#39;: [&#39;John Bromfield&#39;, &#39;Henry Calvin&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &quot;Ma Barker&#39;s Killer Brood&quot;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Bill Karn&#39;],  &#39;actors&#39;: [&#39;Tristram Coffin&#39;, &#39;Paul Dubov&#39;, &#39;Nelson Leigh&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Jonah Who Will Be 25 in the Year 2000&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Alain Tanner&#39;],  &#39;actors&#39;: [&#39;Jean-Luc Bideau&#39;, &#39;Jacques Denis&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Decision at Sundown&#39;,  &#39;year&#39;: 1957,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;John Carroll&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &quot;Mary Shelley&#39;s Frankenstein&quot;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Kenneth Branagh&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Kenneth Branagh&#39;, &#39;Tom Hulce&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Horror&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Hostile Guns&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;R.G. Springsteen&#39;],  &#39;actors&#39;: [&#39;George Montgomery&#39;, &#39;Tab Hunter&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Mad Dog and Glory&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;John McNaughton&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Bill Murray&#39;, &#39;David Caruso&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &quot;Dead Man&#39;s Eyes&quot;,  &#39;year&#39;: 1944,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Reginald Le Borg&#39;],  &#39;actors&#39;: [&#39;Edward Fielding&#39;,   &#39;Lon Chaney Jr.&#39;,   &#39;Paul Kelly&#39;,   &#39;Thomas Gomez&#39;,   &#39;Jonathan Hale&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Touch&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Krzysztof Zanussi&#39;],  &#39;actors&#39;: [&#39;Max von Sydow&#39;, &#39;Lothaire Bluteau&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Music&#39;]}, {&#39;title&#39;: &#39;Love, Honor &amp; Obey: The Last Mafia Marriage&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;John Patterson&#39;],  &#39;actors&#39;: [&#39;Eric Roberts&#39;, &#39;Ben Gazzara&#39;, &#39;Alex Rocco&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Black Horse Canyon&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Jesse Hibbs&#39;],  &#39;actors&#39;: [&#39;Joel McCrea&#39;, &#39;Race Gentry&#39;, &#39;Murvyn Vye&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &quot;The Great Man&#39;s Lady&quot;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;Joel McCrea&#39;, &#39;Brian Donlevy&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Follow That Bird&#39;,  &#39;year&#39;: 1985,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Ken Kwapis&#39;],  &#39;actors&#39;: [&#39;Caroll Spinney&#39;, &#39;Jim Henson&#39;, &#39;Frank Oz&#39;, &#39;Richard Hunt&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;The Best Man&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Malcolm D. Lee&#39;],  &#39;actors&#39;: [&#39;Taye Diggs&#39;, &#39;Morris Chestnut&#39;, &#39;Harold Perrineau&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Visit&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 7.7,  &#39;directors&#39;: [&#39;Bernhard Wicki&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Paolo Stoppa&#39;, &#39;Romolo Valli&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Onassis: The Richest Man in the World&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Waris Hussein&#39;],  &#39;actors&#39;: [&#39;Raul Julia&#39;, &#39;Anthony Quinn&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Castle in the Sky&#39;,  &#39;year&#39;: 1986,  &#39;rating&#39;: 8.1,  &#39;directors&#39;: [&#39;Hayao Miyazaki&#39;],  &#39;actors&#39;: [&#39;James Van Der Beek&#39;, &#39;Mark Hamill&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Fantasy&#39;]}, {&#39;title&#39;: &#39;Fearless&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Peter Weir&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;Tom Hulce&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Sweet Justice&#39;,  &#39;year&#39;: 1992,  &#39;rating&#39;: 4.0,  &#39;directors&#39;: [&#39;Allen Plone&#39;],  &#39;actors&#39;: [&#39;Frank Gorshin&#39;, &#39;Marc Singer&#39;, &#39;Gregg Brazzel&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Flesh and Bone&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Steve Kloves&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;, &#39;James Caan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;In Old California&#39;,  &#39;year&#39;: 1942,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;William C. McGann&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Albert Dekker&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;A Time for Killing&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Roger Corman&#39;, &#39;Phil Karlson&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Paul Petersen&#39;, &#39;Timothy Carey&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Babes on Broadway&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Busby Berkeley&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Corregidor&#39;,  &#39;year&#39;: 1943,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;William Nigh&#39;],  &#39;actors&#39;: [&#39;Otto Kruger&#39;, &#39;Donald Woods&#39;, &#39;Frank Jenks&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Thunder Over the Plains&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;André De Toth&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Lex Barker&#39;, &#39;Charles McGraw&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;War&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Fazil&#39;,  &#39;year&#39;: 1928,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Howard Hawks&#39;],  &#39;actors&#39;: [&#39;Charles Farrell&#39;, &#39;John Boles&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Fate Is the Hunter&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Ralph Nelson&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Rod Taylor&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;One Good Turn&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 5.2,  &#39;directors&#39;: [&#39;Tony Randel&#39;],  &#39;actors&#39;: [&#39;James Remar&#39;, &#39;Lenny von Dohlen&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Operation Dumbo Drop&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.0,  &#39;directors&#39;: [&#39;Simon Wincer&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Ray Liotta&#39;, &#39;Denis Leary&#39;, &#39;Doug E. Doug&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Fantasia Among the Squares&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 4.6,  &#39;directors&#39;: [&#39;Gérard Pirès&#39;],  &#39;actors&#39;: [&#39;Lino Ventura&#39;, &#39;Jacques Dufilho&#39;, &#39;Jean Yanne&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Countdown&#39;,  &#39;year&#39;: 1967,  &#39;rating&#39;: 6.0,  &#39;directors&#39;: [&#39;Robert Altman&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Robert Duvall&#39;],  &#39;genres&#39;: [&#39;Sci-Fi&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Assignment: Paris&#39;,  &#39;year&#39;: 1952,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Robert Parrish&#39;, &#39;Phil Karlson&#39;],  &#39;actors&#39;: [&#39;Dana Andrews&#39;, &#39;George Sanders&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Jacknife&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;David Hugh Jones&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Ed Harris&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Last Summer in the Hamptons&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Henry Jaglom&#39;],  &#39;actors&#39;: [&#39;Jon Robin Baitz&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Star Packer&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;Earl Dwire&#39;,   &#39;John Wayne&#39;,   &quot;George &#39;Gabby&#39; Hayes&quot;,   &#39;Yakima Canutt&#39;,   &#39;Billy Franey&#39;,   &#39;Eddie Parker&#39;],  &#39;genres&#39;: [&#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Riki-Oh: The Story of Ricky&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Ngai Choi Lam&#39;],  &#39;actors&#39;: [&#39;Siu-Wong Fan&#39;, &#39;Mei Sheng Fan&#39;, &#39;Ka-Kui Ho&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Long Riders&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 7.1,  &#39;directors&#39;: [&#39;Walter Hill&#39;],  &#39;actors&#39;: [&#39;David Carradine&#39;,   &#39;Stacy Keach&#39;,   &#39;Dennis Quaid&#39;,   &#39;Keith Carradine&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Office Romance&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 8.4,  &#39;directors&#39;: [&#39;Eldar Ryazanov&#39;],  &#39;actors&#39;: [&#39;Andrey Myagkov&#39;, &#39;Oleg Basilashvili&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Salamander&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Peter Zinner&#39;],  &#39;actors&#39;: [&#39;Franco Nero&#39;, &#39;Anthony Quinn&#39;, &#39;Martin Balsam&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Errand Boy&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Jerry Lewis&#39;],  &#39;actors&#39;: [&#39;Jerry Lewis&#39;, &#39;Brian Donlevy&#39;, &#39;Howard McNear&#39;, &#39;Dick Wesson&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Family&#39;]}, {&#39;title&#39;: &#39;Advise &amp; Consent&#39;,  &#39;year&#39;: 1962,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;Otto Preminger&#39;],  &#39;actors&#39;: [&#39;Franchot Tone&#39;, &#39;Lew Ayres&#39;, &#39;Henry Fonda&#39;, &#39;Walter Pidgeon&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The Shamrock Conspiracy&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;James Frawley&#39;],  &#39;actors&#39;: [&#39;Edward Woodward&#39;, &#39;Jeffrey Nordling&#39;, &#39;Kim Coates&#39;],  &#39;genres&#39;: [&#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Village of the Damned&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 7.3,  &#39;directors&#39;: [&#39;Wolf Rilla&#39;],  &#39;actors&#39;: [&#39;George Sanders&#39;, &#39;Michael Gwynn&#39;, &#39;Laurence Naismith&#39;],  &#39;genres&#39;: [&#39;Horror&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;City of the Living Dead&#39;,  &#39;year&#39;: 1980,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Lucio Fulci&#39;],  &#39;actors&#39;: [&#39;Christopher George&#39;, &#39;Carlo De Mejo&#39;],  &#39;genres&#39;: [&#39;Horror&#39;]}, {&#39;title&#39;: &#39;The Parent Trap&#39;,  &#39;year&#39;: 1998,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Nancy Meyers&#39;],  &#39;actors&#39;: [&#39;Dennis Quaid&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Prime Suspect&#39;,  &#39;year&#39;: 1982,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Noel Black&#39;],  &#39;actors&#39;: [&#39;Mike Farrell&#39;, &#39;Lane Smith&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Frontier Marshal&#39;,  &#39;year&#39;: 1939,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Allan Dwan&#39;],  &#39;actors&#39;: [&#39;John Carradine&#39;, &#39;Randolph Scott&#39;, &#39;Cesar Romero&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &quot;This Can&#39;t Be Love&quot;,  &#39;year&#39;: 1994,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Anthony Harvey&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Jason Bateman&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Devil in Love&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Ettore Scola&#39;],  &#39;actors&#39;: [&#39;Vittorio Gassman&#39;, &#39;Mickey Rooney&#39;, &#39;Ettore Manni&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Trail Street&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Ray Enright&#39;],  &#39;actors&#39;: [&#39;Randolph Scott&#39;, &#39;Robert Ryan&#39;, &quot;George &#39;Gabby&#39; Hayes&quot;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Bat*21&#39;,  &#39;year&#39;: 1988,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Peter Markle&#39;],  &#39;actors&#39;: [&#39;Gene Hackman&#39;,   &#39;Danny Glover&#39;,   &#39;Jerry Reed&#39;,   &#39;David Marshall Grant&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Rudy&#39;,  &#39;year&#39;: 1993,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;David Anspaugh&#39;],  &#39;actors&#39;: [&#39;Sean Astin&#39;, &#39;Jon Favreau&#39;, &#39;Ned Beatty&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;Murders in the Zoo&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;A. Edward Sutherland&#39;],  &#39;actors&#39;: [&#39;John Lodge&#39;,   &#39;Charles Ruggles&#39;,   &#39;Lionel Atwill&#39;,   &#39;Randolph Scott&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Horror&#39;]}, {&#39;title&#39;: &#39;White Squall&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Ridley Scott&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;, &#39;John Savage&#39;, &#39;Scott Wolf&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Eyes Wide Shut&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Stanley Kubrick&#39;],  &#39;actors&#39;: [&#39;Tom Cruise&#39;, &#39;Todd Field&#39;, &#39;Sydney Pollack&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Bang&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Ash Baron-Cohen&#39;],  &#39;actors&#39;: [&#39;Peter Greene&#39;, &#39;Michael Newland&#39;, &#39;Erik Schrody&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Call Me Genius&#39;,  &#39;year&#39;: 1961,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Robert Day&#39;],  &#39;actors&#39;: [&#39;Tony Hancock&#39;, &#39;George Sanders&#39;, &#39;Paul Massie&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Fever&#39;,  &#39;year&#39;: 1991,  &#39;rating&#39;: 5.3,  &#39;directors&#39;: [&#39;Larry Elikann&#39;],  &#39;actors&#39;: [&#39;Armand Assante&#39;,   &#39;John Achorn&#39;,   &#39;Joe Spano&#39;,   &#39;John Dennis Johnston&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Spawn of the North&#39;,  &#39;year&#39;: 1938,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;George Raft&#39;, &#39;Henry Fonda&#39;, &#39;Akim Tamiroff&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Casino&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 8.2,  &#39;directors&#39;: [&#39;Martin Scorsese&#39;],  &#39;actors&#39;: [&#39;Robert De Niro&#39;, &#39;Joe Pesci&#39;, &#39;James Woods&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Little Nemo: Adventures in Slumberland&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 7.2,  &#39;directors&#39;: [&#39;Masami Hata&#39;, &#39;William T. Hurtz&#39;],  &#39;actors&#39;: [&#39;Gabriel Damon&#39;,   &#39;Mickey Rooney&#39;,   &#39;Rene Auberjonois&#39;,   &#39;Danny Mann&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Gambling Lady&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 6.8,  &#39;directors&#39;: [&#39;Archie Mayo&#39;],  &#39;actors&#39;: [&#39;Joel McCrea&#39;, &quot;Pat O&#39;Brien&quot;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Dark Command&#39;,  &#39;year&#39;: 1940,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Raoul Walsh&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Walter Pidgeon&#39;, &#39;Roy Rogers&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Western&#39;]}, {&#39;title&#39;: &#39;Lawless Range&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 5.1,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Frank McGlynn Jr.&#39;, &#39;Jack Curtis&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Say Anything...&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Cameron Crowe&#39;],  &#39;actors&#39;: [&#39;John Cusack&#39;, &#39;John Mahoney&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Man with the Gun&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.7,  &#39;directors&#39;: [&#39;Richard Wilson&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Henry Hull&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;The Magnificent Matador&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 5.9,  &#39;directors&#39;: [&#39;Budd Boetticher&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;, &#39;Manuel Rojas&#39;, &#39;Richard Denning&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Across 110th Street&#39;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 7.0,  &#39;directors&#39;: [&#39;Barry Shear&#39;],  &#39;actors&#39;: [&#39;Anthony Quinn&#39;,   &#39;Yaphet Kotto&#39;,   &#39;Anthony Franciosa&#39;,   &#39;Frank Adu&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Flight from Destiny&#39;,  &#39;year&#39;: 1941,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Vincent Sherman&#39;],  &#39;actors&#39;: [&#39;Thomas Mitchell&#39;, &#39;Jeffrey Lynn&#39;, &#39;James Stephenson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Green Berets&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 5.7,  &#39;directors&#39;: [&#39;John Wayne&#39;, &#39;Mervyn LeRoy&#39;, &#39;Ray Kellogg&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;David Janssen&#39;, &#39;Jim Hutton&#39;, &#39;Aldo Ray&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;The Brave Bulls&#39;,  &#39;year&#39;: 1951,  &#39;rating&#39;: 6.4,  &#39;directors&#39;: [&#39;Robert Rossen&#39;],  &#39;actors&#39;: [&#39;Mel Ferrer&#39;, &#39;Anthony Quinn&#39;, &#39;Eugene Iglesias&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;, &#39;Sport&#39;]}, {&#39;title&#39;: &#39;It Started in Naples&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Melville Shavelson&#39;],  &#39;actors&#39;: [&#39;Clark Gable&#39;, &#39;Vittorio De Sica&#39;, &#39;Marietto&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Lust for Life&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.4,  &#39;directors&#39;: [&#39;Vincente Minnelli&#39;, &#39;George Cukor&#39;],  &#39;actors&#39;: [&#39;Kirk Douglas&#39;, &#39;Anthony Quinn&#39;, &#39;James Donald&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;White Witch Doctor&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Henry Hathaway&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Walter Slezak&#39;, &#39;Mashood Ajala&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;]}, {&#39;title&#39;: &#39;The Quest&#39;,  &#39;year&#39;: 1976,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Lee H. Katzin&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Tim Matheson&#39;, &#39;Brian Keith&#39;, &#39;Keenan Wynn&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;Nightwatch&#39;,  &#39;year&#39;: 1997,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Ole Bornedal&#39;],  &#39;actors&#39;: [&#39;Ewan McGregor&#39;, &#39;Nick Nolte&#39;, &#39;Erich Anderson&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Horror&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;The High and the Mighty&#39;,  &#39;year&#39;: 1954,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;William A. Wellman&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;Robert Stack&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Toy Story 2&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;Ash Brannon&#39;, &#39;Lee Unkrich&#39;, &#39;John Lasseter&#39;],  &#39;actors&#39;: [&#39;Tom Hanks&#39;, &#39;Tim Allen&#39;, &#39;Kelsey Grammer&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Animation&#39;, &#39;Comedy&#39;]}, {&#39;title&#39;: &#39;Carnival in Moscow&#39;,  &#39;year&#39;: 1956,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Eldar Ryazanov&#39;],  &#39;actors&#39;: [&#39;Igor Ilyinsky&#39;, &#39;Yuri Belov&#39;, &#39;Georgiy Kulikov&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Our Town&#39;,  &#39;year&#39;: 1977,  &#39;rating&#39;: 7.9,  &#39;directors&#39;: [&#39;George Schaefer&#39;],  &#39;actors&#39;: [&#39;Hal Holbrook&#39;, &#39;Ned Beatty&#39;, &#39;Robby Benson&#39;, &#39;Ronny Cox&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Love Songs&#39;,  &#39;year&#39;: 1999,  &#39;rating&#39;: 6.2,  &#39;directors&#39;: [&#39;Andre Braugher&#39;, &#39;Louis Gossett Jr.&#39;, &#39;Robert Townsend&#39;],  &#39;actors&#39;: [&#39;Robert Townsend&#39;, &#39;Carl Gordon&#39;],  &#39;genres&#39;: [&#39;Romance&#39;]}, {&#39;title&#39;: &#39;The Hunters&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Dick Powell&#39;],  &#39;actors&#39;: [&#39;Robert Mitchum&#39;, &#39;Robert Wagner&#39;, &#39;Richard Egan&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;I Want to Live!&#39;,  &#39;year&#39;: 1958,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Robert Wise&#39;],  &#39;actors&#39;: [&#39;Simon Oakland&#39;, &#39;Theodore Bikel&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;High Risk&#39;,  &#39;year&#39;: 1981,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Stewart Raffill&#39;],  &#39;actors&#39;: [&#39;James Brolin&#39;, &#39;Anthony Quinn&#39;, &#39;James Coburn&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Comedy&#39;, &#39;Crime&#39;]}, {&#39;title&#39;: &#39;Winter People&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Ted Kotcheff&#39;],  &#39;actors&#39;: [&#39;Kurt Russell&#39;, &#39;Lloyd Bridges&#39;, &#39;Mitchell Ryan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Purple Noon&#39;,  &#39;year&#39;: 1960,  &#39;rating&#39;: 7.8,  &#39;directors&#39;: [&#39;René Clément&#39;],  &#39;actors&#39;: [&#39;Alain Delon&#39;, &#39;Maurice Ronet&#39;, &#39;Erno Crisa&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;A Clockwork Orange&#39;,  &#39;year&#39;: 1971,  &#39;rating&#39;: 8.3,  &#39;directors&#39;: [&#39;Stanley Kubrick&#39;],  &#39;actors&#39;: [&#39;Malcolm McDowell&#39;,   &#39;Patrick Magee&#39;,   &#39;Michael Bates&#39;,   &#39;Warren Clarke&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;Madigan&#39;,  &#39;year&#39;: 1968,  &#39;rating&#39;: 6.6,  &#39;directors&#39;: [&#39;Don Siegel&#39;],  &#39;actors&#39;: [&#39;Richard Widmark&#39;, &#39;Henry Fonda&#39;, &#39;Harry Guardino&#39;],  &#39;genres&#39;: [&#39;Crime&#39;, &#39;Drama&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Batman&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Tim Burton&#39;],  &#39;actors&#39;: [&#39;Michael Keaton&#39;, &#39;Jack Nicholson&#39;, &#39;Robert Wuhl&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;]}, {&#39;title&#39;: &#39;Sex and the Single Girl&#39;,  &#39;year&#39;: 1964,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;Richard Quine&#39;],  &#39;actors&#39;: [&#39;Tony Curtis&#39;, &#39;Henry Fonda&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Blue Steel&#39;,  &#39;year&#39;: 1934,  &#39;rating&#39;: 5.4,  &#39;directors&#39;: [&#39;Robert N. Bradbury&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &quot;George &#39;Gabby&#39; Hayes&quot;, &#39;Edward Peil Sr.&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Good, the Bad and the Ugly&#39;,  &#39;year&#39;: 1966,  &#39;rating&#39;: 8.9,  &#39;directors&#39;: [&#39;Sergio Leone&#39;],  &#39;actors&#39;: [&#39;Clint Eastwood&#39;, &#39;Eli Wallach&#39;, &#39;Lee Van Cleef&#39;, &#39;Aldo Giuffrè&#39;],  &#39;genres&#39;: [&#39;Western&#39;]}, {&#39;title&#39;: &#39;I Dream Too Much&#39;,  &#39;year&#39;: 1935,  &#39;rating&#39;: 5.6,  &#39;directors&#39;: [&#39;John Cromwell&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Eric Blore&#39;, &#39;Osgood Perkins&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Romance&#39;]}, {&#39;title&#39;: &#39;Appointment in Honduras&#39;,  &#39;year&#39;: 1953,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Jacques Tourneur&#39;],  &#39;actors&#39;: [&#39;Glenn Ford&#39;, &#39;Zachary Scott&#39;, &#39;Rodolfo Acosta&#39;],  &#39;genres&#39;: [&#39;Adventure&#39;, &#39;Crime&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &quot;America&#39;s Dream&quot;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 6.3,  &#39;directors&#39;: [&#39;Paris Barclay&#39;, &#39;Bill Duke&#39;, &#39;Kevin Rodney Sullivan&#39;],  &#39;actors&#39;: [&#39;Danny Glover&#39;, &#39;Wesley Snipes&#39;, &#39;Tate Donovan&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Secret Agents&#39;,  &#39;year&#39;: 1965,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Christian-Jaque&#39;,   &#39;Werner Klingler&#39;,   &#39;Carlo Lizzani&#39;,   &#39;Terence Young&#39;],  &#39;actors&#39;: [&#39;Henry Fonda&#39;, &#39;Robert Ryan&#39;, &#39;Vittorio Gassman&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;History&#39;, &#39;Thriller&#39;]}, {&#39;title&#39;: &#39;Bill: On His Own&#39;,  &#39;year&#39;: 1983,  &#39;rating&#39;: 7.5,  &#39;directors&#39;: [&#39;Anthony Page&#39;],  &#39;actors&#39;: [&#39;Mickey Rooney&#39;, &#39;Tracey Walter&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;The Rain People&#39;,  &#39;year&#39;: 1969,  &#39;rating&#39;: 6.9,  &#39;directors&#39;: [&#39;Francis Ford Coppola&#39;],  &#39;actors&#39;: [&#39;James Caan&#39;, &#39;Robert Duvall&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Eraser&#39;,  &#39;year&#39;: 1996,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;Chuck Russell&#39;],  &#39;actors&#39;: [&#39;Arnold Schwarzenegger&#39;, &#39;James Caan&#39;, &#39;James Coburn&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;Mystery&#39;]}, {&#39;title&#39;: &#39;Judge Dredd&#39;,  &#39;year&#39;: 1995,  &#39;rating&#39;: 5.5,  &#39;directors&#39;: [&#39;Danny Cannon&#39;],  &#39;actors&#39;: [&#39;Sylvester Stallone&#39;,   &#39;Armand Assante&#39;,   &#39;Rob Schneider&#39;,   &#39;Jürgen Prochnow&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Crime&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;The Sea Chase&#39;,  &#39;year&#39;: 1955,  &#39;rating&#39;: 6.5,  &#39;directors&#39;: [&#39;John Farrow&#39;],  &#39;actors&#39;: [&#39;John Wayne&#39;, &#39;David Farrar&#39;, &#39;Lyle Bettger&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Drama&#39;, &#39;War&#39;]}, {&#39;title&#39;: &#39;Monsieur Verdoux&#39;,  &#39;year&#39;: 1947,  &#39;rating&#39;: 8.0,  &#39;directors&#39;: [&#39;Charles Chaplin&#39;],  &#39;actors&#39;: [&#39;Charles Chaplin&#39;, &#39;Allison Roddan&#39;, &#39;Robert Lewis&#39;],  &#39;genres&#39;: [&#39;Comedy&#39;, &#39;Crime&#39;, &#39;Drama&#39;]}, {&#39;title&#39;: &#39;Fast Workers&#39;,  &#39;year&#39;: 1933,  &#39;rating&#39;: 7.6,  &#39;directors&#39;: [&#39;Tod Browning&#39;],  &#39;actors&#39;: [&#39;John Gilbert&#39;, &#39;Robert Armstrong&#39;],  &#39;genres&#39;: [&#39;Drama&#39;]}, {&#39;title&#39;: &#39;Conquest of the Planet of the Apes&#39;,  &#39;year&#39;: 1972,  &#39;rating&#39;: 6.1,  &#39;directors&#39;: [&#39;J. Lee Thompson&#39;],  &#39;actors&#39;: [&#39;Roddy McDowall&#39;, &#39;Don Murray&#39;, &#39;Ricardo Montalban&#39;],  &#39;genres&#39;: [&#39;Action&#39;, &#39;Sci-Fi&#39;]}, {&#39;title&#39;: &#39;See You in the Morning&#39;,  &#39;year&#39;: 1989,  &#39;rating&#39;: 5.8,  &#39;directors&#39;: [&#39;Alan J. Pakula&#39;],  &#39;actors&#39;: [&#39;Jeff Bridges&#39;],  &#39;genres&#39;: [&#39;Drama&#39;, &#39;Romance&#39;]}, ...]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bucket_counts</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> bucketize<span class="token punctuation">(</span>data<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>len<span class="token punctuation">(</span>bucketize<span class="token punctuation">(</span>data<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q29 how many movies are there of each genre, prior to 2000? (plot your answer)</span>plot_dict<span class="token punctuation">(</span>bucket_counts<span class="token punctuation">(</span>filter_year<span class="token punctuation">(</span>movies<span class="token punctuation">,</span> None<span class="token punctuation">,</span> <span class="token number">1999</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"genres"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Movie Count"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="output_43_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q30  how many movies are there of each genre, in or after 2000? (plot your answer)</span>plot_dict<span class="token punctuation">(</span>bucket_counts<span class="token punctuation">(</span>filter_year<span class="token punctuation">(</span>movies<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"genres"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Movie Count"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="output_44_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q31 how many movies have there been per year, since (and including) 2000? (plot your answer)</span>plot_dict<span class="token punctuation">(</span>bucket_counts<span class="token punctuation">(</span>filter_year<span class="token punctuation">(</span>movies<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"year"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Movie Count"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="output_45_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q32  what are the directing career spans of the directors who have directed for at least 30 years?</span><span class="token keyword">def</span> <span class="token function">career_span</span><span class="token punctuation">(</span>col<span class="token punctuation">,</span> years<span class="token punctuation">)</span><span class="token punctuation">:</span>    get_col <span class="token operator">=</span> bucketize<span class="token punctuation">(</span>movies<span class="token punctuation">,</span>col<span class="token punctuation">)</span>    res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>values <span class="token keyword">in</span> get_col<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>values<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    new_re <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>values <span class="token keyword">in</span> res<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        values<span class="token operator">=</span>sorted<span class="token punctuation">(</span>values<span class="token punctuation">)</span>        new_re<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> values    re <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> new_re<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            re<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            re<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> re<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> value <span class="token operator">>=</span> years<span class="token punctuation">:</span>            result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">return</span> resultcareer_span<span class="token punctuation">(</span><span class="token string">'directors'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>{&#39;Howard Hawks&#39;: 42, &#39;Charles Chaplin&#39;: 34, &#39;Henry Hathaway&#39;: 36, &#39;Stanley Kubrick&#39;: 46, &#39;Taylor Hackford&#39;: 32, &#39;Cecil B. DeMille&#39;: 30, &#39;Lee H. Katzin&#39;: 30, &#39;Richard Fleischer&#39;: 32, &#39;Sidney Lumet&#39;: 33, &#39;George Sherman&#39;: 33, &#39;John Huston&#39;: 30, &#39;Robert Siodmak&#39;: 30, &#39;Eldar Ryazanov&#39;: 31, &#39;Martin Ritt&#39;: 32}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q33 what are the acting career spans of the actors who have acted for at least 50 years?</span>career_span<span class="token punctuation">(</span><span class="token string">'actors'</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>{&#39;Kurt Russell&#39;: 50, &#39;Mickey Rooney&#39;: 75, &#39;Robert Mitchum&#39;: 51, &#39;Glenn Ford&#39;: 52, &#39;James Caan&#39;: 52, &#39;Anthony Quinn&#39;: 61, &#39;George Burns&#39;: 60, &#39;Dean Stockwell&#39;: 53}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q34 who are the 10 directors with the longest careers?</span><span class="token keyword">def</span> <span class="token function">row_ranking</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> row<span class="token punctuation">[</span><span class="token string">"span"</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">top_n_span</span><span class="token punctuation">(</span>buckets<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># TODO: spans should be a dictionary mapping name to career span</span>    spans <span class="token operator">=</span> career_span<span class="token punctuation">(</span>buckets<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    rows <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> spans<span class="token punctuation">:</span>        span <span class="token operator">=</span> spans<span class="token punctuation">[</span>name<span class="token punctuation">]</span>        rows<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span> <span class="token string">"span"</span><span class="token punctuation">:</span> span<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># we want to sort the rows so that those with the biggest spans</span>    <span class="token comment" spellcheck="true"># are first.  Notice that we aren't calling row_ranking, but rather</span>    <span class="token comment" spellcheck="true"># passing a reference to this function to the sort method.  The sort</span>    <span class="token comment" spellcheck="true"># method uses this function to determine how to rank the rows.</span>    <span class="token comment" spellcheck="true"># </span>    <span class="token comment" spellcheck="true"># we do a reverse sort because we want the biggest spans first,</span>    <span class="token comment" spellcheck="true"># not last</span>    rows<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span>row_ranking<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># TODO: return a slice of the rows</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">return</span> resulttop_n_span<span class="token punctuation">(</span><span class="token string">'directors'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[{&#39;name&#39;: &#39;Stanley Kubrick&#39;, &#39;span&#39;: 46}, {&#39;name&#39;: &#39;Howard Hawks&#39;, &#39;span&#39;: 42}, {&#39;name&#39;: &#39;Henry Hathaway&#39;, &#39;span&#39;: 36}, {&#39;name&#39;: &#39;Charles Chaplin&#39;, &#39;span&#39;: 34}, {&#39;name&#39;: &#39;Sidney Lumet&#39;, &#39;span&#39;: 33}, {&#39;name&#39;: &#39;George Sherman&#39;, &#39;span&#39;: 33}, {&#39;name&#39;: &#39;Taylor Hackford&#39;, &#39;span&#39;: 32}, {&#39;name&#39;: &#39;Richard Fleischer&#39;, &#39;span&#39;: 32}, {&#39;name&#39;: &#39;Martin Ritt&#39;, &#39;span&#39;: 32}, {&#39;name&#39;: &#39;Eldar Ryazanov&#39;, &#39;span&#39;: 31}]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q35 who are the 10 actors with the longest careers?</span>top_n_span<span class="token punctuation">(</span><span class="token string">'actors'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[{&#39;name&#39;: &#39;Mickey Rooney&#39;, &#39;span&#39;: 75}, {&#39;name&#39;: &#39;Anthony Quinn&#39;, &#39;span&#39;: 61}, {&#39;name&#39;: &#39;George Burns&#39;, &#39;span&#39;: 60}, {&#39;name&#39;: &#39;Dean Stockwell&#39;, &#39;span&#39;: 53}, {&#39;name&#39;: &#39;Glenn Ford&#39;, &#39;span&#39;: 52}, {&#39;name&#39;: &#39;James Caan&#39;, &#39;span&#39;: 52}, {&#39;name&#39;: &#39;Robert Mitchum&#39;, &#39;span&#39;: 51}, {&#39;name&#39;: &#39;Kurt Russell&#39;, &#39;span&#39;: 50}, {&#39;name&#39;: &#39;Robert De Niro&#39;, &#39;span&#39;: 49}, {&#39;name&#39;: &#39;Marlon Brando&#39;, &#39;span&#39;: 49}]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q36 what are the three genres in which movies receive the highest median rating?</span><span class="token keyword">def</span> <span class="token function">row_rank</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> row<span class="token punctuation">[</span><span class="token string">"rating"</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">get_best</span><span class="token punctuation">(</span>category<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    col <span class="token operator">=</span> bucketize<span class="token punctuation">(</span>movies<span class="token punctuation">,</span>category<span class="token punctuation">)</span>    temp<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>values <span class="token keyword">in</span> col<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>values<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'rating'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    temp_2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>values <span class="token keyword">in</span> temp<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        values<span class="token operator">=</span>sorted<span class="token punctuation">(</span>values<span class="token punctuation">)</span>        temp_2<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> values    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>values <span class="token keyword">in</span> temp_2<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'category'</span><span class="token punctuation">:</span>key<span class="token punctuation">,</span><span class="token string">'rating'</span><span class="token punctuation">:</span>median<span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'count'</span><span class="token punctuation">:</span>len<span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span>row_rank<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> <span class="token number">0</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">return</span> resultget_best<span class="token punctuation">(</span><span class="token string">'genres'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[{&#39;category&#39;: &#39;Animation&#39;, &#39;rating&#39;: 7.3, &#39;count&#39;: 45}, {&#39;category&#39;: &#39;History&#39;, &#39;rating&#39;: 6.7, &#39;count&#39;: 73}, {&#39;category&#39;: &#39;War&#39;, &#39;rating&#39;: 6.7, &#39;count&#39;: 99}]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q37 what were the 10 best years for movies?</span>get_best<span class="token punctuation">(</span><span class="token string">'year'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#the movies who have the highest median rating is not a good metric</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[{&#39;category&#39;: 1921, &#39;rating&#39;: 8.3, &#39;count&#39;: 1}, {&#39;category&#39;: 1925, &#39;rating&#39;: 8.2, &#39;count&#39;: 1}, {&#39;category&#39;: 1919, &#39;rating&#39;: 7.5, &#39;count&#39;: 1}, {&#39;category&#39;: 1923, &#39;rating&#39;: 7.3, &#39;count&#39;: 2}, {&#39;category&#39;: 1962, &#39;rating&#39;: 7.2, &#39;count&#39;: 17}, {&#39;category&#39;: 1964, &#39;rating&#39;: 7.1, &#39;count&#39;: 19}, {&#39;category&#39;: 1957, &#39;rating&#39;: 7.0, &#39;count&#39;: 24}, {&#39;category&#39;: 1985, &#39;rating&#39;: 7.0, &#39;count&#39;: 17}, {&#39;category&#39;: 1976, &#39;rating&#39;: 7.0, &#39;count&#39;: 17}, {&#39;category&#39;: 1963, &#39;rating&#39;: 6.95, &#39;count&#39;: 10}]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q38 what were the 5 best years for movies, if we only consider years with at least 10 movies?</span><span class="token keyword">def</span> <span class="token function">get_best_temp</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">:</span>    col <span class="token operator">=</span> bucketize<span class="token punctuation">(</span>movies<span class="token punctuation">,</span>category<span class="token punctuation">)</span>    temp<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>values <span class="token keyword">in</span> col<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>values<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'rating'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    temp_2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>values <span class="token keyword">in</span> temp<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        values<span class="token operator">=</span>sorted<span class="token punctuation">(</span>values<span class="token punctuation">)</span>        temp_2<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> values    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>values <span class="token keyword">in</span> temp_2<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'category'</span><span class="token punctuation">:</span>key<span class="token punctuation">,</span><span class="token string">'rating'</span><span class="token punctuation">:</span>median<span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'count'</span><span class="token punctuation">:</span>len<span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span>row_rank<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token keyword">def</span> <span class="token function">get_best_constrain</span><span class="token punctuation">(</span>category<span class="token punctuation">,</span>n<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> get_best_temp<span class="token punctuation">(</span>category<span class="token punctuation">)</span>    re <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span> <span class="token operator">>=</span> num<span class="token punctuation">:</span>            re<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    j <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>re<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> resultget_best_constrain<span class="token punctuation">(</span><span class="token string">'year'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[{&#39;category&#39;: 1962, &#39;rating&#39;: 7.2, &#39;count&#39;: 17}, {&#39;category&#39;: 1964, &#39;rating&#39;: 7.1, &#39;count&#39;: 19}, {&#39;category&#39;: 1957, &#39;rating&#39;: 7.0, &#39;count&#39;: 24}, {&#39;category&#39;: 1985, &#39;rating&#39;: 7.0, &#39;count&#39;: 17}, {&#39;category&#39;: 1976, &#39;rating&#39;: 7.0, &#39;count&#39;: 17}]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q39 who are the best 4 directors, if we only count directors having at least 3 movies?</span>get_best_constrain<span class="token punctuation">(</span><span class="token string">'directors'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[{&#39;category&#39;: &#39;Christopher Nolan&#39;, &#39;rating&#39;: 8.5, &#39;count&#39;: 9}, {&#39;category&#39;: &#39;Leonid Gayday&#39;, &#39;rating&#39;: 8.4, &#39;count&#39;: 5}, {&#39;category&#39;: &#39;Stanley Kubrick&#39;, &#39;rating&#39;: 8.3, &#39;count&#39;: 11}, {&#39;category&#39;: &#39;Sergio Leone&#39;, &#39;rating&#39;: 8.3, &#39;count&#39;: 7}]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#q40 who are the 3 best actors, if we only count actors having at least 5 movies?</span>get_best_constrain<span class="token punctuation">(</span><span class="token string">'actors'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[{&#39;category&#39;: &#39;Henry Bergman&#39;, &#39;rating&#39;: 8.2, &#39;count&#39;: 5}, {&#39;category&#39;: &#39;Ioan Gruffudd&#39;, &#39;rating&#39;: 8.2, &#39;count&#39;: 6}, {&#39;category&#39;: &#39;Robert Lindsay&#39;, &#39;rating&#39;: 8.2, &#39;count&#39;: 6}]</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CS301-Proj8&quot;&gt;&lt;a href=&quot;#CS301-Proj8&quot; class=&quot;headerlink&quot; title=&quot;CS301_Proj8&quot;&gt;&lt;/a&gt;CS301_Proj8&lt;/h1&gt;&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Intro
      
    
    </summary>
    
      <category term="CS301Proj" scheme="http://naixinzhang.github.io/categories/CS301Proj/"/>
    
    
      <category term="CS301 Data Programming I" scheme="http://naixinzhang.github.io/tags/CS301-Data-Programming-I/"/>
    
  </entry>
  
  <entry>
    <title>Free Trail Screen</title>
    <link href="http://naixinzhang.github.io/2019/11/22/abtest/free-trial-screener/"/>
    <id>http://naixinzhang.github.io/2019/11/22/abtest/free-trial-screener/</id>
    <published>2019-11-23T03:06:09.000Z</published>
    <updated>2020-09-21T04:30:34.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="📘-Experiment-design"><a href="#📘-Experiment-design" class="headerlink" title="📘  Experiment design"></a>📘  Experiment design</h1><h2 id="📖-Experiment-Overview-Free-Trial-Screener"><a href="#📖-Experiment-Overview-Free-Trial-Screener" class="headerlink" title="📖 Experiment Overview: Free Trial Screener"></a>📖 Experiment Overview: Free Trial Screener</h2><p><font color="blue">At the time of this experiment, Udacity courses currently have two options on the home page: “start free trial”, and “access course materials”. If the student clicks “start free trial”, they will be asked to enter their credit card information, and then they will be enrolled in a free trial for the paid version of the course. After 14 days, they will automatically be charged unless they cancel first. If the student clicks “access course materials”, they will be able to view the videos and take the quizzes for free, but they will not receive coaching support or a verified certificate, and they will not submit their final project for feedback.</font></p><p>In the experiment, Udacity tested a change where if the student clicked “start free trial”, they were asked how much time they had available to devote to the course. If the student indicated 5 or more hours per week, they would be taken through the checkout process as usual. If they indicated fewer than 5 hours per week, a message would appear indicating that Udacity courses usually require a greater time commitment for successful completion, and suggesting that the student might like to access the course materials for free. At this point, the student would have the option to continue enrolling in the free trial, or access the course materials for free instead. The screenshot below shows what the experiment looks like.</p><p>The hypothesis was that this might set clearer expectations for students upfront, thus reducing the number of frustrated students who left the free trial because they didn’t have enough time—without significantly reducing the number of students to continue past the free trial and eventually complete the course. If this hypothesis held true, Udacity could improve the overall student experience and improve coaches’ capacity to support students who are likely to complete the course.</p><p>The unit of diversion is a cookie, although if the student enrolls in the free trial, they are tracked by user-id from that point forward. The same user-id cannot enroll in the free trial twice. For users that do not enroll, their user-id is not tracked in the experiment, even if they were signed in when they visited the course overview page.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> IPython<span class="token punctuation">.</span>display <span class="token keyword">import</span> ImageImage<span class="token punctuation">(</span><span class="token string">'download.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="1_3_0.png" alt="png"></p><h1 id="📖-Metric-Choice"><a href="#📖-Metric-Choice" class="headerlink" title="📖 Metric Choice"></a>📖 Metric Choice</h1><p><font color="blue">Which of the following metrics would you choose to measure for this experiment and why? For each metric you choose, indicate whether you would use it as an invariant metric or an evaluation metric. The practical significance boundary for each metric, that is, the difference that would have to be observed before that was a meaningful change for the business, is given in parentheses. All practical significance boundaries are given as absolute changes.</font></p><p>Any place “unique cookies” are mentioned, the uniqueness is determined by day. (That is, the same cookie visiting on different days would be counted twice.) User-ids are automatically unique since the site does not allow the same user-id to enroll twice.</p><ul><li>Number of cookies: That is, number of unique cookies to view the course overview page. (dmin=3000)</li><li>Number of user-ids: That is, number of users who enroll in the free trial. (dmin=50)</li><li>Number of clicks: That is, number of unique cookies to click the “Start free trial” button (which happens before the free trial screener is trigger). (dmin=240)</li><li>Click-through-probability: That is, number of unique cookies to click the “Start free trial” button divided by number of unique cookies to view the course overview page. (dmin=0.01)</li><li>Gross conversion: That is, number of user-ids to complete checkout and enroll in the free trial divided by number of unique cookies to click the “Start free trial” button. (dmin= 0.01)</li><li>Retention: That is, number of user-ids to remain enrolled past the 14-day boundary (and thus make at least one payment) divided by number of user-ids to complete checkout. (dmin=0.01)</li><li>Net conversion: That is, number of user-ids to remain enrolled past the 14-day boundary (and thus make at least one payment) divided by the number of unique cookies to click the “Start free trial” button. (dmin= 0.0075)</li></ul><h2 id="🔵-Invariant-metrics"><a href="#🔵-Invariant-metrics" class="headerlink" title="🔵 Invariant metrics"></a>🔵 Invariant metrics</h2><p><br>expected to be unchanged in the control and experimental groups:</p><ul><li><p>number of cookies <br>this metric cannot be affected by the experiment: users made a decision to visit the page before they were asked the question;</p></li><li><p>number of clicks <br>this metric cannot be affected by the experiment: users clicked the button before they were asked the question;</p></li><li><p>click-through probability <br>this metric cannot be affected by the experiment: it equals to the number of clicks divided by the number of cookies.</p><h2 id="🔵-Evaluation-metrics"><a href="#🔵-Evaluation-metrics" class="headerlink" title="🔵 Evaluation metrics"></a>🔵 Evaluation metrics</h2><p><br> expected to be different in the control and experimental groups:</p></li><li><p>gross conversion <br> this metric may decrease: users could make a decision to enroll in the free trial in the experimental group less than in the control group because they did not plan to learn 5+ hours per week;</p></li><li><p>retention <br>this metriccan may increase: enrolled users could less be disappointed in the learning process and make more payments in the experimental group than in the control group because they paid attention to studying 5+ hours per week;</p></li><li><p>net conversion<br>this metric may decrease: users could enroll in the free trial less in the experimental group than in the control group, thus could decrease the number of people who paid.</p></li></ul><h3 id="The-goals-of-the-experiment-in-the-practical-meaning"><a href="#The-goals-of-the-experiment-in-the-practical-meaning" class="headerlink" title="The goals of the experiment in the practical meaning:"></a>The goals of the experiment in the practical meaning:</h3><ul><li>the number of payments should not be decreased;</li><li>the number of students who were disappointed and had not paid because they could not study enough time should be reduced.</li></ul><h3 id="The-goals-of-the-experiment-in-terms-of-our-metrics"><a href="#The-goals-of-the-experiment-in-terms-of-our-metrics" class="headerlink" title="The goals of the experiment in terms of our metrics:"></a>The goals of the experiment in terms of our metrics:</h3><ul><li>the gross conversion should significantly decrease;</li><li>the retention should significantly increase;</li><li>the net conversion should not decrease.</li></ul><p><br>An important remark: the number of user-ids is neither a good invariant metric nor a good evaluation metric.<br>From one side, the new pop-up message is likely to decrease the total number of user-ids who enrolled in the free trial, so it is not invariant; from the other side it is not normalized, the number of visitors may be different between the experiment and control groups, so it is not good for evaluation.</p><h2 id="📖-Measuring-Variability"><a href="#📖-Measuring-Variability" class="headerlink" title="📖   Measuring Variability"></a>📖   Measuring Variability</h2><p><font color="blue">This list contains rough estimates of the baseline values for these metrics (again, these numbers have been changed from Udacity’s true numbers).</font></p><pre class="line-numbers language-python"><code class="language-python">baseline <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"Final Project Baseline Values - Sheet1.csv"</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>header <span class="token operator">=</span> None<span class="token punctuation">,</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'metric'</span><span class="token punctuation">,</span><span class="token string">'baseline_value'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>baseline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>metric</th>      <th>baseline_value</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Unique cookies to view course overview page pe...</td>      <td>40000.000000</td>    </tr>    <tr>      <th>1</th>      <td>Unique cookies to click "Start free trial" per...</td>      <td>3200.000000</td>    </tr>    <tr>      <th>2</th>      <td>Enrollments per day:</td>      <td>660.000000</td>    </tr>    <tr>      <th>3</th>      <td>Click-through-probability on "Start free trial":</td>      <td>0.080000</td>    </tr>    <tr>      <th>4</th>      <td>Probability of enrolling, given click:</td>      <td>0.206250</td>    </tr>    <tr>      <th>5</th>      <td>Probability of payment, given enroll:</td>      <td>0.530000</td>    </tr>    <tr>      <th>6</th>      <td>Probability of payment, given click</td>      <td>0.109313</td>    </tr>  </tbody></table></div><h3 id="For-each-metric-I-selected-as-an-evaluation-metric-estimate-standard-deviation-analytically"><a href="#For-each-metric-I-selected-as-an-evaluation-metric-estimate-standard-deviation-analytically" class="headerlink" title="For each metric I selected as an evaluation metric, estimate standard deviation analytically:"></a>For each metric I selected as an evaluation metric, estimate standard deviation analytically:</h3><p>The number of clicks and enrollments follows a binomial distribution, and by the central limit theorem, the distribution of the three rates (gross conversion, retention, and net conversion) is Gaussian.</p><p>Given the daily sample of 5000 cookies, the number of clicks and enrollments can be calculated using the baseline values<br>Number of cookies = 5000<br>Number of clicks on “Start free trial” = 5000 × 0.08 = 400<br>Number of enrollments = 5000 × 0.08 × 0.20625 = 82.5</p><p>$$ SD \; Gross\; conversion = \sqrt{\frac{p <em> (1 - p)} {n}} = \sqrt{\frac{0.20625 </em> (1 - 0.20625)} {400} }= 0.0202 $$$$ SD \; Retention = \sqrt{\frac{p <em> (1 - p)} {n}} = \sqrt{\frac{0.53 </em> (1 - 0.53)} { 82.5}} = 0.0549 $$$$ SD \; Net\; conversion = \sqrt{\frac{p <em> (1 - p)} {n}} = \sqrt{\frac{0.1093125 </em> (1 - 0.1093125)} {400}} = 0.0156 $$</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Supporting calculation for the standard deviation</span><span class="token keyword">import</span> math<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"5000 × 0.08 × 0.20625 = "</span><span class="token punctuation">,</span> <span class="token number">5000</span> <span class="token operator">*</span> <span class="token number">0.08</span> <span class="token operator">*</span> <span class="token number">0.20625</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"SD Gross conversion = "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">0.20625</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.20625</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"SD Retention = "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">0.53</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.53</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">82.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"SD Net conversion = "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">0.1093125</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.1093125</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>5000 × 0.08 × 0.20625 =  82.5SD Gross conversion =  0.020230604137049392SD Retention =  0.05494901217850908SD Net conversion =  0.01560154458248846</code></pre><p>I would like to expect the analytical variance is close to the empirical variance for the gross conversion and for the net conversion: the denominator for these two indicators is the number of clicks, which is also the unit of diversion.</p><p>And it would be useful to collect an empirical estimate of the variability for the retention: the unit of diversion was not used in this case, the empirical variance of the retention is more likely to be higher than the analytical variance.</p><h2 id="📖-Sizing"><a href="#📖-Sizing" class="headerlink" title="📖 Sizing"></a>📖 Sizing</h2><h2 id="Number-of-Samples-given-Power"><a href="#Number-of-Samples-given-Power" class="headerlink" title="Number of Samples given Power"></a>Number of Samples given Power</h2><p>Using the analytic estimates of variance to calculate how many pageviews total (across both groups) would I need to collect to adequately power the experiment. Use an alpha of 0.05 and a beta of 0.2.</p><p>I have used the online calculator (References, N5) for calculating the sample sizes and have chosen the largest.</p><pre class="line-numbers language-python"><code class="language-python">Image<span class="token punctuation">(</span><span class="token string">'sample_size.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="1_27_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">Image<span class="token punctuation">(</span><span class="token string">'Sample_Retention_Screenshot.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="1_28_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">Image<span class="token punctuation">(</span><span class="token string">'Sample_Net_conversion_Screenshot.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="1_29_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Supporting calculation for the control and experimental groups</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Gross conversion: 2 × 25835 × 40000 ÷ 3200 = "</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">25835</span> <span class="token operator">*</span> <span class="token number">40000</span> <span class="token operator">/</span> <span class="token number">3200.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Retention:  2 × 39115 × 40000 ÷ 660 = "</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">39115</span> <span class="token operator">*</span> <span class="token number">40000</span> <span class="token operator">/</span> <span class="token number">660.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Net conversion:  2 × 27413 × 40000 ÷ 3200 = "</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">27413</span> <span class="token operator">*</span> <span class="token number">40000</span> <span class="token operator">/</span> <span class="token number">3200.0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Gross conversion: 2 × 25835 × 40000 ÷ 3200 =  645875.0Retention:  2 × 39115 × 40000 ÷ 660 =  4741212.121212121Net conversion:  2 × 27413 × 40000 ÷ 3200 =  685325.0</code></pre><h2 id="Duration-vs-Exposure"><a href="#Duration-vs-Exposure" class="headerlink" title="Duration vs. Exposure"></a>Duration vs. Exposure</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Supporting calculation for the number of days</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Number of pageviews: 4741212"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"(for the experiment with the gross conversion, the retention, and the net conversion)"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Days (100% of the traffic) = 4741212 ÷ 40000 = "</span><span class="token punctuation">,</span> <span class="token number">4741212</span> <span class="token operator">/</span> <span class="token number">40000.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Number of pageviews: 685325"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"(for the experiment with the gross conversion and the net conversion)"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Days (100% of the traffic) = 685325 ÷ 40000 = "</span><span class="token punctuation">,</span> <span class="token number">685325</span> <span class="token operator">/</span> <span class="token number">40000.0</span> <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Days (60% of the traffic) = 685325 ÷ 40000 ÷ 0.6 = "</span><span class="token punctuation">,</span> <span class="token number">685325</span> <span class="token operator">/</span> <span class="token number">40000.0</span> <span class="token operator">/</span> <span class="token number">0.6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Number of pageviews: 4741212(for the experiment with the gross conversion, the retention, and the net conversion)Days (100% of the traffic) = 4741212 ÷ 40000 =  118.5303Number of pageviews: 685325(for the experiment with the gross conversion and the net conversion)Days (100% of the traffic) = 685325 ÷ 40000 =  17.133125Days (60% of the traffic) = 685325 ÷ 40000 ÷ 0.6 =  28.555208333333333</code></pre><p> Even the use of 100 percent of the traffic does not allow testing in full for all three metrics (the gross conversion, the retention, and the net conversion). It turns out that we need to experiment 118 days. Of course, it is too long for tasks staged in the project. Percent reduction in traffic will increase this interval. Hence, it is necessary to reduce the number of test metrics and choose only two of them: the gross conversion and the net conversion.</p><p>I should reconsider an earlier decision about 4741212 needed pageviews and setup the number of pageviews equal to 685325. For the experiment with the gross conversion and the net conversion, we can use the period 17 days with the 100% traffic level. This interval is much better, but it gives us the result too quickly. The behavior of people in the field of education is quite difficult to analyze and trends in this area could be rarely detected in a short time period for 2-3 weeks. To slightly increase the time interval, we will set the percentage of used traffic at 60 (fraction = 0.6) and it gives us the number: 29 days.</p><p>It is also possible to take into consideration that the commercial risk is low: the site offers students to better plan and to evaluate their training time. The assumption of a sharp decrease in payments as a result of the pilot warning is devoid of practical foundation. For investments, the decisive factor is the first free period as a way to assess their own abilities, and it does not change during the experiment. The number of payments theoretically may slightly decrease due to the lower number of subscriptions, but this is only an assumption. Students who spend less than 5 hours a week are hardly able to complete the program successfully. In most cases, we are talking about reducing the waste of time for students and mentors.</p><p>And there is no risk in terms of privacy violation at all. Users do not enter any additional information about themselves in the process of the experiment except a little piece of information about planning.</p><p>It should be noted that the use of the fraction 0.6 does not affect the commercial interests seriously. From one side, the time interval and therefore the risk will increase. From another side, we keep the certain number of pageviews, therefore the experimental audience and the risk will not increase. It means our experiment could not practically be risky for the business.</p><p>Removing one indicator in the main part of the project, I want to analyze the experimental data in the last section on my own initiative a little bit wider and to determine what happens to the metrics “Retention” as the most interesting in terms of the psychological effect and the most unpredictable.</p><p>🔵   Number of pageviews: 685325. 🔵   Fraction of traffic exposed: 0.6. 🔵   Length of experiment: 29.</p><h2 id="📘-Experiment-Analysis"><a href="#📘-Experiment-Analysis" class="headerlink" title="📘 Experiment Analysis"></a>📘 Experiment Analysis</h2><font color="blue">This data contains the raw information needed to compute the above metrics, broken down day by day. Note that there are two sheets within the spreadsheet - one for the experiment group, and one for the control group.<p>The meaning of each column is:</p><ul><li>Pageviews: Number of unique cookies to view the course overview page that day.</li><li>Clicks: Number of unique cookies to click the course overview page that day.</li><li>Enrollments: Number of user-ids to enroll in the free trial that day.</li><li>Payments: Number of user-ids who who enrolled on that day to remain enrolled for 14 days and thus make a payment.<br>(Note that the date for this column is the start date, that is, the date of enrollment, rather than the date of the payment. The payment happened 14 days later. Because of this, the enrollments and payments are tracked for 14 fewer days than the other columns.)</li></ul></font><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Read the data for the control and experimental groups</span>control_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'Final Project Results - Control.csv'</span><span class="token punctuation">)</span>experiment_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'Final Project Results - Experiment.csv'</span><span class="token punctuation">)</span>control_data2 <span class="token operator">=</span> control_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">]</span>experiment_data2 <span class="token operator">=</span> experiment_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Control data"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>control_data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Experimental data"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>experiment_data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Control data          Date  Pageviews  Clicks  Enrollments  Payments0  Sat, Oct 11       7723     687        134.0      70.01  Sun, Oct 12       9102     779        147.0      70.02  Mon, Oct 13      10511     909        167.0      95.0Experimental data          Date  Pageviews  Clicks  Enrollments  Payments0  Sat, Oct 11       7716     686        105.0      34.01  Sun, Oct 12       9288     785        116.0      91.02  Mon, Oct 13      10480     884        145.0      79.0</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Plot the metrics</span>plt<span class="token punctuation">.</span>style<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">'ggplot'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'figure.figsize'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>csfont <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'fontname'</span><span class="token punctuation">:</span><span class="token string">'Arial'</span><span class="token punctuation">}</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Click-through-probability on "Start free trial"'</span><span class="token punctuation">,</span> <span class="token operator">**</span>csfont<span class="token punctuation">)</span>line1<span class="token punctuation">,</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>control_data<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data<span class="token punctuation">[</span><span class="token string">'Pageviews'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'control'</span><span class="token punctuation">)</span>line2<span class="token punctuation">,</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>experiment_data<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data<span class="token punctuation">[</span><span class="token string">'Pageviews'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'experiment'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>handles<span class="token operator">=</span><span class="token punctuation">[</span>line1<span class="token punctuation">,</span> line2<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.legend.Legend at 0x1a16a3a46d8&gt;</code></pre><p><img src="1_40_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Gross conversion'</span><span class="token punctuation">,</span> <span class="token operator">**</span>csfont<span class="token punctuation">)</span>line3<span class="token punctuation">,</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>control_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'control'</span><span class="token punctuation">)</span>line4<span class="token punctuation">,</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'experiment'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>handles<span class="token operator">=</span><span class="token punctuation">[</span>line3<span class="token punctuation">,</span> line4<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.legend.Legend at 0x1a16a5ae9e8&gt;</code></pre><p><img src="1_41_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Net conversion'</span><span class="token punctuation">,</span> <span class="token operator">**</span>csfont<span class="token punctuation">)</span>line7<span class="token punctuation">,</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>control_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'control'</span><span class="token punctuation">)</span>line8<span class="token punctuation">,</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'experiment'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>handles<span class="token operator">=</span><span class="token punctuation">[</span>line7<span class="token punctuation">,</span> line8<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.legend.Legend at 0x1a16a3f4a20&gt;</code></pre><p><img src="1_42_1.png" alt="png"></p><h2 id="📖-Sanity-Checks"><a href="#📖-Sanity-Checks" class="headerlink" title="📖   Sanity Checks"></a>📖   Sanity Checks</h2><font color="blue"><br>Start by checking whether your invariant metrics are equivalent between the two groups. <br>   - If the invariant metric is a simple count that should be randomly split between the 2 groups, you can use a binomial test. <br>   - Otherwise, you will need to construct a confidence interval for a difference in proportions using a similar strategy then check whether the difference between group values falls within that confidence level. </font><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Control group:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Clicks = "</span><span class="token punctuation">,</span> control_data<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"   "</span><span class="token punctuation">,</span> \      <span class="token string">"Pageviews = "</span><span class="token punctuation">,</span> control_data<span class="token punctuation">[</span><span class="token string">'Pageviews'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Experimental group:"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Clicks = "</span><span class="token punctuation">,</span> experiment_data<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"   "</span><span class="token punctuation">,</span> \      <span class="token string">"Pageviews = "</span><span class="token punctuation">,</span> experiment_data<span class="token punctuation">[</span><span class="token string">'Pageviews'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Control group:Clicks =  28378     Pageviews =  345543Experimental group:Clicks =  28325     Pageviews =  344660</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Supporting calculation for checking invariant metrics</span>p <span class="token operator">=</span> <span class="token number">0.5</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Number of cookies:"</span><span class="token punctuation">)</span>SE_cookies <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>p <span class="token operator">*</span> p <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">345543</span> <span class="token operator">+</span> <span class="token number">344660</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Standard error SE = "</span><span class="token punctuation">,</span> SE_cookies<span class="token punctuation">)</span>ME_cookies <span class="token operator">=</span> SE_cookies <span class="token operator">*</span> <span class="token number">1.96</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Margin of error ME = "</span><span class="token punctuation">,</span> ME_cookies<span class="token punctuation">)</span><span class="token punctuation">(</span>LB_cookies<span class="token punctuation">,</span> UB_cookies<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> ME_cookies<span class="token punctuation">,</span> p <span class="token operator">+</span> ME_cookies<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Confidential interval CI = "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_cookies<span class="token punctuation">,</span> UB_cookies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> u<span class="token string">'p\u0302'</span><span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">,</span> <span class="token number">345543.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">345543</span> <span class="token operator">+</span> <span class="token number">344660</span><span class="token punctuation">)</span><span class="token punctuation">,</span> u<span class="token string">'\u2208'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_cookies<span class="token punctuation">,</span> UB_cookies<span class="token punctuation">)</span><span class="token punctuation">,</span> u<span class="token string">'\u2713'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'Number of clicks on “Start free trial":'</span><span class="token punctuation">)</span>SE_clicks <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">0.5</span> <span class="token operator">*</span> <span class="token number">0.5</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">28378</span> <span class="token operator">+</span> <span class="token number">28325</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Standard error SE = "</span><span class="token punctuation">,</span> SE_clicks<span class="token punctuation">)</span>ME_clicks <span class="token operator">=</span> SE_clicks <span class="token operator">*</span> <span class="token number">1.96</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Margin of error ME = "</span><span class="token punctuation">,</span> ME_clicks<span class="token punctuation">)</span><span class="token punctuation">(</span>LB_clicks<span class="token punctuation">,</span> UB_clicks<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> ME_clicks<span class="token punctuation">,</span> p <span class="token operator">+</span> ME_clicks<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Confidential interval CI = "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_clicks<span class="token punctuation">,</span> UB_clicks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> u<span class="token string">'p\u0302'</span><span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">,</span> <span class="token number">28378.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">28378</span> <span class="token operator">+</span> <span class="token number">28325</span><span class="token punctuation">)</span><span class="token punctuation">,</span> u<span class="token string">'\u2208'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_clicks<span class="token punctuation">,</span> UB_clicks<span class="token punctuation">)</span><span class="token punctuation">,</span> u<span class="token string">'\u2713'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">'Click-through-probability on "Start free trial":'</span><span class="token punctuation">)</span>p_pool <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">28378</span> <span class="token operator">+</span> <span class="token number">28325</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">345543</span> <span class="token operator">+</span> <span class="token number">344660</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Pooled probability p_pool = "</span><span class="token punctuation">,</span> p_pool<span class="token punctuation">)</span>SE_pool <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>p_pool <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> p_pool<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">345543</span> <span class="token operator">+</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">344660</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Standard error SE = "</span><span class="token punctuation">,</span> SE_pool<span class="token punctuation">)</span>ME_pool <span class="token operator">=</span> SE_pool <span class="token operator">*</span> <span class="token number">1.96</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Margin of error ME = "</span><span class="token punctuation">,</span> ME_pool<span class="token punctuation">)</span>d_hat <span class="token operator">=</span> <span class="token number">28325.0</span> <span class="token operator">/</span> <span class="token number">344660</span> <span class="token operator">-</span> <span class="token number">28378.0</span> <span class="token operator">/</span> <span class="token number">345543</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Difference"</span><span class="token punctuation">,</span> u<span class="token string">'d\u0302'</span><span class="token punctuation">,</span> <span class="token string">"= "</span><span class="token punctuation">,</span> d_hat<span class="token punctuation">)</span><span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">-</span> ME_pool<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token operator">+</span> ME_pool<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Confidential interval CI = "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>u<span class="token string">'d\u0302'</span><span class="token punctuation">,</span> u<span class="token string">'\u2208'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">,</span> u<span class="token string">'\u2713'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Number of cookies:Standard error SE =  0.0006018407402943247Margin of error ME =  0.0011796078509768765Confidential interval CI =  (0.49882039214902313, 0.5011796078509769)p̂ = 0.5006396668806133 ∈ (0.49882039214902313, 0.5011796078509769) ✓Number of clicks on “Start free trial&quot;:Standard error SE =  0.002099747079699252Margin of error ME =  0.0041155042762105335Confidential interval CI =  (0.49588449572378945, 0.5041155042762105)p̂ = 0.5004673474066628 ∈ (0.49588449572378945, 0.5041155042762105) ✓Click-through-probability on &quot;Start free trial&quot;:Pooled probability p_pool =  0.08215409089789526Standard error SE =  0.0006610608156387222Margin of error ME =  0.0012956791986518956Difference d̂ =  5.662709158693602e-05Confidential interval CI =  (-0.0012956791986518956, 0.0012956791986518956)d̂ ∈ (-0.0012956791986518956, 0.0012956791986518956) ✓</code></pre><p>🔵   Number of cookiesLower bound = 0.4988; Upper bound = 0.5012; Observed = 0.5006; Passes = ✅</p><p>🔵   Number of clicks on “Start free trial”Lower bound = 0.4959; Upper bound = 0.5041; Observed = 0.5005; Passes = ✅</p><p>🔵   Click-through-probability on “Start free trial” (Difference between the control and experimental groups)Lower bound = -0.0013; Upper bound = 0.0013; Observed = 0.0001; Passes = ✅</p><h2 id="📖-Result-Analysis"><a href="#📖-Result-Analysis" class="headerlink" title="📖   Result Analysis"></a>📖   Result Analysis</h2><h3 id="Check-for-Practical-and-Statistical-Significance"><a href="#Check-for-Practical-and-Statistical-Significance" class="headerlink" title="Check for Practical and Statistical Significance"></a>Check for Practical and Statistical Significance</h3><p>Next, for my evaluation metrics, calculate a confidence interval for the difference between the experiment and control groups, and check whether each metric is statistically and/or practically significance. <br></p><ul><li>A metric is statistically significant if the confidence interval does not include 0 (that is, you can be confident there was a change)<br></li><li>it is practically significant if the confidence interval does not include the practical significance boundary (that is, you can be confident there is a change that matters to the business.)</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Control group:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Clicks = "</span><span class="token punctuation">,</span> control_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"   "</span><span class="token punctuation">,</span> \<span class="token string">"Enrollments = "</span><span class="token punctuation">,</span> control_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"   "</span><span class="token punctuation">,</span> \<span class="token string">"Payments = "</span><span class="token punctuation">,</span> control_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Experimental group:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Clicks = "</span><span class="token punctuation">,</span> experiment_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"   "</span><span class="token punctuation">,</span> \<span class="token string">"Enrollments = "</span><span class="token punctuation">,</span> experiment_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"   "</span><span class="token punctuation">,</span> \<span class="token string">"Payments = "</span><span class="token punctuation">,</span> experiment_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Control group:Clicks =  17293     Enrollments =  3785.0     Payments =  2033.0Experimental group:Clicks =  17260     Enrollments =  3423.0     Payments =  1945.0</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Supporting calculation for checking evaluation metrics</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Gross conversion"</span><span class="token punctuation">)</span>p_pool <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">3785.0</span> <span class="token operator">+</span> <span class="token number">3423.0</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">17293</span> <span class="token operator">+</span> <span class="token number">17260</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Pooled probability p_pool = "</span><span class="token punctuation">,</span> p_pool<span class="token punctuation">)</span>SE_pool <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>p_pool <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> p_pool<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">17293</span> <span class="token operator">+</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">17260</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Standard error SE = "</span><span class="token punctuation">,</span> SE_pool<span class="token punctuation">)</span>ME_pool <span class="token operator">=</span> SE_pool <span class="token operator">*</span> <span class="token number">1.96</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Margin of error ME = "</span><span class="token punctuation">,</span> ME_pool<span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token number">3423.0</span> <span class="token operator">/</span> <span class="token number">17260</span> <span class="token operator">-</span> <span class="token number">3785.0</span> <span class="token operator">/</span> <span class="token number">17293</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Difference d"</span><span class="token punctuation">,</span> <span class="token string">"= "</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>d <span class="token operator">-</span> ME_pool<span class="token punctuation">,</span> d <span class="token operator">+</span> ME_pool<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Confidential interval CI = "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">,</span> u<span class="token string">'\u2209'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Statistical significance"</span><span class="token punctuation">,</span> u<span class="token string">'\u2713'</span><span class="token punctuation">,</span> <span class="token string">"  Practical significance "</span><span class="token punctuation">,</span> u<span class="token string">'\u2713'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Net conversion"</span><span class="token punctuation">)</span>p_pool <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2033.0</span> <span class="token operator">+</span> <span class="token number">1945.0</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">17293</span> <span class="token operator">+</span> <span class="token number">17260</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Pooled probability p_pool = "</span><span class="token punctuation">,</span> p_pool<span class="token punctuation">)</span>SE_pool <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>p_pool <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> p_pool<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">17293</span> <span class="token operator">+</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">17260</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Standard error SE = "</span><span class="token punctuation">,</span> SE_pool<span class="token punctuation">)</span>ME_pool <span class="token operator">=</span> SE_pool <span class="token operator">*</span> <span class="token number">1.96</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Margin of error ME = "</span><span class="token punctuation">,</span> ME_pool<span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token number">1945.0</span> <span class="token operator">/</span> <span class="token number">17260</span> <span class="token operator">-</span> <span class="token number">2033.0</span> <span class="token operator">/</span> <span class="token number">17293</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Difference d = "</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>d <span class="token operator">-</span> ME_pool<span class="token punctuation">,</span> d <span class="token operator">+</span> ME_pool<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Confidential interval CI = "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token number">0</span><span class="token punctuation">,</span> u<span class="token string">'\u2208'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token string">";  dmin = -0.0075"</span><span class="token punctuation">,</span> u<span class="token string">'\u2208'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Statistical significance"</span><span class="token punctuation">,</span> u<span class="token string">'\u2718'</span><span class="token punctuation">,</span> <span class="token string">"  Practical significance "</span><span class="token punctuation">,</span> u<span class="token string">'\u2718'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Gross conversionPooled probability p_pool =  0.20860706740369866Standard error SE =  0.004371675385225936Margin of error ME =  0.008568483755042836Difference d =  -0.020554874580361565Confidential interval CI =  (-0.0291233583354044, -0.01198639082531873)(-0.01, 0, 0.01) ∉ (-0.0291233583354044, -0.01198639082531873)Statistical significance ✓   Practical significance  ✓Net conversionPooled probability p_pool =  0.1151274853124186Standard error SE =  0.0034341335129324238Margin of error ME =  0.0067309016853475505Difference d =  -0.0048737226745441675Confidential interval CI =  (-0.011604624359891718, 0.001857179010803383)0 ∈ (-0.011604624359891718, 0.001857179010803383) ;  dmin = -0.0075 ∈ (-0.011604624359891718, 0.001857179010803383)Statistical significance ✘   Practical significance  ✘</code></pre><font color="blue">If you have chosen multiple evaluation metrics, you will need to decide whether to use the Bonferroni correction. When deciding, keep in mind the results you are looking for in order to launch the experiment. Will the fact that you have multiple metrics make those results more likely to occur by chance than the alpha level of 0.05?</font><p>We have measured two metrics in one experiment. Applying the Bonferroni correction means that the a-level for each hypothesis will be 2.5 % instead of 5% and confidential intervals will be significantly wider. It is too conservative for some reasons.</p><p>The use of the Bonferroni correction would really be needed if we test several metrics in one experiment and expect that at least one metrics will demonstrate the statistically significant change. In the set of metrics, this matching only for one indicator can be an absolutely random event, therefore the experiment will have a false positive result. It means we should increase the confidential intervals to avoid this situation and apply the Bonferroni correction.</p><p>But in the case of our experiment, we expect two metrics will have matched our criteria at the same time to proceed with the launch. It’s a very strong condition without any correction. The positive results will be more likely to occur not by chance. Therefore, the Bonferroni correction could be the cause to approve the wrong null hypothesis and we should not use it this time.</p><p>Also, our metrics have a strong relationship between each other. If we know the outcome of one test of a difference between the control and experimental groups on one metrics, it would be easy to predict and to find the outcome of the other tests on the other metrics. It’s absolutely natural to expect their behavior will be similar simultaneously.</p><h3 id="Effect-Size-Tests"><a href="#Effect-Size-Tests" class="headerlink" title="Effect Size Tests"></a>Effect Size Tests</h3><p><br>🔴   I did not use the Bonferroni correction.</p><p><br>🔵   Gross conversion (Difference between the control and experimental groups)<br>Lower bound = -0.0291; Upper bound = -0.0120; Statistical significance = ✅; Practical significance = ✅</p><p><br>🔵   Net conversion (Difference between the control and experimental groups)<br>Lower bound = -0.0116; Upper bound = 0.0019; Statistical significance = ❎; Practical significance = ❎</p><h3 id="Sign-Tests-Double-check"><a href="#Sign-Tests-Double-check" class="headerlink" title="Sign Tests(Double check)"></a>Sign Tests(Double check)</h3><p>To further test each of the evaluation metrics, a binomial sign test can be conducted to evaluate Each day of the experiment to see if there is a positive or negative difference across groups (experimental-control). Each positive difference is counted as a success, and each negative difference as a failure. Then comparing the resulting p-values for each metric to determine significance.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Supporting calculation of successful events for the evaluation metrics</span>Gross_conversion_success <span class="token operator">=</span> experiment_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span> \<span class="token operator">></span>control_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Gross conversion: success ="</span><span class="token punctuation">,</span> Gross_conversion_success<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"  total ="</span><span class="token punctuation">,</span> Gross_conversion_success<span class="token punctuation">.</span>size<span class="token punctuation">)</span>Net_conversion_success <span class="token operator">=</span> experiment_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span> \<span class="token operator">></span>control_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Net conversion: success ="</span><span class="token punctuation">,</span> Net_conversion_success<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"  total ="</span><span class="token punctuation">,</span> Net_conversion_success<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Gross conversion: success = 4   total = 23Net conversion: success = 10   total = 23</code></pre><pre class="line-numbers language-python"><code class="language-python">Image<span class="token punctuation">(</span><span class="token string">'Sign_Gross_conversion_Screenshot.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="1_60_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">Image<span class="token punctuation">(</span><span class="token string">'Sign_Net_conversion_Screenshot.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="1_61_0.png" alt="png"></p><p>🔵   Gross conversion: p-value = 0.0026; statistical significance = ✅🔵   Net conversion: p-value = 0.6776; statistical significance = ❎</p><p>Eventually, the effective size and sign tests show that the site change would statistically significantly reduce the gross conversion, but would not affect the net conversion in a statistically significant way. The effect size test states this in the practical meaning also.</p><p>I did not use the Bonferroni correction for any calculations because it will be too conservative in the case of highly related metrics which should give the expected result simultaneously.</p><h2 id="📖-Recommendation"><a href="#📖-Recommendation" class="headerlink" title="📖   Recommendation"></a>📖   Recommendation</h2><p><br> The recommendation is not to launch the experiment change because the negative results have outweighed the positive ones.</p><p><br>🔴 Positive results of the experiment.</p><ul><li>The difference for the gross conversion is practically significant and negative. This is a good sign: the Udacity team can lower costs by a number of trial signups.</li><li>The difference for the net conversion is not statistically significant. It means the absence of serious financial losses.</li></ul><p><br>🔵 Negative results of the experiment:</p><ul><li>The interval for the difference in the case of the net conversion includes negative numbers. Therefore, the team has a risk to decrease incomes.</li><li>We have not gathered enough data to draw conclusions about the retention and because of this we can not evaluate correctly the difference between the control and experimental groups for a number of students who were disappointed in studying during the free period. Consequently, we do not know enrolled users would be disappointed in the learning process less and make more payments or would not.</li></ul><h2 id="📘-Follow-Up-Experiment"><a href="#📘-Follow-Up-Experiment" class="headerlink" title="📘 Follow-Up Experiment"></a>📘 Follow-Up Experiment</h2><p>Before scheduling the follow-up experiment, I would like to analyze the available data for the evaluation metrics “Retention”.</p><pre class="line-numbers language-python"><code class="language-python">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Retention'</span><span class="token punctuation">,</span> <span class="token operator">**</span>csfont<span class="token punctuation">)</span>line5<span class="token punctuation">,</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>control_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'control'</span><span class="token punctuation">)</span>line6<span class="token punctuation">,</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'experiment'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>handles<span class="token operator">=</span><span class="token punctuation">[</span>line5<span class="token punctuation">,</span> line6<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.legend.Legend at 0x1a16a413b38&gt;</code></pre><p><img src="1_68_1.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Retention"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Effect Size Tests"</span><span class="token punctuation">)</span>p_pool <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2033.0</span> <span class="token operator">+</span> <span class="token number">1945.0</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">3785.0</span> <span class="token operator">+</span> <span class="token number">3423.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Pooled probability p_pool = "</span><span class="token punctuation">,</span> p_pool<span class="token punctuation">)</span>SE_pool <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>p_pool <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> p_pool<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">3785.0</span> <span class="token operator">+</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">3423.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Standard error SE = "</span><span class="token punctuation">,</span> SE_pool<span class="token punctuation">)</span>ME_pool <span class="token operator">=</span> SE_pool <span class="token operator">*</span> <span class="token number">1.96</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Margin of error ME = "</span><span class="token punctuation">,</span> ME_pool<span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token number">1945.0</span> <span class="token operator">/</span> <span class="token number">3423.0</span> <span class="token operator">-</span> <span class="token number">2033.0</span> <span class="token operator">/</span> <span class="token number">3785.0</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Difference d = "</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>d <span class="token operator">-</span> ME_pool<span class="token punctuation">,</span> d <span class="token operator">+</span> ME_pool<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Confidential interval CI = "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span>  <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> u<span class="token string">'\u2209'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">";  dmin = 0.01"</span><span class="token punctuation">,</span> u<span class="token string">'\u2208'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LB_pool<span class="token punctuation">,</span> UB_pool<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Statistical significance"</span><span class="token punctuation">,</span> u<span class="token string">'\u2713'</span><span class="token punctuation">,</span> <span class="token string">"  Practical significance "</span><span class="token punctuation">,</span> u<span class="token string">'\u2718'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Sign test"</span><span class="token punctuation">)</span>Retention_success <span class="token operator">=</span> experiment_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span> \<span class="token operator">></span>control_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"success ="</span><span class="token punctuation">,</span> Retention_success<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"  total ="</span><span class="token punctuation">,</span> Retention_success<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>RetentionEffect Size TestsPooled probability p_pool =  0.5518867924528302Standard error SE =  0.011729780091389183Margin of error ME =  0.022990368979122797Difference d =  0.031094804707142765Confidential interval CI =  (0.008104435728019967, 0.05408517368626556)0 ∉ (0.008104435728019967, 0.05408517368626556) ;  dmin = 0.01 ∈ (0.008104435728019967, 0.05408517368626556)Statistical significance ✓   Practical significance  ✘Sign testsuccess = 13   total = 23</code></pre><pre class="line-numbers language-python"><code class="language-python">Image<span class="token punctuation">(</span><span class="token string">'download (2).png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="1_70_0.png" alt="png"></p><h3 id="Retention-Difference-between-the-control-and-experimental-groups"><a href="#Retention-Difference-between-the-control-and-experimental-groups" class="headerlink" title="Retention (Difference between the control and experimental groups)"></a>Retention (Difference between the control and experimental groups)</h3><p><br>🔵   Effect size test<br>Lower bound = 0.0081; Upper bound = 0.0541; Statistical significance = ✅; Practical significance = ❎</p><p><br>🔵   Sign test: p-value = 0.6776; statistical significance = ❎</p><p>the sign test does not agree with the confidence interval for the difference, see if you can figure out why.</p><pre class="line-numbers language-python"><code class="language-python">Gross_conversion_diff <span class="token operator">=</span> experiment_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span> <span class="token operator">-</span> \control_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Gross conversion difference"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Median: "</span><span class="token punctuation">,</span> Gross_conversion_diff<span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Mean: "</span><span class="token punctuation">,</span> Gross_conversion_diff<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Retention_diff <span class="token operator">=</span> experiment_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span> <span class="token operator">-</span> \control_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data2<span class="token punctuation">[</span><span class="token string">'Enrollments'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Retention difference"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Median: "</span><span class="token punctuation">,</span> Retention_diff<span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Mean: "</span><span class="token punctuation">,</span> Retention_diff<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Net_conversion_diff <span class="token operator">=</span> experiment_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>experiment_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span> <span class="token operator">-</span> \control_data2<span class="token punctuation">[</span><span class="token string">'Payments'</span><span class="token punctuation">]</span><span class="token operator">/</span>control_data2<span class="token punctuation">[</span><span class="token string">'Clicks'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"Net conversion difference"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Median: "</span><span class="token punctuation">,</span> Net_conversion_diff<span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Mean: "</span><span class="token punctuation">,</span> Net_conversion_diff<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Gross conversion differenceMedian:  -0.02475834310525149Mean:  -0.02078458202926592Retention differenceMedian:  0.023210831721469982Mean:  0.033342507466384695Net conversion differenceMedian:  -0.009027852539948616Mean:  -0.004896856989809377</code></pre><p> Statistical significance of the difference between the control and experimental groups was checked by using the values of the mean (effect size tests) and the median (sign tests). As we can see, these values vary considerably for the retention and it causes that the test results also differ.</p><p>Even a cursory analysis of insufficient data in a certain way confirms our intuitive assumptions about the behavior of this metric. The ratio of payments to enrollments tends to increase in the presence of the experimental warning. However, it is not possible to confirm this with sufficient certainty in the borders of this experiment and it is necessary to redesign the research.</p><font color="blue">If you wanted to reduce the number of frustrated students who cancel early in the course, what experiment would you try? Give a brief description of the change you would make, what your hypothesis would be about the effect of the change, what metrics you would want to measure, and what unit of diversion you would use. Include an explanation of each of your choices.</font><p>I would suggest these possible changes to the proposed experiment.</p><ul><li>Extend the duration of the experiment up to 2 months with constant monitoring of incomes for avoiding financial risks. If the decline in revenues becomes out of the certain limits, the study should be stopped immediately.</li><li>Measure all three evaluation metrics (the gross conversion, the retention, and the net conversion) for the 100% level of traffic because the audience of this site is very different in education, age, nationality, and other characteristics. Any reduction in the percentage of participants can significantly distort the results.</li><li>Replace the visualization message by the video with an explanation of successful learning strategies based on statistics of the particular site or by the input test for the course level recommendations exactly for this user.</li><li>In order to avoid the negative psychological effect or cut the extremely talented part of the audience which is able to pass the course without spending a lot of time to study, all changes should be only informative and recommendatory.</li><li>Recommendations in the videos or leveled tests should have the most practical character that is suitable for this course.</li><li>The length of free trial period is unchanged.</li></ul><p>I think the effect will be more detectable.</p><p>Now we can begin to define the technical details of the experiment. Selecting the unit of diversion, and invariant and evaluation metrics was quite reasonable. It is easy to obtain measurement results for decision making without the high level of costs or risks. Accordingly, I propose to leave them unchanged.</p><p>Unit of diversion: the cookie.Invariant metrics: the number of cookies, the number of clicks, and the click-through-probability.Evaluation metrics: the gross conversion, the retention, and the net conversion.The hypothesizes about the behavior of our metrics are also stayed the same:</p><p>the gross conversion should significantly decrease;the retention should significantly increase;the net conversion should not decrease.I expect the overcoming the negative results of the previous experiment and detecting the tendencies for all evaluation metrics.</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li>The final project: <a href="https://classroom.udacity.com/courses/ud257/lessons/4126079196/concepts/42072285530923" target="_blank" rel="noopener">https://classroom.udacity.com/courses/ud257/lessons/4126079196/concepts/42072285530923</a></li><li>The project instructions: <a href="https://docs.google.com/document/u/1/d/1aCquhIqsUApgsxQ8-SQBAigFDcfWVVohLEXcV6jWbdI/pub?embedded=True" target="_blank" rel="noopener">https://docs.google.com/document/u/1/d/1aCquhIqsUApgsxQ8-SQBAigFDcfWVVohLEXcV6jWbdI/pub?embedded=True</a></li><li>The template format: <a href="https://docs.google.com/document/d/16OX2KDSHI9mSCriyGIATpRGscIW2JmByMd0ITqKYvNg/edit" target="_blank" rel="noopener">https://docs.google.com/document/d/16OX2KDSHI9mSCriyGIATpRGscIW2JmByMd0ITqKYvNg/edit</a></li><li>The final project results: <a href="https://docs.google.com/spreadsheets/d/1Mu5u9GrybDdska-ljPXyBjTpdZIUev_6i7t4LRDfXM8/edit#gid=0" target="_blank" rel="noopener">https://docs.google.com/spreadsheets/d/1Mu5u9GrybDdska-ljPXyBjTpdZIUev_6i7t4LRDfXM8/edit#gid=0</a></li><li>The online calculator “Sample size”: <a href="http://www.evanmiller.org/ab-testing/sample-size.html" target="_blank" rel="noopener">http://www.evanmiller.org/ab-testing/sample-size.html</a></li></ul><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;📘-Experiment-design&quot;&gt;&lt;a href=&quot;#📘-Experiment-design&quot; class=&quot;headerlink&quot; title=&quot;📘  Experiment design&quot;&gt;&lt;/a&gt;📘  Experiment design&lt;/h1
      
    
    </summary>
    
      <category term="A_B Test" scheme="http://naixinzhang.github.io/categories/A-B-Test/"/>
    
    
      <category term="A_B Test" scheme="http://naixinzhang.github.io/tags/A-B-Test/"/>
    
  </entry>
  
</feed>
